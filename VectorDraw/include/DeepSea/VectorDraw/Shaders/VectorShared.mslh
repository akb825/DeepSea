/*
 * Copyright 2018 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

/**
 * @file
 * @brief Shared code between the different vector image elements.
 */

/**
 * @brief Texture holding general information for the different vector elements.
 */
uniform sampler2D dsVectorInfoTex;
sampler_state dsVectorInfoTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
	mip_filter = none;
}

/**
 * @brief The model/view/projection transform in 3D space.
 */
uniform mat4 dsVectorModelViewProjection;

/**
 * @brief The size of the vector image in image space.
 */
uniform vec2 dsVectorImageSize;

/**
 * @brief The size of the element info and material textures.
 */
uniform vec2 dsVectorTextureSizes;

/**
 * @brief Gets the info for an element.
 * @param[out] info The element info.
 * @param index The index of the element.
 */
void dsVectorShared_getElementInfo(out vec4 info[4], float index)
{
	float elementCoord = float(index)/uniforms.dsVectorTextureSizes.x;
	info[0] = texture(dsVectorInfoTex, vec2(0.125f, elementCoord));
	info[1] = texture(dsVectorInfoTex, vec2(0.375f, elementCoord));
	info[2] = texture(dsVectorInfoTex, vec2(0.625f, elementCoord));
	info[3] = texture(dsVectorInfoTex, vec2(0.875f, elementCoord));
}

/**
 * @brief Gets the bounds for an element.
 * @param info The info from dsVectorShared_getElementInfo().
 * @return The bounds min and max combined in one vec4.
 */
vec4 dsVectorShared_getElementBounds(vec4 info[4])
{
	return info[0];
}

/**
 * @brief Gets the transform for an element.
 * @param info The info from dsVectorShared_getElementInfo().
 * @return The transform.
 */
mat3 dsVectorShared_getElementTransform(vec4 info[4])
{
	return mat3(vec3(info[1].xy, 0.0), vec3(info[1].zw, 0.0), vec3(info[2].xy, 1.0));
}

/**
 * @brief Transforms an element position to clip space.
 * @param[out] imagePosition The final position in image space.
 * @param position The element position.
 * @param transform The transform for the element.
 * @return The transformed position.
 */
vec4 dsVectorShared_transform(out vec2 imagePosition, vec2 position, mat3 transform)
{
	vec3 tempPos = transform*vec3(position, 1.0);
	imagePosition = tempPos.xy;

	tempPos.y = uniforms.dsVectorImageSize.y - tempPos.y;
	return uniforms.dsVectorModelViewProjection*vec4(tempPos.xy, 0.0, 1.0);
}

/**
 * @brief Clips the image to the edge of the image bounds.
 * @param imagePosition The position in image space.
 */
[[fragment]]
void dsVectorShared_clip(vec2 imagePosition)
{
	if (any(lessThan(imagePosition, vec2(0.0))) ||
		any(lessThan(uniforms.dsVectorImageSize, imagePosition)))
	{
		discard;
	}
}
