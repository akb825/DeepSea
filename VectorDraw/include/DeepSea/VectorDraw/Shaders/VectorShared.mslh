/*
 * Copyright 2018 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

/**
 * @file
 * @brief Shared code between the different vector image elements.
 */

/**
 * @brief Texture holding general information for the different vector elements.
 */
uniform sampler2D vectorInfoTex;
sampler_state dsVectorInfoTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
	mip_filter = none;
};

/**
 * @brief Uniform block with the transform information for the vector image overall.
 */
uniform dsVectorTransform
{
	/**
	 * @brief The transform in image space.
	 */
	mat3 transform;

	/**
	 * @brief The model/view/projection transform in 3D space.
	 */
	mat4 modelViewProjection;

	/**
	 * @brief The size of the vector image in image space.
	 */
	vec2 size;

	/**
	 * @brief The size of the material and element info textures.
	 */
	vec2 textureSizes;
} vectorTransform;

/**
 * @brief Gets the info for an element.
 * @param[out] info The element info.
 * @param index The index of the element.
 */
void dsVectorShared_getElementInfo(out vec4 info[4], uint index)
{
	float elementCoord = float(index)/INSTANCE(vectorTransform).textureSizes.y;
	info[0] = texture(dsVectorInfoTex, vec2(0.125f, elementCoord));
	info[1] = texture(dsVectorInfoTex, vec2(0.375f, elementCoord));
	info[2] = texture(dsVectorInfoTex, vec2(0.625f, elementCoord));
	info[3] = texture(dsVectorInfoTex, vec2(0.875f, elementCoord));
}

