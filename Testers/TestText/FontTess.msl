/*
 * Copyright 2017 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if HAS_TESSELLATION_STAGES

#include <DeepSea/Render/Shaders/VertexAttributes.mslh>
#include <DeepSea/Text/Text.mslh>

uniform sampler2D fontTex;
sampler_state fontTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = none;
};

uniform SharedInfo
{
	uvec2 screenSize;
} sharedInfo;

uniform vec2 position;

[[vertex]] layout(location = DS_POSITION0) in vec3 vertexPos;
[[vertex]] layout(location = DS_POSITION1) in vec4 geometry;
[[vertex]] layout(location = DS_COLOR0) in vec4 textColor;
[[vertex]] layout(location = DS_COLOR1) in vec4 outlineColor;
[[vertex]] layout(location = DS_TEXCOORD0) in vec4 texCoords;
[[vertex]] layout(location = DS_TEXCOORD1) in vec4 style;

struct VertexOut
{
	vec4 geometry;
	vec4 textColor;
	vec4 outlineColor;
	vec4 texCoords;
	float mipLevel;
	vec4 style;
};

struct TessControlOut
{
	vec4 geometry;
	vec4 textColor;
	vec4 outlineColor;
	vec4 texCoords;
	float mipLevel;
	vec4 style;
};

struct TessEvalOut
{
	vec4 textColor;
	vec4 outlineColor;
	vec3 texCoords;
	vec3 style;
};

[[vertex]] out VertexOut vertexOut;

[[tessellation_control]] layout(vertices = 4) out;
[[tessellation_control]] in VertexOut vertexOut[];
[[tessellation_control]] patch out TessControlOut tessControlOut;

[[tessellation_evaluation]] layout(quads) in;
[[tessellation_evaluation]] patch in TessControlOut tessControlOut;
[[tessellation_evaluation]] out TessEvalOut tessEvalOut;

[[fragment]] in TessEvalOut tessEvalOut;
[[fragment]] out vec4 color;

[[vertex]]
void vertexShader()
{
	gl_Position = vec4(vertexPos.xy, 0.0, 1.0);
	vertexOut.geometry = geometry;
	vertexOut.textColor = textColor;
	vertexOut.outlineColor = outlineColor;
	vertexOut.texCoords = texCoords;
	vertexOut.mipLevel = vertexPos.z;
	vertexOut.style = style;
}

[[tessellation_control]]
void tessellationControl()
{
	tessControlOut.geometry = vertexOut[0].geometry;
	tessControlOut.textColor = vertexOut[0].textColor;
	tessControlOut.outlineColor = vertexOut[0].outlineColor;
	tessControlOut.texCoords = vertexOut[0].texCoords;
	tessControlOut.mipLevel = vertexOut[0].mipLevel;
	tessControlOut.style = vertexOut[0].style;

	gl_TessLevelOuter[0] = 1.0;
	gl_TessLevelOuter[1] = 1.0;
	gl_TessLevelOuter[2] = 1.0;
	gl_TessLevelOuter[3] = 1.0;
	gl_TessLevelInner[0] = 1.0;
	gl_TessLevelInner[1] = 1.0;
}

[[tessellation_evaluation]]
void tessellationEvaluation()
{
	tessEvalOut.textColor = tessControlOut.textColor;
	tessEvalOut.outlineColor = tessControlOut.outlineColor;
	tessEvalOut.texCoords.xy = mix(tessControlOut.texCoords.xy, tessControlOut.texCoords.zw,
		gl_TessCoord.xy);
	tessEvalOut.texCoords.z = tessControlOut.mipLevel;
	tessEvalOut.style = tessControlOut.style.yzw;

	vec2 vertexPos = mix(tessControlOut.geometry.xy, tessControlOut.geometry.zw, gl_TessCoord.xy);
	vertexPos.x -= vertexPos.y*tessControlOut.style.x;
	vec2 normalizedPos = (uniforms.position + vertexPos)/vec2(INSTANCE(sharedInfo).screenSize);
	gl_Position = DS_ADJUST_CLIP(vec4(normalizedPos*vec2(2.0) - vec2(1.0), 0.0, 1.0));
	gl_Position.y = -gl_Position.y;
}

[[fragment]]
void fragmentShader()
{
	float distance = textureLod(fontTex, tessEvalOut.texCoords.xy, tessEvalOut.texCoords.z).r;
	color = computeTextColor(distance, tessEvalOut.style.x, tessEvalOut.style.y,
		tessEvalOut.style.z, tessEvalOut.textColor, tessEvalOut.outlineColor);
}

pipeline FontTess
{
	vertex = vertexShader;
	tessellation_control = tessellationControl;
	tessellation_evaluation = tessellationEvaluation;
	fragment = fragmentShader;

	patch_control_points = 1;
	blend_enable = true;
	src_color_blend_factor = src_alpha;
	src_alpha_blend_factor = one;
	dst_blend_factor = one_minus_src_alpha;
	alpha_blend_op = add;
}

#endif
