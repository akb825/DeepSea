#pragma once
#ifndef __AnyGL_gl_h_
#define __AnyGL_gl_h_ 1

#include "AnyGLConfig.h"

/* Generated by AnyGL. */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmacro-redefined"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable: 4005)
#endif

#define ANYGL_SUPPORTED(func) (AnyGL_ ## func != 0)

ANYGL_EXPORT void AnyGL_setLastCallsite(const char* file, const char* function, unsigned int line);
#if ANYGL_ALLOW_DEBUG
#define ANYGL_CALL(func) (AnyGL_setLastCallsite(__FILE__, __FUNCTION__,__LINE__), (func))
#else
#define ANYGL_CALL(func) (func)
#endif

/* handle include for standard gl.h */
#ifndef GL_ES_VERSION_2_0
#define GL_ES_VERSION_2_0 1
#define ANYGL_ES_VERSION_2_0 1
#endif

#ifndef GL_ES_VERSION_3_0
#define GL_ES_VERSION_3_0 1
#define ANYGL_ES_VERSION_3_0 1
#endif

#ifndef GL_ES_VERSION_3_1
#define GL_ES_VERSION_3_1 1
#define ANYGL_ES_VERSION_3_1 1
#endif

#ifndef GL_ES_VERSION_3_2
#define GL_ES_VERSION_3_2 1
#define ANYGL_ES_VERSION_3_2 1
#endif

#ifndef GL_VERSION_1_0
#define GL_VERSION_1_0 1
#define ANYGL_VERSION_1_0 1
#endif

#ifndef GL_VERSION_1_1
#define GL_VERSION_1_1 1
#define ANYGL_VERSION_1_1 1
#endif

#ifndef GL_VERSION_1_2
#define GL_VERSION_1_2 1
#define ANYGL_VERSION_1_2 1
#endif

#ifndef GL_VERSION_1_3
#define GL_VERSION_1_3 1
#define ANYGL_VERSION_1_3 1
#endif

#ifndef GL_VERSION_1_4
#define GL_VERSION_1_4 1
#define ANYGL_VERSION_1_4 1
#endif

#ifndef GL_VERSION_1_5
#define GL_VERSION_1_5 1
#define ANYGL_VERSION_1_5 1
#endif

#ifndef GL_VERSION_2_0
#define GL_VERSION_2_0 1
#define ANYGL_VERSION_2_0 1
#endif

#ifndef GL_VERSION_2_1
#define GL_VERSION_2_1 1
#define ANYGL_VERSION_2_1 1
#endif

#ifndef GL_VERSION_3_0
#define GL_VERSION_3_0 1
#define ANYGL_VERSION_3_0 1
#endif

#ifndef GL_VERSION_3_1
#define GL_VERSION_3_1 1
#define ANYGL_VERSION_3_1 1
#endif

#ifndef GL_VERSION_3_2
#define GL_VERSION_3_2 1
#define ANYGL_VERSION_3_2 1
#endif

#ifndef GL_VERSION_3_3
#define GL_VERSION_3_3 1
#define ANYGL_VERSION_3_3 1
#endif

#ifndef GL_VERSION_4_0
#define GL_VERSION_4_0 1
#define ANYGL_VERSION_4_0 1
#endif

#ifndef GL_VERSION_4_1
#define GL_VERSION_4_1 1
#define ANYGL_VERSION_4_1 1
#endif

#ifndef GL_VERSION_4_2
#define GL_VERSION_4_2 1
#define ANYGL_VERSION_4_2 1
#endif

#ifndef GL_VERSION_4_3
#define GL_VERSION_4_3 1
#define ANYGL_VERSION_4_3 1
#endif

#ifndef GL_VERSION_4_4
#define GL_VERSION_4_4 1
#define ANYGL_VERSION_4_4 1
#endif

#ifndef GL_VERSION_4_5
#define GL_VERSION_4_5 1
#define ANYGL_VERSION_4_5 1
#endif

#ifndef GL_VERSION_4_6
#define GL_VERSION_4_6 1
#define ANYGL_VERSION_4_6 1
#endif

#ifndef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 1
#define ANYGL_ARB_ES2_compatibility 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_ES2_compatibility;

#ifndef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 1
#define ANYGL_ARB_ES3_1_compatibility 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_ES3_1_compatibility;

#ifndef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 1
#define ANYGL_ARB_ES3_2_compatibility 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_ES3_2_compatibility;

#ifndef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 1
#define ANYGL_ARB_ES3_compatibility 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_ES3_compatibility;

#ifndef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 1
#define ANYGL_ARB_arrays_of_arrays 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_arrays_of_arrays;

#ifndef GL_ARB_base_instance
#define GL_ARB_base_instance 1
#define ANYGL_ARB_base_instance 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_base_instance;

#ifndef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 1
#define ANYGL_ARB_bindless_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_bindless_texture;

#ifndef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 1
#define ANYGL_ARB_blend_func_extended 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_blend_func_extended;

#ifndef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 1
#define ANYGL_ARB_buffer_storage 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_buffer_storage;

#ifndef GL_ARB_cl_event
#define GL_ARB_cl_event 1
#define ANYGL_ARB_cl_event 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_cl_event;

#ifndef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 1
#define ANYGL_ARB_clear_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_clear_buffer_object;

#ifndef GL_ARB_clear_texture
#define GL_ARB_clear_texture 1
#define ANYGL_ARB_clear_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_clear_texture;

#ifndef GL_ARB_clip_control
#define GL_ARB_clip_control 1
#define ANYGL_ARB_clip_control 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_clip_control;

#ifndef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 1
#define ANYGL_ARB_color_buffer_float 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_color_buffer_float;

#ifndef GL_ARB_compatibility
#define GL_ARB_compatibility 1
#define ANYGL_ARB_compatibility 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_compatibility;

#ifndef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 1
#define ANYGL_ARB_compressed_texture_pixel_storage 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_compressed_texture_pixel_storage;

#ifndef GL_ARB_compute_shader
#define GL_ARB_compute_shader 1
#define ANYGL_ARB_compute_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_compute_shader;

#ifndef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 1
#define ANYGL_ARB_compute_variable_group_size 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_compute_variable_group_size;

#ifndef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 1
#define ANYGL_ARB_conditional_render_inverted 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_conditional_render_inverted;

#ifndef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 1
#define ANYGL_ARB_conservative_depth 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_conservative_depth;

#ifndef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 1
#define ANYGL_ARB_copy_buffer 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_copy_buffer;

#ifndef GL_ARB_copy_image
#define GL_ARB_copy_image 1
#define ANYGL_ARB_copy_image 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_copy_image;

#ifndef GL_ARB_cull_distance
#define GL_ARB_cull_distance 1
#define ANYGL_ARB_cull_distance 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_cull_distance;

#ifndef GL_ARB_debug_output
#define GL_ARB_debug_output 1
#define ANYGL_ARB_debug_output 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_debug_output;

#ifndef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 1
#define ANYGL_ARB_depth_buffer_float 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_depth_buffer_float;

#ifndef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 1
#define ANYGL_ARB_depth_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_depth_clamp;

#ifndef GL_ARB_depth_texture
#define GL_ARB_depth_texture 1
#define ANYGL_ARB_depth_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_depth_texture;

#ifndef GL_ARB_derivative_control
#define GL_ARB_derivative_control 1
#define ANYGL_ARB_derivative_control 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_derivative_control;

#ifndef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 1
#define ANYGL_ARB_direct_state_access 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_direct_state_access;

#ifndef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 1
#define ANYGL_ARB_draw_buffers 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_draw_buffers;

#ifndef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 1
#define ANYGL_ARB_draw_buffers_blend 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_draw_buffers_blend;

#ifndef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 1
#define ANYGL_ARB_draw_elements_base_vertex 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_draw_elements_base_vertex;

#ifndef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 1
#define ANYGL_ARB_draw_indirect 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_draw_indirect;

#ifndef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 1
#define ANYGL_ARB_draw_instanced 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_draw_instanced;

#ifndef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 1
#define ANYGL_ARB_enhanced_layouts 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_enhanced_layouts;

#ifndef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 1
#define ANYGL_ARB_explicit_attrib_location 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_explicit_attrib_location;

#ifndef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 1
#define ANYGL_ARB_explicit_uniform_location 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_explicit_uniform_location;

#ifndef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 1
#define ANYGL_ARB_fragment_coord_conventions 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_fragment_coord_conventions;

#ifndef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 1
#define ANYGL_ARB_fragment_layer_viewport 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_fragment_layer_viewport;

#ifndef GL_ARB_fragment_program
#define GL_ARB_fragment_program 1
#define ANYGL_ARB_fragment_program 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_fragment_program;

#ifndef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 1
#define ANYGL_ARB_fragment_program_shadow 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_fragment_program_shadow;

#ifndef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 1
#define ANYGL_ARB_fragment_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_fragment_shader;

#ifndef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 1
#define ANYGL_ARB_fragment_shader_interlock 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_fragment_shader_interlock;

#ifndef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 1
#define ANYGL_ARB_framebuffer_no_attachments 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_framebuffer_no_attachments;

#ifndef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 1
#define ANYGL_ARB_framebuffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_framebuffer_object;

#ifndef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 1
#define ANYGL_ARB_framebuffer_sRGB 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_framebuffer_sRGB;

#ifndef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 1
#define ANYGL_ARB_geometry_shader4 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_geometry_shader4;

#ifndef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 1
#define ANYGL_ARB_get_program_binary 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_get_program_binary;

#ifndef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 1
#define ANYGL_ARB_get_texture_sub_image 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_get_texture_sub_image;

#ifndef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 1
#define ANYGL_ARB_gl_spirv 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_gl_spirv;

#ifndef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 1
#define ANYGL_ARB_gpu_shader5 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_gpu_shader5;

#ifndef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 1
#define ANYGL_ARB_gpu_shader_fp64 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_gpu_shader_fp64;

#ifndef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 1
#define ANYGL_ARB_gpu_shader_int64 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_gpu_shader_int64;

#ifndef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 1
#define ANYGL_ARB_half_float_pixel 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_half_float_pixel;

#ifndef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 1
#define ANYGL_ARB_half_float_vertex 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_half_float_vertex;

#ifndef GL_ARB_imaging
#define GL_ARB_imaging 1
#define ANYGL_ARB_imaging 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_imaging;

#ifndef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 1
#define ANYGL_ARB_indirect_parameters 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_indirect_parameters;

#ifndef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 1
#define ANYGL_ARB_instanced_arrays 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_instanced_arrays;

#ifndef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 1
#define ANYGL_ARB_internalformat_query 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_internalformat_query;

#ifndef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 1
#define ANYGL_ARB_internalformat_query2 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_internalformat_query2;

#ifndef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 1
#define ANYGL_ARB_invalidate_subdata 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_invalidate_subdata;

#ifndef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 1
#define ANYGL_ARB_map_buffer_alignment 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_map_buffer_alignment;

#ifndef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 1
#define ANYGL_ARB_map_buffer_range 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_map_buffer_range;

#ifndef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 1
#define ANYGL_ARB_matrix_palette 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_matrix_palette;

#ifndef GL_ARB_multi_bind
#define GL_ARB_multi_bind 1
#define ANYGL_ARB_multi_bind 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_multi_bind;

#ifndef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 1
#define ANYGL_ARB_multi_draw_indirect 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_multi_draw_indirect;

#ifndef GL_ARB_multisample
#define GL_ARB_multisample 1
#define ANYGL_ARB_multisample 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_multisample;

#ifndef GL_ARB_multitexture
#define GL_ARB_multitexture 1
#define ANYGL_ARB_multitexture 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_multitexture;

#ifndef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 1
#define ANYGL_ARB_occlusion_query 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_occlusion_query;

#ifndef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 1
#define ANYGL_ARB_occlusion_query2 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_occlusion_query2;

#ifndef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 1
#define ANYGL_ARB_parallel_shader_compile 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_parallel_shader_compile;

#ifndef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 1
#define ANYGL_ARB_pipeline_statistics_query 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_pipeline_statistics_query;

#ifndef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 1
#define ANYGL_ARB_pixel_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_pixel_buffer_object;

#ifndef GL_ARB_point_parameters
#define GL_ARB_point_parameters 1
#define ANYGL_ARB_point_parameters 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_point_parameters;

#ifndef GL_ARB_point_sprite
#define GL_ARB_point_sprite 1
#define ANYGL_ARB_point_sprite 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_point_sprite;

#ifndef GL_ARB_polygon_offset_clamp
#define GL_ARB_polygon_offset_clamp 1
#define ANYGL_ARB_polygon_offset_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_polygon_offset_clamp;

#ifndef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 1
#define ANYGL_ARB_post_depth_coverage 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_post_depth_coverage;

#ifndef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 1
#define ANYGL_ARB_program_interface_query 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_program_interface_query;

#ifndef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 1
#define ANYGL_ARB_provoking_vertex 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_provoking_vertex;

#ifndef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 1
#define ANYGL_ARB_query_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_query_buffer_object;

#ifndef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 1
#define ANYGL_ARB_robust_buffer_access_behavior 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_robust_buffer_access_behavior;

#ifndef GL_ARB_robustness
#define GL_ARB_robustness 1
#define ANYGL_ARB_robustness 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_robustness;

#ifndef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 1
#define ANYGL_ARB_robustness_isolation 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_robustness_isolation;

#ifndef GL_ARB_sample_locations
#define GL_ARB_sample_locations 1
#define ANYGL_ARB_sample_locations 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sample_locations;

#ifndef GL_ARB_sample_shading
#define GL_ARB_sample_shading 1
#define ANYGL_ARB_sample_shading 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sample_shading;

#ifndef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 1
#define ANYGL_ARB_sampler_objects 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sampler_objects;

#ifndef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 1
#define ANYGL_ARB_seamless_cube_map 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_seamless_cube_map;

#ifndef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 1
#define ANYGL_ARB_seamless_cubemap_per_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_seamless_cubemap_per_texture;

#ifndef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 1
#define ANYGL_ARB_separate_shader_objects 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_separate_shader_objects;

#ifndef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 1
#define ANYGL_ARB_shader_atomic_counter_ops 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_atomic_counter_ops;

#ifndef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 1
#define ANYGL_ARB_shader_atomic_counters 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_atomic_counters;

#ifndef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 1
#define ANYGL_ARB_shader_ballot 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_ballot;

#ifndef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 1
#define ANYGL_ARB_shader_bit_encoding 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_bit_encoding;

#ifndef GL_ARB_shader_clock
#define GL_ARB_shader_clock 1
#define ANYGL_ARB_shader_clock 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_clock;

#ifndef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 1
#define ANYGL_ARB_shader_draw_parameters 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_draw_parameters;

#ifndef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 1
#define ANYGL_ARB_shader_group_vote 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_group_vote;

#ifndef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 1
#define ANYGL_ARB_shader_image_load_store 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_image_load_store;

#ifndef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 1
#define ANYGL_ARB_shader_image_size 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_image_size;

#ifndef GL_ARB_shader_objects
#define GL_ARB_shader_objects 1
#define ANYGL_ARB_shader_objects 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_objects;

#ifndef GL_ARB_shader_precision
#define GL_ARB_shader_precision 1
#define ANYGL_ARB_shader_precision 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_precision;

#ifndef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 1
#define ANYGL_ARB_shader_stencil_export 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_stencil_export;

#ifndef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 1
#define ANYGL_ARB_shader_storage_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_storage_buffer_object;

#ifndef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 1
#define ANYGL_ARB_shader_subroutine 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_subroutine;

#ifndef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 1
#define ANYGL_ARB_shader_texture_image_samples 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_texture_image_samples;

#ifndef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 1
#define ANYGL_ARB_shader_texture_lod 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_texture_lod;

#ifndef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 1
#define ANYGL_ARB_shader_viewport_layer_array 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shader_viewport_layer_array;

#ifndef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 1
#define ANYGL_ARB_shading_language_100 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shading_language_100;

#ifndef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 1
#define ANYGL_ARB_shading_language_420pack 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shading_language_420pack;

#ifndef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 1
#define ANYGL_ARB_shading_language_include 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shading_language_include;

#ifndef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 1
#define ANYGL_ARB_shading_language_packing 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shading_language_packing;

#ifndef GL_ARB_shadow
#define GL_ARB_shadow 1
#define ANYGL_ARB_shadow 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shadow;

#ifndef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 1
#define ANYGL_ARB_shadow_ambient 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_shadow_ambient;

#ifndef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 1
#define ANYGL_ARB_sparse_buffer 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sparse_buffer;

#ifndef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 1
#define ANYGL_ARB_sparse_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sparse_texture;

#ifndef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 1
#define ANYGL_ARB_sparse_texture2 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sparse_texture2;

#ifndef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 1
#define ANYGL_ARB_sparse_texture_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sparse_texture_clamp;

#ifndef GL_ARB_spirv_extensions
#define GL_ARB_spirv_extensions 1
#define ANYGL_ARB_spirv_extensions 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_spirv_extensions;

#ifndef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 1
#define ANYGL_ARB_stencil_texturing 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_stencil_texturing;

#ifndef GL_ARB_sync
#define GL_ARB_sync 1
#define ANYGL_ARB_sync 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_sync;

#ifndef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 1
#define ANYGL_ARB_tessellation_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_tessellation_shader;

#ifndef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 1
#define ANYGL_ARB_texture_barrier 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_barrier;

#ifndef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 1
#define ANYGL_ARB_texture_border_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_border_clamp;

#ifndef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 1
#define ANYGL_ARB_texture_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_buffer_object;

#ifndef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 1
#define ANYGL_ARB_texture_buffer_object_rgb32 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_buffer_object_rgb32;

#ifndef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 1
#define ANYGL_ARB_texture_buffer_range 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_buffer_range;

#ifndef GL_ARB_texture_compression
#define GL_ARB_texture_compression 1
#define ANYGL_ARB_texture_compression 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_compression;

#ifndef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 1
#define ANYGL_ARB_texture_compression_bptc 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_compression_bptc;

#ifndef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 1
#define ANYGL_ARB_texture_compression_rgtc 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_compression_rgtc;

#ifndef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 1
#define ANYGL_ARB_texture_cube_map 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_cube_map;

#ifndef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 1
#define ANYGL_ARB_texture_cube_map_array 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_cube_map_array;

#ifndef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 1
#define ANYGL_ARB_texture_env_add 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_env_add;

#ifndef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 1
#define ANYGL_ARB_texture_env_combine 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_env_combine;

#ifndef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 1
#define ANYGL_ARB_texture_env_crossbar 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_env_crossbar;

#ifndef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 1
#define ANYGL_ARB_texture_env_dot3 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_env_dot3;

#ifndef GL_ARB_texture_filter_anisotropic
#define GL_ARB_texture_filter_anisotropic 1
#define ANYGL_ARB_texture_filter_anisotropic 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_filter_anisotropic;

#ifndef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 1
#define ANYGL_ARB_texture_filter_minmax 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_filter_minmax;

#ifndef GL_ARB_texture_float
#define GL_ARB_texture_float 1
#define ANYGL_ARB_texture_float 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_float;

#ifndef GL_ARB_texture_gather
#define GL_ARB_texture_gather 1
#define ANYGL_ARB_texture_gather 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_gather;

#ifndef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 1
#define ANYGL_ARB_texture_mirror_clamp_to_edge 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_mirror_clamp_to_edge;

#ifndef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 1
#define ANYGL_ARB_texture_mirrored_repeat 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_mirrored_repeat;

#ifndef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 1
#define ANYGL_ARB_texture_multisample 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_multisample;

#ifndef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 1
#define ANYGL_ARB_texture_non_power_of_two 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_non_power_of_two;

#ifndef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 1
#define ANYGL_ARB_texture_query_levels 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_query_levels;

#ifndef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 1
#define ANYGL_ARB_texture_query_lod 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_query_lod;

#ifndef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 1
#define ANYGL_ARB_texture_rectangle 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_rectangle;

#ifndef GL_ARB_texture_rg
#define GL_ARB_texture_rg 1
#define ANYGL_ARB_texture_rg 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_rg;

#ifndef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 1
#define ANYGL_ARB_texture_rgb10_a2ui 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_rgb10_a2ui;

#ifndef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 1
#define ANYGL_ARB_texture_stencil8 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_stencil8;

#ifndef GL_ARB_texture_storage
#define GL_ARB_texture_storage 1
#define ANYGL_ARB_texture_storage 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_storage;

#ifndef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 1
#define ANYGL_ARB_texture_storage_multisample 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_storage_multisample;

#ifndef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 1
#define ANYGL_ARB_texture_swizzle 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_swizzle;

#ifndef GL_ARB_texture_view
#define GL_ARB_texture_view 1
#define ANYGL_ARB_texture_view 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_texture_view;

#ifndef GL_ARB_timer_query
#define GL_ARB_timer_query 1
#define ANYGL_ARB_timer_query 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_timer_query;

#ifndef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 1
#define ANYGL_ARB_transform_feedback2 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_transform_feedback2;

#ifndef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 1
#define ANYGL_ARB_transform_feedback3 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_transform_feedback3;

#ifndef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 1
#define ANYGL_ARB_transform_feedback_instanced 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_transform_feedback_instanced;

#ifndef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 1
#define ANYGL_ARB_transform_feedback_overflow_query 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_transform_feedback_overflow_query;

#ifndef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 1
#define ANYGL_ARB_transpose_matrix 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_transpose_matrix;

#ifndef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 1
#define ANYGL_ARB_uniform_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_uniform_buffer_object;

#ifndef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 1
#define ANYGL_ARB_vertex_array_bgra 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_array_bgra;

#ifndef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 1
#define ANYGL_ARB_vertex_array_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_array_object;

#ifndef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 1
#define ANYGL_ARB_vertex_attrib_64bit 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_attrib_64bit;

#ifndef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 1
#define ANYGL_ARB_vertex_attrib_binding 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_attrib_binding;

#ifndef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 1
#define ANYGL_ARB_vertex_blend 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_blend;

#ifndef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 1
#define ANYGL_ARB_vertex_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_buffer_object;

#ifndef GL_ARB_vertex_program
#define GL_ARB_vertex_program 1
#define ANYGL_ARB_vertex_program 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_program;

#ifndef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 1
#define ANYGL_ARB_vertex_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_shader;

#ifndef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 1
#define ANYGL_ARB_vertex_type_10f_11f_11f_rev 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_type_10f_11f_11f_rev;

#ifndef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 1
#define ANYGL_ARB_vertex_type_2_10_10_10_rev 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_vertex_type_2_10_10_10_rev;

#ifndef GL_ARB_viewport_array
#define GL_ARB_viewport_array 1
#define ANYGL_ARB_viewport_array 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_viewport_array;

#ifndef GL_ARB_window_pos
#define GL_ARB_window_pos 1
#define ANYGL_ARB_window_pos 1
#endif
ANYGL_EXPORT extern int AnyGL_ARB_window_pos;

#ifndef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 1
#define ANYGL_KHR_blend_equation_advanced 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_blend_equation_advanced;

#ifndef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 1
#define ANYGL_KHR_blend_equation_advanced_coherent 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_blend_equation_advanced_coherent;

#ifndef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 1
#define ANYGL_KHR_context_flush_control 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_context_flush_control;

#ifndef GL_KHR_debug
#define GL_KHR_debug 1
#define ANYGL_KHR_debug 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_debug;

#ifndef GL_KHR_no_error
#define GL_KHR_no_error 1
#define ANYGL_KHR_no_error 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_no_error;

#ifndef GL_KHR_parallel_shader_compile
#define GL_KHR_parallel_shader_compile 1
#define ANYGL_KHR_parallel_shader_compile 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_parallel_shader_compile;

#ifndef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 1
#define ANYGL_KHR_robust_buffer_access_behavior 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_robust_buffer_access_behavior;

#ifndef GL_KHR_robustness
#define GL_KHR_robustness 1
#define ANYGL_KHR_robustness 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_robustness;

#ifndef GL_KHR_shader_subgroup
#define GL_KHR_shader_subgroup 1
#define ANYGL_KHR_shader_subgroup 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_shader_subgroup;

#ifndef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 1
#define ANYGL_KHR_texture_compression_astc_hdr 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_texture_compression_astc_hdr;

#ifndef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 1
#define ANYGL_KHR_texture_compression_astc_ldr 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_texture_compression_astc_ldr;

#ifndef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 1
#define ANYGL_KHR_texture_compression_astc_sliced_3d 1
#endif
ANYGL_EXPORT extern int AnyGL_KHR_texture_compression_astc_sliced_3d;

#ifndef GL_OES_EGL_image
#define GL_OES_EGL_image 1
#define ANYGL_OES_EGL_image 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_EGL_image;

#ifndef GL_OES_EGL_image_external
#define GL_OES_EGL_image_external 1
#define ANYGL_OES_EGL_image_external 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_EGL_image_external;

#ifndef GL_OES_EGL_image_external_essl3
#define GL_OES_EGL_image_external_essl3 1
#define ANYGL_OES_EGL_image_external_essl3 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_EGL_image_external_essl3;

#ifndef GL_OES_blend_equation_separate
#define GL_OES_blend_equation_separate 1
#define ANYGL_OES_blend_equation_separate 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_blend_equation_separate;

#ifndef GL_OES_blend_func_separate
#define GL_OES_blend_func_separate 1
#define ANYGL_OES_blend_func_separate 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_blend_func_separate;

#ifndef GL_OES_blend_subtract
#define GL_OES_blend_subtract 1
#define ANYGL_OES_blend_subtract 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_blend_subtract;

#ifndef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 1
#define ANYGL_OES_byte_coordinates 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_byte_coordinates;

#ifndef GL_OES_compressed_ETC1_RGB8_sub_texture
#define GL_OES_compressed_ETC1_RGB8_sub_texture 1
#define ANYGL_OES_compressed_ETC1_RGB8_sub_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_compressed_ETC1_RGB8_sub_texture;

#ifndef GL_OES_compressed_ETC1_RGB8_texture
#define GL_OES_compressed_ETC1_RGB8_texture 1
#define ANYGL_OES_compressed_ETC1_RGB8_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_compressed_ETC1_RGB8_texture;

#ifndef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 1
#define ANYGL_OES_compressed_paletted_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_compressed_paletted_texture;

#ifndef GL_OES_copy_image
#define GL_OES_copy_image 1
#define ANYGL_OES_copy_image 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_copy_image;

#ifndef GL_OES_depth24
#define GL_OES_depth24 1
#define ANYGL_OES_depth24 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_depth24;

#ifndef GL_OES_depth32
#define GL_OES_depth32 1
#define ANYGL_OES_depth32 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_depth32;

#ifndef GL_OES_depth_texture
#define GL_OES_depth_texture 1
#define ANYGL_OES_depth_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_depth_texture;

#ifndef GL_OES_draw_buffers_indexed
#define GL_OES_draw_buffers_indexed 1
#define ANYGL_OES_draw_buffers_indexed 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_draw_buffers_indexed;

#ifndef GL_OES_draw_elements_base_vertex
#define GL_OES_draw_elements_base_vertex 1
#define ANYGL_OES_draw_elements_base_vertex 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_draw_elements_base_vertex;

#ifndef GL_OES_draw_texture
#define GL_OES_draw_texture 1
#define ANYGL_OES_draw_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_draw_texture;

#ifndef GL_OES_element_index_uint
#define GL_OES_element_index_uint 1
#define ANYGL_OES_element_index_uint 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_element_index_uint;

#ifndef GL_OES_extended_matrix_palette
#define GL_OES_extended_matrix_palette 1
#define ANYGL_OES_extended_matrix_palette 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_extended_matrix_palette;

#ifndef GL_OES_fbo_render_mipmap
#define GL_OES_fbo_render_mipmap 1
#define ANYGL_OES_fbo_render_mipmap 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_fbo_render_mipmap;

#ifndef GL_OES_fixed_point
#define GL_OES_fixed_point 1
#define ANYGL_OES_fixed_point 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_fixed_point;

#ifndef GL_OES_fragment_precision_high
#define GL_OES_fragment_precision_high 1
#define ANYGL_OES_fragment_precision_high 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_fragment_precision_high;

#ifndef GL_OES_framebuffer_object
#define GL_OES_framebuffer_object 1
#define ANYGL_OES_framebuffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_framebuffer_object;

#ifndef GL_OES_geometry_point_size
#define GL_OES_geometry_point_size 1
#define ANYGL_OES_geometry_point_size 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_geometry_point_size;

#ifndef GL_OES_geometry_shader
#define GL_OES_geometry_shader 1
#define ANYGL_OES_geometry_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_geometry_shader;

#ifndef GL_OES_get_program_binary
#define GL_OES_get_program_binary 1
#define ANYGL_OES_get_program_binary 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_get_program_binary;

#ifndef GL_OES_gpu_shader5
#define GL_OES_gpu_shader5 1
#define ANYGL_OES_gpu_shader5 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_gpu_shader5;

#ifndef GL_OES_mapbuffer
#define GL_OES_mapbuffer 1
#define ANYGL_OES_mapbuffer 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_mapbuffer;

#ifndef GL_OES_matrix_get
#define GL_OES_matrix_get 1
#define ANYGL_OES_matrix_get 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_matrix_get;

#ifndef GL_OES_matrix_palette
#define GL_OES_matrix_palette 1
#define ANYGL_OES_matrix_palette 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_matrix_palette;

#ifndef GL_OES_packed_depth_stencil
#define GL_OES_packed_depth_stencil 1
#define ANYGL_OES_packed_depth_stencil 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_packed_depth_stencil;

#ifndef GL_OES_point_size_array
#define GL_OES_point_size_array 1
#define ANYGL_OES_point_size_array 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_point_size_array;

#ifndef GL_OES_point_sprite
#define GL_OES_point_sprite 1
#define ANYGL_OES_point_sprite 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_point_sprite;

#ifndef GL_OES_primitive_bounding_box
#define GL_OES_primitive_bounding_box 1
#define ANYGL_OES_primitive_bounding_box 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_primitive_bounding_box;

#ifndef GL_OES_query_matrix
#define GL_OES_query_matrix 1
#define ANYGL_OES_query_matrix 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_query_matrix;

#ifndef GL_OES_read_format
#define GL_OES_read_format 1
#define ANYGL_OES_read_format 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_read_format;

#ifndef GL_OES_required_internalformat
#define GL_OES_required_internalformat 1
#define ANYGL_OES_required_internalformat 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_required_internalformat;

#ifndef GL_OES_rgb8_rgba8
#define GL_OES_rgb8_rgba8 1
#define ANYGL_OES_rgb8_rgba8 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_rgb8_rgba8;

#ifndef GL_OES_sample_shading
#define GL_OES_sample_shading 1
#define ANYGL_OES_sample_shading 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_sample_shading;

#ifndef GL_OES_sample_variables
#define GL_OES_sample_variables 1
#define ANYGL_OES_sample_variables 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_sample_variables;

#ifndef GL_OES_shader_image_atomic
#define GL_OES_shader_image_atomic 1
#define ANYGL_OES_shader_image_atomic 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_shader_image_atomic;

#ifndef GL_OES_shader_io_blocks
#define GL_OES_shader_io_blocks 1
#define ANYGL_OES_shader_io_blocks 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_shader_io_blocks;

#ifndef GL_OES_shader_multisample_interpolation
#define GL_OES_shader_multisample_interpolation 1
#define ANYGL_OES_shader_multisample_interpolation 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_shader_multisample_interpolation;

#ifndef GL_OES_single_precision
#define GL_OES_single_precision 1
#define ANYGL_OES_single_precision 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_single_precision;

#ifndef GL_OES_standard_derivatives
#define GL_OES_standard_derivatives 1
#define ANYGL_OES_standard_derivatives 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_standard_derivatives;

#ifndef GL_OES_stencil1
#define GL_OES_stencil1 1
#define ANYGL_OES_stencil1 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_stencil1;

#ifndef GL_OES_stencil4
#define GL_OES_stencil4 1
#define ANYGL_OES_stencil4 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_stencil4;

#ifndef GL_OES_stencil8
#define GL_OES_stencil8 1
#define ANYGL_OES_stencil8 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_stencil8;

#ifndef GL_OES_stencil_wrap
#define GL_OES_stencil_wrap 1
#define ANYGL_OES_stencil_wrap 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_stencil_wrap;

#ifndef GL_OES_surfaceless_context
#define GL_OES_surfaceless_context 1
#define ANYGL_OES_surfaceless_context 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_surfaceless_context;

#ifndef GL_OES_tessellation_point_size
#define GL_OES_tessellation_point_size 1
#define ANYGL_OES_tessellation_point_size 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_tessellation_point_size;

#ifndef GL_OES_tessellation_shader
#define GL_OES_tessellation_shader 1
#define ANYGL_OES_tessellation_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_tessellation_shader;

#ifndef GL_OES_texture_3D
#define GL_OES_texture_3D 1
#define ANYGL_OES_texture_3D 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_3D;

#ifndef GL_OES_texture_border_clamp
#define GL_OES_texture_border_clamp 1
#define ANYGL_OES_texture_border_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_border_clamp;

#ifndef GL_OES_texture_buffer
#define GL_OES_texture_buffer 1
#define ANYGL_OES_texture_buffer 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_buffer;

#ifndef GL_OES_texture_compression_astc
#define GL_OES_texture_compression_astc 1
#define ANYGL_OES_texture_compression_astc 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_compression_astc;

#ifndef GL_OES_texture_cube_map
#define GL_OES_texture_cube_map 1
#define ANYGL_OES_texture_cube_map 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_cube_map;

#ifndef GL_OES_texture_cube_map_array
#define GL_OES_texture_cube_map_array 1
#define ANYGL_OES_texture_cube_map_array 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_cube_map_array;

#ifndef GL_OES_texture_env_crossbar
#define GL_OES_texture_env_crossbar 1
#define ANYGL_OES_texture_env_crossbar 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_env_crossbar;

#ifndef GL_OES_texture_float
#define GL_OES_texture_float 1
#define ANYGL_OES_texture_float 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_float;

#ifndef GL_OES_texture_float_linear
#define GL_OES_texture_float_linear 1
#define ANYGL_OES_texture_float_linear 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_float_linear;

#ifndef GL_OES_texture_half_float
#define GL_OES_texture_half_float 1
#define ANYGL_OES_texture_half_float 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_half_float;

#ifndef GL_OES_texture_half_float_linear
#define GL_OES_texture_half_float_linear 1
#define ANYGL_OES_texture_half_float_linear 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_half_float_linear;

#ifndef GL_OES_texture_mirrored_repeat
#define GL_OES_texture_mirrored_repeat 1
#define ANYGL_OES_texture_mirrored_repeat 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_mirrored_repeat;

#ifndef GL_OES_texture_npot
#define GL_OES_texture_npot 1
#define ANYGL_OES_texture_npot 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_npot;

#ifndef GL_OES_texture_stencil8
#define GL_OES_texture_stencil8 1
#define ANYGL_OES_texture_stencil8 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_stencil8;

#ifndef GL_OES_texture_storage_multisample_2d_array
#define GL_OES_texture_storage_multisample_2d_array 1
#define ANYGL_OES_texture_storage_multisample_2d_array 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_storage_multisample_2d_array;

#ifndef GL_OES_texture_view
#define GL_OES_texture_view 1
#define ANYGL_OES_texture_view 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_texture_view;

#ifndef GL_OES_vertex_array_object
#define GL_OES_vertex_array_object 1
#define ANYGL_OES_vertex_array_object 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_vertex_array_object;

#ifndef GL_OES_vertex_half_float
#define GL_OES_vertex_half_float 1
#define ANYGL_OES_vertex_half_float 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_vertex_half_float;

#ifndef GL_OES_vertex_type_10_10_10_2
#define GL_OES_vertex_type_10_10_10_2 1
#define ANYGL_OES_vertex_type_10_10_10_2 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_vertex_type_10_10_10_2;

#ifndef GL_OES_viewport_array
#define GL_OES_viewport_array 1
#define ANYGL_OES_viewport_array 1
#endif
ANYGL_EXPORT extern int AnyGL_OES_viewport_array;

#ifndef GL_EXT_422_pixels
#define GL_EXT_422_pixels 1
#define ANYGL_EXT_422_pixels 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_422_pixels;

#ifndef GL_EXT_EGL_image_array
#define GL_EXT_EGL_image_array 1
#define ANYGL_EXT_EGL_image_array 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_EGL_image_array;

#ifndef GL_EXT_EGL_image_storage
#define GL_EXT_EGL_image_storage 1
#define ANYGL_EXT_EGL_image_storage 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_EGL_image_storage;

#ifndef GL_EXT_EGL_sync
#define GL_EXT_EGL_sync 1
#define ANYGL_EXT_EGL_sync 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_EGL_sync;

#ifndef GL_EXT_YUV_target
#define GL_EXT_YUV_target 1
#define ANYGL_EXT_YUV_target 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_YUV_target;

#ifndef GL_EXT_abgr
#define GL_EXT_abgr 1
#define ANYGL_EXT_abgr 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_abgr;

#ifndef GL_EXT_base_instance
#define GL_EXT_base_instance 1
#define ANYGL_EXT_base_instance 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_base_instance;

#ifndef GL_EXT_bgra
#define GL_EXT_bgra 1
#define ANYGL_EXT_bgra 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_bgra;

#ifndef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 1
#define ANYGL_EXT_bindable_uniform 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_bindable_uniform;

#ifndef GL_EXT_blend_color
#define GL_EXT_blend_color 1
#define ANYGL_EXT_blend_color 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_blend_color;

#ifndef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 1
#define ANYGL_EXT_blend_equation_separate 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_blend_equation_separate;

#ifndef GL_EXT_blend_func_extended
#define GL_EXT_blend_func_extended 1
#define ANYGL_EXT_blend_func_extended 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_blend_func_extended;

#ifndef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 1
#define ANYGL_EXT_blend_func_separate 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_blend_func_separate;

#ifndef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 1
#define ANYGL_EXT_blend_logic_op 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_blend_logic_op;

#ifndef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 1
#define ANYGL_EXT_blend_minmax 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_blend_minmax;

#ifndef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 1
#define ANYGL_EXT_blend_subtract 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_blend_subtract;

#ifndef GL_EXT_buffer_storage
#define GL_EXT_buffer_storage 1
#define ANYGL_EXT_buffer_storage 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_buffer_storage;

#ifndef GL_EXT_clear_texture
#define GL_EXT_clear_texture 1
#define ANYGL_EXT_clear_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_clear_texture;

#ifndef GL_EXT_clip_control
#define GL_EXT_clip_control 1
#define ANYGL_EXT_clip_control 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_clip_control;

#ifndef GL_EXT_clip_cull_distance
#define GL_EXT_clip_cull_distance 1
#define ANYGL_EXT_clip_cull_distance 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_clip_cull_distance;

#ifndef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 1
#define ANYGL_EXT_clip_volume_hint 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_clip_volume_hint;

#ifndef GL_EXT_cmyka
#define GL_EXT_cmyka 1
#define ANYGL_EXT_cmyka 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_cmyka;

#ifndef GL_EXT_color_buffer_float
#define GL_EXT_color_buffer_float 1
#define ANYGL_EXT_color_buffer_float 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_color_buffer_float;

#ifndef GL_EXT_color_buffer_half_float
#define GL_EXT_color_buffer_half_float 1
#define ANYGL_EXT_color_buffer_half_float 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_color_buffer_half_float;

#ifndef GL_EXT_color_subtable
#define GL_EXT_color_subtable 1
#define ANYGL_EXT_color_subtable 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_color_subtable;

#ifndef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 1
#define ANYGL_EXT_compiled_vertex_array 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_compiled_vertex_array;

#ifndef GL_EXT_conservative_depth
#define GL_EXT_conservative_depth 1
#define ANYGL_EXT_conservative_depth 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_conservative_depth;

#ifndef GL_EXT_convolution
#define GL_EXT_convolution 1
#define ANYGL_EXT_convolution 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_convolution;

#ifndef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 1
#define ANYGL_EXT_coordinate_frame 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_coordinate_frame;

#ifndef GL_EXT_copy_image
#define GL_EXT_copy_image 1
#define ANYGL_EXT_copy_image 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_copy_image;

#ifndef GL_EXT_copy_texture
#define GL_EXT_copy_texture 1
#define ANYGL_EXT_copy_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_copy_texture;

#ifndef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 1
#define ANYGL_EXT_cull_vertex 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_cull_vertex;

#ifndef GL_EXT_debug_label
#define GL_EXT_debug_label 1
#define ANYGL_EXT_debug_label 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_debug_label;

#ifndef GL_EXT_debug_marker
#define GL_EXT_debug_marker 1
#define ANYGL_EXT_debug_marker 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_debug_marker;

#ifndef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 1
#define ANYGL_EXT_depth_bounds_test 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_depth_bounds_test;

#ifndef GL_EXT_depth_clamp
#define GL_EXT_depth_clamp 1
#define ANYGL_EXT_depth_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_depth_clamp;

#ifndef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 1
#define ANYGL_EXT_direct_state_access 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_direct_state_access;

#ifndef GL_EXT_discard_framebuffer
#define GL_EXT_discard_framebuffer 1
#define ANYGL_EXT_discard_framebuffer 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_discard_framebuffer;

#ifndef GL_EXT_disjoint_timer_query
#define GL_EXT_disjoint_timer_query 1
#define ANYGL_EXT_disjoint_timer_query 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_disjoint_timer_query;

#ifndef GL_EXT_draw_buffers
#define GL_EXT_draw_buffers 1
#define ANYGL_EXT_draw_buffers 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_draw_buffers;

#ifndef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 1
#define ANYGL_EXT_draw_buffers2 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_draw_buffers2;

#ifndef GL_EXT_draw_buffers_indexed
#define GL_EXT_draw_buffers_indexed 1
#define ANYGL_EXT_draw_buffers_indexed 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_draw_buffers_indexed;

#ifndef GL_EXT_draw_elements_base_vertex
#define GL_EXT_draw_elements_base_vertex 1
#define ANYGL_EXT_draw_elements_base_vertex 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_draw_elements_base_vertex;

#ifndef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 1
#define ANYGL_EXT_draw_instanced 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_draw_instanced;

#ifndef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 1
#define ANYGL_EXT_draw_range_elements 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_draw_range_elements;

#ifndef GL_EXT_draw_transform_feedback
#define GL_EXT_draw_transform_feedback 1
#define ANYGL_EXT_draw_transform_feedback 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_draw_transform_feedback;

#ifndef GL_EXT_external_buffer
#define GL_EXT_external_buffer 1
#define ANYGL_EXT_external_buffer 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_external_buffer;

#ifndef GL_EXT_float_blend
#define GL_EXT_float_blend 1
#define ANYGL_EXT_float_blend 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_float_blend;

#ifndef GL_EXT_fog_coord
#define GL_EXT_fog_coord 1
#define ANYGL_EXT_fog_coord 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_fog_coord;

#ifndef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 1
#define ANYGL_EXT_framebuffer_blit 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_framebuffer_blit;

#ifndef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 1
#define ANYGL_EXT_framebuffer_multisample 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_framebuffer_multisample;

#ifndef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 1
#define ANYGL_EXT_framebuffer_multisample_blit_scaled 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_framebuffer_multisample_blit_scaled;

#ifndef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 1
#define ANYGL_EXT_framebuffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_framebuffer_object;

#ifndef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 1
#define ANYGL_EXT_framebuffer_sRGB 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_framebuffer_sRGB;

#ifndef GL_EXT_geometry_point_size
#define GL_EXT_geometry_point_size 1
#define ANYGL_EXT_geometry_point_size 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_geometry_point_size;

#ifndef GL_EXT_geometry_shader
#define GL_EXT_geometry_shader 1
#define ANYGL_EXT_geometry_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_geometry_shader;

#ifndef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 1
#define ANYGL_EXT_geometry_shader4 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_geometry_shader4;

#ifndef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 1
#define ANYGL_EXT_gpu_program_parameters 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_gpu_program_parameters;

#ifndef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 1
#define ANYGL_EXT_gpu_shader4 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_gpu_shader4;

#ifndef GL_EXT_gpu_shader5
#define GL_EXT_gpu_shader5 1
#define ANYGL_EXT_gpu_shader5 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_gpu_shader5;

#ifndef GL_EXT_histogram
#define GL_EXT_histogram 1
#define ANYGL_EXT_histogram 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_histogram;

#ifndef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 1
#define ANYGL_EXT_index_array_formats 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_index_array_formats;

#ifndef GL_EXT_index_func
#define GL_EXT_index_func 1
#define ANYGL_EXT_index_func 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_index_func;

#ifndef GL_EXT_index_material
#define GL_EXT_index_material 1
#define ANYGL_EXT_index_material 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_index_material;

#ifndef GL_EXT_index_texture
#define GL_EXT_index_texture 1
#define ANYGL_EXT_index_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_index_texture;

#ifndef GL_EXT_instanced_arrays
#define GL_EXT_instanced_arrays 1
#define ANYGL_EXT_instanced_arrays 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_instanced_arrays;

#ifndef GL_EXT_light_texture
#define GL_EXT_light_texture 1
#define ANYGL_EXT_light_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_light_texture;

#ifndef GL_EXT_map_buffer_range
#define GL_EXT_map_buffer_range 1
#define ANYGL_EXT_map_buffer_range 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_map_buffer_range;

#ifndef GL_EXT_memory_object
#define GL_EXT_memory_object 1
#define ANYGL_EXT_memory_object 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_memory_object;

#ifndef GL_EXT_memory_object_fd
#define GL_EXT_memory_object_fd 1
#define ANYGL_EXT_memory_object_fd 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_memory_object_fd;

#ifndef GL_EXT_memory_object_win32
#define GL_EXT_memory_object_win32 1
#define ANYGL_EXT_memory_object_win32 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_memory_object_win32;

#ifndef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 1
#define ANYGL_EXT_misc_attribute 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_misc_attribute;

#ifndef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 1
#define ANYGL_EXT_multi_draw_arrays 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multi_draw_arrays;

#ifndef GL_EXT_multi_draw_indirect
#define GL_EXT_multi_draw_indirect 1
#define ANYGL_EXT_multi_draw_indirect 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multi_draw_indirect;

#ifndef GL_EXT_multisample
#define GL_EXT_multisample 1
#define ANYGL_EXT_multisample 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multisample;

#ifndef GL_EXT_multisampled_compatibility
#define GL_EXT_multisampled_compatibility 1
#define ANYGL_EXT_multisampled_compatibility 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multisampled_compatibility;

#ifndef GL_EXT_multisampled_render_to_texture
#define GL_EXT_multisampled_render_to_texture 1
#define ANYGL_EXT_multisampled_render_to_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multisampled_render_to_texture;

#ifndef GL_EXT_multisampled_render_to_texture2
#define GL_EXT_multisampled_render_to_texture2 1
#define ANYGL_EXT_multisampled_render_to_texture2 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multisampled_render_to_texture2;

#ifndef GL_EXT_multiview_draw_buffers
#define GL_EXT_multiview_draw_buffers 1
#define ANYGL_EXT_multiview_draw_buffers 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multiview_draw_buffers;

#ifndef GL_EXT_multiview_tessellation_geometry_shader
#define GL_EXT_multiview_tessellation_geometry_shader 1
#define ANYGL_EXT_multiview_tessellation_geometry_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multiview_tessellation_geometry_shader;

#ifndef GL_EXT_multiview_texture_multisample
#define GL_EXT_multiview_texture_multisample 1
#define ANYGL_EXT_multiview_texture_multisample 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multiview_texture_multisample;

#ifndef GL_EXT_multiview_timer_query
#define GL_EXT_multiview_timer_query 1
#define ANYGL_EXT_multiview_timer_query 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_multiview_timer_query;

#ifndef GL_EXT_occlusion_query_boolean
#define GL_EXT_occlusion_query_boolean 1
#define ANYGL_EXT_occlusion_query_boolean 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_occlusion_query_boolean;

#ifndef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 1
#define ANYGL_EXT_packed_depth_stencil 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_packed_depth_stencil;

#ifndef GL_EXT_packed_float
#define GL_EXT_packed_float 1
#define ANYGL_EXT_packed_float 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_packed_float;

#ifndef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 1
#define ANYGL_EXT_packed_pixels 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_packed_pixels;

#ifndef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 1
#define ANYGL_EXT_paletted_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_paletted_texture;

#ifndef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 1
#define ANYGL_EXT_pixel_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_pixel_buffer_object;

#ifndef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 1
#define ANYGL_EXT_pixel_transform 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_pixel_transform;

#ifndef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 1
#define ANYGL_EXT_pixel_transform_color_table 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_pixel_transform_color_table;

#ifndef GL_EXT_point_parameters
#define GL_EXT_point_parameters 1
#define ANYGL_EXT_point_parameters 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_point_parameters;

#ifndef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 1
#define ANYGL_EXT_polygon_offset 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_polygon_offset;

#ifndef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 1
#define ANYGL_EXT_polygon_offset_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_polygon_offset_clamp;

#ifndef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 1
#define ANYGL_EXT_post_depth_coverage 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_post_depth_coverage;

#ifndef GL_EXT_primitive_bounding_box
#define GL_EXT_primitive_bounding_box 1
#define ANYGL_EXT_primitive_bounding_box 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_primitive_bounding_box;

#ifndef GL_EXT_protected_textures
#define GL_EXT_protected_textures 1
#define ANYGL_EXT_protected_textures 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_protected_textures;

#ifndef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 1
#define ANYGL_EXT_provoking_vertex 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_provoking_vertex;

#ifndef GL_EXT_pvrtc_sRGB
#define GL_EXT_pvrtc_sRGB 1
#define ANYGL_EXT_pvrtc_sRGB 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_pvrtc_sRGB;

#ifndef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 1
#define ANYGL_EXT_raster_multisample 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_raster_multisample;

#ifndef GL_EXT_read_format_bgra
#define GL_EXT_read_format_bgra 1
#define ANYGL_EXT_read_format_bgra 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_read_format_bgra;

#ifndef GL_EXT_render_snorm
#define GL_EXT_render_snorm 1
#define ANYGL_EXT_render_snorm 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_render_snorm;

#ifndef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 1
#define ANYGL_EXT_rescale_normal 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_rescale_normal;

#ifndef GL_EXT_robustness
#define GL_EXT_robustness 1
#define ANYGL_EXT_robustness 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_robustness;

#ifndef GL_EXT_sRGB
#define GL_EXT_sRGB 1
#define ANYGL_EXT_sRGB 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_sRGB;

#ifndef GL_EXT_sRGB_write_control
#define GL_EXT_sRGB_write_control 1
#define ANYGL_EXT_sRGB_write_control 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_sRGB_write_control;

#ifndef GL_EXT_secondary_color
#define GL_EXT_secondary_color 1
#define ANYGL_EXT_secondary_color 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_secondary_color;

#ifndef GL_EXT_semaphore
#define GL_EXT_semaphore 1
#define ANYGL_EXT_semaphore 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_semaphore;

#ifndef GL_EXT_semaphore_fd
#define GL_EXT_semaphore_fd 1
#define ANYGL_EXT_semaphore_fd 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_semaphore_fd;

#ifndef GL_EXT_semaphore_win32
#define GL_EXT_semaphore_win32 1
#define ANYGL_EXT_semaphore_win32 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_semaphore_win32;

#ifndef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 1
#define ANYGL_EXT_separate_shader_objects 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_separate_shader_objects;

#ifndef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 1
#define ANYGL_EXT_separate_specular_color 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_separate_specular_color;

#ifndef GL_EXT_shader_framebuffer_fetch
#define GL_EXT_shader_framebuffer_fetch 1
#define ANYGL_EXT_shader_framebuffer_fetch 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_framebuffer_fetch;

#ifndef GL_EXT_shader_framebuffer_fetch_non_coherent
#define GL_EXT_shader_framebuffer_fetch_non_coherent 1
#define ANYGL_EXT_shader_framebuffer_fetch_non_coherent 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_framebuffer_fetch_non_coherent;

#ifndef GL_EXT_shader_group_vote
#define GL_EXT_shader_group_vote 1
#define ANYGL_EXT_shader_group_vote 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_group_vote;

#ifndef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 1
#define ANYGL_EXT_shader_image_load_formatted 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_image_load_formatted;

#ifndef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 1
#define ANYGL_EXT_shader_image_load_store 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_image_load_store;

#ifndef GL_EXT_shader_implicit_conversions
#define GL_EXT_shader_implicit_conversions 1
#define ANYGL_EXT_shader_implicit_conversions 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_implicit_conversions;

#ifndef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 1
#define ANYGL_EXT_shader_integer_mix 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_integer_mix;

#ifndef GL_EXT_shader_io_blocks
#define GL_EXT_shader_io_blocks 1
#define ANYGL_EXT_shader_io_blocks 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_io_blocks;

#ifndef GL_EXT_shader_non_constant_global_initializers
#define GL_EXT_shader_non_constant_global_initializers 1
#define ANYGL_EXT_shader_non_constant_global_initializers 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_non_constant_global_initializers;

#ifndef GL_EXT_shader_pixel_local_storage
#define GL_EXT_shader_pixel_local_storage 1
#define ANYGL_EXT_shader_pixel_local_storage 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_pixel_local_storage;

#ifndef GL_EXT_shader_pixel_local_storage2
#define GL_EXT_shader_pixel_local_storage2 1
#define ANYGL_EXT_shader_pixel_local_storage2 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_pixel_local_storage2;

#ifndef GL_EXT_shader_texture_lod
#define GL_EXT_shader_texture_lod 1
#define ANYGL_EXT_shader_texture_lod 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shader_texture_lod;

#ifndef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 1
#define ANYGL_EXT_shadow_funcs 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shadow_funcs;

#ifndef GL_EXT_shadow_samplers
#define GL_EXT_shadow_samplers 1
#define ANYGL_EXT_shadow_samplers 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shadow_samplers;

#ifndef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 1
#define ANYGL_EXT_shared_texture_palette 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_shared_texture_palette;

#ifndef GL_EXT_sparse_texture
#define GL_EXT_sparse_texture 1
#define ANYGL_EXT_sparse_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_sparse_texture;

#ifndef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 1
#define ANYGL_EXT_sparse_texture2 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_sparse_texture2;

#ifndef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 1
#define ANYGL_EXT_stencil_clear_tag 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_stencil_clear_tag;

#ifndef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 1
#define ANYGL_EXT_stencil_two_side 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_stencil_two_side;

#ifndef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 1
#define ANYGL_EXT_stencil_wrap 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_stencil_wrap;

#ifndef GL_EXT_subtexture
#define GL_EXT_subtexture 1
#define ANYGL_EXT_subtexture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_subtexture;

#ifndef GL_EXT_tessellation_point_size
#define GL_EXT_tessellation_point_size 1
#define ANYGL_EXT_tessellation_point_size 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_tessellation_point_size;

#ifndef GL_EXT_tessellation_shader
#define GL_EXT_tessellation_shader 1
#define ANYGL_EXT_tessellation_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_tessellation_shader;

#ifndef GL_EXT_texture
#define GL_EXT_texture 1
#define ANYGL_EXT_texture 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture;

#ifndef GL_EXT_texture3D
#define GL_EXT_texture3D 1
#define ANYGL_EXT_texture3D 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture3D;

#ifndef GL_EXT_texture_array
#define GL_EXT_texture_array 1
#define ANYGL_EXT_texture_array 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_array;

#ifndef GL_EXT_texture_border_clamp
#define GL_EXT_texture_border_clamp 1
#define ANYGL_EXT_texture_border_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_border_clamp;

#ifndef GL_EXT_texture_buffer
#define GL_EXT_texture_buffer 1
#define ANYGL_EXT_texture_buffer 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_buffer;

#ifndef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 1
#define ANYGL_EXT_texture_buffer_object 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_buffer_object;

#ifndef GL_EXT_texture_compression_astc_decode_mode
#define GL_EXT_texture_compression_astc_decode_mode 1
#define ANYGL_EXT_texture_compression_astc_decode_mode 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_compression_astc_decode_mode;

#ifndef GL_EXT_texture_compression_bptc
#define GL_EXT_texture_compression_bptc 1
#define ANYGL_EXT_texture_compression_bptc 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_compression_bptc;

#ifndef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 1
#define ANYGL_EXT_texture_compression_dxt1 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_compression_dxt1;

#ifndef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 1
#define ANYGL_EXT_texture_compression_latc 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_compression_latc;

#ifndef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 1
#define ANYGL_EXT_texture_compression_rgtc 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_compression_rgtc;

#ifndef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 1
#define ANYGL_EXT_texture_compression_s3tc 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_compression_s3tc;

#ifndef GL_EXT_texture_compression_s3tc_srgb
#define GL_EXT_texture_compression_s3tc_srgb 1
#define ANYGL_EXT_texture_compression_s3tc_srgb 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_compression_s3tc_srgb;

#ifndef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 1
#define ANYGL_EXT_texture_cube_map 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_cube_map;

#ifndef GL_EXT_texture_cube_map_array
#define GL_EXT_texture_cube_map_array 1
#define ANYGL_EXT_texture_cube_map_array 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_cube_map_array;

#ifndef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 1
#define ANYGL_EXT_texture_env_add 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_env_add;

#ifndef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 1
#define ANYGL_EXT_texture_env_combine 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_env_combine;

#ifndef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 1
#define ANYGL_EXT_texture_env_dot3 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_env_dot3;

#ifndef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 1
#define ANYGL_EXT_texture_filter_anisotropic 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_filter_anisotropic;

#ifndef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 1
#define ANYGL_EXT_texture_filter_minmax 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_filter_minmax;

#ifndef GL_EXT_texture_format_BGRA8888
#define GL_EXT_texture_format_BGRA8888 1
#define ANYGL_EXT_texture_format_BGRA8888 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_format_BGRA8888;

#ifndef GL_EXT_texture_format_sRGB_override
#define GL_EXT_texture_format_sRGB_override 1
#define ANYGL_EXT_texture_format_sRGB_override 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_format_sRGB_override;

#ifndef GL_EXT_texture_integer
#define GL_EXT_texture_integer 1
#define ANYGL_EXT_texture_integer 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_integer;

#ifndef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 1
#define ANYGL_EXT_texture_lod_bias 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_lod_bias;

#ifndef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 1
#define ANYGL_EXT_texture_mirror_clamp 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_mirror_clamp;

#ifndef GL_EXT_texture_mirror_clamp_to_edge
#define GL_EXT_texture_mirror_clamp_to_edge 1
#define ANYGL_EXT_texture_mirror_clamp_to_edge 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_mirror_clamp_to_edge;

#ifndef GL_EXT_texture_norm16
#define GL_EXT_texture_norm16 1
#define ANYGL_EXT_texture_norm16 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_norm16;

#ifndef GL_EXT_texture_object
#define GL_EXT_texture_object 1
#define ANYGL_EXT_texture_object 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_object;

#ifndef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 1
#define ANYGL_EXT_texture_perturb_normal 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_perturb_normal;

#ifndef GL_EXT_texture_query_lod
#define GL_EXT_texture_query_lod 1
#define ANYGL_EXT_texture_query_lod 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_query_lod;

#ifndef GL_EXT_texture_rg
#define GL_EXT_texture_rg 1
#define ANYGL_EXT_texture_rg 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_rg;

#ifndef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 1
#define ANYGL_EXT_texture_sRGB 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_sRGB;

#ifndef GL_EXT_texture_sRGB_R8
#define GL_EXT_texture_sRGB_R8 1
#define ANYGL_EXT_texture_sRGB_R8 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_sRGB_R8;

#ifndef GL_EXT_texture_sRGB_RG8
#define GL_EXT_texture_sRGB_RG8 1
#define ANYGL_EXT_texture_sRGB_RG8 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_sRGB_RG8;

#ifndef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 1
#define ANYGL_EXT_texture_sRGB_decode 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_sRGB_decode;

#ifndef GL_EXT_texture_shadow_lod
#define GL_EXT_texture_shadow_lod 1
#define ANYGL_EXT_texture_shadow_lod 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_shadow_lod;

#ifndef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 1
#define ANYGL_EXT_texture_shared_exponent 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_shared_exponent;

#ifndef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 1
#define ANYGL_EXT_texture_snorm 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_snorm;

#ifndef GL_EXT_texture_storage
#define GL_EXT_texture_storage 1
#define ANYGL_EXT_texture_storage 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_storage;

#ifndef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 1
#define ANYGL_EXT_texture_swizzle 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_swizzle;

#ifndef GL_EXT_texture_type_2_10_10_10_REV
#define GL_EXT_texture_type_2_10_10_10_REV 1
#define ANYGL_EXT_texture_type_2_10_10_10_REV 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_type_2_10_10_10_REV;

#ifndef GL_EXT_texture_view
#define GL_EXT_texture_view 1
#define ANYGL_EXT_texture_view 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_texture_view;

#ifndef GL_EXT_timer_query
#define GL_EXT_timer_query 1
#define ANYGL_EXT_timer_query 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_timer_query;

#ifndef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 1
#define ANYGL_EXT_transform_feedback 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_transform_feedback;

#ifndef GL_EXT_unpack_subimage
#define GL_EXT_unpack_subimage 1
#define ANYGL_EXT_unpack_subimage 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_unpack_subimage;

#ifndef GL_EXT_vertex_array
#define GL_EXT_vertex_array 1
#define ANYGL_EXT_vertex_array 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_vertex_array;

#ifndef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 1
#define ANYGL_EXT_vertex_array_bgra 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_vertex_array_bgra;

#ifndef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 1
#define ANYGL_EXT_vertex_attrib_64bit 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_vertex_attrib_64bit;

#ifndef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 1
#define ANYGL_EXT_vertex_shader 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_vertex_shader;

#ifndef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 1
#define ANYGL_EXT_vertex_weighting 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_vertex_weighting;

#ifndef GL_EXT_win32_keyed_mutex
#define GL_EXT_win32_keyed_mutex 1
#define ANYGL_EXT_win32_keyed_mutex 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_win32_keyed_mutex;

#ifndef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 1
#define ANYGL_EXT_window_rectangles 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_window_rectangles;

#ifndef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 1
#define ANYGL_EXT_x11_sync_object 1
#endif
ANYGL_EXPORT extern int AnyGL_EXT_x11_sync_object;

#ifndef GL_IMG_texture_compression_pvrtc
#define GL_IMG_texture_compression_pvrtc 1
#define ANYGL_IMG_texture_compression_pvrtc 1
#endif
ANYGL_EXPORT extern int AnyGL_IMG_texture_compression_pvrtc;

#ifndef GL_IMG_texture_compression_pvrtc2
#define GL_IMG_texture_compression_pvrtc2 1
#define ANYGL_IMG_texture_compression_pvrtc2 1
#endif
ANYGL_EXPORT extern int AnyGL_IMG_texture_compression_pvrtc2;

/* Type declarations */
#if !ANYGL_GLES
#include <stddef.h>
#include <stdint.h>
typedef int8_t GLbyte;
typedef uint8_t GLubyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef uint16_t GLushort;
typedef float GLfloat;
typedef float GLclampf;
typedef uint16_t GLhalf;
typedef int32_t GLfixed;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
#endif

#if defined(ANYGL_VERSION_1_0) || defined(ANYGL_ES_VERSION_2_0)
#if ANYGL_GLES
#include <KHR/khrplatform.h>
typedef khronos_int8_t GLbyte;
typedef khronos_float_t GLclampf;
typedef khronos_int32_t GLfixed;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
#endif
typedef void GLvoid;
typedef struct __GLsync *GLsync;
#if ANYGL_GLES
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
#endif
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef char GLchar;
#if ANYGL_GLES
typedef khronos_float_t GLfloat;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_intptr_t GLintptr;
#endif
typedef unsigned int GLbitfield;
typedef int GLint;
typedef unsigned char GLboolean;
typedef int GLsizei;
#if ANYGL_GLES
typedef khronos_uint8_t GLubyte;
#endif
#endif /* GL_ES_VERSION_2_0 */

#ifdef ANYGL_ES_VERSION_3_0
#if ANYGL_GLES
typedef khronos_uint16_t GLhalf;
#endif
#endif /* GL_ES_VERSION_3_0 */

#ifdef ANYGL_ES_VERSION_3_2
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#endif /* GL_ES_VERSION_3_2 */

#if defined(ANYGL_VERSION_1_0) || defined(ANYGL_ES_VERSION_2_0)
typedef double GLdouble;
#endif /* GL_VERSION_1_0 */

#ifdef ANYGL_VERSION_1_1
typedef double GLclampd;
#endif /* GL_VERSION_1_1 */

#ifdef ANYGL_ARB_bindless_texture
typedef GLuint64 GLuint64EXT;
#endif /* GL_ARB_bindless_texture */

#ifdef ANYGL_ARB_cl_event
struct _cl_context;
struct _cl_event;
#endif /* GL_ARB_cl_event */

#ifdef ANYGL_ARB_debug_output
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#endif /* GL_ARB_debug_output */

#ifdef ANYGL_ARB_half_float_pixel
#if ANYGL_GLES
typedef khronos_uint16_t GLhalfARB;
#endif
#endif /* GL_ARB_half_float_pixel */

#ifdef ANYGL_ARB_shader_objects
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef char GLcharARB;
#endif /* GL_ARB_shader_objects */

#ifdef ANYGL_ARB_vertex_buffer_object
#if ANYGL_GLES
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_intptr_t GLintptrARB;
#endif
#endif /* GL_ARB_vertex_buffer_object */

#ifdef ANYGL_KHR_debug
typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#endif /* GL_KHR_debug */

#ifdef ANYGL_OES_EGL_image
typedef void *GLeglImageOES;
#endif /* GL_OES_EGL_image */

#ifdef ANYGL_EXT_external_buffer
typedef void *GLeglClientBufferEXT;
#endif /* GL_EXT_external_buffer */

/* Enum definitions */
#ifndef ANYGL_NO_DEFINES
#ifdef ANYGL_ES_VERSION_2_0
#define GL_DEPTH_BUFFER_BIT               0x00000100
#define GL_STENCIL_BUFFER_BIT             0x00000400
#define GL_COLOR_BUFFER_BIT               0x00004000
#define GL_FALSE                          0
#define GL_TRUE                           1
#define GL_POINTS                         0x0000
#define GL_LINES                          0x0001
#define GL_LINE_LOOP                      0x0002
#define GL_LINE_STRIP                     0x0003
#define GL_TRIANGLES                      0x0004
#define GL_TRIANGLE_STRIP                 0x0005
#define GL_TRIANGLE_FAN                   0x0006
#define GL_ZERO                           0
#define GL_ONE                            1
#define GL_SRC_COLOR                      0x0300
#define GL_ONE_MINUS_SRC_COLOR            0x0301
#define GL_SRC_ALPHA                      0x0302
#define GL_ONE_MINUS_SRC_ALPHA            0x0303
#define GL_DST_ALPHA                      0x0304
#define GL_ONE_MINUS_DST_ALPHA            0x0305
#define GL_DST_COLOR                      0x0306
#define GL_ONE_MINUS_DST_COLOR            0x0307
#define GL_SRC_ALPHA_SATURATE             0x0308
#define GL_FUNC_ADD                       0x8006
#define GL_BLEND_EQUATION                 0x8009
#define GL_BLEND_EQUATION_RGB             0x8009
#define GL_BLEND_EQUATION_ALPHA           0x883D
#define GL_FUNC_SUBTRACT                  0x800A
#define GL_FUNC_REVERSE_SUBTRACT          0x800B
#define GL_BLEND_DST_RGB                  0x80C8
#define GL_BLEND_SRC_RGB                  0x80C9
#define GL_BLEND_DST_ALPHA                0x80CA
#define GL_BLEND_SRC_ALPHA                0x80CB
#define GL_CONSTANT_COLOR                 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR       0x8002
#define GL_CONSTANT_ALPHA                 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA       0x8004
#define GL_BLEND_COLOR                    0x8005
#define GL_ARRAY_BUFFER                   0x8892
#define GL_ELEMENT_ARRAY_BUFFER           0x8893
#define GL_ARRAY_BUFFER_BINDING           0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895
#define GL_STREAM_DRAW                    0x88E0
#define GL_STATIC_DRAW                    0x88E4
#define GL_DYNAMIC_DRAW                   0x88E8
#define GL_BUFFER_SIZE                    0x8764
#define GL_BUFFER_USAGE                   0x8765
#define GL_CURRENT_VERTEX_ATTRIB          0x8626
#define GL_FRONT                          0x0404
#define GL_BACK                           0x0405
#define GL_FRONT_AND_BACK                 0x0408
#define GL_TEXTURE_2D                     0x0DE1
#define GL_CULL_FACE                      0x0B44
#define GL_BLEND                          0x0BE2
#define GL_DITHER                         0x0BD0
#define GL_STENCIL_TEST                   0x0B90
#define GL_DEPTH_TEST                     0x0B71
#define GL_SCISSOR_TEST                   0x0C11
#define GL_POLYGON_OFFSET_FILL            0x8037
#define GL_SAMPLE_ALPHA_TO_COVERAGE       0x809E
#define GL_SAMPLE_COVERAGE                0x80A0
#define GL_NO_ERROR                       0
#define GL_INVALID_ENUM                   0x0500
#define GL_INVALID_VALUE                  0x0501
#define GL_INVALID_OPERATION              0x0502
#define GL_OUT_OF_MEMORY                  0x0505
#define GL_CW                             0x0900
#define GL_CCW                            0x0901
#define GL_LINE_WIDTH                     0x0B21
#define GL_ALIASED_POINT_SIZE_RANGE       0x846D
#define GL_ALIASED_LINE_WIDTH_RANGE       0x846E
#define GL_CULL_FACE_MODE                 0x0B45
#define GL_FRONT_FACE                     0x0B46
#define GL_DEPTH_RANGE                    0x0B70
#define GL_DEPTH_WRITEMASK                0x0B72
#define GL_DEPTH_CLEAR_VALUE              0x0B73
#define GL_DEPTH_FUNC                     0x0B74
#define GL_STENCIL_CLEAR_VALUE            0x0B91
#define GL_STENCIL_FUNC                   0x0B92
#define GL_STENCIL_FAIL                   0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL        0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS        0x0B96
#define GL_STENCIL_REF                    0x0B97
#define GL_STENCIL_VALUE_MASK             0x0B93
#define GL_STENCIL_WRITEMASK              0x0B98
#define GL_STENCIL_BACK_FUNC              0x8800
#define GL_STENCIL_BACK_FAIL              0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL   0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS   0x8803
#define GL_STENCIL_BACK_REF               0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK        0x8CA4
#define GL_STENCIL_BACK_WRITEMASK         0x8CA5
#define GL_VIEWPORT                       0x0BA2
#define GL_SCISSOR_BOX                    0x0C10
#define GL_COLOR_CLEAR_VALUE              0x0C22
#define GL_COLOR_WRITEMASK                0x0C23
#define GL_UNPACK_ALIGNMENT               0x0CF5
#define GL_PACK_ALIGNMENT                 0x0D05
#define GL_MAX_TEXTURE_SIZE               0x0D33
#define GL_MAX_VIEWPORT_DIMS              0x0D3A
#define GL_SUBPIXEL_BITS                  0x0D50
#define GL_RED_BITS                       0x0D52
#define GL_GREEN_BITS                     0x0D53
#define GL_BLUE_BITS                      0x0D54
#define GL_ALPHA_BITS                     0x0D55
#define GL_DEPTH_BITS                     0x0D56
#define GL_STENCIL_BITS                   0x0D57
#define GL_POLYGON_OFFSET_UNITS           0x2A00
#define GL_POLYGON_OFFSET_FACTOR          0x8038
#define GL_TEXTURE_BINDING_2D             0x8069
#define GL_SAMPLE_BUFFERS                 0x80A8
#define GL_SAMPLES                        0x80A9
#define GL_SAMPLE_COVERAGE_VALUE          0x80AA
#define GL_SAMPLE_COVERAGE_INVERT         0x80AB
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS     0x86A3
#define GL_DONT_CARE                      0x1100
#define GL_FASTEST                        0x1101
#define GL_NICEST                         0x1102
#define GL_GENERATE_MIPMAP_HINT           0x8192
#define GL_BYTE                           0x1400
#define GL_UNSIGNED_BYTE                  0x1401
#define GL_SHORT                          0x1402
#define GL_UNSIGNED_SHORT                 0x1403
#define GL_INT                            0x1404
#define GL_UNSIGNED_INT                   0x1405
#define GL_FLOAT                          0x1406
#define GL_FIXED                          0x140C
#define GL_DEPTH_COMPONENT                0x1902
#define GL_ALPHA                          0x1906
#define GL_RGB                            0x1907
#define GL_RGBA                           0x1908
#define GL_LUMINANCE                      0x1909
#define GL_LUMINANCE_ALPHA                0x190A
#define GL_UNSIGNED_SHORT_4_4_4_4         0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1         0x8034
#define GL_UNSIGNED_SHORT_5_6_5           0x8363
#define GL_FRAGMENT_SHADER                0x8B30
#define GL_VERTEX_SHADER                  0x8B31
#define GL_MAX_VERTEX_ATTRIBS             0x8869
#define GL_MAX_VERTEX_UNIFORM_VECTORS     0x8DFB
#define GL_MAX_VARYING_VECTORS            0x8DFC
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_TEXTURE_IMAGE_UNITS        0x8872
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS   0x8DFD
#define GL_SHADER_TYPE                    0x8B4F
#define GL_DELETE_STATUS                  0x8B80
#define GL_LINK_STATUS                    0x8B82
#define GL_VALIDATE_STATUS                0x8B83
#define GL_ATTACHED_SHADERS               0x8B85
#define GL_ACTIVE_UNIFORMS                0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH      0x8B87
#define GL_ACTIVE_ATTRIBUTES              0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    0x8B8A
#define GL_SHADING_LANGUAGE_VERSION       0x8B8C
#define GL_CURRENT_PROGRAM                0x8B8D
#define GL_NEVER                          0x0200
#define GL_LESS                           0x0201
#define GL_EQUAL                          0x0202
#define GL_LEQUAL                         0x0203
#define GL_GREATER                        0x0204
#define GL_NOTEQUAL                       0x0205
#define GL_GEQUAL                         0x0206
#define GL_ALWAYS                         0x0207
#define GL_KEEP                           0x1E00
#define GL_REPLACE                        0x1E01
#define GL_INCR                           0x1E02
#define GL_DECR                           0x1E03
#define GL_INVERT                         0x150A
#define GL_INCR_WRAP                      0x8507
#define GL_DECR_WRAP                      0x8508
#define GL_VENDOR                         0x1F00
#define GL_RENDERER                       0x1F01
#define GL_VERSION                        0x1F02
#define GL_EXTENSIONS                     0x1F03
#define GL_NEAREST                        0x2600
#define GL_LINEAR                         0x2601
#define GL_NEAREST_MIPMAP_NEAREST         0x2700
#define GL_LINEAR_MIPMAP_NEAREST          0x2701
#define GL_NEAREST_MIPMAP_LINEAR          0x2702
#define GL_LINEAR_MIPMAP_LINEAR           0x2703
#define GL_TEXTURE_MAG_FILTER             0x2800
#define GL_TEXTURE_MIN_FILTER             0x2801
#define GL_TEXTURE_WRAP_S                 0x2802
#define GL_TEXTURE_WRAP_T                 0x2803
#define GL_TEXTURE                        0x1702
#define GL_TEXTURE_CUBE_MAP               0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP       0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X    0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X    0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y    0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z    0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    0x851A
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE      0x851C
#define GL_TEXTURE0                       0x84C0
#define GL_TEXTURE1                       0x84C1
#define GL_TEXTURE2                       0x84C2
#define GL_TEXTURE3                       0x84C3
#define GL_TEXTURE4                       0x84C4
#define GL_TEXTURE5                       0x84C5
#define GL_TEXTURE6                       0x84C6
#define GL_TEXTURE7                       0x84C7
#define GL_TEXTURE8                       0x84C8
#define GL_TEXTURE9                       0x84C9
#define GL_TEXTURE10                      0x84CA
#define GL_TEXTURE11                      0x84CB
#define GL_TEXTURE12                      0x84CC
#define GL_TEXTURE13                      0x84CD
#define GL_TEXTURE14                      0x84CE
#define GL_TEXTURE15                      0x84CF
#define GL_TEXTURE16                      0x84D0
#define GL_TEXTURE17                      0x84D1
#define GL_TEXTURE18                      0x84D2
#define GL_TEXTURE19                      0x84D3
#define GL_TEXTURE20                      0x84D4
#define GL_TEXTURE21                      0x84D5
#define GL_TEXTURE22                      0x84D6
#define GL_TEXTURE23                      0x84D7
#define GL_TEXTURE24                      0x84D8
#define GL_TEXTURE25                      0x84D9
#define GL_TEXTURE26                      0x84DA
#define GL_TEXTURE27                      0x84DB
#define GL_TEXTURE28                      0x84DC
#define GL_TEXTURE29                      0x84DD
#define GL_TEXTURE30                      0x84DE
#define GL_TEXTURE31                      0x84DF
#define GL_ACTIVE_TEXTURE                 0x84E0
#define GL_REPEAT                         0x2901
#define GL_CLAMP_TO_EDGE                  0x812F
#define GL_MIRRORED_REPEAT                0x8370
#define GL_FLOAT_VEC2                     0x8B50
#define GL_FLOAT_VEC3                     0x8B51
#define GL_FLOAT_VEC4                     0x8B52
#define GL_INT_VEC2                       0x8B53
#define GL_INT_VEC3                       0x8B54
#define GL_INT_VEC4                       0x8B55
#define GL_BOOL                           0x8B56
#define GL_BOOL_VEC2                      0x8B57
#define GL_BOOL_VEC3                      0x8B58
#define GL_BOOL_VEC4                      0x8B59
#define GL_FLOAT_MAT2                     0x8B5A
#define GL_FLOAT_MAT3                     0x8B5B
#define GL_FLOAT_MAT4                     0x8B5C
#define GL_SAMPLER_2D                     0x8B5E
#define GL_SAMPLER_CUBE                   0x8B60
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED    0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE       0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE     0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE       0x8625
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER    0x8645
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_COMPILE_STATUS                 0x8B81
#define GL_INFO_LOG_LENGTH                0x8B84
#define GL_SHADER_SOURCE_LENGTH           0x8B88
#define GL_SHADER_COMPILER                0x8DFA
#define GL_SHADER_BINARY_FORMATS          0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS      0x8DF9
#define GL_LOW_FLOAT                      0x8DF0
#define GL_MEDIUM_FLOAT                   0x8DF1
#define GL_HIGH_FLOAT                     0x8DF2
#define GL_LOW_INT                        0x8DF3
#define GL_MEDIUM_INT                     0x8DF4
#define GL_HIGH_INT                       0x8DF5
#define GL_FRAMEBUFFER                    0x8D40
#define GL_RENDERBUFFER                   0x8D41
#define GL_RGBA4                          0x8056
#define GL_RGB5_A1                        0x8057
#define GL_RGB565                         0x8D62
#define GL_DEPTH_COMPONENT16              0x81A5
#define GL_STENCIL_INDEX8                 0x8D48
#define GL_RENDERBUFFER_WIDTH             0x8D42
#define GL_RENDERBUFFER_HEIGHT            0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT   0x8D44
#define GL_RENDERBUFFER_RED_SIZE          0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE        0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE         0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE        0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE        0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE      0x8D55
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_COLOR_ATTACHMENT0              0x8CE0
#define GL_DEPTH_ATTACHMENT               0x8D00
#define GL_STENCIL_ATTACHMENT             0x8D20
#define GL_NONE                           0
#define GL_FRAMEBUFFER_COMPLETE           0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_UNSUPPORTED        0x8CDD
#define GL_FRAMEBUFFER_BINDING            0x8CA6
#define GL_RENDERBUFFER_BINDING           0x8CA7
#define GL_MAX_RENDERBUFFER_SIZE          0x84E8
#define GL_INVALID_FRAMEBUFFER_OPERATION  0x0506
#endif /* GL_ES_VERSION_2_0 */

#ifdef ANYGL_ES_VERSION_3_0
#define GL_READ_BUFFER                    0x0C02
#define GL_UNPACK_ROW_LENGTH              0x0CF2
#define GL_UNPACK_SKIP_ROWS               0x0CF3
#define GL_UNPACK_SKIP_PIXELS             0x0CF4
#define GL_PACK_ROW_LENGTH                0x0D02
#define GL_PACK_SKIP_ROWS                 0x0D03
#define GL_PACK_SKIP_PIXELS               0x0D04
#define GL_COLOR                          0x1800
#define GL_DEPTH                          0x1801
#define GL_STENCIL                        0x1802
#define GL_RED                            0x1903
#define GL_RGB8                           0x8051
#define GL_RGBA8                          0x8058
#define GL_RGB10_A2                       0x8059
#define GL_TEXTURE_BINDING_3D             0x806A
#define GL_UNPACK_SKIP_IMAGES             0x806D
#define GL_UNPACK_IMAGE_HEIGHT            0x806E
#define GL_TEXTURE_3D                     0x806F
#define GL_TEXTURE_WRAP_R                 0x8072
#define GL_MAX_3D_TEXTURE_SIZE            0x8073
#define GL_UNSIGNED_INT_2_10_10_10_REV    0x8368
#define GL_MAX_ELEMENTS_VERTICES          0x80E8
#define GL_MAX_ELEMENTS_INDICES           0x80E9
#define GL_TEXTURE_MIN_LOD                0x813A
#define GL_TEXTURE_MAX_LOD                0x813B
#define GL_TEXTURE_BASE_LEVEL             0x813C
#define GL_TEXTURE_MAX_LEVEL              0x813D
#define GL_MIN                            0x8007
#define GL_MAX                            0x8008
#define GL_DEPTH_COMPONENT24              0x81A6
#define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
#define GL_TEXTURE_COMPARE_MODE           0x884C
#define GL_TEXTURE_COMPARE_FUNC           0x884D
#define GL_CURRENT_QUERY                  0x8865
#define GL_QUERY_RESULT                   0x8866
#define GL_QUERY_RESULT_AVAILABLE         0x8867
#define GL_BUFFER_MAPPED                  0x88BC
#define GL_BUFFER_MAP_POINTER             0x88BD
#define GL_STREAM_READ                    0x88E1
#define GL_STREAM_COPY                    0x88E2
#define GL_STATIC_READ                    0x88E5
#define GL_STATIC_COPY                    0x88E6
#define GL_DYNAMIC_READ                   0x88E9
#define GL_DYNAMIC_COPY                   0x88EA
#define GL_MAX_DRAW_BUFFERS               0x8824
#define GL_DRAW_BUFFER0                   0x8825
#define GL_DRAW_BUFFER1                   0x8826
#define GL_DRAW_BUFFER2                   0x8827
#define GL_DRAW_BUFFER3                   0x8828
#define GL_DRAW_BUFFER4                   0x8829
#define GL_DRAW_BUFFER5                   0x882A
#define GL_DRAW_BUFFER6                   0x882B
#define GL_DRAW_BUFFER7                   0x882C
#define GL_DRAW_BUFFER8                   0x882D
#define GL_DRAW_BUFFER9                   0x882E
#define GL_DRAW_BUFFER10                  0x882F
#define GL_DRAW_BUFFER11                  0x8830
#define GL_DRAW_BUFFER12                  0x8831
#define GL_DRAW_BUFFER13                  0x8832
#define GL_DRAW_BUFFER14                  0x8833
#define GL_DRAW_BUFFER15                  0x8834
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS  0x8B4A
#define GL_SAMPLER_3D                     0x8B5F
#define GL_SAMPLER_2D_SHADOW              0x8B62
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_PIXEL_PACK_BUFFER              0x88EB
#define GL_PIXEL_UNPACK_BUFFER            0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING      0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING    0x88EF
#define GL_FLOAT_MAT2x3                   0x8B65
#define GL_FLOAT_MAT2x4                   0x8B66
#define GL_FLOAT_MAT3x2                   0x8B67
#define GL_FLOAT_MAT3x4                   0x8B68
#define GL_FLOAT_MAT4x2                   0x8B69
#define GL_FLOAT_MAT4x3                   0x8B6A
#define GL_SRGB                           0x8C40
#define GL_SRGB8                          0x8C41
#define GL_SRGB8_ALPHA8                   0x8C43
#define GL_COMPARE_REF_TO_TEXTURE         0x884E
#define GL_MAJOR_VERSION                  0x821B
#define GL_MINOR_VERSION                  0x821C
#define GL_NUM_EXTENSIONS                 0x821D
#define GL_RGBA32F                        0x8814
#define GL_RGB32F                         0x8815
#define GL_RGBA16F                        0x881A
#define GL_RGB16F                         0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER    0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS       0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET       0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET       0x8905
#define GL_MAX_VARYING_COMPONENTS         0x8B4B
#define GL_TEXTURE_2D_ARRAY               0x8C1A
#define GL_TEXTURE_BINDING_2D_ARRAY       0x8C1D
#define GL_R11F_G11F_B10F                 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV   0x8C3B
#define GL_RGB9_E5                        0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV       0x8C3E
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS    0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD             0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS            0x8C8C
#define GL_SEPARATE_ATTRIBS               0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER      0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI                       0x8D70
#define GL_RGB32UI                        0x8D71
#define GL_RGBA16UI                       0x8D76
#define GL_RGB16UI                        0x8D77
#define GL_RGBA8UI                        0x8D7C
#define GL_RGB8UI                         0x8D7D
#define GL_RGBA32I                        0x8D82
#define GL_RGB32I                         0x8D83
#define GL_RGBA16I                        0x8D88
#define GL_RGB16I                         0x8D89
#define GL_RGBA8I                         0x8D8E
#define GL_RGB8I                          0x8D8F
#define GL_RED_INTEGER                    0x8D94
#define GL_RGB_INTEGER                    0x8D98
#define GL_RGBA_INTEGER                   0x8D99
#define GL_SAMPLER_2D_ARRAY               0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4
#define GL_SAMPLER_CUBE_SHADOW            0x8DC5
#define GL_UNSIGNED_INT_VEC2              0x8DC6
#define GL_UNSIGNED_INT_VEC3              0x8DC7
#define GL_UNSIGNED_INT_VEC4              0x8DC8
#define GL_INT_SAMPLER_2D                 0x8DCA
#define GL_INT_SAMPLER_3D                 0x8DCB
#define GL_INT_SAMPLER_CUBE               0x8DCC
#define GL_INT_SAMPLER_2D_ARRAY           0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7
#define GL_BUFFER_ACCESS_FLAGS            0x911F
#define GL_BUFFER_MAP_LENGTH              0x9120
#define GL_BUFFER_MAP_OFFSET              0x9121
#define GL_DEPTH_COMPONENT32F             0x8CAC
#define GL_DEPTH32F_STENCIL8              0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT            0x8218
#define GL_FRAMEBUFFER_UNDEFINED          0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT       0x821A
#define GL_DEPTH_STENCIL                  0x84F9
#define GL_UNSIGNED_INT_24_8              0x84FA
#define GL_DEPTH24_STENCIL8               0x88F0
#define GL_UNSIGNED_NORMALIZED            0x8C17
#define GL_DRAW_FRAMEBUFFER_BINDING       0x8CA6
#define GL_READ_FRAMEBUFFER               0x8CA8
#define GL_DRAW_FRAMEBUFFER               0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING       0x8CAA
#define GL_RENDERBUFFER_SAMPLES           0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_MAX_COLOR_ATTACHMENTS          0x8CDF
#define GL_COLOR_ATTACHMENT1              0x8CE1
#define GL_COLOR_ATTACHMENT2              0x8CE2
#define GL_COLOR_ATTACHMENT3              0x8CE3
#define GL_COLOR_ATTACHMENT4              0x8CE4
#define GL_COLOR_ATTACHMENT5              0x8CE5
#define GL_COLOR_ATTACHMENT6              0x8CE6
#define GL_COLOR_ATTACHMENT7              0x8CE7
#define GL_COLOR_ATTACHMENT8              0x8CE8
#define GL_COLOR_ATTACHMENT9              0x8CE9
#define GL_COLOR_ATTACHMENT10             0x8CEA
#define GL_COLOR_ATTACHMENT11             0x8CEB
#define GL_COLOR_ATTACHMENT12             0x8CEC
#define GL_COLOR_ATTACHMENT13             0x8CED
#define GL_COLOR_ATTACHMENT14             0x8CEE
#define GL_COLOR_ATTACHMENT15             0x8CEF
#define GL_COLOR_ATTACHMENT16             0x8CF0
#define GL_COLOR_ATTACHMENT17             0x8CF1
#define GL_COLOR_ATTACHMENT18             0x8CF2
#define GL_COLOR_ATTACHMENT19             0x8CF3
#define GL_COLOR_ATTACHMENT20             0x8CF4
#define GL_COLOR_ATTACHMENT21             0x8CF5
#define GL_COLOR_ATTACHMENT22             0x8CF6
#define GL_COLOR_ATTACHMENT23             0x8CF7
#define GL_COLOR_ATTACHMENT24             0x8CF8
#define GL_COLOR_ATTACHMENT25             0x8CF9
#define GL_COLOR_ATTACHMENT26             0x8CFA
#define GL_COLOR_ATTACHMENT27             0x8CFB
#define GL_COLOR_ATTACHMENT28             0x8CFC
#define GL_COLOR_ATTACHMENT29             0x8CFD
#define GL_COLOR_ATTACHMENT30             0x8CFE
#define GL_COLOR_ATTACHMENT31             0x8CFF
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES                    0x8D57
#define GL_HALF_FLOAT                     0x140B
#define GL_MAP_READ_BIT                   0x0001
#define GL_MAP_WRITE_BIT                  0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT       0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT      0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT         0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT         0x0020
#define GL_RG                             0x8227
#define GL_RG_INTEGER                     0x8228
#define GL_R8                             0x8229
#define GL_RG8                            0x822B
#define GL_R16F                           0x822D
#define GL_R32F                           0x822E
#define GL_RG16F                          0x822F
#define GL_RG32F                          0x8230
#define GL_R8I                            0x8231
#define GL_R8UI                           0x8232
#define GL_R16I                           0x8233
#define GL_R16UI                          0x8234
#define GL_R32I                           0x8235
#define GL_R32UI                          0x8236
#define GL_RG8I                           0x8237
#define GL_RG8UI                          0x8238
#define GL_RG16I                          0x8239
#define GL_RG16UI                         0x823A
#define GL_RG32I                          0x823B
#define GL_RG32UI                         0x823C
#define GL_VERTEX_ARRAY_BINDING           0x85B5
#define GL_R8_SNORM                       0x8F94
#define GL_RG8_SNORM                      0x8F95
#define GL_RGB8_SNORM                     0x8F96
#define GL_RGBA8_SNORM                    0x8F97
#define GL_SIGNED_NORMALIZED              0x8F9C
#define GL_PRIMITIVE_RESTART_FIXED_INDEX  0x8D69
#define GL_COPY_READ_BUFFER               0x8F36
#define GL_COPY_WRITE_BUFFER              0x8F37
#define GL_COPY_READ_BUFFER_BINDING       0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING      0x8F37
#define GL_UNIFORM_BUFFER                 0x8A11
#define GL_UNIFORM_BUFFER_BINDING         0x8A28
#define GL_UNIFORM_BUFFER_START           0x8A29
#define GL_UNIFORM_BUFFER_SIZE            0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS      0x8A2B
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS    0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS    0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS    0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE         0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS          0x8A36
#define GL_UNIFORM_TYPE                   0x8A37
#define GL_UNIFORM_SIZE                   0x8A38
#define GL_UNIFORM_NAME_LENGTH            0x8A39
#define GL_UNIFORM_BLOCK_INDEX            0x8A3A
#define GL_UNIFORM_OFFSET                 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE           0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE          0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR           0x8A3E
#define GL_UNIFORM_BLOCK_BINDING          0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE        0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH      0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX                  0xFFFFFFFFu
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS   0x9122
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS  0x9125
#define GL_MAX_SERVER_WAIT_TIMEOUT        0x9111
#define GL_OBJECT_TYPE                    0x9112
#define GL_SYNC_CONDITION                 0x9113
#define GL_SYNC_STATUS                    0x9114
#define GL_SYNC_FLAGS                     0x9115
#define GL_SYNC_FENCE                     0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE     0x9117
#define GL_UNSIGNALED                     0x9118
#define GL_SIGNALED                       0x9119
#define GL_ALREADY_SIGNALED               0x911A
#define GL_TIMEOUT_EXPIRED                0x911B
#define GL_CONDITION_SATISFIED            0x911C
#define GL_WAIT_FAILED                    0x911D
#define GL_SYNC_FLUSH_COMMANDS_BIT        0x00000001
#define GL_TIMEOUT_IGNORED                0xFFFFFFFFFFFFFFFFull
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR    0x88FE
#define GL_ANY_SAMPLES_PASSED             0x8C2F
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_SAMPLER_BINDING                0x8919
#define GL_RGB10_A2UI                     0x906F
#define GL_TEXTURE_SWIZZLE_R              0x8E42
#define GL_TEXTURE_SWIZZLE_G              0x8E43
#define GL_TEXTURE_SWIZZLE_B              0x8E44
#define GL_TEXTURE_SWIZZLE_A              0x8E45
#define GL_GREEN                          0x1904
#define GL_BLUE                           0x1905
#define GL_INT_2_10_10_10_REV             0x8D9F
#define GL_TRANSFORM_FEEDBACK             0x8E22
#define GL_TRANSFORM_FEEDBACK_PAUSED      0x8E23
#define GL_TRANSFORM_FEEDBACK_ACTIVE      0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING     0x8E25
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH          0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS     0x87FE
#define GL_PROGRAM_BINARY_FORMATS         0x87FF
#define GL_COMPRESSED_R11_EAC             0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC      0x9271
#define GL_COMPRESSED_RG11_EAC            0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC     0x9273
#define GL_COMPRESSED_RGB8_ETC2           0x9274
#define GL_COMPRESSED_SRGB8_ETC2          0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC      0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_TEXTURE_IMMUTABLE_FORMAT       0x912F
#define GL_MAX_ELEMENT_INDEX              0x8D6B
#define GL_NUM_SAMPLE_COUNTS              0x9380
#define GL_TEXTURE_IMMUTABLE_LEVELS       0x82DF
#endif /* GL_ES_VERSION_3_0 */

#ifdef ANYGL_ES_VERSION_3_1
#define GL_COMPUTE_SHADER                 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS     0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS     0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS    0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT   0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE    0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE        0x8267
#define GL_DISPATCH_INDIRECT_BUFFER       0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT             0x00000020
#define GL_DRAW_INDIRECT_BUFFER           0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING   0x8F43
#define GL_MAX_UNIFORM_LOCATIONS          0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH      0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT     0x9311
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES    0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH          0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT         0x9316
#define GL_MAX_FRAMEBUFFER_SAMPLES        0x9318
#define GL_UNIFORM                        0x92E1
#define GL_UNIFORM_BLOCK                  0x92E2
#define GL_PROGRAM_INPUT                  0x92E3
#define GL_PROGRAM_OUTPUT                 0x92E4
#define GL_BUFFER_VARIABLE                0x92E5
#define GL_SHADER_STORAGE_BLOCK           0x92E6
#define GL_ATOMIC_COUNTER_BUFFER          0x92C0
#define GL_TRANSFORM_FEEDBACK_VARYING     0x92F4
#define GL_ACTIVE_RESOURCES               0x92F5
#define GL_MAX_NAME_LENGTH                0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES       0x92F7
#define GL_NAME_LENGTH                    0x92F9
#define GL_TYPE                           0x92FA
#define GL_ARRAY_SIZE                     0x92FB
#define GL_OFFSET                         0x92FC
#define GL_BLOCK_INDEX                    0x92FD
#define GL_ARRAY_STRIDE                   0x92FE
#define GL_MATRIX_STRIDE                  0x92FF
#define GL_IS_ROW_MAJOR                   0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX    0x9301
#define GL_BUFFER_BINDING                 0x9302
#define GL_BUFFER_DATA_SIZE               0x9303
#define GL_NUM_ACTIVE_VARIABLES           0x9304
#define GL_ACTIVE_VARIABLES               0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER    0x9306
#define GL_REFERENCED_BY_FRAGMENT_SHADER  0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER   0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE           0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE         0x930D
#define GL_LOCATION                       0x930E
#define GL_VERTEX_SHADER_BIT              0x00000001
#define GL_FRAGMENT_SHADER_BIT            0x00000002
#define GL_ALL_SHADER_BITS                0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE              0x8258
#define GL_ACTIVE_PROGRAM                 0x8259
#define GL_PROGRAM_PIPELINE_BINDING       0x825A
#define GL_ATOMIC_COUNTER_BUFFER_BINDING  0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START    0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE     0x92C3
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS     0x92D2
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS   0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS   0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  0x92D9
#define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB
#define GL_MAX_IMAGE_UNITS                0x8F38
#define GL_MAX_VERTEX_IMAGE_UNIFORMS      0x90CA
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS    0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS    0x90CF
#define GL_IMAGE_BINDING_NAME             0x8F3A
#define GL_IMAGE_BINDING_LEVEL            0x8F3B
#define GL_IMAGE_BINDING_LAYERED          0x8F3C
#define GL_IMAGE_BINDING_LAYER            0x8F3D
#define GL_IMAGE_BINDING_ACCESS           0x8F3E
#define GL_IMAGE_BINDING_FORMAT           0x906E
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002
#define GL_UNIFORM_BARRIER_BIT            0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT            0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000
#define GL_ALL_BARRIER_BITS               0xFFFFFFFF
#define GL_IMAGE_2D                       0x904D
#define GL_IMAGE_3D                       0x904E
#define GL_IMAGE_CUBE                     0x9050
#define GL_IMAGE_2D_ARRAY                 0x9053
#define GL_INT_IMAGE_2D                   0x9058
#define GL_INT_IMAGE_3D                   0x9059
#define GL_INT_IMAGE_CUBE                 0x905B
#define GL_INT_IMAGE_2D_ARRAY             0x905E
#define GL_UNSIGNED_INT_IMAGE_2D          0x9063
#define GL_UNSIGNED_INT_IMAGE_3D          0x9064
#define GL_UNSIGNED_INT_IMAGE_CUBE        0x9066
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY    0x9069
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_READ_ONLY                      0x88B8
#define GL_WRITE_ONLY                     0x88B9
#define GL_READ_WRITE                     0x88BA
#define GL_SHADER_STORAGE_BUFFER          0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING  0x90D3
#define GL_SHADER_STORAGE_BUFFER_START    0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE     0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT     0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE     0x90EA
#define GL_STENCIL_INDEX                  0x1901
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_SAMPLE_POSITION                0x8E50
#define GL_SAMPLE_MASK                    0x8E51
#define GL_SAMPLE_MASK_VALUE              0x8E52
#define GL_TEXTURE_2D_MULTISAMPLE         0x9100
#define GL_MAX_SAMPLE_MASK_WORDS          0x8E59
#define GL_MAX_COLOR_TEXTURE_SAMPLES      0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES      0x910F
#define GL_MAX_INTEGER_SAMPLES            0x9110
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_SAMPLES                0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_WIDTH                  0x1000
#define GL_TEXTURE_HEIGHT                 0x1001
#define GL_TEXTURE_DEPTH                  0x8071
#define GL_TEXTURE_INTERNAL_FORMAT        0x1003
#define GL_TEXTURE_RED_SIZE               0x805C
#define GL_TEXTURE_GREEN_SIZE             0x805D
#define GL_TEXTURE_BLUE_SIZE              0x805E
#define GL_TEXTURE_ALPHA_SIZE             0x805F
#define GL_TEXTURE_DEPTH_SIZE             0x884A
#define GL_TEXTURE_STENCIL_SIZE           0x88F1
#define GL_TEXTURE_SHARED_SIZE            0x8C3F
#define GL_TEXTURE_RED_TYPE               0x8C10
#define GL_TEXTURE_GREEN_TYPE             0x8C11
#define GL_TEXTURE_BLUE_TYPE              0x8C12
#define GL_TEXTURE_ALPHA_TYPE             0x8C13
#define GL_TEXTURE_DEPTH_TYPE             0x8C16
#define GL_TEXTURE_COMPRESSED             0x86A1
#define GL_SAMPLER_2D_MULTISAMPLE         0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_VERTEX_ATTRIB_BINDING          0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET  0x82D5
#define GL_VERTEX_BINDING_DIVISOR         0x82D6
#define GL_VERTEX_BINDING_OFFSET          0x82D7
#define GL_VERTEX_BINDING_STRIDE          0x82D8
#define GL_VERTEX_BINDING_BUFFER          0x8F4F
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS     0x82DA
#define GL_MAX_VERTEX_ATTRIB_STRIDE       0x82E5
#endif /* GL_ES_VERSION_3_1 */

#ifdef ANYGL_ES_VERSION_3_2
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE   0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTIPLY                       0x9294
#define GL_SCREEN                         0x9295
#define GL_OVERLAY                        0x9296
#define GL_DARKEN                         0x9297
#define GL_LIGHTEN                        0x9298
#define GL_COLORDODGE                     0x9299
#define GL_COLORBURN                      0x929A
#define GL_HARDLIGHT                      0x929B
#define GL_SOFTLIGHT                      0x929C
#define GL_DIFFERENCE                     0x929E
#define GL_EXCLUSION                      0x92A0
#define GL_HSL_HUE                        0x92AD
#define GL_HSL_SATURATION                 0x92AE
#define GL_HSL_COLOR                      0x92AF
#define GL_HSL_LUMINOSITY                 0x92B0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS       0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION        0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM      0x8245
#define GL_DEBUG_SOURCE_API               0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM     0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER   0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY       0x8249
#define GL_DEBUG_SOURCE_APPLICATION       0x824A
#define GL_DEBUG_SOURCE_OTHER             0x824B
#define GL_DEBUG_TYPE_ERROR               0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR  0x824E
#define GL_DEBUG_TYPE_PORTABILITY         0x824F
#define GL_DEBUG_TYPE_PERFORMANCE         0x8250
#define GL_DEBUG_TYPE_OTHER               0x8251
#define GL_DEBUG_TYPE_MARKER              0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP          0x8269
#define GL_DEBUG_TYPE_POP_GROUP           0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION    0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH    0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH        0x826D
#define GL_BUFFER                         0x82E0
#define GL_SHADER                         0x82E1
#define GL_PROGRAM                        0x82E2
#define GL_VERTEX_ARRAY                   0x8074
#define GL_QUERY                          0x82E3
#define GL_PROGRAM_PIPELINE               0x82E4
#define GL_SAMPLER                        0x82E6
#define GL_MAX_LABEL_LENGTH               0x82E8
#define GL_MAX_DEBUG_MESSAGE_LENGTH       0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES      0x9144
#define GL_DEBUG_LOGGED_MESSAGES          0x9145
#define GL_DEBUG_SEVERITY_HIGH            0x9146
#define GL_DEBUG_SEVERITY_MEDIUM          0x9147
#define GL_DEBUG_SEVERITY_LOW             0x9148
#define GL_DEBUG_OUTPUT                   0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT         0x00000002
#define GL_STACK_OVERFLOW                 0x0503
#define GL_STACK_UNDERFLOW                0x0504
#define GL_GEOMETRY_SHADER                0x8DD9
#define GL_GEOMETRY_SHADER_BIT            0x00000004
#define GL_GEOMETRY_VERTICES_OUT          0x8916
#define GL_GEOMETRY_INPUT_TYPE            0x8917
#define GL_GEOMETRY_OUTPUT_TYPE           0x8918
#define GL_GEOMETRY_SHADER_INVOCATIONS    0x887F
#define GL_LAYER_PROVOKING_VERTEX         0x825E
#define GL_LINES_ADJACENCY                0x000A
#define GL_LINE_STRIP_ADJACENCY           0x000B
#define GL_TRIANGLES_ADJACENCY            0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY       0x000D
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS    0x8A2C
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS  0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES   0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS   0x92D5
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS    0x90CD
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_FIRST_VERTEX_CONVENTION        0x8E4D
#define GL_LAST_VERTEX_CONVENTION         0x8E4E
#define GL_UNDEFINED_VERTEX               0x8260
#define GL_PRIMITIVES_GENERATED           0x8C87
#define GL_FRAMEBUFFER_DEFAULT_LAYERS     0x9312
#define GL_MAX_FRAMEBUFFER_LAYERS         0x9317
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_REFERENCED_BY_GEOMETRY_SHADER  0x9309
#define GL_PRIMITIVE_BOUNDING_BOX         0x92BE
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAGS                  0x821E
#define GL_LOSE_CONTEXT_ON_RESET          0x8252
#define GL_GUILTY_CONTEXT_RESET           0x8253
#define GL_INNOCENT_CONTEXT_RESET         0x8254
#define GL_UNKNOWN_CONTEXT_RESET          0x8255
#define GL_RESET_NOTIFICATION_STRATEGY    0x8256
#define GL_NO_RESET_NOTIFICATION          0x8261
#define GL_CONTEXT_LOST                   0x0507
#define GL_SAMPLE_SHADING                 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE       0x8C37
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_PATCHES                        0x000E
#define GL_PATCH_VERTICES                 0x8E72
#define GL_TESS_CONTROL_OUTPUT_VERTICES   0x8E75
#define GL_TESS_GEN_MODE                  0x8E76
#define GL_TESS_GEN_SPACING               0x8E77
#define GL_TESS_GEN_VERTEX_ORDER          0x8E78
#define GL_TESS_GEN_POINT_MODE            0x8E79
#define GL_ISOLINES                       0x8E7A
#define GL_QUADS                          0x0007
#define GL_FRACTIONAL_ODD                 0x8E7B
#define GL_FRACTIONAL_EVEN                0x8E7C
#define GL_MAX_PATCH_VERTICES             0x8E7D
#define GL_MAX_TESS_GEN_LEVEL             0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS      0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_IS_PER_PATCH                   0x92E7
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_TESS_CONTROL_SHADER            0x8E88
#define GL_TESS_EVALUATION_SHADER         0x8E87
#define GL_TESS_CONTROL_SHADER_BIT        0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT     0x00000010
#define GL_TEXTURE_BORDER_COLOR           0x1004
#define GL_CLAMP_TO_BORDER                0x812D
#define GL_TEXTURE_BUFFER                 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING         0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE        0x8C2B
#define GL_TEXTURE_BINDING_BUFFER         0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_SAMPLER_BUFFER                 0x8DC2
#define GL_INT_SAMPLER_BUFFER             0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8
#define GL_IMAGE_BUFFER                   0x9051
#define GL_INT_IMAGE_BUFFER               0x905C
#define GL_UNSIGNED_INT_IMAGE_BUFFER      0x9067
#define GL_TEXTURE_BUFFER_OFFSET          0x919D
#define GL_TEXTURE_BUFFER_SIZE            0x919E
#define GL_COMPRESSED_RGBA_ASTC_4x4       0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4       0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5       0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5       0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6       0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5       0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6       0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8       0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5      0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6      0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8      0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10     0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10     0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12     0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_TEXTURE_CUBE_MAP_ARRAY         0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_IMAGE_CUBE_MAP_ARRAY           0x9054
#define GL_INT_IMAGE_CUBE_MAP_ARRAY       0x905F
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY   0x9102
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#endif /* GL_ES_VERSION_3_2 */

#ifdef ANYGL_VERSION_1_0
#define GL_FRONT_LEFT                     0x0400
#define GL_FRONT_RIGHT                    0x0401
#define GL_BACK_LEFT                      0x0402
#define GL_BACK_RIGHT                     0x0403
#define GL_LEFT                           0x0406
#define GL_RIGHT                          0x0407
#define GL_POINT_SIZE                     0x0B11
#define GL_POINT_SIZE_RANGE               0x0B12
#define GL_POINT_SIZE_GRANULARITY         0x0B13
#define GL_LINE_SMOOTH                    0x0B20
#define GL_LINE_WIDTH_RANGE               0x0B22
#define GL_LINE_WIDTH_GRANULARITY         0x0B23
#define GL_POLYGON_MODE                   0x0B40
#define GL_POLYGON_SMOOTH                 0x0B41
#define GL_BLEND_DST                      0x0BE0
#define GL_BLEND_SRC                      0x0BE1
#define GL_LOGIC_OP_MODE                  0x0BF0
#define GL_DRAW_BUFFER                    0x0C01
#define GL_DOUBLEBUFFER                   0x0C32
#define GL_STEREO                         0x0C33
#define GL_LINE_SMOOTH_HINT               0x0C52
#define GL_POLYGON_SMOOTH_HINT            0x0C53
#define GL_UNPACK_SWAP_BYTES              0x0CF0
#define GL_UNPACK_LSB_FIRST               0x0CF1
#define GL_PACK_SWAP_BYTES                0x0D00
#define GL_PACK_LSB_FIRST                 0x0D01
#define GL_TEXTURE_1D                     0x0DE0
#define GL_CLEAR                          0x1500
#define GL_AND                            0x1501
#define GL_AND_REVERSE                    0x1502
#define GL_COPY                           0x1503
#define GL_AND_INVERTED                   0x1504
#define GL_NOOP                           0x1505
#define GL_XOR                            0x1506
#define GL_OR                             0x1507
#define GL_NOR                            0x1508
#define GL_EQUIV                          0x1509
#define GL_OR_REVERSE                     0x150B
#define GL_COPY_INVERTED                  0x150C
#define GL_OR_INVERTED                    0x150D
#define GL_NAND                           0x150E
#define GL_SET                            0x150F
#define GL_POINT                          0x1B00
#define GL_LINE                           0x1B01
#define GL_FILL                           0x1B02
#define GL_CURRENT_BIT                    0x00000001
#define GL_POINT_BIT                      0x00000002
#define GL_LINE_BIT                       0x00000004
#define GL_POLYGON_BIT                    0x00000008
#define GL_POLYGON_STIPPLE_BIT            0x00000010
#define GL_PIXEL_MODE_BIT                 0x00000020
#define GL_LIGHTING_BIT                   0x00000040
#define GL_FOG_BIT                        0x00000080
#define GL_ACCUM_BUFFER_BIT               0x00000200
#define GL_VIEWPORT_BIT                   0x00000800
#define GL_TRANSFORM_BIT                  0x00001000
#define GL_ENABLE_BIT                     0x00002000
#define GL_HINT_BIT                       0x00008000
#define GL_EVAL_BIT                       0x00010000
#define GL_LIST_BIT                       0x00020000
#define GL_TEXTURE_BIT                    0x00040000
#define GL_SCISSOR_BIT                    0x00080000
#define GL_ALL_ATTRIB_BITS                0xFFFFFFFF
#define GL_QUAD_STRIP                     0x0008
#define GL_POLYGON                        0x0009
#define GL_ACCUM                          0x0100
#define GL_LOAD                           0x0101
#define GL_RETURN                         0x0102
#define GL_MULT                           0x0103
#define GL_ADD                            0x0104
#define GL_AUX0                           0x0409
#define GL_AUX1                           0x040A
#define GL_AUX2                           0x040B
#define GL_AUX3                           0x040C
#define GL_2D                             0x0600
#define GL_3D                             0x0601
#define GL_3D_COLOR                       0x0602
#define GL_3D_COLOR_TEXTURE               0x0603
#define GL_4D_COLOR_TEXTURE               0x0604
#define GL_PASS_THROUGH_TOKEN             0x0700
#define GL_POINT_TOKEN                    0x0701
#define GL_LINE_TOKEN                     0x0702
#define GL_POLYGON_TOKEN                  0x0703
#define GL_BITMAP_TOKEN                   0x0704
#define GL_DRAW_PIXEL_TOKEN               0x0705
#define GL_COPY_PIXEL_TOKEN               0x0706
#define GL_LINE_RESET_TOKEN               0x0707
#define GL_EXP                            0x0800
#define GL_EXP2                           0x0801
#define GL_COEFF                          0x0A00
#define GL_ORDER                          0x0A01
#define GL_DOMAIN                         0x0A02
#define GL_PIXEL_MAP_I_TO_I               0x0C70
#define GL_PIXEL_MAP_S_TO_S               0x0C71
#define GL_PIXEL_MAP_I_TO_R               0x0C72
#define GL_PIXEL_MAP_I_TO_G               0x0C73
#define GL_PIXEL_MAP_I_TO_B               0x0C74
#define GL_PIXEL_MAP_I_TO_A               0x0C75
#define GL_PIXEL_MAP_R_TO_R               0x0C76
#define GL_PIXEL_MAP_G_TO_G               0x0C77
#define GL_PIXEL_MAP_B_TO_B               0x0C78
#define GL_PIXEL_MAP_A_TO_A               0x0C79
#define GL_CURRENT_COLOR                  0x0B00
#define GL_CURRENT_INDEX                  0x0B01
#define GL_CURRENT_NORMAL                 0x0B02
#define GL_CURRENT_TEXTURE_COORDS         0x0B03
#define GL_CURRENT_RASTER_COLOR           0x0B04
#define GL_CURRENT_RASTER_INDEX           0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS  0x0B06
#define GL_CURRENT_RASTER_POSITION        0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID  0x0B08
#define GL_CURRENT_RASTER_DISTANCE        0x0B09
#define GL_POINT_SMOOTH                   0x0B10
#define GL_LINE_STIPPLE                   0x0B24
#define GL_LINE_STIPPLE_PATTERN           0x0B25
#define GL_LINE_STIPPLE_REPEAT            0x0B26
#define GL_LIST_MODE                      0x0B30
#define GL_MAX_LIST_NESTING               0x0B31
#define GL_LIST_BASE                      0x0B32
#define GL_LIST_INDEX                     0x0B33
#define GL_POLYGON_STIPPLE                0x0B42
#define GL_EDGE_FLAG                      0x0B43
#define GL_LIGHTING                       0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER       0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE           0x0B52
#define GL_LIGHT_MODEL_AMBIENT            0x0B53
#define GL_SHADE_MODEL                    0x0B54
#define GL_COLOR_MATERIAL_FACE            0x0B55
#define GL_COLOR_MATERIAL_PARAMETER       0x0B56
#define GL_COLOR_MATERIAL                 0x0B57
#define GL_FOG                            0x0B60
#define GL_FOG_INDEX                      0x0B61
#define GL_FOG_DENSITY                    0x0B62
#define GL_FOG_START                      0x0B63
#define GL_FOG_END                        0x0B64
#define GL_FOG_MODE                       0x0B65
#define GL_FOG_COLOR                      0x0B66
#define GL_ACCUM_CLEAR_VALUE              0x0B80
#define GL_MATRIX_MODE                    0x0BA0
#define GL_NORMALIZE                      0x0BA1
#define GL_MODELVIEW_STACK_DEPTH          0x0BA3
#define GL_PROJECTION_STACK_DEPTH         0x0BA4
#define GL_TEXTURE_STACK_DEPTH            0x0BA5
#define GL_MODELVIEW_MATRIX               0x0BA6
#define GL_PROJECTION_MATRIX              0x0BA7
#define GL_TEXTURE_MATRIX                 0x0BA8
#define GL_ATTRIB_STACK_DEPTH             0x0BB0
#define GL_ALPHA_TEST                     0x0BC0
#define GL_ALPHA_TEST_FUNC                0x0BC1
#define GL_ALPHA_TEST_REF                 0x0BC2
#define GL_LOGIC_OP                       0x0BF1
#define GL_AUX_BUFFERS                    0x0C00
#define GL_INDEX_CLEAR_VALUE              0x0C20
#define GL_INDEX_WRITEMASK                0x0C21
#define GL_INDEX_MODE                     0x0C30
#define GL_RGBA_MODE                      0x0C31
#define GL_RENDER_MODE                    0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT    0x0C50
#define GL_POINT_SMOOTH_HINT              0x0C51
#define GL_FOG_HINT                       0x0C54
#define GL_TEXTURE_GEN_S                  0x0C60
#define GL_TEXTURE_GEN_T                  0x0C61
#define GL_TEXTURE_GEN_R                  0x0C62
#define GL_TEXTURE_GEN_Q                  0x0C63
#define GL_PIXEL_MAP_I_TO_I_SIZE          0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE          0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE          0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE          0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE          0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE          0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE          0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE          0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE          0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE          0x0CB9
#define GL_MAP_COLOR                      0x0D10
#define GL_MAP_STENCIL                    0x0D11
#define GL_INDEX_SHIFT                    0x0D12
#define GL_INDEX_OFFSET                   0x0D13
#define GL_RED_SCALE                      0x0D14
#define GL_RED_BIAS                       0x0D15
#define GL_ZOOM_X                         0x0D16
#define GL_ZOOM_Y                         0x0D17
#define GL_GREEN_SCALE                    0x0D18
#define GL_GREEN_BIAS                     0x0D19
#define GL_BLUE_SCALE                     0x0D1A
#define GL_BLUE_BIAS                      0x0D1B
#define GL_ALPHA_SCALE                    0x0D1C
#define GL_ALPHA_BIAS                     0x0D1D
#define GL_DEPTH_SCALE                    0x0D1E
#define GL_DEPTH_BIAS                     0x0D1F
#define GL_MAX_EVAL_ORDER                 0x0D30
#define GL_MAX_LIGHTS                     0x0D31
#define GL_MAX_CLIP_PLANES                0x0D32
#define GL_MAX_PIXEL_MAP_TABLE            0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH         0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH      0x0D36
#define GL_MAX_NAME_STACK_DEPTH           0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH     0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH        0x0D39
#define GL_INDEX_BITS                     0x0D51
#define GL_ACCUM_RED_BITS                 0x0D58
#define GL_ACCUM_GREEN_BITS               0x0D59
#define GL_ACCUM_BLUE_BITS                0x0D5A
#define GL_ACCUM_ALPHA_BITS               0x0D5B
#define GL_NAME_STACK_DEPTH               0x0D70
#define GL_AUTO_NORMAL                    0x0D80
#define GL_MAP1_COLOR_4                   0x0D90
#define GL_MAP1_INDEX                     0x0D91
#define GL_MAP1_NORMAL                    0x0D92
#define GL_MAP1_TEXTURE_COORD_1           0x0D93
#define GL_MAP1_TEXTURE_COORD_2           0x0D94
#define GL_MAP1_TEXTURE_COORD_3           0x0D95
#define GL_MAP1_TEXTURE_COORD_4           0x0D96
#define GL_MAP1_VERTEX_3                  0x0D97
#define GL_MAP1_VERTEX_4                  0x0D98
#define GL_MAP2_COLOR_4                   0x0DB0
#define GL_MAP2_INDEX                     0x0DB1
#define GL_MAP2_NORMAL                    0x0DB2
#define GL_MAP2_TEXTURE_COORD_1           0x0DB3
#define GL_MAP2_TEXTURE_COORD_2           0x0DB4
#define GL_MAP2_TEXTURE_COORD_3           0x0DB5
#define GL_MAP2_TEXTURE_COORD_4           0x0DB6
#define GL_MAP2_VERTEX_3                  0x0DB7
#define GL_MAP2_VERTEX_4                  0x0DB8
#define GL_MAP1_GRID_DOMAIN               0x0DD0
#define GL_MAP1_GRID_SEGMENTS             0x0DD1
#define GL_MAP2_GRID_DOMAIN               0x0DD2
#define GL_MAP2_GRID_SEGMENTS             0x0DD3
#define GL_TEXTURE_COMPONENTS             0x1003
#define GL_TEXTURE_BORDER                 0x1005
#define GL_AMBIENT                        0x1200
#define GL_DIFFUSE                        0x1201
#define GL_SPECULAR                       0x1202
#define GL_POSITION                       0x1203
#define GL_SPOT_DIRECTION                 0x1204
#define GL_SPOT_EXPONENT                  0x1205
#define GL_SPOT_CUTOFF                    0x1206
#define GL_CONSTANT_ATTENUATION           0x1207
#define GL_LINEAR_ATTENUATION             0x1208
#define GL_QUADRATIC_ATTENUATION          0x1209
#define GL_COMPILE                        0x1300
#define GL_COMPILE_AND_EXECUTE            0x1301
#define GL_2_BYTES                        0x1407
#define GL_3_BYTES                        0x1408
#define GL_4_BYTES                        0x1409
#define GL_EMISSION                       0x1600
#define GL_SHININESS                      0x1601
#define GL_AMBIENT_AND_DIFFUSE            0x1602
#define GL_COLOR_INDEXES                  0x1603
#define GL_MODELVIEW                      0x1700
#define GL_PROJECTION                     0x1701
#define GL_COLOR_INDEX                    0x1900
#define GL_BITMAP                         0x1A00
#define GL_RENDER                         0x1C00
#define GL_FEEDBACK                       0x1C01
#define GL_SELECT                         0x1C02
#define GL_FLAT                           0x1D00
#define GL_SMOOTH                         0x1D01
#define GL_S                              0x2000
#define GL_T                              0x2001
#define GL_R                              0x2002
#define GL_Q                              0x2003
#define GL_MODULATE                       0x2100
#define GL_DECAL                          0x2101
#define GL_TEXTURE_ENV_MODE               0x2200
#define GL_TEXTURE_ENV_COLOR              0x2201
#define GL_TEXTURE_ENV                    0x2300
#define GL_EYE_LINEAR                     0x2400
#define GL_OBJECT_LINEAR                  0x2401
#define GL_SPHERE_MAP                     0x2402
#define GL_TEXTURE_GEN_MODE               0x2500
#define GL_OBJECT_PLANE                   0x2501
#define GL_EYE_PLANE                      0x2502
#define GL_CLAMP                          0x2900
#define GL_CLIP_PLANE0                    0x3000
#define GL_CLIP_PLANE1                    0x3001
#define GL_CLIP_PLANE2                    0x3002
#define GL_CLIP_PLANE3                    0x3003
#define GL_CLIP_PLANE4                    0x3004
#define GL_CLIP_PLANE5                    0x3005
#define GL_LIGHT0                         0x4000
#define GL_LIGHT1                         0x4001
#define GL_LIGHT2                         0x4002
#define GL_LIGHT3                         0x4003
#define GL_LIGHT4                         0x4004
#define GL_LIGHT5                         0x4005
#define GL_LIGHT6                         0x4006
#define GL_LIGHT7                         0x4007
#endif /* GL_VERSION_1_0 */

#ifdef ANYGL_VERSION_1_1
#define GL_COLOR_LOGIC_OP                 0x0BF2
#define GL_POLYGON_OFFSET_POINT           0x2A01
#define GL_POLYGON_OFFSET_LINE            0x2A02
#define GL_TEXTURE_BINDING_1D             0x8068
#define GL_DOUBLE                         0x140A
#define GL_PROXY_TEXTURE_1D               0x8063
#define GL_PROXY_TEXTURE_2D               0x8064
#define GL_R3_G3_B2                       0x2A10
#define GL_RGB4                           0x804F
#define GL_RGB5                           0x8050
#define GL_RGB10                          0x8052
#define GL_RGB12                          0x8053
#define GL_RGB16                          0x8054
#define GL_RGBA2                          0x8055
#define GL_RGBA12                         0x805A
#define GL_RGBA16                         0x805B
#define GL_CLIENT_PIXEL_STORE_BIT         0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT        0x00000002
#define GL_CLIENT_ALL_ATTRIB_BITS         0xFFFFFFFF
#define GL_VERTEX_ARRAY_POINTER           0x808E
#define GL_NORMAL_ARRAY_POINTER           0x808F
#define GL_COLOR_ARRAY_POINTER            0x8090
#define GL_INDEX_ARRAY_POINTER            0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER    0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER        0x8093
#define GL_FEEDBACK_BUFFER_POINTER        0x0DF0
#define GL_SELECTION_BUFFER_POINTER       0x0DF3
#define GL_CLIENT_ATTRIB_STACK_DEPTH      0x0BB1
#define GL_INDEX_LOGIC_OP                 0x0BF1
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH  0x0D3B
#define GL_FEEDBACK_BUFFER_SIZE           0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE           0x0DF2
#define GL_SELECTION_BUFFER_SIZE          0x0DF4
#define GL_NORMAL_ARRAY                   0x8075
#define GL_COLOR_ARRAY                    0x8076
#define GL_INDEX_ARRAY                    0x8077
#define GL_TEXTURE_COORD_ARRAY            0x8078
#define GL_EDGE_FLAG_ARRAY                0x8079
#define GL_VERTEX_ARRAY_SIZE              0x807A
#define GL_VERTEX_ARRAY_TYPE              0x807B
#define GL_VERTEX_ARRAY_STRIDE            0x807C
#define GL_NORMAL_ARRAY_TYPE              0x807E
#define GL_NORMAL_ARRAY_STRIDE            0x807F
#define GL_COLOR_ARRAY_SIZE               0x8081
#define GL_COLOR_ARRAY_TYPE               0x8082
#define GL_COLOR_ARRAY_STRIDE             0x8083
#define GL_INDEX_ARRAY_TYPE               0x8085
#define GL_INDEX_ARRAY_STRIDE             0x8086
#define GL_TEXTURE_COORD_ARRAY_SIZE       0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE       0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE     0x808A
#define GL_EDGE_FLAG_ARRAY_STRIDE         0x808C
#define GL_TEXTURE_LUMINANCE_SIZE         0x8060
#define GL_TEXTURE_INTENSITY_SIZE         0x8061
#define GL_TEXTURE_PRIORITY               0x8066
#define GL_TEXTURE_RESIDENT               0x8067
#define GL_ALPHA4                         0x803B
#define GL_ALPHA8                         0x803C
#define GL_ALPHA12                        0x803D
#define GL_ALPHA16                        0x803E
#define GL_LUMINANCE4                     0x803F
#define GL_LUMINANCE8                     0x8040
#define GL_LUMINANCE12                    0x8041
#define GL_LUMINANCE16                    0x8042
#define GL_LUMINANCE4_ALPHA4              0x8043
#define GL_LUMINANCE6_ALPHA2              0x8044
#define GL_LUMINANCE8_ALPHA8              0x8045
#define GL_LUMINANCE12_ALPHA4             0x8046
#define GL_LUMINANCE12_ALPHA12            0x8047
#define GL_LUMINANCE16_ALPHA16            0x8048
#define GL_INTENSITY                      0x8049
#define GL_INTENSITY4                     0x804A
#define GL_INTENSITY8                     0x804B
#define GL_INTENSITY12                    0x804C
#define GL_INTENSITY16                    0x804D
#define GL_V2F                            0x2A20
#define GL_V3F                            0x2A21
#define GL_C4UB_V2F                       0x2A22
#define GL_C4UB_V3F                       0x2A23
#define GL_C3F_V3F                        0x2A24
#define GL_N3F_V3F                        0x2A25
#define GL_C4F_N3F_V3F                    0x2A26
#define GL_T2F_V3F                        0x2A27
#define GL_T4F_V4F                        0x2A28
#define GL_T2F_C4UB_V3F                   0x2A29
#define GL_T2F_C3F_V3F                    0x2A2A
#define GL_T2F_N3F_V3F                    0x2A2B
#define GL_T2F_C4F_N3F_V3F                0x2A2C
#define GL_T4F_C4F_N3F_V4F                0x2A2D
#endif /* GL_VERSION_1_1 */

#ifdef ANYGL_VERSION_1_2
#define GL_UNSIGNED_BYTE_3_3_2            0x8032
#define GL_UNSIGNED_INT_8_8_8_8           0x8035
#define GL_UNSIGNED_INT_10_10_10_2        0x8036
#define GL_PACK_SKIP_IMAGES               0x806B
#define GL_PACK_IMAGE_HEIGHT              0x806C
#define GL_PROXY_TEXTURE_3D               0x8070
#define GL_UNSIGNED_BYTE_2_3_3_REV        0x8362
#define GL_UNSIGNED_SHORT_5_6_5_REV       0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV     0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV     0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV       0x8367
#define GL_BGR                            0x80E0
#define GL_BGRA                           0x80E1
#define GL_SMOOTH_POINT_SIZE_RANGE        0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY  0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE        0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY  0x0B23
#define GL_RESCALE_NORMAL                 0x803A
#define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8
#define GL_SINGLE_COLOR                   0x81F9
#define GL_SEPARATE_SPECULAR_COLOR        0x81FA
#endif /* GL_VERSION_1_2 */

#ifdef ANYGL_VERSION_1_3
#define GL_MULTISAMPLE                    0x809D
#define GL_SAMPLE_ALPHA_TO_ONE            0x809F
#define GL_PROXY_TEXTURE_CUBE_MAP         0x851B
#define GL_COMPRESSED_RGB                 0x84ED
#define GL_COMPRESSED_RGBA                0x84EE
#define GL_TEXTURE_COMPRESSION_HINT       0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE  0x86A0
#define GL_CLIENT_ACTIVE_TEXTURE          0x84E1
#define GL_MAX_TEXTURE_UNITS              0x84E2
#define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX         0x84E6
#define GL_MULTISAMPLE_BIT                0x20000000
#define GL_NORMAL_MAP                     0x8511
#define GL_REFLECTION_MAP                 0x8512
#define GL_COMPRESSED_ALPHA               0x84E9
#define GL_COMPRESSED_LUMINANCE           0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB
#define GL_COMPRESSED_INTENSITY           0x84EC
#define GL_COMBINE                        0x8570
#define GL_COMBINE_RGB                    0x8571
#define GL_COMBINE_ALPHA                  0x8572
#define GL_SOURCE0_RGB                    0x8580
#define GL_SOURCE1_RGB                    0x8581
#define GL_SOURCE2_RGB                    0x8582
#define GL_SOURCE0_ALPHA                  0x8588
#define GL_SOURCE1_ALPHA                  0x8589
#define GL_SOURCE2_ALPHA                  0x858A
#define GL_OPERAND0_RGB                   0x8590
#define GL_OPERAND1_RGB                   0x8591
#define GL_OPERAND2_RGB                   0x8592
#define GL_OPERAND0_ALPHA                 0x8598
#define GL_OPERAND1_ALPHA                 0x8599
#define GL_OPERAND2_ALPHA                 0x859A
#define GL_RGB_SCALE                      0x8573
#define GL_ADD_SIGNED                     0x8574
#define GL_INTERPOLATE                    0x8575
#define GL_SUBTRACT                       0x84E7
#define GL_CONSTANT                       0x8576
#define GL_PRIMARY_COLOR                  0x8577
#define GL_PREVIOUS                       0x8578
#define GL_DOT3_RGB                       0x86AE
#define GL_DOT3_RGBA                      0x86AF
#endif /* GL_VERSION_1_3 */

#ifdef ANYGL_VERSION_1_4
#define GL_POINT_FADE_THRESHOLD_SIZE      0x8128
#define GL_DEPTH_COMPONENT32              0x81A7
#define GL_TEXTURE_LOD_BIAS               0x8501
#define GL_POINT_SIZE_MIN                 0x8126
#define GL_POINT_SIZE_MAX                 0x8127
#define GL_POINT_DISTANCE_ATTENUATION     0x8129
#define GL_GENERATE_MIPMAP                0x8191
#define GL_FOG_COORDINATE_SOURCE          0x8450
#define GL_FOG_COORDINATE                 0x8451
#define GL_FRAGMENT_DEPTH                 0x8452
#define GL_CURRENT_FOG_COORDINATE         0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE      0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE    0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER   0x8456
#define GL_FOG_COORDINATE_ARRAY           0x8457
#define GL_COLOR_SUM                      0x8458
#define GL_CURRENT_SECONDARY_COLOR        0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE     0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE     0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE   0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER  0x845D
#define GL_SECONDARY_COLOR_ARRAY          0x845E
#define GL_TEXTURE_FILTER_CONTROL         0x8500
#define GL_DEPTH_TEXTURE_MODE             0x884B
#define GL_COMPARE_R_TO_TEXTURE           0x884E
#endif /* GL_VERSION_1_4 */

#ifdef ANYGL_VERSION_1_5
#define GL_QUERY_COUNTER_BITS             0x8864
#define GL_BUFFER_ACCESS                  0x88BB
#define GL_SAMPLES_PASSED                 0x8914
#define GL_SRC1_ALPHA                     0x8589
#define GL_VERTEX_ARRAY_BUFFER_BINDING    0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING    0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING     0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING     0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING    0x889E
#define GL_FOG_COORD_SRC                  0x8450
#define GL_FOG_COORD                      0x8451
#define GL_CURRENT_FOG_COORD              0x8453
#define GL_FOG_COORD_ARRAY_TYPE           0x8454
#define GL_FOG_COORD_ARRAY_STRIDE         0x8455
#define GL_FOG_COORD_ARRAY_POINTER        0x8456
#define GL_FOG_COORD_ARRAY                0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_SRC0_RGB                       0x8580
#define GL_SRC1_RGB                       0x8581
#define GL_SRC2_RGB                       0x8582
#define GL_SRC0_ALPHA                     0x8588
#define GL_SRC2_ALPHA                     0x858A
#endif /* GL_VERSION_1_5 */

#ifdef ANYGL_VERSION_2_0
#define GL_VERTEX_PROGRAM_POINT_SIZE      0x8642
#define GL_MAX_VARYING_FLOATS             0x8B4B
#define GL_SAMPLER_1D                     0x8B5D
#define GL_SAMPLER_1D_SHADOW              0x8B61
#define GL_POINT_SPRITE_COORD_ORIGIN      0x8CA0
#define GL_LOWER_LEFT                     0x8CA1
#define GL_UPPER_LEFT                     0x8CA2
#define GL_VERTEX_PROGRAM_TWO_SIDE        0x8643
#define GL_POINT_SPRITE                   0x8861
#define GL_COORD_REPLACE                  0x8862
#define GL_MAX_TEXTURE_COORDS             0x8871
#endif /* GL_VERSION_2_0 */

#ifdef ANYGL_VERSION_2_1
#define GL_SRGB_ALPHA                     0x8C42
#define GL_COMPRESSED_SRGB                0x8C48
#define GL_COMPRESSED_SRGB_ALPHA          0x8C49
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_SLUMINANCE_ALPHA               0x8C44
#define GL_SLUMINANCE8_ALPHA8             0x8C45
#define GL_SLUMINANCE                     0x8C46
#define GL_SLUMINANCE8                    0x8C47
#define GL_COMPRESSED_SLUMINANCE          0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA    0x8C4B
#endif /* GL_VERSION_2_1 */

#ifdef ANYGL_VERSION_3_0
#define GL_CLIP_DISTANCE0                 0x3000
#define GL_CLIP_DISTANCE1                 0x3001
#define GL_CLIP_DISTANCE2                 0x3002
#define GL_CLIP_DISTANCE3                 0x3003
#define GL_CLIP_DISTANCE4                 0x3004
#define GL_CLIP_DISTANCE5                 0x3005
#define GL_CLIP_DISTANCE6                 0x3006
#define GL_CLIP_DISTANCE7                 0x3007
#define GL_MAX_CLIP_DISTANCES             0x0D32
#define GL_COMPRESSED_RED                 0x8225
#define GL_COMPRESSED_RG                  0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CLAMP_READ_COLOR               0x891C
#define GL_FIXED_ONLY                     0x891D
#define GL_TEXTURE_1D_ARRAY               0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY         0x8C19
#define GL_PROXY_TEXTURE_2D_ARRAY         0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY       0x8C1C
#define GL_GREEN_INTEGER                  0x8D95
#define GL_BLUE_INTEGER                   0x8D96
#define GL_BGR_INTEGER                    0x8D9A
#define GL_BGRA_INTEGER                   0x8D9B
#define GL_SAMPLER_1D_ARRAY               0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3
#define GL_INT_SAMPLER_1D                 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY           0x8DCE
#define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6
#define GL_QUERY_WAIT                     0x8E13
#define GL_QUERY_NO_WAIT                  0x8E14
#define GL_QUERY_BY_REGION_WAIT           0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT        0x8E16
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_STENCIL_INDEX1                 0x8D46
#define GL_STENCIL_INDEX4                 0x8D47
#define GL_STENCIL_INDEX16                0x8D49
#define GL_INDEX                          0x8222
#define GL_TEXTURE_LUMINANCE_TYPE         0x8C14
#define GL_TEXTURE_INTENSITY_TYPE         0x8C15
#define GL_FRAMEBUFFER_SRGB               0x8DB9
#define GL_COMPRESSED_RED_RGTC1           0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1    0x8DBC
#define GL_COMPRESSED_RG_RGTC2            0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2     0x8DBE
#define GL_R16                            0x822A
#define GL_RG16                           0x822C
#define GL_CLAMP_VERTEX_COLOR             0x891A
#define GL_CLAMP_FRAGMENT_COLOR           0x891B
#define GL_ALPHA_INTEGER                  0x8D97
#endif /* GL_VERSION_3_0 */

#ifdef ANYGL_VERSION_3_1
#define GL_SAMPLER_2D_RECT                0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW         0x8B64
#define GL_INT_SAMPLER_2D_RECT            0x8DCD
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5
#define GL_TEXTURE_RECTANGLE              0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE      0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE        0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE     0x84F8
#define GL_R16_SNORM                      0x8F98
#define GL_RG16_SNORM                     0x8F99
#define GL_RGB16_SNORM                    0x8F9A
#define GL_RGBA16_SNORM                   0x8F9B
#define GL_PRIMITIVE_RESTART              0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX        0x8F9E
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#endif /* GL_VERSION_3_1 */

#ifdef ANYGL_VERSION_3_2
#define GL_CONTEXT_CORE_PROFILE_BIT       0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_PROGRAM_POINT_SIZE             0x8642
#define GL_CONTEXT_PROFILE_MASK           0x9126
#define GL_DEPTH_CLAMP                    0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_PROVOKING_VERTEX               0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS      0x884F
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE   0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#endif /* GL_VERSION_3_2 */

#ifdef ANYGL_VERSION_3_3
#define GL_SRC1_COLOR                     0x88F9
#define GL_ONE_MINUS_SRC1_COLOR           0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA           0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   0x88FC
#define GL_TEXTURE_SWIZZLE_RGBA           0x8E46
#define GL_TIME_ELAPSED                   0x88BF
#define GL_TIMESTAMP                      0x8E28
#endif /* GL_VERSION_3_3 */

#ifdef ANYGL_VERSION_4_0
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   0x900B
#define GL_MAX_VERTEX_STREAMS             0x8E71
#define GL_DOUBLE_VEC2                    0x8FFC
#define GL_DOUBLE_VEC3                    0x8FFD
#define GL_DOUBLE_VEC4                    0x8FFE
#define GL_DOUBLE_MAT2                    0x8F46
#define GL_DOUBLE_MAT3                    0x8F47
#define GL_DOUBLE_MAT4                    0x8F48
#define GL_DOUBLE_MAT2x3                  0x8F49
#define GL_DOUBLE_MAT2x4                  0x8F4A
#define GL_DOUBLE_MAT3x2                  0x8F4B
#define GL_DOUBLE_MAT3x4                  0x8F4C
#define GL_DOUBLE_MAT4x2                  0x8F4D
#define GL_DOUBLE_MAT4x3                  0x8F4E
#define GL_ACTIVE_SUBROUTINES             0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS     0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH   0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES                0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES     0x8E4A
#define GL_COMPATIBLE_SUBROUTINES         0x8E4B
#define GL_PATCH_DEFAULT_INNER_LEVEL      0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL      0x8E74
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#endif /* GL_VERSION_4_0 */

#ifdef ANYGL_VERSION_4_1
#define GL_MAX_VIEWPORTS                  0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS         0x825C
#define GL_VIEWPORT_BOUNDS_RANGE          0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#endif /* GL_VERSION_4_1 */

#ifdef ANYGL_VERSION_4_2
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH  0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH  0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE   0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH    0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT   0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH    0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE     0x912E
#define GL_MIN_MAP_BUFFER_ALIGNMENT       0x90BC
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_1D                       0x904C
#define GL_IMAGE_2D_RECT                  0x904F
#define GL_IMAGE_1D_ARRAY                 0x9052
#define GL_IMAGE_2D_MULTISAMPLE           0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY     0x9056
#define GL_INT_IMAGE_1D                   0x9057
#define GL_INT_IMAGE_2D_RECT              0x905A
#define GL_INT_IMAGE_1D_ARRAY             0x905D
#define GL_INT_IMAGE_2D_MULTISAMPLE       0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D          0x9062
#define GL_UNSIGNED_INT_IMAGE_2D_RECT     0x9065
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY    0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES              0x906D
#define GL_COMPRESSED_RGBA_BPTC_UNORM     0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#endif /* GL_VERSION_4_2 */

#ifdef ANYGL_VERSION_4_3
#define GL_NUM_SHADING_LANGUAGE_VERSIONS  0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG       0x874E
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_INTERNALFORMAT_SUPPORTED       0x826F
#define GL_INTERNALFORMAT_PREFERRED       0x8270
#define GL_INTERNALFORMAT_RED_SIZE        0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE      0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE       0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE      0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE      0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE    0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE     0x8277
#define GL_INTERNALFORMAT_RED_TYPE        0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE      0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE       0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE      0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE      0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE    0x827D
#define GL_MAX_WIDTH                      0x827E
#define GL_MAX_HEIGHT                     0x827F
#define GL_MAX_DEPTH                      0x8280
#define GL_MAX_LAYERS                     0x8281
#define GL_MAX_COMBINED_DIMENSIONS        0x8282
#define GL_COLOR_COMPONENTS               0x8283
#define GL_DEPTH_COMPONENTS               0x8284
#define GL_STENCIL_COMPONENTS             0x8285
#define GL_COLOR_RENDERABLE               0x8286
#define GL_DEPTH_RENDERABLE               0x8287
#define GL_STENCIL_RENDERABLE             0x8288
#define GL_FRAMEBUFFER_RENDERABLE         0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND              0x828B
#define GL_READ_PIXELS                    0x828C
#define GL_READ_PIXELS_FORMAT             0x828D
#define GL_READ_PIXELS_TYPE               0x828E
#define GL_TEXTURE_IMAGE_FORMAT           0x828F
#define GL_TEXTURE_IMAGE_TYPE             0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT       0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE         0x8292
#define GL_MIPMAP                         0x8293
#define GL_MANUAL_GENERATE_MIPMAP         0x8294
#define GL_AUTO_GENERATE_MIPMAP           0x8295
#define GL_COLOR_ENCODING                 0x8296
#define GL_SRGB_READ                      0x8297
#define GL_SRGB_WRITE                     0x8298
#define GL_FILTER                         0x829A
#define GL_VERTEX_TEXTURE                 0x829B
#define GL_TESS_CONTROL_TEXTURE           0x829C
#define GL_TESS_EVALUATION_TEXTURE        0x829D
#define GL_GEOMETRY_TEXTURE               0x829E
#define GL_FRAGMENT_TEXTURE               0x829F
#define GL_COMPUTE_TEXTURE                0x82A0
#define GL_TEXTURE_SHADOW                 0x82A1
#define GL_TEXTURE_GATHER                 0x82A2
#define GL_TEXTURE_GATHER_SHADOW          0x82A3
#define GL_SHADER_IMAGE_LOAD              0x82A4
#define GL_SHADER_IMAGE_STORE             0x82A5
#define GL_SHADER_IMAGE_ATOMIC            0x82A6
#define GL_IMAGE_TEXEL_SIZE               0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS      0x82A8
#define GL_IMAGE_PIXEL_FORMAT             0x82A9
#define GL_IMAGE_PIXEL_TYPE               0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE  0x82B3
#define GL_CLEAR_BUFFER                   0x82B4
#define GL_TEXTURE_VIEW                   0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS       0x82B6
#define GL_FULL_SUPPORT                   0x82B7
#define GL_CAVEAT_SUPPORT                 0x82B8
#define GL_IMAGE_CLASS_4_X_32             0x82B9
#define GL_IMAGE_CLASS_2_X_32             0x82BA
#define GL_IMAGE_CLASS_1_X_32             0x82BB
#define GL_IMAGE_CLASS_4_X_16             0x82BC
#define GL_IMAGE_CLASS_2_X_16             0x82BD
#define GL_IMAGE_CLASS_1_X_16             0x82BE
#define GL_IMAGE_CLASS_4_X_8              0x82BF
#define GL_IMAGE_CLASS_2_X_8              0x82C0
#define GL_IMAGE_CLASS_1_X_8              0x82C1
#define GL_IMAGE_CLASS_11_11_10           0x82C2
#define GL_IMAGE_CLASS_10_10_10_2         0x82C3
#define GL_VIEW_CLASS_128_BITS            0x82C4
#define GL_VIEW_CLASS_96_BITS             0x82C5
#define GL_VIEW_CLASS_64_BITS             0x82C6
#define GL_VIEW_CLASS_48_BITS             0x82C7
#define GL_VIEW_CLASS_32_BITS             0x82C8
#define GL_VIEW_CLASS_24_BITS             0x82C9
#define GL_VIEW_CLASS_16_BITS             0x82CA
#define GL_VIEW_CLASS_8_BITS              0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB       0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA      0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA      0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA      0x82CF
#define GL_VIEW_CLASS_RGTC1_RED           0x82D0
#define GL_VIEW_CLASS_RGTC2_RG            0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM          0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT          0x82D3
#define GL_VERTEX_SUBROUTINE              0x92E8
#define GL_TESS_CONTROL_SUBROUTINE        0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE     0x92EA
#define GL_GEOMETRY_SUBROUTINE            0x92EB
#define GL_FRAGMENT_SUBROUTINE            0x92EC
#define GL_COMPUTE_SUBROUTINE             0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM      0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM    0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM    0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM     0x92F3
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_LOCATION_INDEX                 0x930F
#define GL_TEXTURE_VIEW_MIN_LEVEL         0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS        0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER         0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS        0x82DE
#define GL_DISPLAY_LIST                   0x82E7
#endif /* GL_VERSION_4_3 */

#ifdef ANYGL_VERSION_4_4
#define GL_MAP_PERSISTENT_BIT             0x0040
#define GL_MAP_COHERENT_BIT               0x0080
#define GL_DYNAMIC_STORAGE_BIT            0x0100
#define GL_CLIENT_STORAGE_BIT             0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE       0x821F
#define GL_BUFFER_STORAGE_FLAGS           0x8220
#define GL_CLEAR_TEXTURE                  0x9365
#define GL_LOCATION_COMPONENT             0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER                   0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT       0x00008000
#define GL_QUERY_BUFFER_BINDING           0x9193
#define GL_QUERY_RESULT_NO_WAIT           0x9194
#define GL_MIRROR_CLAMP_TO_EDGE           0x8743
#endif /* GL_VERSION_4_4 */

#ifdef ANYGL_VERSION_4_5
#define GL_NEGATIVE_ONE_TO_ONE            0x935E
#define GL_ZERO_TO_ONE                    0x935F
#define GL_CLIP_ORIGIN                    0x935C
#define GL_CLIP_DEPTH_MODE                0x935D
#define GL_QUERY_WAIT_INVERTED            0x8E17
#define GL_QUERY_NO_WAIT_INVERTED         0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED  0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES             0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET                 0x1006
#define GL_QUERY_TARGET                   0x82EA
#define GL_COLOR_TABLE                    0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE   0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE  0x80D2
#define GL_PROXY_COLOR_TABLE              0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_CONVOLUTION_1D                 0x8010
#define GL_CONVOLUTION_2D                 0x8011
#define GL_SEPARABLE_2D                   0x8012
#define GL_HISTOGRAM                      0x8024
#define GL_PROXY_HISTOGRAM                0x8025
#define GL_MINMAX                         0x802E
#define GL_CONTEXT_RELEASE_BEHAVIOR       0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#endif /* GL_VERSION_4_5 */

#ifdef ANYGL_VERSION_4_6
#define GL_SHADER_BINARY_FORMAT_SPIR_V    0x9551
#define GL_SPIR_V_BINARY                  0x9552
#define GL_PARAMETER_BUFFER               0x80EE
#define GL_PARAMETER_BUFFER_BINDING       0x80EF
#define GL_CONTEXT_FLAG_NO_ERROR_BIT      0x00000008
#define GL_VERTICES_SUBMITTED             0x82EE
#define GL_PRIMITIVES_SUBMITTED           0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS      0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES    0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS    0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS     0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES      0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES     0x82F7
#define GL_POLYGON_OFFSET_CLAMP           0x8E1B
#define GL_SPIR_V_EXTENSIONS              0x9553
#define GL_NUM_SPIR_V_EXTENSIONS          0x9554
#define GL_TEXTURE_MAX_ANISOTROPY         0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY     0x84FF
#define GL_TRANSFORM_FEEDBACK_OVERFLOW    0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#endif /* GL_VERSION_4_6 */

#ifdef ANYGL_ARB_ES3_2_compatibility
#define GL_PRIMITIVE_BOUNDING_BOX_ARB     0x92BE
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#endif /* GL_ARB_ES3_2_compatibility */

#ifdef ANYGL_ARB_bindless_texture
#define GL_UNSIGNED_INT64_ARB             0x140F
#endif /* GL_ARB_bindless_texture */

#ifdef ANYGL_ARB_cl_event
#define GL_SYNC_CL_EVENT_ARB              0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB     0x8241
#endif /* GL_ARB_cl_event */

#ifdef ANYGL_ARB_color_buffer_float
#define GL_RGBA_FLOAT_MODE_ARB            0x8820
#define GL_CLAMP_VERTEX_COLOR_ARB         0x891A
#define GL_CLAMP_FRAGMENT_COLOR_ARB       0x891B
#define GL_CLAMP_READ_COLOR_ARB           0x891C
#define GL_FIXED_ONLY_ARB                 0x891D
#endif /* GL_ARB_color_buffer_float */

#ifdef ANYGL_ARB_compute_variable_group_size
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#endif /* GL_ARB_compute_variable_group_size */

#ifdef ANYGL_ARB_debug_output
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB   0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_ARB    0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB  0x8245
#define GL_DEBUG_SOURCE_API_ARB           0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB   0x8249
#define GL_DEBUG_SOURCE_APPLICATION_ARB   0x824A
#define GL_DEBUG_SOURCE_OTHER_ARB         0x824B
#define GL_DEBUG_TYPE_ERROR_ARB           0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_PORTABILITY_ARB     0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_ARB     0x8250
#define GL_DEBUG_TYPE_OTHER_ARB           0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB   0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB  0x9144
#define GL_DEBUG_LOGGED_MESSAGES_ARB      0x9145
#define GL_DEBUG_SEVERITY_HIGH_ARB        0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_ARB      0x9147
#define GL_DEBUG_SEVERITY_LOW_ARB         0x9148
#endif /* GL_ARB_debug_output */

#ifdef ANYGL_ARB_depth_texture
#define GL_DEPTH_COMPONENT16_ARB          0x81A5
#define GL_DEPTH_COMPONENT24_ARB          0x81A6
#define GL_DEPTH_COMPONENT32_ARB          0x81A7
#define GL_TEXTURE_DEPTH_SIZE_ARB         0x884A
#define GL_DEPTH_TEXTURE_MODE_ARB         0x884B
#endif /* GL_ARB_depth_texture */

#ifdef ANYGL_ARB_draw_buffers
#define GL_MAX_DRAW_BUFFERS_ARB           0x8824
#define GL_DRAW_BUFFER0_ARB               0x8825
#define GL_DRAW_BUFFER1_ARB               0x8826
#define GL_DRAW_BUFFER2_ARB               0x8827
#define GL_DRAW_BUFFER3_ARB               0x8828
#define GL_DRAW_BUFFER4_ARB               0x8829
#define GL_DRAW_BUFFER5_ARB               0x882A
#define GL_DRAW_BUFFER6_ARB               0x882B
#define GL_DRAW_BUFFER7_ARB               0x882C
#define GL_DRAW_BUFFER8_ARB               0x882D
#define GL_DRAW_BUFFER9_ARB               0x882E
#define GL_DRAW_BUFFER10_ARB              0x882F
#define GL_DRAW_BUFFER11_ARB              0x8830
#define GL_DRAW_BUFFER12_ARB              0x8831
#define GL_DRAW_BUFFER13_ARB              0x8832
#define GL_DRAW_BUFFER14_ARB              0x8833
#define GL_DRAW_BUFFER15_ARB              0x8834
#endif /* GL_ARB_draw_buffers */

#ifdef ANYGL_ARB_fragment_program
#define GL_FRAGMENT_PROGRAM_ARB           0x8804
#define GL_PROGRAM_FORMAT_ASCII_ARB       0x8875
#define GL_PROGRAM_LENGTH_ARB             0x8627
#define GL_PROGRAM_FORMAT_ARB             0x8876
#define GL_PROGRAM_BINDING_ARB            0x8677
#define GL_PROGRAM_INSTRUCTIONS_ARB       0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB   0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB        0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB    0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB         0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB     0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB  0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB            0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB        0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB     0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB   0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB   0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB   0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_PROGRAM_STRING_ARB             0x8628
#define GL_PROGRAM_ERROR_POSITION_ARB     0x864B
#define GL_CURRENT_MATRIX_ARB             0x8641
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB   0x88B7
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_MAX_PROGRAM_MATRICES_ARB       0x862F
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_TEXTURE_COORDS_ARB         0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB    0x8872
#define GL_PROGRAM_ERROR_STRING_ARB       0x8874
#define GL_MATRIX0_ARB                    0x88C0
#define GL_MATRIX1_ARB                    0x88C1
#define GL_MATRIX2_ARB                    0x88C2
#define GL_MATRIX3_ARB                    0x88C3
#define GL_MATRIX4_ARB                    0x88C4
#define GL_MATRIX5_ARB                    0x88C5
#define GL_MATRIX6_ARB                    0x88C6
#define GL_MATRIX7_ARB                    0x88C7
#define GL_MATRIX8_ARB                    0x88C8
#define GL_MATRIX9_ARB                    0x88C9
#define GL_MATRIX10_ARB                   0x88CA
#define GL_MATRIX11_ARB                   0x88CB
#define GL_MATRIX12_ARB                   0x88CC
#define GL_MATRIX13_ARB                   0x88CD
#define GL_MATRIX14_ARB                   0x88CE
#define GL_MATRIX15_ARB                   0x88CF
#define GL_MATRIX16_ARB                   0x88D0
#define GL_MATRIX17_ARB                   0x88D1
#define GL_MATRIX18_ARB                   0x88D2
#define GL_MATRIX19_ARB                   0x88D3
#define GL_MATRIX20_ARB                   0x88D4
#define GL_MATRIX21_ARB                   0x88D5
#define GL_MATRIX22_ARB                   0x88D6
#define GL_MATRIX23_ARB                   0x88D7
#define GL_MATRIX24_ARB                   0x88D8
#define GL_MATRIX25_ARB                   0x88D9
#define GL_MATRIX26_ARB                   0x88DA
#define GL_MATRIX27_ARB                   0x88DB
#define GL_MATRIX28_ARB                   0x88DC
#define GL_MATRIX29_ARB                   0x88DD
#define GL_MATRIX30_ARB                   0x88DE
#define GL_MATRIX31_ARB                   0x88DF
#endif /* GL_ARB_fragment_program */

#ifdef ANYGL_ARB_fragment_shader
#define GL_FRAGMENT_SHADER_ARB            0x8B30
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#endif /* GL_ARB_fragment_shader */

#ifdef ANYGL_ARB_geometry_shader4
#define GL_LINES_ADJACENCY_ARB            0x000A
#define GL_LINE_STRIP_ADJACENCY_ARB       0x000B
#define GL_TRIANGLES_ADJACENCY_ARB        0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB   0x000D
#define GL_PROGRAM_POINT_SIZE_ARB         0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_GEOMETRY_SHADER_ARB            0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB      0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB        0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB       0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#endif /* GL_ARB_geometry_shader4 */

#ifdef ANYGL_ARB_gl_spirv
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY_ARB              0x9552
#endif /* GL_ARB_gl_spirv */

#ifdef ANYGL_ARB_gpu_shader_int64
#define GL_INT64_ARB                      0x140E
#define GL_INT64_VEC2_ARB                 0x8FE9
#define GL_INT64_VEC3_ARB                 0x8FEA
#define GL_INT64_VEC4_ARB                 0x8FEB
#define GL_UNSIGNED_INT64_VEC2_ARB        0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB        0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB        0x8FF7
#endif /* GL_ARB_gpu_shader_int64 */

#ifdef ANYGL_ARB_half_float_pixel
#define GL_HALF_FLOAT_ARB                 0x140B
#endif /* GL_ARB_half_float_pixel */

#ifdef ANYGL_ARB_imaging
#define GL_CONVOLUTION_BORDER_MODE        0x8013
#define GL_CONVOLUTION_FILTER_SCALE       0x8014
#define GL_CONVOLUTION_FILTER_BIAS        0x8015
#define GL_REDUCE                         0x8016
#define GL_CONVOLUTION_FORMAT             0x8017
#define GL_CONVOLUTION_WIDTH              0x8018
#define GL_CONVOLUTION_HEIGHT             0x8019
#define GL_MAX_CONVOLUTION_WIDTH          0x801A
#define GL_MAX_CONVOLUTION_HEIGHT         0x801B
#define GL_POST_CONVOLUTION_RED_SCALE     0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE   0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE    0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE   0x801F
#define GL_POST_CONVOLUTION_RED_BIAS      0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS    0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS     0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS    0x8023
#define GL_HISTOGRAM_WIDTH                0x8026
#define GL_HISTOGRAM_FORMAT               0x8027
#define GL_HISTOGRAM_RED_SIZE             0x8028
#define GL_HISTOGRAM_GREEN_SIZE           0x8029
#define GL_HISTOGRAM_BLUE_SIZE            0x802A
#define GL_HISTOGRAM_ALPHA_SIZE           0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE       0x802C
#define GL_HISTOGRAM_SINK                 0x802D
#define GL_MINMAX_FORMAT                  0x802F
#define GL_MINMAX_SINK                    0x8030
#define GL_TABLE_TOO_LARGE                0x8031
#define GL_COLOR_MATRIX                   0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH       0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH   0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE    0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE  0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE   0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE  0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS     0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS   0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS    0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS   0x80BB
#define GL_COLOR_TABLE_SCALE              0x80D6
#define GL_COLOR_TABLE_BIAS               0x80D7
#define GL_COLOR_TABLE_FORMAT             0x80D8
#define GL_COLOR_TABLE_WIDTH              0x80D9
#define GL_COLOR_TABLE_RED_SIZE           0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE         0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE          0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE         0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE     0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE     0x80DF
#define GL_CONSTANT_BORDER                0x8151
#define GL_REPLICATE_BORDER               0x8153
#define GL_CONVOLUTION_BORDER_COLOR       0x8154
#endif /* GL_ARB_imaging */

#ifdef ANYGL_ARB_indirect_parameters
#define GL_PARAMETER_BUFFER_ARB           0x80EE
#define GL_PARAMETER_BUFFER_BINDING_ARB   0x80EF
#endif /* GL_ARB_indirect_parameters */

#ifdef ANYGL_ARB_instanced_arrays
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#endif /* GL_ARB_instanced_arrays */

#ifdef ANYGL_ARB_internalformat_query2
#define GL_SRGB_DECODE_ARB                0x8299
#define GL_VIEW_CLASS_EAC_R11             0x9383
#define GL_VIEW_CLASS_EAC_RG11            0x9384
#define GL_VIEW_CLASS_ETC2_RGB            0x9385
#define GL_VIEW_CLASS_ETC2_RGBA           0x9386
#define GL_VIEW_CLASS_ETC2_EAC_RGBA       0x9387
#define GL_VIEW_CLASS_ASTC_4x4_RGBA       0x9388
#define GL_VIEW_CLASS_ASTC_5x4_RGBA       0x9389
#define GL_VIEW_CLASS_ASTC_5x5_RGBA       0x938A
#define GL_VIEW_CLASS_ASTC_6x5_RGBA       0x938B
#define GL_VIEW_CLASS_ASTC_6x6_RGBA       0x938C
#define GL_VIEW_CLASS_ASTC_8x5_RGBA       0x938D
#define GL_VIEW_CLASS_ASTC_8x6_RGBA       0x938E
#define GL_VIEW_CLASS_ASTC_8x8_RGBA       0x938F
#define GL_VIEW_CLASS_ASTC_10x5_RGBA      0x9390
#define GL_VIEW_CLASS_ASTC_10x6_RGBA      0x9391
#define GL_VIEW_CLASS_ASTC_10x8_RGBA      0x9392
#define GL_VIEW_CLASS_ASTC_10x10_RGBA     0x9393
#define GL_VIEW_CLASS_ASTC_12x10_RGBA     0x9394
#define GL_VIEW_CLASS_ASTC_12x12_RGBA     0x9395
#endif /* GL_ARB_internalformat_query2 */

#ifdef ANYGL_ARB_matrix_palette
#define GL_MATRIX_PALETTE_ARB             0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB       0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB     0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB         0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB       0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB    0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB    0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB  0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#endif /* GL_ARB_matrix_palette */

#ifdef ANYGL_ARB_multisample
#define GL_MULTISAMPLE_ARB                0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB   0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_ARB        0x809F
#define GL_SAMPLE_COVERAGE_ARB            0x80A0
#define GL_SAMPLE_BUFFERS_ARB             0x80A8
#define GL_SAMPLES_ARB                    0x80A9
#define GL_SAMPLE_COVERAGE_VALUE_ARB      0x80AA
#define GL_SAMPLE_COVERAGE_INVERT_ARB     0x80AB
#define GL_MULTISAMPLE_BIT_ARB            0x20000000
#endif /* GL_ARB_multisample */

#ifdef ANYGL_ARB_multitexture
#define GL_TEXTURE0_ARB                   0x84C0
#define GL_TEXTURE1_ARB                   0x84C1
#define GL_TEXTURE2_ARB                   0x84C2
#define GL_TEXTURE3_ARB                   0x84C3
#define GL_TEXTURE4_ARB                   0x84C4
#define GL_TEXTURE5_ARB                   0x84C5
#define GL_TEXTURE6_ARB                   0x84C6
#define GL_TEXTURE7_ARB                   0x84C7
#define GL_TEXTURE8_ARB                   0x84C8
#define GL_TEXTURE9_ARB                   0x84C9
#define GL_TEXTURE10_ARB                  0x84CA
#define GL_TEXTURE11_ARB                  0x84CB
#define GL_TEXTURE12_ARB                  0x84CC
#define GL_TEXTURE13_ARB                  0x84CD
#define GL_TEXTURE14_ARB                  0x84CE
#define GL_TEXTURE15_ARB                  0x84CF
#define GL_TEXTURE16_ARB                  0x84D0
#define GL_TEXTURE17_ARB                  0x84D1
#define GL_TEXTURE18_ARB                  0x84D2
#define GL_TEXTURE19_ARB                  0x84D3
#define GL_TEXTURE20_ARB                  0x84D4
#define GL_TEXTURE21_ARB                  0x84D5
#define GL_TEXTURE22_ARB                  0x84D6
#define GL_TEXTURE23_ARB                  0x84D7
#define GL_TEXTURE24_ARB                  0x84D8
#define GL_TEXTURE25_ARB                  0x84D9
#define GL_TEXTURE26_ARB                  0x84DA
#define GL_TEXTURE27_ARB                  0x84DB
#define GL_TEXTURE28_ARB                  0x84DC
#define GL_TEXTURE29_ARB                  0x84DD
#define GL_TEXTURE30_ARB                  0x84DE
#define GL_TEXTURE31_ARB                  0x84DF
#define GL_ACTIVE_TEXTURE_ARB             0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE_ARB      0x84E1
#define GL_MAX_TEXTURE_UNITS_ARB          0x84E2
#endif /* GL_ARB_multitexture */

#ifdef ANYGL_ARB_occlusion_query
#define GL_QUERY_COUNTER_BITS_ARB         0x8864
#define GL_CURRENT_QUERY_ARB              0x8865
#define GL_QUERY_RESULT_ARB               0x8866
#define GL_QUERY_RESULT_AVAILABLE_ARB     0x8867
#define GL_SAMPLES_PASSED_ARB             0x8914
#endif /* GL_ARB_occlusion_query */

#ifdef ANYGL_ARB_parallel_shader_compile
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_COMPLETION_STATUS_ARB          0x91B1
#endif /* GL_ARB_parallel_shader_compile */

#ifdef ANYGL_ARB_pipeline_statistics_query
#define GL_VERTICES_SUBMITTED_ARB         0x82EE
#define GL_PRIMITIVES_SUBMITTED_ARB       0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS_ARB  0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB  0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#endif /* GL_ARB_pipeline_statistics_query */

#ifdef ANYGL_ARB_pixel_buffer_object
#define GL_PIXEL_PACK_BUFFER_ARB          0x88EB
#define GL_PIXEL_UNPACK_BUFFER_ARB        0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB  0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#endif /* GL_ARB_pixel_buffer_object */

#ifdef ANYGL_ARB_point_parameters
#define GL_POINT_SIZE_MIN_ARB             0x8126
#define GL_POINT_SIZE_MAX_ARB             0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB  0x8128
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#endif /* GL_ARB_point_parameters */

#ifdef ANYGL_ARB_point_sprite
#define GL_POINT_SPRITE_ARB               0x8861
#define GL_COORD_REPLACE_ARB              0x8862
#endif /* GL_ARB_point_sprite */

#ifdef ANYGL_ARB_robustness
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_LOSE_CONTEXT_ON_RESET_ARB      0x8252
#define GL_GUILTY_CONTEXT_RESET_ARB       0x8253
#define GL_INNOCENT_CONTEXT_RESET_ARB     0x8254
#define GL_UNKNOWN_CONTEXT_RESET_ARB      0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_NO_RESET_NOTIFICATION_ARB      0x8261
#endif /* GL_ARB_robustness */

#ifdef ANYGL_ARB_sample_locations
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_SAMPLE_LOCATION_ARB            0x8E50
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#endif /* GL_ARB_sample_locations */

#ifdef ANYGL_ARB_sample_shading
#define GL_SAMPLE_SHADING_ARB             0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB   0x8C37
#endif /* GL_ARB_sample_shading */

#ifdef ANYGL_ARB_shader_objects
#define GL_PROGRAM_OBJECT_ARB             0x8B40
#define GL_SHADER_OBJECT_ARB              0x8B48
#define GL_OBJECT_TYPE_ARB                0x8B4E
#define GL_OBJECT_SUBTYPE_ARB             0x8B4F
#define GL_FLOAT_VEC2_ARB                 0x8B50
#define GL_FLOAT_VEC3_ARB                 0x8B51
#define GL_FLOAT_VEC4_ARB                 0x8B52
#define GL_INT_VEC2_ARB                   0x8B53
#define GL_INT_VEC3_ARB                   0x8B54
#define GL_INT_VEC4_ARB                   0x8B55
#define GL_BOOL_ARB                       0x8B56
#define GL_BOOL_VEC2_ARB                  0x8B57
#define GL_BOOL_VEC3_ARB                  0x8B58
#define GL_BOOL_VEC4_ARB                  0x8B59
#define GL_FLOAT_MAT2_ARB                 0x8B5A
#define GL_FLOAT_MAT3_ARB                 0x8B5B
#define GL_FLOAT_MAT4_ARB                 0x8B5C
#define GL_SAMPLER_1D_ARB                 0x8B5D
#define GL_SAMPLER_2D_ARB                 0x8B5E
#define GL_SAMPLER_3D_ARB                 0x8B5F
#define GL_SAMPLER_CUBE_ARB               0x8B60
#define GL_SAMPLER_1D_SHADOW_ARB          0x8B61
#define GL_SAMPLER_2D_SHADOW_ARB          0x8B62
#define GL_SAMPLER_2D_RECT_ARB            0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW_ARB     0x8B64
#define GL_OBJECT_DELETE_STATUS_ARB       0x8B80
#define GL_OBJECT_COMPILE_STATUS_ARB      0x8B81
#define GL_OBJECT_LINK_STATUS_ARB         0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB     0x8B83
#define GL_OBJECT_INFO_LOG_LENGTH_ARB     0x8B84
#define GL_OBJECT_ATTACHED_OBJECTS_ARB    0x8B85
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB     0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#endif /* GL_ARB_shader_objects */

#ifdef ANYGL_ARB_shading_language_100
#define GL_SHADING_LANGUAGE_VERSION_ARB   0x8B8C
#endif /* GL_ARB_shading_language_100 */

#ifdef ANYGL_ARB_shading_language_include
#define GL_SHADER_INCLUDE_ARB             0x8DAE
#define GL_NAMED_STRING_LENGTH_ARB        0x8DE9
#define GL_NAMED_STRING_TYPE_ARB          0x8DEA
#endif /* GL_ARB_shading_language_include */

#ifdef ANYGL_ARB_shadow
#define GL_TEXTURE_COMPARE_MODE_ARB       0x884C
#define GL_TEXTURE_COMPARE_FUNC_ARB       0x884D
#define GL_COMPARE_R_TO_TEXTURE_ARB       0x884E
#endif /* GL_ARB_shadow */

#ifdef ANYGL_ARB_shadow_ambient
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#endif /* GL_ARB_shadow_ambient */

#ifdef ANYGL_ARB_sparse_buffer
#define GL_SPARSE_STORAGE_BIT_ARB         0x0400
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB    0x82F8
#endif /* GL_ARB_sparse_buffer */

#ifdef ANYGL_ARB_sparse_texture
#define GL_TEXTURE_SPARSE_ARB             0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB    0x91A7
#define GL_NUM_SPARSE_LEVELS_ARB          0x91AA
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB     0x91A8
#define GL_VIRTUAL_PAGE_SIZE_X_ARB        0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB        0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB        0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB    0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#endif /* GL_ARB_sparse_texture */

#ifdef ANYGL_ARB_texture_border_clamp
#define GL_CLAMP_TO_BORDER_ARB            0x812D
#endif /* GL_ARB_texture_border_clamp */

#ifdef ANYGL_ARB_texture_buffer_object
#define GL_TEXTURE_BUFFER_ARB             0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB    0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_ARB     0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB      0x8C2E
#endif /* GL_ARB_texture_buffer_object */

#ifdef ANYGL_ARB_texture_compression
#define GL_COMPRESSED_ALPHA_ARB           0x84E9
#define GL_COMPRESSED_LUMINANCE_ARB       0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY_ARB       0x84EC
#define GL_COMPRESSED_RGB_ARB             0x84ED
#define GL_COMPRESSED_RGBA_ARB            0x84EE
#define GL_TEXTURE_COMPRESSION_HINT_ARB   0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED_ARB         0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#endif /* GL_ARB_texture_compression */

#ifdef ANYGL_ARB_texture_compression_bptc
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#endif /* GL_ARB_texture_compression_bptc */

#ifdef ANYGL_ARB_texture_cube_map
#define GL_NORMAL_MAP_ARB                 0x8511
#define GL_REFLECTION_MAP_ARB             0x8512
#define GL_TEXTURE_CUBE_MAP_ARB           0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB   0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB     0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB  0x851C
#endif /* GL_ARB_texture_cube_map */

#ifdef ANYGL_ARB_texture_cube_map_array
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB     0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB     0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#endif /* GL_ARB_texture_cube_map_array */

#ifdef ANYGL_ARB_texture_env_combine
#define GL_COMBINE_ARB                    0x8570
#define GL_COMBINE_RGB_ARB                0x8571
#define GL_COMBINE_ALPHA_ARB              0x8572
#define GL_SOURCE0_RGB_ARB                0x8580
#define GL_SOURCE1_RGB_ARB                0x8581
#define GL_SOURCE2_RGB_ARB                0x8582
#define GL_SOURCE0_ALPHA_ARB              0x8588
#define GL_SOURCE1_ALPHA_ARB              0x8589
#define GL_SOURCE2_ALPHA_ARB              0x858A
#define GL_OPERAND0_RGB_ARB               0x8590
#define GL_OPERAND1_RGB_ARB               0x8591
#define GL_OPERAND2_RGB_ARB               0x8592
#define GL_OPERAND0_ALPHA_ARB             0x8598
#define GL_OPERAND1_ALPHA_ARB             0x8599
#define GL_OPERAND2_ALPHA_ARB             0x859A
#define GL_RGB_SCALE_ARB                  0x8573
#define GL_ADD_SIGNED_ARB                 0x8574
#define GL_INTERPOLATE_ARB                0x8575
#define GL_SUBTRACT_ARB                   0x84E7
#define GL_CONSTANT_ARB                   0x8576
#define GL_PRIMARY_COLOR_ARB              0x8577
#define GL_PREVIOUS_ARB                   0x8578
#endif /* GL_ARB_texture_env_combine */

#ifdef ANYGL_ARB_texture_env_dot3
#define GL_DOT3_RGB_ARB                   0x86AE
#define GL_DOT3_RGBA_ARB                  0x86AF
#endif /* GL_ARB_texture_env_dot3 */

#ifdef ANYGL_ARB_texture_filter_minmax
#define GL_TEXTURE_REDUCTION_MODE_ARB     0x9366
#define GL_WEIGHTED_AVERAGE_ARB           0x9367
#endif /* GL_ARB_texture_filter_minmax */

#ifdef ANYGL_ARB_texture_float
#define GL_TEXTURE_RED_TYPE_ARB           0x8C10
#define GL_TEXTURE_GREEN_TYPE_ARB         0x8C11
#define GL_TEXTURE_BLUE_TYPE_ARB          0x8C12
#define GL_TEXTURE_ALPHA_TYPE_ARB         0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE_ARB     0x8C14
#define GL_TEXTURE_INTENSITY_TYPE_ARB     0x8C15
#define GL_TEXTURE_DEPTH_TYPE_ARB         0x8C16
#define GL_UNSIGNED_NORMALIZED_ARB        0x8C17
#define GL_RGBA32F_ARB                    0x8814
#define GL_RGB32F_ARB                     0x8815
#define GL_ALPHA32F_ARB                   0x8816
#define GL_INTENSITY32F_ARB               0x8817
#define GL_LUMINANCE32F_ARB               0x8818
#define GL_LUMINANCE_ALPHA32F_ARB         0x8819
#define GL_RGBA16F_ARB                    0x881A
#define GL_RGB16F_ARB                     0x881B
#define GL_ALPHA16F_ARB                   0x881C
#define GL_INTENSITY16F_ARB               0x881D
#define GL_LUMINANCE16F_ARB               0x881E
#define GL_LUMINANCE_ALPHA16F_ARB         0x881F
#endif /* GL_ARB_texture_float */

#ifdef ANYGL_ARB_texture_gather
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#endif /* GL_ARB_texture_gather */

#ifdef ANYGL_ARB_texture_mirrored_repeat
#define GL_MIRRORED_REPEAT_ARB            0x8370
#endif /* GL_ARB_texture_mirrored_repeat */

#ifdef ANYGL_ARB_texture_rectangle
#define GL_TEXTURE_RECTANGLE_ARB          0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_ARB  0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_ARB    0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#endif /* GL_ARB_texture_rectangle */

#ifdef ANYGL_ARB_transform_feedback_overflow_query
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#endif /* GL_ARB_transform_feedback_overflow_query */

#ifdef ANYGL_ARB_transpose_matrix
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB   0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX_ARB     0x84E6
#endif /* GL_ARB_transpose_matrix */

#ifdef ANYGL_ARB_vertex_blend
#define GL_MAX_VERTEX_UNITS_ARB           0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB        0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB           0x86A6
#define GL_VERTEX_BLEND_ARB               0x86A7
#define GL_CURRENT_WEIGHT_ARB             0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB          0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB        0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB          0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB       0x86AC
#define GL_WEIGHT_ARRAY_ARB               0x86AD
#define GL_MODELVIEW0_ARB                 0x1700
#define GL_MODELVIEW1_ARB                 0x850A
#define GL_MODELVIEW2_ARB                 0x8722
#define GL_MODELVIEW3_ARB                 0x8723
#define GL_MODELVIEW4_ARB                 0x8724
#define GL_MODELVIEW5_ARB                 0x8725
#define GL_MODELVIEW6_ARB                 0x8726
#define GL_MODELVIEW7_ARB                 0x8727
#define GL_MODELVIEW8_ARB                 0x8728
#define GL_MODELVIEW9_ARB                 0x8729
#define GL_MODELVIEW10_ARB                0x872A
#define GL_MODELVIEW11_ARB                0x872B
#define GL_MODELVIEW12_ARB                0x872C
#define GL_MODELVIEW13_ARB                0x872D
#define GL_MODELVIEW14_ARB                0x872E
#define GL_MODELVIEW15_ARB                0x872F
#define GL_MODELVIEW16_ARB                0x8730
#define GL_MODELVIEW17_ARB                0x8731
#define GL_MODELVIEW18_ARB                0x8732
#define GL_MODELVIEW19_ARB                0x8733
#define GL_MODELVIEW20_ARB                0x8734
#define GL_MODELVIEW21_ARB                0x8735
#define GL_MODELVIEW22_ARB                0x8736
#define GL_MODELVIEW23_ARB                0x8737
#define GL_MODELVIEW24_ARB                0x8738
#define GL_MODELVIEW25_ARB                0x8739
#define GL_MODELVIEW26_ARB                0x873A
#define GL_MODELVIEW27_ARB                0x873B
#define GL_MODELVIEW28_ARB                0x873C
#define GL_MODELVIEW29_ARB                0x873D
#define GL_MODELVIEW30_ARB                0x873E
#define GL_MODELVIEW31_ARB                0x873F
#endif /* GL_ARB_vertex_blend */

#ifdef ANYGL_ARB_vertex_buffer_object
#define GL_BUFFER_SIZE_ARB                0x8764
#define GL_BUFFER_USAGE_ARB               0x8765
#define GL_ARRAY_BUFFER_ARB               0x8892
#define GL_ELEMENT_ARRAY_BUFFER_ARB       0x8893
#define GL_ARRAY_BUFFER_BINDING_ARB       0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_READ_ONLY_ARB                  0x88B8
#define GL_WRITE_ONLY_ARB                 0x88B9
#define GL_READ_WRITE_ARB                 0x88BA
#define GL_BUFFER_ACCESS_ARB              0x88BB
#define GL_BUFFER_MAPPED_ARB              0x88BC
#define GL_BUFFER_MAP_POINTER_ARB         0x88BD
#define GL_STREAM_DRAW_ARB                0x88E0
#define GL_STREAM_READ_ARB                0x88E1
#define GL_STREAM_COPY_ARB                0x88E2
#define GL_STATIC_DRAW_ARB                0x88E4
#define GL_STATIC_READ_ARB                0x88E5
#define GL_STATIC_COPY_ARB                0x88E6
#define GL_DYNAMIC_DRAW_ARB               0x88E8
#define GL_DYNAMIC_READ_ARB               0x88E9
#define GL_DYNAMIC_COPY_ARB               0x88EA
#endif /* GL_ARB_vertex_buffer_object */

#ifdef ANYGL_ARB_vertex_program
#define GL_COLOR_SUM_ARB                  0x8458
#define GL_VERTEX_PROGRAM_ARB             0x8620
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB   0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB   0x8625
#define GL_CURRENT_VERTEX_ATTRIB_ARB      0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB  0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB    0x8643
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_MAX_VERTEX_ATTRIBS_ARB         0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB  0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#endif /* GL_ARB_vertex_program */

#ifdef ANYGL_ARB_vertex_shader
#define GL_VERTEX_SHADER_ARB              0x8B31
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_FLOATS_ARB         0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB   0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#endif /* GL_ARB_vertex_shader */

#ifdef ANYGL_KHR_blend_equation_advanced
#define GL_MULTIPLY_KHR                   0x9294
#define GL_SCREEN_KHR                     0x9295
#define GL_OVERLAY_KHR                    0x9296
#define GL_DARKEN_KHR                     0x9297
#define GL_LIGHTEN_KHR                    0x9298
#define GL_COLORDODGE_KHR                 0x9299
#define GL_COLORBURN_KHR                  0x929A
#define GL_HARDLIGHT_KHR                  0x929B
#define GL_SOFTLIGHT_KHR                  0x929C
#define GL_DIFFERENCE_KHR                 0x929E
#define GL_EXCLUSION_KHR                  0x92A0
#define GL_HSL_HUE_KHR                    0x92AD
#define GL_HSL_SATURATION_KHR             0x92AE
#define GL_HSL_COLOR_KHR                  0x92AF
#define GL_HSL_LUMINOSITY_KHR             0x92B0
#endif /* GL_KHR_blend_equation_advanced */

#ifdef ANYGL_KHR_blend_equation_advanced_coherent
#define GL_BLEND_ADVANCED_COHERENT_KHR    0x9285
#endif /* GL_KHR_blend_equation_advanced_coherent */

#ifdef ANYGL_KHR_context_flush_control
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR   0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#endif /* GL_KHR_context_flush_control */

#ifdef ANYGL_KHR_debug
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR   0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_KHR    0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR  0x8245
#define GL_DEBUG_SOURCE_API_KHR           0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR   0x8249
#define GL_DEBUG_SOURCE_APPLICATION_KHR   0x824A
#define GL_DEBUG_SOURCE_OTHER_KHR         0x824B
#define GL_DEBUG_TYPE_ERROR_KHR           0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY_KHR     0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_KHR     0x8250
#define GL_DEBUG_TYPE_OTHER_KHR           0x8251
#define GL_DEBUG_TYPE_MARKER_KHR          0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR      0x8269
#define GL_DEBUG_TYPE_POP_GROUP_KHR       0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR    0x826D
#define GL_BUFFER_KHR                     0x82E0
#define GL_SHADER_KHR                     0x82E1
#define GL_PROGRAM_KHR                    0x82E2
#define GL_VERTEX_ARRAY_KHR               0x8074
#define GL_QUERY_KHR                      0x82E3
#define GL_PROGRAM_PIPELINE_KHR           0x82E4
#define GL_SAMPLER_KHR                    0x82E6
#define GL_MAX_LABEL_LENGTH_KHR           0x82E8
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR   0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR  0x9144
#define GL_DEBUG_LOGGED_MESSAGES_KHR      0x9145
#define GL_DEBUG_SEVERITY_HIGH_KHR        0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_KHR      0x9147
#define GL_DEBUG_SEVERITY_LOW_KHR         0x9148
#define GL_DEBUG_OUTPUT_KHR               0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR     0x00000002
#define GL_STACK_OVERFLOW_KHR             0x0503
#define GL_STACK_UNDERFLOW_KHR            0x0504
#endif /* GL_KHR_debug */

#ifdef ANYGL_KHR_no_error
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR  0x00000008
#endif /* GL_KHR_no_error */

#ifdef ANYGL_KHR_parallel_shader_compile
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_COMPLETION_STATUS_KHR          0x91B1
#endif /* GL_KHR_parallel_shader_compile */

#ifdef ANYGL_KHR_robustness
#define GL_CONTEXT_ROBUST_ACCESS          0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_KHR      0x90F3
#define GL_LOSE_CONTEXT_ON_RESET_KHR      0x8252
#define GL_GUILTY_CONTEXT_RESET_KHR       0x8253
#define GL_INNOCENT_CONTEXT_RESET_KHR     0x8254
#define GL_UNKNOWN_CONTEXT_RESET_KHR      0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_NO_RESET_NOTIFICATION_KHR      0x8261
#define GL_CONTEXT_LOST_KHR               0x0507
#endif /* GL_KHR_robustness */

#ifdef ANYGL_KHR_shader_subgroup
#define GL_SUBGROUP_SIZE_KHR              0x9532
#define GL_SUBGROUP_SUPPORTED_STAGES_KHR  0x9533
#define GL_SUBGROUP_SUPPORTED_FEATURES_KHR 0x9534
#define GL_SUBGROUP_QUAD_ALL_STAGES_KHR   0x9535
#define GL_SUBGROUP_FEATURE_BASIC_BIT_KHR 0x00000001
#define GL_SUBGROUP_FEATURE_VOTE_BIT_KHR  0x00000002
#define GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR 0x00000004
#define GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR 0x00000008
#define GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR 0x00000010
#define GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR 0x00000020
#define GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR 0x00000040
#define GL_SUBGROUP_FEATURE_QUAD_BIT_KHR  0x00000080
#endif /* GL_KHR_shader_subgroup */

#ifdef ANYGL_KHR_texture_compression_astc_hdr
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR   0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR   0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR   0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR   0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR   0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR   0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR   0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR   0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR  0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR  0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR  0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#endif /* GL_KHR_texture_compression_astc_hdr */

#ifdef ANYGL_OES_EGL_image_external
#define GL_TEXTURE_EXTERNAL_OES           0x8D65
#define GL_TEXTURE_BINDING_EXTERNAL_OES   0x8D67
#define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
#define GL_SAMPLER_EXTERNAL_OES           0x8D66
#endif /* GL_OES_EGL_image_external */

#ifdef ANYGL_OES_blend_equation_separate
#define GL_BLEND_EQUATION_RGB_OES         0x8009
#define GL_BLEND_EQUATION_ALPHA_OES       0x883D
#endif /* GL_OES_blend_equation_separate */

#ifdef ANYGL_OES_blend_func_separate
#define GL_BLEND_DST_RGB_OES              0x80C8
#define GL_BLEND_SRC_RGB_OES              0x80C9
#define GL_BLEND_DST_ALPHA_OES            0x80CA
#define GL_BLEND_SRC_ALPHA_OES            0x80CB
#endif /* GL_OES_blend_func_separate */

#ifdef ANYGL_OES_blend_subtract
#define GL_BLEND_EQUATION_OES             0x8009
#define GL_FUNC_ADD_OES                   0x8006
#define GL_FUNC_SUBTRACT_OES              0x800A
#define GL_FUNC_REVERSE_SUBTRACT_OES      0x800B
#endif /* GL_OES_blend_subtract */

#ifdef ANYGL_OES_compressed_ETC1_RGB8_texture
#define GL_ETC1_RGB8_OES                  0x8D64
#endif /* GL_OES_compressed_ETC1_RGB8_texture */

#ifdef ANYGL_OES_compressed_paletted_texture
#define GL_PALETTE4_RGB8_OES              0x8B90
#define GL_PALETTE4_RGBA8_OES             0x8B91
#define GL_PALETTE4_R5_G6_B5_OES          0x8B92
#define GL_PALETTE4_RGBA4_OES             0x8B93
#define GL_PALETTE4_RGB5_A1_OES           0x8B94
#define GL_PALETTE8_RGB8_OES              0x8B95
#define GL_PALETTE8_RGBA8_OES             0x8B96
#define GL_PALETTE8_R5_G6_B5_OES          0x8B97
#define GL_PALETTE8_RGBA4_OES             0x8B98
#define GL_PALETTE8_RGB5_A1_OES           0x8B99
#endif /* GL_OES_compressed_paletted_texture */

#ifdef ANYGL_OES_depth24
#define GL_DEPTH_COMPONENT24_OES          0x81A6
#endif /* GL_OES_depth24 */

#ifdef ANYGL_OES_depth32
#define GL_DEPTH_COMPONENT32_OES          0x81A7
#endif /* GL_OES_depth32 */

#ifdef ANYGL_OES_draw_texture
#define GL_TEXTURE_CROP_RECT_OES          0x8B9D
#endif /* GL_OES_draw_texture */

#ifdef ANYGL_OES_fixed_point
#define GL_FIXED_OES                      0x140C
#endif /* GL_OES_fixed_point */

#ifdef ANYGL_OES_framebuffer_object
#define GL_NONE_OES                       0
#define GL_FRAMEBUFFER_OES                0x8D40
#define GL_RENDERBUFFER_OES               0x8D41
#define GL_RGBA4_OES                      0x8056
#define GL_RGB5_A1_OES                    0x8057
#define GL_RGB565_OES                     0x8D62
#define GL_DEPTH_COMPONENT16_OES          0x81A5
#define GL_RENDERBUFFER_WIDTH_OES         0x8D42
#define GL_RENDERBUFFER_HEIGHT_OES        0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_RENDERBUFFER_RED_SIZE_OES      0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE_OES    0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE_OES     0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE_OES    0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE_OES    0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE_OES  0x8D55
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_COLOR_ATTACHMENT0_OES          0x8CE0
#define GL_DEPTH_ATTACHMENT_OES           0x8D00
#define GL_STENCIL_ATTACHMENT_OES         0x8D20
#define GL_FRAMEBUFFER_COMPLETE_OES       0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_UNSUPPORTED_OES    0x8CDD
#define GL_FRAMEBUFFER_BINDING_OES        0x8CA6
#define GL_RENDERBUFFER_BINDING_OES       0x8CA7
#define GL_MAX_RENDERBUFFER_SIZE_OES      0x84E8
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#endif /* GL_OES_framebuffer_object */

#ifdef ANYGL_OES_geometry_shader
#define GL_GEOMETRY_SHADER_OES            0x8DD9
#define GL_GEOMETRY_SHADER_BIT_OES        0x00000004
#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
#define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
#define GL_LAYER_PROVOKING_VERTEX_OES     0x825E
#define GL_LINES_ADJACENCY_OES            0x000A
#define GL_LINE_STRIP_ADJACENCY_OES       0x000B
#define GL_TRIANGLES_ADJACENCY_OES        0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_OES   0x000D
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
#define GL_FIRST_VERTEX_CONVENTION_OES    0x8E4D
#define GL_LAST_VERTEX_CONVENTION_OES     0x8E4E
#define GL_UNDEFINED_VERTEX_OES           0x8260
#define GL_PRIMITIVES_GENERATED_OES       0x8C87
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
#define GL_MAX_FRAMEBUFFER_LAYERS_OES     0x9317
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
#endif /* GL_OES_geometry_shader */

#ifdef ANYGL_OES_get_program_binary
#define GL_PROGRAM_BINARY_LENGTH_OES      0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
#define GL_PROGRAM_BINARY_FORMATS_OES     0x87FF
#endif /* GL_OES_get_program_binary */

#ifdef ANYGL_OES_mapbuffer
#define GL_WRITE_ONLY_OES                 0x88B9
#define GL_BUFFER_ACCESS_OES              0x88BB
#define GL_BUFFER_MAPPED_OES              0x88BC
#define GL_BUFFER_MAP_POINTER_OES         0x88BD
#endif /* GL_OES_mapbuffer */

#ifdef ANYGL_OES_matrix_get
#define GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES 0x898D
#define GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES 0x898E
#define GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES 0x898F
#endif /* GL_OES_matrix_get */

#ifdef ANYGL_OES_matrix_palette
#define GL_MAX_VERTEX_UNITS_OES           0x86A4
#define GL_MAX_PALETTE_MATRICES_OES       0x8842
#define GL_MATRIX_PALETTE_OES             0x8840
#define GL_MATRIX_INDEX_ARRAY_OES         0x8844
#define GL_WEIGHT_ARRAY_OES               0x86AD
#define GL_CURRENT_PALETTE_MATRIX_OES     0x8843
#define GL_MATRIX_INDEX_ARRAY_SIZE_OES    0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_OES    0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_OES  0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_OES 0x8849
#define GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES 0x8B9E
#define GL_WEIGHT_ARRAY_SIZE_OES          0x86AB
#define GL_WEIGHT_ARRAY_TYPE_OES          0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_OES        0x86AA
#define GL_WEIGHT_ARRAY_POINTER_OES       0x86AC
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_OES 0x889E
#endif /* GL_OES_matrix_palette */

#ifdef ANYGL_OES_packed_depth_stencil
#define GL_DEPTH_STENCIL_OES              0x84F9
#define GL_UNSIGNED_INT_24_8_OES          0x84FA
#define GL_DEPTH24_STENCIL8_OES           0x88F0
#endif /* GL_OES_packed_depth_stencil */

#ifdef ANYGL_OES_point_size_array
#define GL_POINT_SIZE_ARRAY_OES           0x8B9C
#define GL_POINT_SIZE_ARRAY_TYPE_OES      0x898A
#define GL_POINT_SIZE_ARRAY_STRIDE_OES    0x898B
#define GL_POINT_SIZE_ARRAY_POINTER_OES   0x898C
#define GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES 0x8B9F
#endif /* GL_OES_point_size_array */

#ifdef ANYGL_OES_point_sprite
#define GL_POINT_SPRITE_OES               0x8861
#define GL_COORD_REPLACE_OES              0x8862
#endif /* GL_OES_point_sprite */

#ifdef ANYGL_OES_primitive_bounding_box
#define GL_PRIMITIVE_BOUNDING_BOX_OES     0x92BE
#endif /* GL_OES_primitive_bounding_box */

#ifdef ANYGL_OES_read_format
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#endif /* GL_OES_read_format */

#ifdef ANYGL_OES_required_internalformat
#define GL_ALPHA8_OES                     0x803C
#define GL_LUMINANCE4_ALPHA4_OES          0x8043
#define GL_LUMINANCE8_ALPHA8_OES          0x8045
#define GL_LUMINANCE8_OES                 0x8040
#define GL_RGB8_OES                       0x8051
#define GL_RGBA8_OES                      0x8058
#define GL_RGB10_EXT                      0x8052
#define GL_RGB10_A2_EXT                   0x8059
#endif /* GL_OES_required_internalformat */

#ifdef ANYGL_OES_sample_shading
#define GL_SAMPLE_SHADING_OES             0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE_OES   0x8C37
#endif /* GL_OES_sample_shading */

#ifdef ANYGL_OES_shader_multisample_interpolation
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0x8E5D
#endif /* GL_OES_shader_multisample_interpolation */

#ifdef ANYGL_OES_standard_derivatives
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0x8B8B
#endif /* GL_OES_standard_derivatives */

#ifdef ANYGL_OES_stencil1
#define GL_STENCIL_INDEX1_OES             0x8D46
#endif /* GL_OES_stencil1 */

#ifdef ANYGL_OES_stencil4
#define GL_STENCIL_INDEX4_OES             0x8D47
#endif /* GL_OES_stencil4 */

#ifdef ANYGL_OES_stencil8
#define GL_STENCIL_INDEX8_OES             0x8D48
#endif /* GL_OES_stencil8 */

#ifdef ANYGL_OES_stencil_wrap
#define GL_INCR_WRAP_OES                  0x8507
#define GL_DECR_WRAP_OES                  0x8508
#endif /* GL_OES_stencil_wrap */

#ifdef ANYGL_OES_surfaceless_context
#define GL_FRAMEBUFFER_UNDEFINED_OES      0x8219
#endif /* GL_OES_surfaceless_context */

#ifdef ANYGL_OES_tessellation_shader
#define GL_PATCHES_OES                    0x000E
#define GL_PATCH_VERTICES_OES             0x8E72
#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
#define GL_TESS_GEN_MODE_OES              0x8E76
#define GL_TESS_GEN_SPACING_OES           0x8E77
#define GL_TESS_GEN_VERTEX_ORDER_OES      0x8E78
#define GL_TESS_GEN_POINT_MODE_OES        0x8E79
#define GL_ISOLINES_OES                   0x8E7A
#define GL_QUADS_OES                      0x0007
#define GL_FRACTIONAL_ODD_OES             0x8E7B
#define GL_FRACTIONAL_EVEN_OES            0x8E7C
#define GL_MAX_PATCH_VERTICES_OES         0x8E7D
#define GL_MAX_TESS_GEN_LEVEL_OES         0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS_OES  0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
#define GL_IS_PER_PATCH_OES               0x92E7
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
#define GL_TESS_CONTROL_SHADER_OES        0x8E88
#define GL_TESS_EVALUATION_SHADER_OES     0x8E87
#define GL_TESS_CONTROL_SHADER_BIT_OES    0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
#endif /* GL_OES_tessellation_shader */

#ifdef ANYGL_OES_texture_3D
#define GL_TEXTURE_WRAP_R_OES             0x8072
#define GL_TEXTURE_3D_OES                 0x806F
#define GL_TEXTURE_BINDING_3D_OES         0x806A
#define GL_MAX_3D_TEXTURE_SIZE_OES        0x8073
#define GL_SAMPLER_3D_OES                 0x8B5F
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0x8CD4
#endif /* GL_OES_texture_3D */

#ifdef ANYGL_OES_texture_border_clamp
#define GL_TEXTURE_BORDER_COLOR_OES       0x1004
#define GL_CLAMP_TO_BORDER_OES            0x812D
#endif /* GL_OES_texture_border_clamp */

#ifdef ANYGL_OES_texture_buffer
#define GL_TEXTURE_BUFFER_OES             0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_OES     0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_OES    0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_OES     0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
#define GL_SAMPLER_BUFFER_OES             0x8DC2
#define GL_INT_SAMPLER_BUFFER_OES         0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
#define GL_IMAGE_BUFFER_OES               0x9051
#define GL_INT_IMAGE_BUFFER_OES           0x905C
#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES  0x9067
#define GL_TEXTURE_BUFFER_OFFSET_OES      0x919D
#define GL_TEXTURE_BUFFER_SIZE_OES        0x919E
#endif /* GL_OES_texture_buffer */

#ifdef ANYGL_OES_texture_compression_astc
#define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0x93C0
#define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0x93C1
#define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0x93C2
#define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0x93C3
#define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0x93C4
#define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0x93C5
#define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0x93C6
#define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0x93C7
#define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0x93C8
#define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0x93C9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0x93E0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0x93E1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0x93E2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0x93E3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0x93E4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0x93E5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0x93E6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0x93E7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0x93E8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0x93E9
#endif /* GL_OES_texture_compression_astc */

#ifdef ANYGL_OES_texture_cube_map
#define GL_NORMAL_MAP_OES                 0x8511
#define GL_REFLECTION_MAP_OES             0x8512
#define GL_TEXTURE_CUBE_MAP_OES           0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_OES   0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES 0x851A
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES  0x851C
#define GL_TEXTURE_GEN_MODE_OES           0x2500
#define GL_TEXTURE_GEN_STR_OES            0x8D60
#endif /* GL_OES_texture_cube_map */

#ifdef ANYGL_OES_texture_cube_map_array
#define GL_TEXTURE_CUBE_MAP_ARRAY_OES     0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0x900A
#define GL_SAMPLER_CUBE_MAP_ARRAY_OES     0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900F
#define GL_IMAGE_CUBE_MAP_ARRAY_OES       0x9054
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES   0x905F
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x906A
#endif /* GL_OES_texture_cube_map_array */

#ifdef ANYGL_OES_texture_half_float
#define GL_HALF_FLOAT_OES                 0x8D61
#endif /* GL_OES_texture_half_float */

#ifdef ANYGL_OES_texture_mirrored_repeat
#define GL_MIRRORED_REPEAT_OES            0x8370
#endif /* GL_OES_texture_mirrored_repeat */

#ifdef ANYGL_OES_texture_stencil8
#define GL_STENCIL_INDEX_OES              0x1901
#endif /* GL_OES_texture_stencil8 */

#ifdef ANYGL_OES_texture_storage_multisample_2d_array
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
#endif /* GL_OES_texture_storage_multisample_2d_array */

#ifdef ANYGL_OES_texture_view
#define GL_TEXTURE_VIEW_MIN_LEVEL_OES     0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS_OES    0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER_OES     0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS_OES    0x82DE
#endif /* GL_OES_texture_view */

#ifdef ANYGL_OES_vertex_array_object
#define GL_VERTEX_ARRAY_BINDING_OES       0x85B5
#endif /* GL_OES_vertex_array_object */

#ifdef ANYGL_OES_vertex_type_10_10_10_2
#define GL_UNSIGNED_INT_10_10_10_2_OES    0x8DF6
#define GL_INT_10_10_10_2_OES             0x8DF7
#endif /* GL_OES_vertex_type_10_10_10_2 */

#ifdef ANYGL_OES_viewport_array
#define GL_MAX_VIEWPORTS_OES              0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS_OES     0x825C
#define GL_VIEWPORT_BOUNDS_RANGE_OES      0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
#endif /* GL_OES_viewport_array */

#ifdef ANYGL_EXT_422_pixels
#define GL_422_EXT                        0x80CC
#define GL_422_REV_EXT                    0x80CD
#define GL_422_AVERAGE_EXT                0x80CE
#define GL_422_REV_AVERAGE_EXT            0x80CF
#endif /* GL_EXT_422_pixels */

#ifdef ANYGL_EXT_YUV_target
#define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT    0x8BE7
#endif /* GL_EXT_YUV_target */

#ifdef ANYGL_EXT_abgr
#define GL_ABGR_EXT                       0x8000
#endif /* GL_EXT_abgr */

#ifdef ANYGL_EXT_bgra
#define GL_BGR_EXT                        0x80E0
#define GL_BGRA_EXT                       0x80E1
#endif /* GL_EXT_bgra */

#ifdef ANYGL_EXT_bindable_uniform
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT  0x8DED
#define GL_UNIFORM_BUFFER_EXT             0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT     0x8DEF
#endif /* GL_EXT_bindable_uniform */

#ifdef ANYGL_EXT_blend_color
#define GL_CONSTANT_COLOR_EXT             0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT   0x8002
#define GL_CONSTANT_ALPHA_EXT             0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT   0x8004
#define GL_BLEND_COLOR_EXT                0x8005
#endif /* GL_EXT_blend_color */

#ifdef ANYGL_EXT_blend_equation_separate
#define GL_BLEND_EQUATION_RGB_EXT         0x8009
#define GL_BLEND_EQUATION_ALPHA_EXT       0x883D
#endif /* GL_EXT_blend_equation_separate */

#ifdef ANYGL_EXT_blend_func_extended
#define GL_SRC1_COLOR_EXT                 0x88F9
#define GL_SRC1_ALPHA_EXT                 0x8589
#define GL_ONE_MINUS_SRC1_COLOR_EXT       0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA_EXT       0x88FB
#define GL_SRC_ALPHA_SATURATE_EXT         0x0308
#define GL_LOCATION_INDEX_EXT             0x930F
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0x88FC
#endif /* GL_EXT_blend_func_extended */

#ifdef ANYGL_EXT_blend_func_separate
#define GL_BLEND_DST_RGB_EXT              0x80C8
#define GL_BLEND_SRC_RGB_EXT              0x80C9
#define GL_BLEND_DST_ALPHA_EXT            0x80CA
#define GL_BLEND_SRC_ALPHA_EXT            0x80CB
#endif /* GL_EXT_blend_func_separate */

#ifdef ANYGL_EXT_blend_minmax
#define GL_MIN_EXT                        0x8007
#define GL_MAX_EXT                        0x8008
#define GL_FUNC_ADD_EXT                   0x8006
#define GL_BLEND_EQUATION_EXT             0x8009
#endif /* GL_EXT_blend_minmax */

#ifdef ANYGL_EXT_blend_subtract
#define GL_FUNC_SUBTRACT_EXT              0x800A
#define GL_FUNC_REVERSE_SUBTRACT_EXT      0x800B
#endif /* GL_EXT_blend_subtract */

#ifdef ANYGL_EXT_buffer_storage
#define GL_MAP_PERSISTENT_BIT_EXT         0x0040
#define GL_MAP_COHERENT_BIT_EXT           0x0080
#define GL_DYNAMIC_STORAGE_BIT_EXT        0x0100
#define GL_CLIENT_STORAGE_BIT_EXT         0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE_EXT   0x821F
#define GL_BUFFER_STORAGE_FLAGS_EXT       0x8220
#endif /* GL_EXT_buffer_storage */

#ifdef ANYGL_EXT_clip_control
#define GL_LOWER_LEFT_EXT                 0x8CA1
#define GL_UPPER_LEFT_EXT                 0x8CA2
#define GL_NEGATIVE_ONE_TO_ONE_EXT        0x935E
#define GL_ZERO_TO_ONE_EXT                0x935F
#define GL_CLIP_ORIGIN_EXT                0x935C
#define GL_CLIP_DEPTH_MODE_EXT            0x935D
#endif /* GL_EXT_clip_control */

#ifdef ANYGL_EXT_clip_cull_distance
#define GL_MAX_CLIP_DISTANCES_EXT         0x0D32
#define GL_MAX_CULL_DISTANCES_EXT         0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0x82FA
#define GL_CLIP_DISTANCE0_EXT             0x3000
#define GL_CLIP_DISTANCE1_EXT             0x3001
#define GL_CLIP_DISTANCE2_EXT             0x3002
#define GL_CLIP_DISTANCE3_EXT             0x3003
#define GL_CLIP_DISTANCE4_EXT             0x3004
#define GL_CLIP_DISTANCE5_EXT             0x3005
#define GL_CLIP_DISTANCE6_EXT             0x3006
#define GL_CLIP_DISTANCE7_EXT             0x3007
#endif /* GL_EXT_clip_cull_distance */

#ifdef ANYGL_EXT_clip_volume_hint
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT  0x80F0
#endif /* GL_EXT_clip_volume_hint */

#ifdef ANYGL_EXT_cmyka
#define GL_CMYK_EXT                       0x800C
#define GL_CMYKA_EXT                      0x800D
#define GL_PACK_CMYK_HINT_EXT             0x800E
#define GL_UNPACK_CMYK_HINT_EXT           0x800F
#endif /* GL_EXT_cmyka */

#ifdef ANYGL_EXT_color_buffer_half_float
#define GL_RGBA16F_EXT                    0x881A
#define GL_RGB16F_EXT                     0x881B
#define GL_RG16F_EXT                      0x822F
#define GL_R16F_EXT                       0x822D
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0x8211
#define GL_UNSIGNED_NORMALIZED_EXT        0x8C17
#endif /* GL_EXT_color_buffer_half_float */

#ifdef ANYGL_EXT_compiled_vertex_array
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT   0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT   0x81A9
#endif /* GL_EXT_compiled_vertex_array */

#ifdef ANYGL_EXT_convolution
#define GL_CONVOLUTION_1D_EXT             0x8010
#define GL_CONVOLUTION_2D_EXT             0x8011
#define GL_SEPARABLE_2D_EXT               0x8012
#define GL_CONVOLUTION_BORDER_MODE_EXT    0x8013
#define GL_CONVOLUTION_FILTER_SCALE_EXT   0x8014
#define GL_CONVOLUTION_FILTER_BIAS_EXT    0x8015
#define GL_REDUCE_EXT                     0x8016
#define GL_CONVOLUTION_FORMAT_EXT         0x8017
#define GL_CONVOLUTION_WIDTH_EXT          0x8018
#define GL_CONVOLUTION_HEIGHT_EXT         0x8019
#define GL_MAX_CONVOLUTION_WIDTH_EXT      0x801A
#define GL_MAX_CONVOLUTION_HEIGHT_EXT     0x801B
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS_EXT  0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#endif /* GL_EXT_convolution */

#ifdef ANYGL_EXT_coordinate_frame
#define GL_TANGENT_ARRAY_EXT              0x8439
#define GL_BINORMAL_ARRAY_EXT             0x843A
#define GL_CURRENT_TANGENT_EXT            0x843B
#define GL_CURRENT_BINORMAL_EXT           0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT         0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT       0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT        0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT      0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT      0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT     0x8443
#define GL_MAP1_TANGENT_EXT               0x8444
#define GL_MAP2_TANGENT_EXT               0x8445
#define GL_MAP1_BINORMAL_EXT              0x8446
#define GL_MAP2_BINORMAL_EXT              0x8447
#endif /* GL_EXT_coordinate_frame */

#ifdef ANYGL_EXT_cull_vertex
#define GL_CULL_VERTEX_EXT                0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT   0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#endif /* GL_EXT_cull_vertex */

#ifdef ANYGL_EXT_debug_label
#define GL_PROGRAM_PIPELINE_OBJECT_EXT    0x8A4F
#define GL_PROGRAM_OBJECT_EXT             0x8B40
#define GL_SHADER_OBJECT_EXT              0x8B48
#define GL_BUFFER_OBJECT_EXT              0x9151
#define GL_QUERY_OBJECT_EXT               0x9153
#define GL_VERTEX_ARRAY_OBJECT_EXT        0x9154
#endif /* GL_EXT_debug_label */

#ifdef ANYGL_EXT_depth_bounds_test
#define GL_DEPTH_BOUNDS_TEST_EXT          0x8890
#define GL_DEPTH_BOUNDS_EXT               0x8891
#endif /* GL_EXT_depth_bounds_test */

#ifdef ANYGL_EXT_depth_clamp
#define GL_DEPTH_CLAMP_EXT                0x864F
#endif /* GL_EXT_depth_clamp */

#ifdef ANYGL_EXT_direct_state_access
#define GL_PROGRAM_MATRIX_EXT             0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT   0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#endif /* GL_EXT_direct_state_access */

#ifdef ANYGL_EXT_discard_framebuffer
#define GL_COLOR_EXT                      0x1800
#define GL_DEPTH_EXT                      0x1801
#define GL_STENCIL_EXT                    0x1802
#endif /* GL_EXT_discard_framebuffer */

#ifdef ANYGL_EXT_disjoint_timer_query
#define GL_QUERY_COUNTER_BITS_EXT         0x8864
#define GL_CURRENT_QUERY_EXT              0x8865
#define GL_QUERY_RESULT_EXT               0x8866
#define GL_QUERY_RESULT_AVAILABLE_EXT     0x8867
#define GL_TIME_ELAPSED_EXT               0x88BF
#define GL_TIMESTAMP_EXT                  0x8E28
#define GL_GPU_DISJOINT_EXT               0x8FBB
#endif /* GL_EXT_disjoint_timer_query */

#ifdef ANYGL_EXT_draw_buffers
#define GL_MAX_COLOR_ATTACHMENTS_EXT      0x8CDF
#define GL_MAX_DRAW_BUFFERS_EXT           0x8824
#define GL_DRAW_BUFFER0_EXT               0x8825
#define GL_DRAW_BUFFER1_EXT               0x8826
#define GL_DRAW_BUFFER2_EXT               0x8827
#define GL_DRAW_BUFFER3_EXT               0x8828
#define GL_DRAW_BUFFER4_EXT               0x8829
#define GL_DRAW_BUFFER5_EXT               0x882A
#define GL_DRAW_BUFFER6_EXT               0x882B
#define GL_DRAW_BUFFER7_EXT               0x882C
#define GL_DRAW_BUFFER8_EXT               0x882D
#define GL_DRAW_BUFFER9_EXT               0x882E
#define GL_DRAW_BUFFER10_EXT              0x882F
#define GL_DRAW_BUFFER11_EXT              0x8830
#define GL_DRAW_BUFFER12_EXT              0x8831
#define GL_DRAW_BUFFER13_EXT              0x8832
#define GL_DRAW_BUFFER14_EXT              0x8833
#define GL_DRAW_BUFFER15_EXT              0x8834
#define GL_COLOR_ATTACHMENT0_EXT          0x8CE0
#define GL_COLOR_ATTACHMENT1_EXT          0x8CE1
#define GL_COLOR_ATTACHMENT2_EXT          0x8CE2
#define GL_COLOR_ATTACHMENT3_EXT          0x8CE3
#define GL_COLOR_ATTACHMENT4_EXT          0x8CE4
#define GL_COLOR_ATTACHMENT5_EXT          0x8CE5
#define GL_COLOR_ATTACHMENT6_EXT          0x8CE6
#define GL_COLOR_ATTACHMENT7_EXT          0x8CE7
#define GL_COLOR_ATTACHMENT8_EXT          0x8CE8
#define GL_COLOR_ATTACHMENT9_EXT          0x8CE9
#define GL_COLOR_ATTACHMENT10_EXT         0x8CEA
#define GL_COLOR_ATTACHMENT11_EXT         0x8CEB
#define GL_COLOR_ATTACHMENT12_EXT         0x8CEC
#define GL_COLOR_ATTACHMENT13_EXT         0x8CED
#define GL_COLOR_ATTACHMENT14_EXT         0x8CEE
#define GL_COLOR_ATTACHMENT15_EXT         0x8CEF
#endif /* GL_EXT_draw_buffers */

#ifdef ANYGL_EXT_draw_range_elements
#define GL_MAX_ELEMENTS_VERTICES_EXT      0x80E8
#define GL_MAX_ELEMENTS_INDICES_EXT       0x80E9
#endif /* GL_EXT_draw_range_elements */

#ifdef ANYGL_EXT_fog_coord
#define GL_FOG_COORDINATE_SOURCE_EXT      0x8450
#define GL_FOG_COORDINATE_EXT             0x8451
#define GL_FRAGMENT_DEPTH_EXT             0x8452
#define GL_CURRENT_FOG_COORDINATE_EXT     0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT  0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORDINATE_ARRAY_EXT       0x8457
#endif /* GL_EXT_fog_coord */

#ifdef ANYGL_EXT_framebuffer_blit
#define GL_READ_FRAMEBUFFER_EXT           0x8CA8
#define GL_DRAW_FRAMEBUFFER_EXT           0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT   0x8CA6
#define GL_READ_FRAMEBUFFER_BINDING_EXT   0x8CAA
#endif /* GL_EXT_framebuffer_blit */

#ifdef ANYGL_EXT_framebuffer_multisample
#define GL_RENDERBUFFER_SAMPLES_EXT       0x8CAB
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_MAX_SAMPLES_EXT                0x8D57
#endif /* GL_EXT_framebuffer_multisample */

#ifdef ANYGL_EXT_framebuffer_multisample_blit_scaled
#define GL_SCALED_RESOLVE_FASTEST_EXT     0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT      0x90BB
#endif /* GL_EXT_framebuffer_multisample_blit_scaled */

#ifdef ANYGL_EXT_framebuffer_object
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_MAX_RENDERBUFFER_SIZE_EXT      0x84E8
#define GL_FRAMEBUFFER_BINDING_EXT        0x8CA6
#define GL_RENDERBUFFER_BINDING_EXT       0x8CA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE_EXT       0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT    0x8CDD
#define GL_DEPTH_ATTACHMENT_EXT           0x8D00
#define GL_STENCIL_ATTACHMENT_EXT         0x8D20
#define GL_FRAMEBUFFER_EXT                0x8D40
#define GL_RENDERBUFFER_EXT               0x8D41
#define GL_RENDERBUFFER_WIDTH_EXT         0x8D42
#define GL_RENDERBUFFER_HEIGHT_EXT        0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_STENCIL_INDEX1_EXT             0x8D46
#define GL_STENCIL_INDEX4_EXT             0x8D47
#define GL_STENCIL_INDEX8_EXT             0x8D48
#define GL_STENCIL_INDEX16_EXT            0x8D49
#define GL_RENDERBUFFER_RED_SIZE_EXT      0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE_EXT    0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE_EXT     0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT    0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT    0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT  0x8D55
#endif /* GL_EXT_framebuffer_object */

#ifdef ANYGL_EXT_framebuffer_sRGB
#define GL_FRAMEBUFFER_SRGB_EXT           0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT   0x8DBA
#endif /* GL_EXT_framebuffer_sRGB */

#ifdef ANYGL_EXT_geometry_shader
#define GL_GEOMETRY_SHADER_EXT            0x8DD9
#define GL_GEOMETRY_SHADER_BIT_EXT        0x00000004
#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
#define GL_LAYER_PROVOKING_VERTEX_EXT     0x825E
#define GL_LINES_ADJACENCY_EXT            0x000A
#define GL_LINE_STRIP_ADJACENCY_EXT       0x000B
#define GL_TRIANGLES_ADJACENCY_EXT        0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT   0x000D
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
#define GL_FIRST_VERTEX_CONVENTION_EXT    0x8E4D
#define GL_LAST_VERTEX_CONVENTION_EXT     0x8E4E
#define GL_UNDEFINED_VERTEX_EXT           0x8260
#define GL_PRIMITIVES_GENERATED_EXT       0x8C87
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
#define GL_MAX_FRAMEBUFFER_LAYERS_EXT     0x9317
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
#endif /* GL_EXT_geometry_shader */

#ifdef ANYGL_EXT_geometry_shader4
#define GL_GEOMETRY_VERTICES_OUT_EXT      0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_EXT        0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_EXT       0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_VARYING_COMPONENTS_EXT     0x8B4B
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_PROGRAM_POINT_SIZE_EXT         0x8642
#endif /* GL_EXT_geometry_shader4 */

#ifdef ANYGL_EXT_gpu_shader4
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_SAMPLER_1D_ARRAY_EXT           0x8DC0
#define GL_SAMPLER_2D_ARRAY_EXT           0x8DC1
#define GL_SAMPLER_BUFFER_EXT             0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT    0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT    0x8DC4
#define GL_SAMPLER_CUBE_SHADOW_EXT        0x8DC5
#define GL_UNSIGNED_INT_VEC2_EXT          0x8DC6
#define GL_UNSIGNED_INT_VEC3_EXT          0x8DC7
#define GL_UNSIGNED_INT_VEC4_EXT          0x8DC8
#define GL_INT_SAMPLER_1D_EXT             0x8DC9
#define GL_INT_SAMPLER_2D_EXT             0x8DCA
#define GL_INT_SAMPLER_3D_EXT             0x8DCB
#define GL_INT_SAMPLER_CUBE_EXT           0x8DCC
#define GL_INT_SAMPLER_2D_RECT_EXT        0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY_EXT       0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY_EXT       0x8DCF
#define GL_INT_SAMPLER_BUFFER_EXT         0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT    0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT    0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT    0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT  0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT   0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT   0x8905
#endif /* GL_EXT_gpu_shader4 */

#ifdef ANYGL_EXT_histogram
#define GL_HISTOGRAM_EXT                  0x8024
#define GL_PROXY_HISTOGRAM_EXT            0x8025
#define GL_HISTOGRAM_WIDTH_EXT            0x8026
#define GL_HISTOGRAM_FORMAT_EXT           0x8027
#define GL_HISTOGRAM_RED_SIZE_EXT         0x8028
#define GL_HISTOGRAM_GREEN_SIZE_EXT       0x8029
#define GL_HISTOGRAM_BLUE_SIZE_EXT        0x802A
#define GL_HISTOGRAM_ALPHA_SIZE_EXT       0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT   0x802C
#define GL_HISTOGRAM_SINK_EXT             0x802D
#define GL_MINMAX_EXT                     0x802E
#define GL_MINMAX_FORMAT_EXT              0x802F
#define GL_MINMAX_SINK_EXT                0x8030
#define GL_TABLE_TOO_LARGE_EXT            0x8031
#endif /* GL_EXT_histogram */

#ifdef ANYGL_EXT_index_array_formats
#define GL_IUI_V2F_EXT                    0x81AD
#define GL_IUI_V3F_EXT                    0x81AE
#define GL_IUI_N3F_V2F_EXT                0x81AF
#define GL_IUI_N3F_V3F_EXT                0x81B0
#define GL_T2F_IUI_V2F_EXT                0x81B1
#define GL_T2F_IUI_V3F_EXT                0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT            0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT            0x81B4
#endif /* GL_EXT_index_array_formats */

#ifdef ANYGL_EXT_index_func
#define GL_INDEX_TEST_EXT                 0x81B5
#define GL_INDEX_TEST_FUNC_EXT            0x81B6
#define GL_INDEX_TEST_REF_EXT             0x81B7
#endif /* GL_EXT_index_func */

#ifdef ANYGL_EXT_index_material
#define GL_INDEX_MATERIAL_EXT             0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT   0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT        0x81BA
#endif /* GL_EXT_index_material */

#ifdef ANYGL_EXT_instanced_arrays
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
#endif /* GL_EXT_instanced_arrays */

#ifdef ANYGL_EXT_light_texture
#define GL_FRAGMENT_MATERIAL_EXT          0x8349
#define GL_FRAGMENT_NORMAL_EXT            0x834A
#define GL_FRAGMENT_COLOR_EXT             0x834C
#define GL_ATTENUATION_EXT                0x834D
#define GL_SHADOW_ATTENUATION_EXT         0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT   0x834F
#define GL_TEXTURE_LIGHT_EXT              0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT      0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#endif /* GL_EXT_light_texture */

#ifdef ANYGL_EXT_map_buffer_range
#define GL_MAP_READ_BIT_EXT               0x0001
#define GL_MAP_WRITE_BIT_EXT              0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT   0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT  0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT     0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT     0x0020
#endif /* GL_EXT_map_buffer_range */

#ifdef ANYGL_EXT_memory_object
#define GL_TEXTURE_TILING_EXT             0x9580
#define GL_DEDICATED_MEMORY_OBJECT_EXT    0x9581
#define GL_PROTECTED_MEMORY_OBJECT_EXT    0x959B
#define GL_NUM_TILING_TYPES_EXT           0x9582
#define GL_TILING_TYPES_EXT               0x9583
#define GL_OPTIMAL_TILING_EXT             0x9584
#define GL_LINEAR_TILING_EXT              0x9585
#define GL_NUM_DEVICE_UUIDS_EXT           0x9596
#define GL_DEVICE_UUID_EXT                0x9597
#define GL_DRIVER_UUID_EXT                0x9598
#define GL_UUID_SIZE_EXT                  16
#endif /* GL_EXT_memory_object */

#ifdef ANYGL_EXT_memory_object_fd
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT      0x9586
#endif /* GL_EXT_memory_object_fd */

#ifdef ANYGL_EXT_memory_object_win32
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT   0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_DEVICE_LUID_EXT                0x9599
#define GL_DEVICE_NODE_MASK_EXT           0x959A
#define GL_LUID_SIZE_EXT                  8
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT    0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
#endif /* GL_EXT_memory_object_win32 */

#ifdef ANYGL_EXT_multisample
#define GL_MULTISAMPLE_EXT                0x809D
#define GL_SAMPLE_ALPHA_TO_MASK_EXT       0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_EXT        0x809F
#define GL_SAMPLE_MASK_EXT                0x80A0
#define GL_1PASS_EXT                      0x80A1
#define GL_2PASS_0_EXT                    0x80A2
#define GL_2PASS_1_EXT                    0x80A3
#define GL_4PASS_0_EXT                    0x80A4
#define GL_4PASS_1_EXT                    0x80A5
#define GL_4PASS_2_EXT                    0x80A6
#define GL_4PASS_3_EXT                    0x80A7
#define GL_SAMPLE_BUFFERS_EXT             0x80A8
#define GL_SAMPLES_EXT                    0x80A9
#define GL_SAMPLE_MASK_VALUE_EXT          0x80AA
#define GL_SAMPLE_MASK_INVERT_EXT         0x80AB
#define GL_SAMPLE_PATTERN_EXT             0x80AC
#define GL_MULTISAMPLE_BIT_EXT            0x20000000
#endif /* GL_EXT_multisample */

#ifdef ANYGL_EXT_multisampled_render_to_texture
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#endif /* GL_EXT_multisampled_render_to_texture */

#ifdef ANYGL_EXT_multiview_draw_buffers
#define GL_COLOR_ATTACHMENT_EXT           0x90F0
#define GL_MULTIVIEW_EXT                  0x90F1
#define GL_DRAW_BUFFER_EXT                0x0C01
#define GL_READ_BUFFER_EXT                0x0C02
#define GL_MAX_MULTIVIEW_BUFFERS_EXT      0x90F2
#endif /* GL_EXT_multiview_draw_buffers */

#ifdef ANYGL_EXT_occlusion_query_boolean
#define GL_ANY_SAMPLES_PASSED_EXT         0x8C2F
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0x8D6A
#endif /* GL_EXT_occlusion_query_boolean */

#ifdef ANYGL_EXT_packed_depth_stencil
#define GL_DEPTH_STENCIL_EXT              0x84F9
#define GL_UNSIGNED_INT_24_8_EXT          0x84FA
#define GL_DEPTH24_STENCIL8_EXT           0x88F0
#define GL_TEXTURE_STENCIL_SIZE_EXT       0x88F1
#endif /* GL_EXT_packed_depth_stencil */

#ifdef ANYGL_EXT_packed_float
#define GL_R11F_G11F_B10F_EXT             0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT     0x8C3C
#endif /* GL_EXT_packed_float */

#ifdef ANYGL_EXT_packed_pixels
#define GL_UNSIGNED_BYTE_3_3_2_EXT        0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT     0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT     0x8034
#define GL_UNSIGNED_INT_8_8_8_8_EXT       0x8035
#define GL_UNSIGNED_INT_10_10_10_2_EXT    0x8036
#endif /* GL_EXT_packed_pixels */

#ifdef ANYGL_EXT_paletted_texture
#define GL_COLOR_INDEX1_EXT               0x80E2
#define GL_COLOR_INDEX2_EXT               0x80E3
#define GL_COLOR_INDEX4_EXT               0x80E4
#define GL_COLOR_INDEX8_EXT               0x80E5
#define GL_COLOR_INDEX12_EXT              0x80E6
#define GL_COLOR_INDEX16_EXT              0x80E7
#define GL_TEXTURE_INDEX_SIZE_EXT         0x80ED
#endif /* GL_EXT_paletted_texture */

#ifdef ANYGL_EXT_pixel_buffer_object
#define GL_PIXEL_PACK_BUFFER_EXT          0x88EB
#define GL_PIXEL_UNPACK_BUFFER_EXT        0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT  0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#endif /* GL_EXT_pixel_buffer_object */

#ifdef ANYGL_EXT_pixel_transform
#define GL_PIXEL_TRANSFORM_2D_EXT         0x8330
#define GL_PIXEL_MAG_FILTER_EXT           0x8331
#define GL_PIXEL_MIN_FILTER_EXT           0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT         0x8333
#define GL_CUBIC_EXT                      0x8334
#define GL_AVERAGE_EXT                    0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT  0x8338
#endif /* GL_EXT_pixel_transform */

#ifdef ANYGL_EXT_point_parameters
#define GL_POINT_SIZE_MIN_EXT             0x8126
#define GL_POINT_SIZE_MAX_EXT             0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT  0x8128
#define GL_DISTANCE_ATTENUATION_EXT       0x8129
#endif /* GL_EXT_point_parameters */

#ifdef ANYGL_EXT_polygon_offset
#define GL_POLYGON_OFFSET_EXT             0x8037
#define GL_POLYGON_OFFSET_FACTOR_EXT      0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT        0x8039
#endif /* GL_EXT_polygon_offset */

#ifdef ANYGL_EXT_polygon_offset_clamp
#define GL_POLYGON_OFFSET_CLAMP_EXT       0x8E1B
#endif /* GL_EXT_polygon_offset_clamp */

#ifdef ANYGL_EXT_primitive_bounding_box
#define GL_PRIMITIVE_BOUNDING_BOX_EXT     0x92BE
#endif /* GL_EXT_primitive_bounding_box */

#ifdef ANYGL_EXT_protected_textures
#define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0x00000010
#define GL_TEXTURE_PROTECTED_EXT          0x8BFA
#endif /* GL_EXT_protected_textures */

#ifdef ANYGL_EXT_provoking_vertex
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_PROVOKING_VERTEX_EXT           0x8E4F
#endif /* GL_EXT_provoking_vertex */

#ifdef ANYGL_EXT_pvrtc_sRGB
#define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0x8A54
#define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0x8A55
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0x8A56
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0x8A57
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0x93F0
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0x93F1
#endif /* GL_EXT_pvrtc_sRGB */

#ifdef ANYGL_EXT_raster_multisample
#define GL_RASTER_MULTISAMPLE_EXT         0x9327
#define GL_RASTER_SAMPLES_EXT             0x9328
#define GL_MAX_RASTER_SAMPLES_EXT         0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT   0x932C
#endif /* GL_EXT_raster_multisample */

#ifdef ANYGL_EXT_read_format_bgra
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
#endif /* GL_EXT_read_format_bgra */

#ifdef ANYGL_EXT_render_snorm
#define GL_R16_SNORM_EXT                  0x8F98
#define GL_RG16_SNORM_EXT                 0x8F99
#define GL_RGBA16_SNORM_EXT               0x8F9B
#endif /* GL_EXT_render_snorm */

#ifdef ANYGL_EXT_rescale_normal
#define GL_RESCALE_NORMAL_EXT             0x803A
#endif /* GL_EXT_rescale_normal */

#ifdef ANYGL_EXT_robustness
#define GL_GUILTY_CONTEXT_RESET_EXT       0x8253
#define GL_INNOCENT_CONTEXT_RESET_EXT     0x8254
#define GL_UNKNOWN_CONTEXT_RESET_EXT      0x8255
#define GL_CONTEXT_ROBUST_ACCESS_EXT      0x90F3
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_LOSE_CONTEXT_ON_RESET_EXT      0x8252
#define GL_NO_RESET_NOTIFICATION_EXT      0x8261
#endif /* GL_EXT_robustness */

#ifdef ANYGL_EXT_sRGB
#define GL_SRGB_EXT                       0x8C40
#define GL_SRGB_ALPHA_EXT                 0x8C42
#define GL_SRGB8_ALPHA8_EXT               0x8C43
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#endif /* GL_EXT_sRGB */

#ifdef ANYGL_EXT_secondary_color
#define GL_COLOR_SUM_EXT                  0x8458
#define GL_CURRENT_SECONDARY_COLOR_EXT    0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY_EXT      0x845E
#endif /* GL_EXT_secondary_color */

#ifdef ANYGL_EXT_semaphore
#define GL_LAYOUT_GENERAL_EXT             0x958D
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT    0x958E
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_SHADER_READ_ONLY_EXT    0x9591
#define GL_LAYOUT_TRANSFER_SRC_EXT        0x9592
#define GL_LAYOUT_TRANSFER_DST_EXT        0x9593
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531
#endif /* GL_EXT_semaphore */

#ifdef ANYGL_EXT_semaphore_win32
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT    0x9594
#define GL_D3D12_FENCE_VALUE_EXT          0x9595
#endif /* GL_EXT_semaphore_win32 */

#ifdef ANYGL_EXT_separate_shader_objects
#define GL_ACTIVE_PROGRAM_EXT             0x8B8D
#define GL_VERTEX_SHADER_BIT_EXT          0x00000001
#define GL_FRAGMENT_SHADER_BIT_EXT        0x00000002
#define GL_ALL_SHADER_BITS_EXT            0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE_EXT          0x8258
#define GL_PROGRAM_PIPELINE_BINDING_EXT   0x825A
#endif /* GL_EXT_separate_shader_objects */

#ifdef ANYGL_EXT_separate_specular_color
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT  0x81F8
#define GL_SINGLE_COLOR_EXT               0x81F9
#define GL_SEPARATE_SPECULAR_COLOR_EXT    0x81FA
#endif /* GL_EXT_separate_specular_color */

#ifdef ANYGL_EXT_shader_framebuffer_fetch
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#endif /* GL_EXT_shader_framebuffer_fetch */

#ifdef ANYGL_EXT_shader_image_load_store
#define GL_MAX_IMAGE_UNITS_EXT            0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_IMAGE_BINDING_NAME_EXT         0x8F3A
#define GL_IMAGE_BINDING_LEVEL_EXT        0x8F3B
#define GL_IMAGE_BINDING_LAYERED_EXT      0x8F3C
#define GL_IMAGE_BINDING_LAYER_EXT        0x8F3D
#define GL_IMAGE_BINDING_ACCESS_EXT       0x8F3E
#define GL_IMAGE_1D_EXT                   0x904C
#define GL_IMAGE_2D_EXT                   0x904D
#define GL_IMAGE_3D_EXT                   0x904E
#define GL_IMAGE_2D_RECT_EXT              0x904F
#define GL_IMAGE_CUBE_EXT                 0x9050
#define GL_IMAGE_BUFFER_EXT               0x9051
#define GL_IMAGE_1D_ARRAY_EXT             0x9052
#define GL_IMAGE_2D_ARRAY_EXT             0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT       0x9054
#define GL_IMAGE_2D_MULTISAMPLE_EXT       0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D_EXT               0x9057
#define GL_INT_IMAGE_2D_EXT               0x9058
#define GL_INT_IMAGE_3D_EXT               0x9059
#define GL_INT_IMAGE_2D_RECT_EXT          0x905A
#define GL_INT_IMAGE_CUBE_EXT             0x905B
#define GL_INT_IMAGE_BUFFER_EXT           0x905C
#define GL_INT_IMAGE_1D_ARRAY_EXT         0x905D
#define GL_INT_IMAGE_2D_ARRAY_EXT         0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT   0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT   0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D_EXT      0x9062
#define GL_UNSIGNED_INT_IMAGE_2D_EXT      0x9063
#define GL_UNSIGNED_INT_IMAGE_3D_EXT      0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT    0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT  0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES_EXT          0x906D
#define GL_IMAGE_BINDING_FORMAT_EXT       0x906E
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002
#define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COMMAND_BARRIER_BIT_EXT        0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF
#endif /* GL_EXT_shader_image_load_store */

#ifdef ANYGL_EXT_shader_pixel_local_storage
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0x8F63
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0x8F67
#define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0x8F64
#endif /* GL_EXT_shader_pixel_local_storage */

#ifdef ANYGL_EXT_shader_pixel_local_storage2
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0x9650
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0x9651
#define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0x9652
#endif /* GL_EXT_shader_pixel_local_storage2 */

#ifdef ANYGL_EXT_shadow_samplers
#define GL_TEXTURE_COMPARE_MODE_EXT       0x884C
#define GL_TEXTURE_COMPARE_FUNC_EXT       0x884D
#define GL_COMPARE_REF_TO_TEXTURE_EXT     0x884E
#define GL_SAMPLER_2D_SHADOW_EXT          0x8B62
#endif /* GL_EXT_shadow_samplers */

#ifdef ANYGL_EXT_shared_texture_palette
#define GL_SHARED_TEXTURE_PALETTE_EXT     0x81FB
#endif /* GL_EXT_shared_texture_palette */

#ifdef ANYGL_EXT_sparse_texture
#define GL_TEXTURE_SPARSE_EXT             0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT    0x91A7
#define GL_NUM_SPARSE_LEVELS_EXT          0x91AA
#define GL_NUM_VIRTUAL_PAGE_SIZES_EXT     0x91A8
#define GL_VIRTUAL_PAGE_SIZE_X_EXT        0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_EXT        0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_EXT        0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_EXT    0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0x919A
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0x91A9
#endif /* GL_EXT_sparse_texture */

#ifdef ANYGL_EXT_stencil_clear_tag
#define GL_STENCIL_TAG_BITS_EXT           0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT    0x88F3
#endif /* GL_EXT_stencil_clear_tag */

#ifdef ANYGL_EXT_stencil_two_side
#define GL_STENCIL_TEST_TWO_SIDE_EXT      0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT        0x8911
#endif /* GL_EXT_stencil_two_side */

#ifdef ANYGL_EXT_stencil_wrap
#define GL_INCR_WRAP_EXT                  0x8507
#define GL_DECR_WRAP_EXT                  0x8508
#endif /* GL_EXT_stencil_wrap */

#ifdef ANYGL_EXT_tessellation_shader
#define GL_PATCHES_EXT                    0x000E
#define GL_PATCH_VERTICES_EXT             0x8E72
#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
#define GL_TESS_GEN_MODE_EXT              0x8E76
#define GL_TESS_GEN_SPACING_EXT           0x8E77
#define GL_TESS_GEN_VERTEX_ORDER_EXT      0x8E78
#define GL_TESS_GEN_POINT_MODE_EXT        0x8E79
#define GL_ISOLINES_EXT                   0x8E7A
#define GL_QUADS_EXT                      0x0007
#define GL_FRACTIONAL_ODD_EXT             0x8E7B
#define GL_FRACTIONAL_EVEN_EXT            0x8E7C
#define GL_MAX_PATCH_VERTICES_EXT         0x8E7D
#define GL_MAX_TESS_GEN_LEVEL_EXT         0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS_EXT  0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
#define GL_IS_PER_PATCH_EXT               0x92E7
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
#define GL_TESS_CONTROL_SHADER_EXT        0x8E88
#define GL_TESS_EVALUATION_SHADER_EXT     0x8E87
#define GL_TESS_CONTROL_SHADER_BIT_EXT    0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
#endif /* GL_EXT_tessellation_shader */

#ifdef ANYGL_EXT_texture
#define GL_ALPHA4_EXT                     0x803B
#define GL_ALPHA8_EXT                     0x803C
#define GL_ALPHA12_EXT                    0x803D
#define GL_ALPHA16_EXT                    0x803E
#define GL_LUMINANCE4_EXT                 0x803F
#define GL_LUMINANCE8_EXT                 0x8040
#define GL_LUMINANCE12_EXT                0x8041
#define GL_LUMINANCE16_EXT                0x8042
#define GL_LUMINANCE4_ALPHA4_EXT          0x8043
#define GL_LUMINANCE6_ALPHA2_EXT          0x8044
#define GL_LUMINANCE8_ALPHA8_EXT          0x8045
#define GL_LUMINANCE12_ALPHA4_EXT         0x8046
#define GL_LUMINANCE12_ALPHA12_EXT        0x8047
#define GL_LUMINANCE16_ALPHA16_EXT        0x8048
#define GL_INTENSITY_EXT                  0x8049
#define GL_INTENSITY4_EXT                 0x804A
#define GL_INTENSITY8_EXT                 0x804B
#define GL_INTENSITY12_EXT                0x804C
#define GL_INTENSITY16_EXT                0x804D
#define GL_RGB2_EXT                       0x804E
#define GL_RGB4_EXT                       0x804F
#define GL_RGB5_EXT                       0x8050
#define GL_RGB8_EXT                       0x8051
#define GL_RGB12_EXT                      0x8053
#define GL_RGB16_EXT                      0x8054
#define GL_RGBA2_EXT                      0x8055
#define GL_RGBA4_EXT                      0x8056
#define GL_RGB5_A1_EXT                    0x8057
#define GL_RGBA8_EXT                      0x8058
#define GL_RGBA12_EXT                     0x805A
#define GL_RGBA16_EXT                     0x805B
#define GL_TEXTURE_RED_SIZE_EXT           0x805C
#define GL_TEXTURE_GREEN_SIZE_EXT         0x805D
#define GL_TEXTURE_BLUE_SIZE_EXT          0x805E
#define GL_TEXTURE_ALPHA_SIZE_EXT         0x805F
#define GL_TEXTURE_LUMINANCE_SIZE_EXT     0x8060
#define GL_TEXTURE_INTENSITY_SIZE_EXT     0x8061
#define GL_REPLACE_EXT                    0x8062
#define GL_PROXY_TEXTURE_1D_EXT           0x8063
#define GL_PROXY_TEXTURE_2D_EXT           0x8064
#define GL_TEXTURE_TOO_LARGE_EXT          0x8065
#endif /* GL_EXT_texture */

#ifdef ANYGL_EXT_texture3D
#define GL_PACK_SKIP_IMAGES_EXT           0x806B
#define GL_PACK_IMAGE_HEIGHT_EXT          0x806C
#define GL_UNPACK_SKIP_IMAGES_EXT         0x806D
#define GL_UNPACK_IMAGE_HEIGHT_EXT        0x806E
#define GL_TEXTURE_3D_EXT                 0x806F
#define GL_PROXY_TEXTURE_3D_EXT           0x8070
#define GL_TEXTURE_DEPTH_EXT              0x8071
#define GL_TEXTURE_WRAP_R_EXT             0x8072
#define GL_MAX_3D_TEXTURE_SIZE_EXT        0x8073
#endif /* GL_EXT_texture3D */

#ifdef ANYGL_EXT_texture_array
#define GL_TEXTURE_1D_ARRAY_EXT           0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT     0x8C19
#define GL_TEXTURE_2D_ARRAY_EXT           0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT     0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT   0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT   0x8C1D
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT   0x88FF
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#endif /* GL_EXT_texture_array */

#ifdef ANYGL_EXT_texture_border_clamp
#define GL_TEXTURE_BORDER_COLOR_EXT       0x1004
#define GL_CLAMP_TO_BORDER_EXT            0x812D
#endif /* GL_EXT_texture_border_clamp */

#ifdef ANYGL_EXT_texture_buffer
#define GL_TEXTURE_BUFFER_EXT             0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_EXT     0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT    0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_EXT     0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_EXT      0x919D
#define GL_TEXTURE_BUFFER_SIZE_EXT        0x919E
#endif /* GL_EXT_texture_buffer */

#ifdef ANYGL_EXT_texture_buffer_object
#define GL_TEXTURE_BUFFER_FORMAT_EXT      0x8C2E
#endif /* GL_EXT_texture_buffer_object */

#ifdef ANYGL_EXT_texture_compression_astc_decode_mode
#define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0x8F69
#endif /* GL_EXT_texture_compression_astc_decode_mode */

#ifdef ANYGL_EXT_texture_compression_bptc
#define GL_COMPRESSED_RGBA_BPTC_UNORM_EXT 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT 0x8E8F
#endif /* GL_EXT_texture_compression_bptc */

#ifdef ANYGL_EXT_texture_compression_dxt1
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT   0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT  0x83F1
#endif /* GL_EXT_texture_compression_dxt1 */

#ifdef ANYGL_EXT_texture_compression_latc
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#endif /* GL_EXT_texture_compression_latc */

#ifdef ANYGL_EXT_texture_compression_rgtc
#define GL_COMPRESSED_RED_RGTC1_EXT       0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#endif /* GL_EXT_texture_compression_rgtc */

#ifdef ANYGL_EXT_texture_compression_s3tc
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT  0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT  0x83F3
#endif /* GL_EXT_texture_compression_s3tc */

#ifdef ANYGL_EXT_texture_compression_s3tc_srgb
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT  0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#endif /* GL_EXT_texture_compression_s3tc_srgb */

#ifdef ANYGL_EXT_texture_cube_map
#define GL_NORMAL_MAP_EXT                 0x8511
#define GL_REFLECTION_MAP_EXT             0x8512
#define GL_TEXTURE_CUBE_MAP_EXT           0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT   0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT     0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT  0x851C
#endif /* GL_EXT_texture_cube_map */

#ifdef ANYGL_EXT_texture_cube_map_array
#define GL_TEXTURE_CUBE_MAP_ARRAY_EXT     0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0x900A
#define GL_SAMPLER_CUBE_MAP_ARRAY_EXT     0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900F
#endif /* GL_EXT_texture_cube_map_array */

#ifdef ANYGL_EXT_texture_env_combine
#define GL_COMBINE_EXT                    0x8570
#define GL_COMBINE_RGB_EXT                0x8571
#define GL_COMBINE_ALPHA_EXT              0x8572
#define GL_RGB_SCALE_EXT                  0x8573
#define GL_ADD_SIGNED_EXT                 0x8574
#define GL_INTERPOLATE_EXT                0x8575
#define GL_CONSTANT_EXT                   0x8576
#define GL_PRIMARY_COLOR_EXT              0x8577
#define GL_PREVIOUS_EXT                   0x8578
#define GL_SOURCE0_RGB_EXT                0x8580
#define GL_SOURCE1_RGB_EXT                0x8581
#define GL_SOURCE2_RGB_EXT                0x8582
#define GL_SOURCE0_ALPHA_EXT              0x8588
#define GL_SOURCE1_ALPHA_EXT              0x8589
#define GL_SOURCE2_ALPHA_EXT              0x858A
#define GL_OPERAND0_RGB_EXT               0x8590
#define GL_OPERAND1_RGB_EXT               0x8591
#define GL_OPERAND2_RGB_EXT               0x8592
#define GL_OPERAND0_ALPHA_EXT             0x8598
#define GL_OPERAND1_ALPHA_EXT             0x8599
#define GL_OPERAND2_ALPHA_EXT             0x859A
#endif /* GL_EXT_texture_env_combine */

#ifdef ANYGL_EXT_texture_env_dot3
#define GL_DOT3_RGB_EXT                   0x8740
#define GL_DOT3_RGBA_EXT                  0x8741
#endif /* GL_EXT_texture_env_dot3 */

#ifdef ANYGL_EXT_texture_filter_anisotropic
#define GL_TEXTURE_MAX_ANISOTROPY_EXT     0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#endif /* GL_EXT_texture_filter_anisotropic */

#ifdef ANYGL_EXT_texture_filter_minmax
#define GL_TEXTURE_REDUCTION_MODE_EXT     0x9366
#define GL_WEIGHTED_AVERAGE_EXT           0x9367
#endif /* GL_EXT_texture_filter_minmax */

#ifdef ANYGL_EXT_texture_format_sRGB_override
#define GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT 0x8FBF
#endif /* GL_EXT_texture_format_sRGB_override */

#ifdef ANYGL_EXT_texture_integer
#define GL_RGBA32UI_EXT                   0x8D70
#define GL_RGB32UI_EXT                    0x8D71
#define GL_ALPHA32UI_EXT                  0x8D72
#define GL_INTENSITY32UI_EXT              0x8D73
#define GL_LUMINANCE32UI_EXT              0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT        0x8D75
#define GL_RGBA16UI_EXT                   0x8D76
#define GL_RGB16UI_EXT                    0x8D77
#define GL_ALPHA16UI_EXT                  0x8D78
#define GL_INTENSITY16UI_EXT              0x8D79
#define GL_LUMINANCE16UI_EXT              0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT        0x8D7B
#define GL_RGBA8UI_EXT                    0x8D7C
#define GL_RGB8UI_EXT                     0x8D7D
#define GL_ALPHA8UI_EXT                   0x8D7E
#define GL_INTENSITY8UI_EXT               0x8D7F
#define GL_LUMINANCE8UI_EXT               0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT         0x8D81
#define GL_RGBA32I_EXT                    0x8D82
#define GL_RGB32I_EXT                     0x8D83
#define GL_ALPHA32I_EXT                   0x8D84
#define GL_INTENSITY32I_EXT               0x8D85
#define GL_LUMINANCE32I_EXT               0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT         0x8D87
#define GL_RGBA16I_EXT                    0x8D88
#define GL_RGB16I_EXT                     0x8D89
#define GL_ALPHA16I_EXT                   0x8D8A
#define GL_INTENSITY16I_EXT               0x8D8B
#define GL_LUMINANCE16I_EXT               0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT         0x8D8D
#define GL_RGBA8I_EXT                     0x8D8E
#define GL_RGB8I_EXT                      0x8D8F
#define GL_ALPHA8I_EXT                    0x8D90
#define GL_INTENSITY8I_EXT                0x8D91
#define GL_LUMINANCE8I_EXT                0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT          0x8D93
#define GL_RED_INTEGER_EXT                0x8D94
#define GL_GREEN_INTEGER_EXT              0x8D95
#define GL_BLUE_INTEGER_EXT               0x8D96
#define GL_ALPHA_INTEGER_EXT              0x8D97
#define GL_RGB_INTEGER_EXT                0x8D98
#define GL_RGBA_INTEGER_EXT               0x8D99
#define GL_BGR_INTEGER_EXT                0x8D9A
#define GL_BGRA_INTEGER_EXT               0x8D9B
#define GL_LUMINANCE_INTEGER_EXT          0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT    0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT          0x8D9E
#endif /* GL_EXT_texture_integer */

#ifdef ANYGL_EXT_texture_lod_bias
#define GL_MAX_TEXTURE_LOD_BIAS_EXT       0x84FD
#define GL_TEXTURE_FILTER_CONTROL_EXT     0x8500
#define GL_TEXTURE_LOD_BIAS_EXT           0x8501
#endif /* GL_EXT_texture_lod_bias */

#ifdef ANYGL_EXT_texture_mirror_clamp
#define GL_MIRROR_CLAMP_EXT               0x8742
#define GL_MIRROR_CLAMP_TO_EDGE_EXT       0x8743
#define GL_MIRROR_CLAMP_TO_BORDER_EXT     0x8912
#endif /* GL_EXT_texture_mirror_clamp */

#ifdef ANYGL_EXT_texture_norm16
#define GL_R16_EXT                        0x822A
#define GL_RG16_EXT                       0x822C
#define GL_RGB16_SNORM_EXT                0x8F9A
#endif /* GL_EXT_texture_norm16 */

#ifdef ANYGL_EXT_texture_object
#define GL_TEXTURE_PRIORITY_EXT           0x8066
#define GL_TEXTURE_RESIDENT_EXT           0x8067
#define GL_TEXTURE_1D_BINDING_EXT         0x8068
#define GL_TEXTURE_2D_BINDING_EXT         0x8069
#define GL_TEXTURE_3D_BINDING_EXT         0x806A
#endif /* GL_EXT_texture_object */

#ifdef ANYGL_EXT_texture_perturb_normal
#define GL_PERTURB_EXT                    0x85AE
#define GL_TEXTURE_NORMAL_EXT             0x85AF
#endif /* GL_EXT_texture_perturb_normal */

#ifdef ANYGL_EXT_texture_rg
#define GL_RED_EXT                        0x1903
#define GL_RG_EXT                         0x8227
#define GL_R8_EXT                         0x8229
#define GL_RG8_EXT                        0x822B
#endif /* GL_EXT_texture_rg */

#ifdef ANYGL_EXT_texture_sRGB
#define GL_SRGB8_EXT                      0x8C41
#define GL_SLUMINANCE_ALPHA_EXT           0x8C44
#define GL_SLUMINANCE8_ALPHA8_EXT         0x8C45
#define GL_SLUMINANCE_EXT                 0x8C46
#define GL_SLUMINANCE8_EXT                0x8C47
#define GL_COMPRESSED_SRGB_EXT            0x8C48
#define GL_COMPRESSED_SRGB_ALPHA_EXT      0x8C49
#define GL_COMPRESSED_SLUMINANCE_EXT      0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#endif /* GL_EXT_texture_sRGB */

#ifdef ANYGL_EXT_texture_sRGB_R8
#define GL_SR8_EXT                        0x8FBD
#endif /* GL_EXT_texture_sRGB_R8 */

#ifdef ANYGL_EXT_texture_sRGB_RG8
#define GL_SRG8_EXT                       0x8FBE
#endif /* GL_EXT_texture_sRGB_RG8 */

#ifdef ANYGL_EXT_texture_sRGB_decode
#define GL_TEXTURE_SRGB_DECODE_EXT        0x8A48
#define GL_DECODE_EXT                     0x8A49
#define GL_SKIP_DECODE_EXT                0x8A4A
#endif /* GL_EXT_texture_sRGB_decode */

#ifdef ANYGL_EXT_texture_shared_exponent
#define GL_RGB9_E5_EXT                    0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT   0x8C3E
#define GL_TEXTURE_SHARED_SIZE_EXT        0x8C3F
#endif /* GL_EXT_texture_shared_exponent */

#ifdef ANYGL_EXT_texture_snorm
#define GL_ALPHA_SNORM                    0x9010
#define GL_LUMINANCE_SNORM                0x9011
#define GL_LUMINANCE_ALPHA_SNORM          0x9012
#define GL_INTENSITY_SNORM                0x9013
#define GL_ALPHA8_SNORM                   0x9014
#define GL_LUMINANCE8_SNORM               0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM        0x9016
#define GL_INTENSITY8_SNORM               0x9017
#define GL_ALPHA16_SNORM                  0x9018
#define GL_LUMINANCE16_SNORM              0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM      0x901A
#define GL_INTENSITY16_SNORM              0x901B
#define GL_RED_SNORM                      0x8F90
#define GL_RG_SNORM                       0x8F91
#define GL_RGB_SNORM                      0x8F92
#define GL_RGBA_SNORM                     0x8F93
#endif /* GL_EXT_texture_snorm */

#ifdef ANYGL_EXT_texture_storage
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT   0x912F
#define GL_RGBA32F_EXT                    0x8814
#define GL_RGB32F_EXT                     0x8815
#define GL_ALPHA32F_EXT                   0x8816
#define GL_LUMINANCE32F_EXT               0x8818
#define GL_LUMINANCE_ALPHA32F_EXT         0x8819
#define GL_ALPHA16F_EXT                   0x881C
#define GL_LUMINANCE16F_EXT               0x881E
#define GL_LUMINANCE_ALPHA16F_EXT         0x881F
#define GL_BGRA8_EXT                      0x93A1
#define GL_R32F_EXT                       0x822E
#define GL_RG32F_EXT                      0x8230
#endif /* GL_EXT_texture_storage */

#ifdef ANYGL_EXT_texture_swizzle
#define GL_TEXTURE_SWIZZLE_R_EXT          0x8E42
#define GL_TEXTURE_SWIZZLE_G_EXT          0x8E43
#define GL_TEXTURE_SWIZZLE_B_EXT          0x8E44
#define GL_TEXTURE_SWIZZLE_A_EXT          0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA_EXT       0x8E46
#endif /* GL_EXT_texture_swizzle */

#ifdef ANYGL_EXT_texture_type_2_10_10_10_REV
#define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0x8368
#endif /* GL_EXT_texture_type_2_10_10_10_REV */

#ifdef ANYGL_EXT_texture_view
#define GL_TEXTURE_VIEW_MIN_LEVEL_EXT     0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS_EXT    0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER_EXT     0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS_EXT    0x82DE
#endif /* GL_EXT_texture_view */

#ifdef ANYGL_EXT_transform_feedback
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT  0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_INTERLEAVED_ATTRIBS_EXT        0x8C8C
#define GL_SEPARATE_ATTRIBS_EXT           0x8C8D
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_RASTERIZER_DISCARD_EXT         0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#endif /* GL_EXT_transform_feedback */

#ifdef ANYGL_EXT_unpack_subimage
#define GL_UNPACK_ROW_LENGTH_EXT          0x0CF2
#define GL_UNPACK_SKIP_ROWS_EXT           0x0CF3
#define GL_UNPACK_SKIP_PIXELS_EXT         0x0CF4
#endif /* GL_EXT_unpack_subimage */

#ifdef ANYGL_EXT_vertex_array
#define GL_VERTEX_ARRAY_EXT               0x8074
#define GL_NORMAL_ARRAY_EXT               0x8075
#define GL_COLOR_ARRAY_EXT                0x8076
#define GL_INDEX_ARRAY_EXT                0x8077
#define GL_TEXTURE_COORD_ARRAY_EXT        0x8078
#define GL_EDGE_FLAG_ARRAY_EXT            0x8079
#define GL_VERTEX_ARRAY_SIZE_EXT          0x807A
#define GL_VERTEX_ARRAY_TYPE_EXT          0x807B
#define GL_VERTEX_ARRAY_STRIDE_EXT        0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT         0x807D
#define GL_NORMAL_ARRAY_TYPE_EXT          0x807E
#define GL_NORMAL_ARRAY_STRIDE_EXT        0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT         0x8080
#define GL_COLOR_ARRAY_SIZE_EXT           0x8081
#define GL_COLOR_ARRAY_TYPE_EXT           0x8082
#define GL_COLOR_ARRAY_STRIDE_EXT         0x8083
#define GL_COLOR_ARRAY_COUNT_EXT          0x8084
#define GL_INDEX_ARRAY_TYPE_EXT           0x8085
#define GL_INDEX_ARRAY_STRIDE_EXT         0x8086
#define GL_INDEX_ARRAY_COUNT_EXT          0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT   0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT   0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT  0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT     0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT      0x808D
#define GL_VERTEX_ARRAY_POINTER_EXT       0x808E
#define GL_NORMAL_ARRAY_POINTER_EXT       0x808F
#define GL_COLOR_ARRAY_POINTER_EXT        0x8090
#define GL_INDEX_ARRAY_POINTER_EXT        0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT    0x8093
#endif /* GL_EXT_vertex_array */

#ifdef ANYGL_EXT_vertex_attrib_64bit
#define GL_DOUBLE_VEC2_EXT                0x8FFC
#define GL_DOUBLE_VEC3_EXT                0x8FFD
#define GL_DOUBLE_VEC4_EXT                0x8FFE
#define GL_DOUBLE_MAT2_EXT                0x8F46
#define GL_DOUBLE_MAT3_EXT                0x8F47
#define GL_DOUBLE_MAT4_EXT                0x8F48
#define GL_DOUBLE_MAT2x3_EXT              0x8F49
#define GL_DOUBLE_MAT2x4_EXT              0x8F4A
#define GL_DOUBLE_MAT3x2_EXT              0x8F4B
#define GL_DOUBLE_MAT3x4_EXT              0x8F4C
#define GL_DOUBLE_MAT4x2_EXT              0x8F4D
#define GL_DOUBLE_MAT4x3_EXT              0x8F4E
#endif /* GL_EXT_vertex_attrib_64bit */

#ifdef ANYGL_EXT_vertex_shader
#define GL_VERTEX_SHADER_EXT              0x8780
#define GL_VERTEX_SHADER_BINDING_EXT      0x8781
#define GL_OP_INDEX_EXT                   0x8782
#define GL_OP_NEGATE_EXT                  0x8783
#define GL_OP_DOT3_EXT                    0x8784
#define GL_OP_DOT4_EXT                    0x8785
#define GL_OP_MUL_EXT                     0x8786
#define GL_OP_ADD_EXT                     0x8787
#define GL_OP_MADD_EXT                    0x8788
#define GL_OP_FRAC_EXT                    0x8789
#define GL_OP_MAX_EXT                     0x878A
#define GL_OP_MIN_EXT                     0x878B
#define GL_OP_SET_GE_EXT                  0x878C
#define GL_OP_SET_LT_EXT                  0x878D
#define GL_OP_CLAMP_EXT                   0x878E
#define GL_OP_FLOOR_EXT                   0x878F
#define GL_OP_ROUND_EXT                   0x8790
#define GL_OP_EXP_BASE_2_EXT              0x8791
#define GL_OP_LOG_BASE_2_EXT              0x8792
#define GL_OP_POWER_EXT                   0x8793
#define GL_OP_RECIP_EXT                   0x8794
#define GL_OP_RECIP_SQRT_EXT              0x8795
#define GL_OP_SUB_EXT                     0x8796
#define GL_OP_CROSS_PRODUCT_EXT           0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT         0x8798
#define GL_OP_MOV_EXT                     0x8799
#define GL_OUTPUT_VERTEX_EXT              0x879A
#define GL_OUTPUT_COLOR0_EXT              0x879B
#define GL_OUTPUT_COLOR1_EXT              0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT      0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT      0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT      0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT      0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT      0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT      0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT      0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT      0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT      0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT      0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT     0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT     0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT     0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT     0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT     0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT     0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT     0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT     0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT     0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT     0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT     0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT     0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT     0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT     0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT     0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT     0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT     0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT     0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT     0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT     0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT     0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT     0x87BC
#define GL_OUTPUT_FOG_EXT                 0x87BD
#define GL_SCALAR_EXT                     0x87BE
#define GL_VECTOR_EXT                     0x87BF
#define GL_MATRIX_EXT                     0x87C0
#define GL_VARIANT_EXT                    0x87C1
#define GL_INVARIANT_EXT                  0x87C2
#define GL_LOCAL_CONSTANT_EXT             0x87C3
#define GL_LOCAL_EXT                      0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT   0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT     0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT   0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT       0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT    0x87D4
#define GL_X_EXT                          0x87D5
#define GL_Y_EXT                          0x87D6
#define GL_Z_EXT                          0x87D7
#define GL_W_EXT                          0x87D8
#define GL_NEGATIVE_X_EXT                 0x87D9
#define GL_NEGATIVE_Y_EXT                 0x87DA
#define GL_NEGATIVE_Z_EXT                 0x87DB
#define GL_NEGATIVE_W_EXT                 0x87DC
#define GL_ZERO_EXT                       0x87DD
#define GL_ONE_EXT                        0x87DE
#define GL_NEGATIVE_ONE_EXT               0x87DF
#define GL_NORMALIZED_RANGE_EXT           0x87E0
#define GL_FULL_RANGE_EXT                 0x87E1
#define GL_CURRENT_VERTEX_EXT             0x87E2
#define GL_MVP_MATRIX_EXT                 0x87E3
#define GL_VARIANT_VALUE_EXT              0x87E4
#define GL_VARIANT_DATATYPE_EXT           0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT       0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT         0x87E7
#define GL_VARIANT_ARRAY_EXT              0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT      0x87E9
#define GL_INVARIANT_VALUE_EXT            0x87EA
#define GL_INVARIANT_DATATYPE_EXT         0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT       0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT    0x87ED
#endif /* GL_EXT_vertex_shader */

#ifdef ANYGL_EXT_vertex_weighting
#define GL_MODELVIEW0_STACK_DEPTH_EXT     0x0BA3
#define GL_MODELVIEW1_STACK_DEPTH_EXT     0x8502
#define GL_MODELVIEW0_MATRIX_EXT          0x0BA6
#define GL_MODELVIEW1_MATRIX_EXT          0x8506
#define GL_VERTEX_WEIGHTING_EXT           0x8509
#define GL_MODELVIEW0_EXT                 0x1700
#define GL_MODELVIEW1_EXT                 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT      0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT        0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT   0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT   0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#endif /* GL_EXT_vertex_weighting */

#ifdef ANYGL_EXT_window_rectangles
#define GL_INCLUSIVE_EXT                  0x8F10
#define GL_EXCLUSIVE_EXT                  0x8F11
#define GL_WINDOW_RECTANGLE_EXT           0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT      0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT      0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT      0x8F15
#endif /* GL_EXT_window_rectangles */

#ifdef ANYGL_EXT_x11_sync_object
#define GL_SYNC_X11_FENCE_EXT             0x90E1
#endif /* GL_EXT_x11_sync_object */

#ifdef ANYGL_IMG_texture_compression_pvrtc
#define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
#define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
#endif /* GL_IMG_texture_compression_pvrtc */

#ifdef ANYGL_IMG_texture_compression_pvrtc2
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0x9137
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0x9138
#endif /* GL_IMG_texture_compression_pvrtc2 */

#endif /* ANYGL_NO_DEFINES */
/* Workaround for GL_HALF_FLOAT_OES */
ANYGL_EXPORT extern GLenum AnyGL_HALF_FLOAT;

/* Function declarations */
/* GL_ES_VERSION_2_0 */
typedef void (APIENTRY* PFNANYGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (APIENTRY* PFNANYGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (APIENTRY* PFNANYGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
typedef void (APIENTRY* PFNANYGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (APIENTRY* PFNANYGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (APIENTRY* PFNANYGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (APIENTRY* PFNANYGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (APIENTRY* PFNANYGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRY* PFNANYGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRY* PFNANYGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (APIENTRY* PFNANYGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (APIENTRY* PFNANYGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRY* PFNANYGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
typedef GLenum (APIENTRY* PFNANYGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef void (APIENTRY* PFNANYGLCLEARPROC)(GLbitfield mask);
typedef void (APIENTRY* PFNANYGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRY* PFNANYGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (APIENTRY* PFNANYGLCLEARSTENCILPROC)(GLint s);
typedef void (APIENTRY* PFNANYGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (APIENTRY* PFNANYGLCOMPILESHADERPROC)(GLuint shader);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRY* PFNANYGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLuint (APIENTRY* PFNANYGLCREATEPROGRAMPROC)();
typedef GLuint (APIENTRY* PFNANYGLCREATESHADERPROC)(GLenum type);
typedef void (APIENTRY* PFNANYGLCULLFACEPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
typedef void (APIENTRY* PFNANYGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
typedef void (APIENTRY* PFNANYGLDELETEPROGRAMPROC)(GLuint program);
typedef void (APIENTRY* PFNANYGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
typedef void (APIENTRY* PFNANYGLDELETESHADERPROC)(GLuint shader);
typedef void (APIENTRY* PFNANYGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
typedef void (APIENTRY* PFNANYGLDEPTHFUNCPROC)(GLenum func);
typedef void (APIENTRY* PFNANYGLDEPTHMASKPROC)(GLboolean flag);
typedef void (APIENTRY* PFNANYGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (APIENTRY* PFNANYGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (APIENTRY* PFNANYGLDISABLEPROC)(GLenum cap);
typedef void (APIENTRY* PFNANYGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (APIENTRY* PFNANYGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (APIENTRY* PFNANYGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRY* PFNANYGLENABLEPROC)(GLenum cap);
typedef void (APIENTRY* PFNANYGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (APIENTRY* PFNANYGLFINISHPROC)();
typedef void (APIENTRY* PFNANYGLFLUSHPROC)();
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLFRONTFACEPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
typedef void (APIENTRY* PFNANYGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (APIENTRY* PFNANYGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
typedef void (APIENTRY* PFNANYGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
typedef void (APIENTRY* PFNANYGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
typedef void (APIENTRY* PFNANYGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRY* PFNANYGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRY* PFNANYGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef GLint (APIENTRY* PFNANYGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRY* PFNANYGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
typedef void (APIENTRY* PFNANYGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef GLenum (APIENTRY* PFNANYGLGETERRORPROC)();
typedef void (APIENTRY* PFNANYGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
typedef void (APIENTRY* PFNANYGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETINTEGERVPROC)(GLenum pname, GLint *data);
typedef void (APIENTRY* PFNANYGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRY* PFNANYGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRY* PFNANYGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
typedef void (APIENTRY* PFNANYGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef const GLubyte *(APIENTRY* PFNANYGLGETSTRINGPROC)(GLenum name);
typedef void (APIENTRY* PFNANYGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
typedef GLint (APIENTRY* PFNANYGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);
typedef void (APIENTRY* PFNANYGLHINTPROC)(GLenum target, GLenum mode);
typedef GLboolean (APIENTRY* PFNANYGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (APIENTRY* PFNANYGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (APIENTRY* PFNANYGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (APIENTRY* PFNANYGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (APIENTRY* PFNANYGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (APIENTRY* PFNANYGLISSHADERPROC)(GLuint shader);
typedef GLboolean (APIENTRY* PFNANYGLISTEXTUREPROC)(GLuint texture);
typedef void (APIENTRY* PFNANYGLLINEWIDTHPROC)(GLfloat width);
typedef void (APIENTRY* PFNANYGLLINKPROGRAMPROC)(GLuint program);
typedef void (APIENTRY* PFNANYGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (APIENTRY* PFNANYGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRY* PFNANYGLRELEASESHADERCOMPILERPROC)();
typedef void (APIENTRY* PFNANYGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (APIENTRY* PFNANYGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (APIENTRY* PFNANYGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
typedef void (APIENTRY* PFNANYGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRY* PFNANYGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRY* PFNANYGLSTENCILMASKPROC)(GLuint mask);
typedef void (APIENTRY* PFNANYGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (APIENTRY* PFNANYGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (APIENTRY* PFNANYGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (APIENTRY* PFNANYGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (APIENTRY* PFNANYGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (APIENTRY* PFNANYGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRY* PFNANYGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (APIENTRY* PFNANYGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRY* PFNANYGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRY* PFNANYGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRY* PFNANYGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRY* PFNANYGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUSEPROGRAMPROC)(GLuint program);
typedef void (APIENTRY* PFNANYGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);

ANYGL_EXPORT extern PFNANYGLACTIVETEXTUREPROC AnyGL_glActiveTexture;
ANYGL_EXPORT extern PFNANYGLATTACHSHADERPROC AnyGL_glAttachShader;
ANYGL_EXPORT extern PFNANYGLBINDATTRIBLOCATIONPROC AnyGL_glBindAttribLocation;
ANYGL_EXPORT extern PFNANYGLBINDBUFFERPROC AnyGL_glBindBuffer;
ANYGL_EXPORT extern PFNANYGLBINDFRAMEBUFFERPROC AnyGL_glBindFramebuffer;
ANYGL_EXPORT extern PFNANYGLBINDRENDERBUFFERPROC AnyGL_glBindRenderbuffer;
ANYGL_EXPORT extern PFNANYGLBINDTEXTUREPROC AnyGL_glBindTexture;
ANYGL_EXPORT extern PFNANYGLBLENDCOLORPROC AnyGL_glBlendColor;
ANYGL_EXPORT extern PFNANYGLBLENDEQUATIONPROC AnyGL_glBlendEquation;
ANYGL_EXPORT extern PFNANYGLBLENDEQUATIONSEPARATEPROC AnyGL_glBlendEquationSeparate;
ANYGL_EXPORT extern PFNANYGLBLENDFUNCPROC AnyGL_glBlendFunc;
ANYGL_EXPORT extern PFNANYGLBLENDFUNCSEPARATEPROC AnyGL_glBlendFuncSeparate;
ANYGL_EXPORT extern PFNANYGLBUFFERDATAPROC AnyGL_glBufferData;
ANYGL_EXPORT extern PFNANYGLBUFFERSUBDATAPROC AnyGL_glBufferSubData;
ANYGL_EXPORT extern PFNANYGLCHECKFRAMEBUFFERSTATUSPROC AnyGL_glCheckFramebufferStatus;
ANYGL_EXPORT extern PFNANYGLCLEARPROC AnyGL_glClear;
ANYGL_EXPORT extern PFNANYGLCLEARCOLORPROC AnyGL_glClearColor;
ANYGL_EXPORT extern PFNANYGLCLEARDEPTHFPROC AnyGL_glClearDepthf;
ANYGL_EXPORT extern PFNANYGLCLEARSTENCILPROC AnyGL_glClearStencil;
ANYGL_EXPORT extern PFNANYGLCOLORMASKPROC AnyGL_glColorMask;
ANYGL_EXPORT extern PFNANYGLCOMPILESHADERPROC AnyGL_glCompileShader;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXIMAGE2DPROC AnyGL_glCompressedTexImage2D;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXSUBIMAGE2DPROC AnyGL_glCompressedTexSubImage2D;
ANYGL_EXPORT extern PFNANYGLCOPYTEXIMAGE2DPROC AnyGL_glCopyTexImage2D;
ANYGL_EXPORT extern PFNANYGLCOPYTEXSUBIMAGE2DPROC AnyGL_glCopyTexSubImage2D;
ANYGL_EXPORT extern PFNANYGLCREATEPROGRAMPROC AnyGL_glCreateProgram;
ANYGL_EXPORT extern PFNANYGLCREATESHADERPROC AnyGL_glCreateShader;
ANYGL_EXPORT extern PFNANYGLCULLFACEPROC AnyGL_glCullFace;
ANYGL_EXPORT extern PFNANYGLDELETEBUFFERSPROC AnyGL_glDeleteBuffers;
ANYGL_EXPORT extern PFNANYGLDELETEFRAMEBUFFERSPROC AnyGL_glDeleteFramebuffers;
ANYGL_EXPORT extern PFNANYGLDELETEPROGRAMPROC AnyGL_glDeleteProgram;
ANYGL_EXPORT extern PFNANYGLDELETERENDERBUFFERSPROC AnyGL_glDeleteRenderbuffers;
ANYGL_EXPORT extern PFNANYGLDELETESHADERPROC AnyGL_glDeleteShader;
ANYGL_EXPORT extern PFNANYGLDELETETEXTURESPROC AnyGL_glDeleteTextures;
ANYGL_EXPORT extern PFNANYGLDEPTHFUNCPROC AnyGL_glDepthFunc;
ANYGL_EXPORT extern PFNANYGLDEPTHMASKPROC AnyGL_glDepthMask;
ANYGL_EXPORT extern PFNANYGLDEPTHRANGEFPROC AnyGL_glDepthRangef;
ANYGL_EXPORT extern PFNANYGLDETACHSHADERPROC AnyGL_glDetachShader;
ANYGL_EXPORT extern PFNANYGLDISABLEPROC AnyGL_glDisable;
ANYGL_EXPORT extern PFNANYGLDISABLEVERTEXATTRIBARRAYPROC AnyGL_glDisableVertexAttribArray;
ANYGL_EXPORT extern PFNANYGLDRAWARRAYSPROC AnyGL_glDrawArrays;
ANYGL_EXPORT extern PFNANYGLDRAWELEMENTSPROC AnyGL_glDrawElements;
ANYGL_EXPORT extern PFNANYGLENABLEPROC AnyGL_glEnable;
ANYGL_EXPORT extern PFNANYGLENABLEVERTEXATTRIBARRAYPROC AnyGL_glEnableVertexAttribArray;
ANYGL_EXPORT extern PFNANYGLFINISHPROC AnyGL_glFinish;
ANYGL_EXPORT extern PFNANYGLFLUSHPROC AnyGL_glFlush;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERRENDERBUFFERPROC AnyGL_glFramebufferRenderbuffer;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTURE2DPROC AnyGL_glFramebufferTexture2D;
ANYGL_EXPORT extern PFNANYGLFRONTFACEPROC AnyGL_glFrontFace;
ANYGL_EXPORT extern PFNANYGLGENBUFFERSPROC AnyGL_glGenBuffers;
ANYGL_EXPORT extern PFNANYGLGENERATEMIPMAPPROC AnyGL_glGenerateMipmap;
ANYGL_EXPORT extern PFNANYGLGENFRAMEBUFFERSPROC AnyGL_glGenFramebuffers;
ANYGL_EXPORT extern PFNANYGLGENRENDERBUFFERSPROC AnyGL_glGenRenderbuffers;
ANYGL_EXPORT extern PFNANYGLGENTEXTURESPROC AnyGL_glGenTextures;
ANYGL_EXPORT extern PFNANYGLGETACTIVEATTRIBPROC AnyGL_glGetActiveAttrib;
ANYGL_EXPORT extern PFNANYGLGETACTIVEUNIFORMPROC AnyGL_glGetActiveUniform;
ANYGL_EXPORT extern PFNANYGLGETATTACHEDSHADERSPROC AnyGL_glGetAttachedShaders;
ANYGL_EXPORT extern PFNANYGLGETATTRIBLOCATIONPROC AnyGL_glGetAttribLocation;
ANYGL_EXPORT extern PFNANYGLGETBOOLEANVPROC AnyGL_glGetBooleanv;
ANYGL_EXPORT extern PFNANYGLGETBUFFERPARAMETERIVPROC AnyGL_glGetBufferParameteriv;
ANYGL_EXPORT extern PFNANYGLGETERRORPROC AnyGL_glGetError;
ANYGL_EXPORT extern PFNANYGLGETFLOATVPROC AnyGL_glGetFloatv;
ANYGL_EXPORT extern PFNANYGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC AnyGL_glGetFramebufferAttachmentParameteriv;
ANYGL_EXPORT extern PFNANYGLGETINTEGERVPROC AnyGL_glGetIntegerv;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMIVPROC AnyGL_glGetProgramiv;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMINFOLOGPROC AnyGL_glGetProgramInfoLog;
ANYGL_EXPORT extern PFNANYGLGETRENDERBUFFERPARAMETERIVPROC AnyGL_glGetRenderbufferParameteriv;
ANYGL_EXPORT extern PFNANYGLGETSHADERIVPROC AnyGL_glGetShaderiv;
ANYGL_EXPORT extern PFNANYGLGETSHADERINFOLOGPROC AnyGL_glGetShaderInfoLog;
ANYGL_EXPORT extern PFNANYGLGETSHADERPRECISIONFORMATPROC AnyGL_glGetShaderPrecisionFormat;
ANYGL_EXPORT extern PFNANYGLGETSHADERSOURCEPROC AnyGL_glGetShaderSource;
ANYGL_EXPORT extern PFNANYGLGETSTRINGPROC AnyGL_glGetString;
ANYGL_EXPORT extern PFNANYGLGETTEXPARAMETERFVPROC AnyGL_glGetTexParameterfv;
ANYGL_EXPORT extern PFNANYGLGETTEXPARAMETERIVPROC AnyGL_glGetTexParameteriv;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMFVPROC AnyGL_glGetUniformfv;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMIVPROC AnyGL_glGetUniformiv;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMLOCATIONPROC AnyGL_glGetUniformLocation;
ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBFVPROC AnyGL_glGetVertexAttribfv;
ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBIVPROC AnyGL_glGetVertexAttribiv;
ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBPOINTERVPROC AnyGL_glGetVertexAttribPointerv;
ANYGL_EXPORT extern PFNANYGLHINTPROC AnyGL_glHint;
ANYGL_EXPORT extern PFNANYGLISBUFFERPROC AnyGL_glIsBuffer;
ANYGL_EXPORT extern PFNANYGLISENABLEDPROC AnyGL_glIsEnabled;
ANYGL_EXPORT extern PFNANYGLISFRAMEBUFFERPROC AnyGL_glIsFramebuffer;
ANYGL_EXPORT extern PFNANYGLISPROGRAMPROC AnyGL_glIsProgram;
ANYGL_EXPORT extern PFNANYGLISRENDERBUFFERPROC AnyGL_glIsRenderbuffer;
ANYGL_EXPORT extern PFNANYGLISSHADERPROC AnyGL_glIsShader;
ANYGL_EXPORT extern PFNANYGLISTEXTUREPROC AnyGL_glIsTexture;
ANYGL_EXPORT extern PFNANYGLLINEWIDTHPROC AnyGL_glLineWidth;
ANYGL_EXPORT extern PFNANYGLLINKPROGRAMPROC AnyGL_glLinkProgram;
ANYGL_EXPORT extern PFNANYGLPIXELSTOREIPROC AnyGL_glPixelStorei;
ANYGL_EXPORT extern PFNANYGLPOLYGONOFFSETPROC AnyGL_glPolygonOffset;
ANYGL_EXPORT extern PFNANYGLREADPIXELSPROC AnyGL_glReadPixels;
ANYGL_EXPORT extern PFNANYGLRELEASESHADERCOMPILERPROC AnyGL_glReleaseShaderCompiler;
ANYGL_EXPORT extern PFNANYGLRENDERBUFFERSTORAGEPROC AnyGL_glRenderbufferStorage;
ANYGL_EXPORT extern PFNANYGLSAMPLECOVERAGEPROC AnyGL_glSampleCoverage;
ANYGL_EXPORT extern PFNANYGLSCISSORPROC AnyGL_glScissor;
ANYGL_EXPORT extern PFNANYGLSHADERBINARYPROC AnyGL_glShaderBinary;
ANYGL_EXPORT extern PFNANYGLSHADERSOURCEPROC AnyGL_glShaderSource;
ANYGL_EXPORT extern PFNANYGLSTENCILFUNCPROC AnyGL_glStencilFunc;
ANYGL_EXPORT extern PFNANYGLSTENCILFUNCSEPARATEPROC AnyGL_glStencilFuncSeparate;
ANYGL_EXPORT extern PFNANYGLSTENCILMASKPROC AnyGL_glStencilMask;
ANYGL_EXPORT extern PFNANYGLSTENCILMASKSEPARATEPROC AnyGL_glStencilMaskSeparate;
ANYGL_EXPORT extern PFNANYGLSTENCILOPPROC AnyGL_glStencilOp;
ANYGL_EXPORT extern PFNANYGLSTENCILOPSEPARATEPROC AnyGL_glStencilOpSeparate;
ANYGL_EXPORT extern PFNANYGLTEXIMAGE2DPROC AnyGL_glTexImage2D;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERFPROC AnyGL_glTexParameterf;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERFVPROC AnyGL_glTexParameterfv;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERIPROC AnyGL_glTexParameteri;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERIVPROC AnyGL_glTexParameteriv;
ANYGL_EXPORT extern PFNANYGLTEXSUBIMAGE2DPROC AnyGL_glTexSubImage2D;
ANYGL_EXPORT extern PFNANYGLUNIFORM1FPROC AnyGL_glUniform1f;
ANYGL_EXPORT extern PFNANYGLUNIFORM1FVPROC AnyGL_glUniform1fv;
ANYGL_EXPORT extern PFNANYGLUNIFORM1IPROC AnyGL_glUniform1i;
ANYGL_EXPORT extern PFNANYGLUNIFORM1IVPROC AnyGL_glUniform1iv;
ANYGL_EXPORT extern PFNANYGLUNIFORM2FPROC AnyGL_glUniform2f;
ANYGL_EXPORT extern PFNANYGLUNIFORM2FVPROC AnyGL_glUniform2fv;
ANYGL_EXPORT extern PFNANYGLUNIFORM2IPROC AnyGL_glUniform2i;
ANYGL_EXPORT extern PFNANYGLUNIFORM2IVPROC AnyGL_glUniform2iv;
ANYGL_EXPORT extern PFNANYGLUNIFORM3FPROC AnyGL_glUniform3f;
ANYGL_EXPORT extern PFNANYGLUNIFORM3FVPROC AnyGL_glUniform3fv;
ANYGL_EXPORT extern PFNANYGLUNIFORM3IPROC AnyGL_glUniform3i;
ANYGL_EXPORT extern PFNANYGLUNIFORM3IVPROC AnyGL_glUniform3iv;
ANYGL_EXPORT extern PFNANYGLUNIFORM4FPROC AnyGL_glUniform4f;
ANYGL_EXPORT extern PFNANYGLUNIFORM4FVPROC AnyGL_glUniform4fv;
ANYGL_EXPORT extern PFNANYGLUNIFORM4IPROC AnyGL_glUniform4i;
ANYGL_EXPORT extern PFNANYGLUNIFORM4IVPROC AnyGL_glUniform4iv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX2FVPROC AnyGL_glUniformMatrix2fv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX3FVPROC AnyGL_glUniformMatrix3fv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX4FVPROC AnyGL_glUniformMatrix4fv;
ANYGL_EXPORT extern PFNANYGLUSEPROGRAMPROC AnyGL_glUseProgram;
ANYGL_EXPORT extern PFNANYGLVALIDATEPROGRAMPROC AnyGL_glValidateProgram;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB1FPROC AnyGL_glVertexAttrib1f;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB1FVPROC AnyGL_glVertexAttrib1fv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB2FPROC AnyGL_glVertexAttrib2f;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB2FVPROC AnyGL_glVertexAttrib2fv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB3FPROC AnyGL_glVertexAttrib3f;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB3FVPROC AnyGL_glVertexAttrib3fv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4FPROC AnyGL_glVertexAttrib4f;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4FVPROC AnyGL_glVertexAttrib4fv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBPOINTERPROC AnyGL_glVertexAttribPointer;
ANYGL_EXPORT extern PFNANYGLVIEWPORTPROC AnyGL_glViewport;

#ifndef ANYGL_NO_DEFINES
#define glActiveTexture(texture) ANYGL_CALL(AnyGL_glActiveTexture)(texture)
#define glAttachShader(program, shader) ANYGL_CALL(AnyGL_glAttachShader)(program, shader)
#define glBindAttribLocation(program, index, name) ANYGL_CALL(AnyGL_glBindAttribLocation)(program, index, name)
#define glBindBuffer(target, buffer) ANYGL_CALL(AnyGL_glBindBuffer)(target, buffer)
#define glBindFramebuffer(target, framebuffer) ANYGL_CALL(AnyGL_glBindFramebuffer)(target, framebuffer)
#define glBindRenderbuffer(target, renderbuffer) ANYGL_CALL(AnyGL_glBindRenderbuffer)(target, renderbuffer)
#define glBindTexture(target, texture) ANYGL_CALL(AnyGL_glBindTexture)(target, texture)
#define glBlendColor(red, green, blue, alpha) ANYGL_CALL(AnyGL_glBlendColor)(red, green, blue, alpha)
#define glBlendEquation(mode) ANYGL_CALL(AnyGL_glBlendEquation)(mode)
#define glBlendEquationSeparate(modeRGB, modeAlpha) ANYGL_CALL(AnyGL_glBlendEquationSeparate)(modeRGB, modeAlpha)
#define glBlendFunc(sfactor, dfactor) ANYGL_CALL(AnyGL_glBlendFunc)(sfactor, dfactor)
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) ANYGL_CALL(AnyGL_glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
#define glBufferData(target, size, data, usage) ANYGL_CALL(AnyGL_glBufferData)(target, size, data, usage)
#define glBufferSubData(target, offset, size, data) ANYGL_CALL(AnyGL_glBufferSubData)(target, offset, size, data)
#define glCheckFramebufferStatus(target) ANYGL_CALL(AnyGL_glCheckFramebufferStatus)(target)
#define glClear(mask) ANYGL_CALL(AnyGL_glClear)(mask)
#define glClearColor(red, green, blue, alpha) ANYGL_CALL(AnyGL_glClearColor)(red, green, blue, alpha)
#define glClearDepthf(d) ANYGL_CALL(AnyGL_glClearDepthf)(d)
#define glClearStencil(s) ANYGL_CALL(AnyGL_glClearStencil)(s)
#define glColorMask(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColorMask)(red, green, blue, alpha)
#define glCompileShader(shader) ANYGL_CALL(AnyGL_glCompileShader)(shader)
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data)
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data)
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) ANYGL_CALL(AnyGL_glCopyTexImage2D)(target, level, internalformat, x, y, width, height, border)
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height)
#define glCreateProgram() ANYGL_CALL(AnyGL_glCreateProgram)()
#define glCreateShader(type) ANYGL_CALL(AnyGL_glCreateShader)(type)
#define glCullFace(mode) ANYGL_CALL(AnyGL_glCullFace)(mode)
#define glDeleteBuffers(n, buffers) ANYGL_CALL(AnyGL_glDeleteBuffers)(n, buffers)
#define glDeleteFramebuffers(n, framebuffers) ANYGL_CALL(AnyGL_glDeleteFramebuffers)(n, framebuffers)
#define glDeleteProgram(program) ANYGL_CALL(AnyGL_glDeleteProgram)(program)
#define glDeleteRenderbuffers(n, renderbuffers) ANYGL_CALL(AnyGL_glDeleteRenderbuffers)(n, renderbuffers)
#define glDeleteShader(shader) ANYGL_CALL(AnyGL_glDeleteShader)(shader)
#define glDeleteTextures(n, textures) ANYGL_CALL(AnyGL_glDeleteTextures)(n, textures)
#define glDepthFunc(func) ANYGL_CALL(AnyGL_glDepthFunc)(func)
#define glDepthMask(flag) ANYGL_CALL(AnyGL_glDepthMask)(flag)
#define glDepthRangef(n, f) ANYGL_CALL(AnyGL_glDepthRangef)(n, f)
#define glDetachShader(program, shader) ANYGL_CALL(AnyGL_glDetachShader)(program, shader)
#define glDisable(cap) ANYGL_CALL(AnyGL_glDisable)(cap)
#define glDisableVertexAttribArray(index) ANYGL_CALL(AnyGL_glDisableVertexAttribArray)(index)
#define glDrawArrays(mode, first, count) ANYGL_CALL(AnyGL_glDrawArrays)(mode, first, count)
#define glDrawElements(mode, count, type, indices) ANYGL_CALL(AnyGL_glDrawElements)(mode, count, type, indices)
#define glEnable(cap) ANYGL_CALL(AnyGL_glEnable)(cap)
#define glEnableVertexAttribArray(index) ANYGL_CALL(AnyGL_glEnableVertexAttribArray)(index)
#define glFinish() ANYGL_CALL(AnyGL_glFinish)()
#define glFlush() ANYGL_CALL(AnyGL_glFlush)()
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) ANYGL_CALL(AnyGL_glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer)
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture2D)(target, attachment, textarget, texture, level)
#define glFrontFace(mode) ANYGL_CALL(AnyGL_glFrontFace)(mode)
#define glGenBuffers(n, buffers) ANYGL_CALL(AnyGL_glGenBuffers)(n, buffers)
#define glGenerateMipmap(target) ANYGL_CALL(AnyGL_glGenerateMipmap)(target)
#define glGenFramebuffers(n, framebuffers) ANYGL_CALL(AnyGL_glGenFramebuffers)(n, framebuffers)
#define glGenRenderbuffers(n, renderbuffers) ANYGL_CALL(AnyGL_glGenRenderbuffers)(n, renderbuffers)
#define glGenTextures(n, textures) ANYGL_CALL(AnyGL_glGenTextures)(n, textures)
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) ANYGL_CALL(AnyGL_glGetActiveAttrib)(program, index, bufSize, length, size, type, name)
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) ANYGL_CALL(AnyGL_glGetActiveUniform)(program, index, bufSize, length, size, type, name)
#define glGetAttachedShaders(program, maxCount, count, shaders) ANYGL_CALL(AnyGL_glGetAttachedShaders)(program, maxCount, count, shaders)
#define glGetAttribLocation(program, name) ANYGL_CALL(AnyGL_glGetAttribLocation)(program, name)
#define glGetBooleanv(pname, data) ANYGL_CALL(AnyGL_glGetBooleanv)(pname, data)
#define glGetBufferParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetBufferParameteriv)(target, pname, params)
#define glGetError() ANYGL_CALL(AnyGL_glGetError)()
#define glGetFloatv(pname, data) ANYGL_CALL(AnyGL_glGetFloatv)(pname, data)
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) ANYGL_CALL(AnyGL_glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params)
#define glGetIntegerv(pname, data) ANYGL_CALL(AnyGL_glGetIntegerv)(pname, data)
#define glGetProgramiv(program, pname, params) ANYGL_CALL(AnyGL_glGetProgramiv)(program, pname, params)
#define glGetProgramInfoLog(program, bufSize, length, infoLog) ANYGL_CALL(AnyGL_glGetProgramInfoLog)(program, bufSize, length, infoLog)
#define glGetRenderbufferParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetRenderbufferParameteriv)(target, pname, params)
#define glGetShaderiv(shader, pname, params) ANYGL_CALL(AnyGL_glGetShaderiv)(shader, pname, params)
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) ANYGL_CALL(AnyGL_glGetShaderInfoLog)(shader, bufSize, length, infoLog)
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) ANYGL_CALL(AnyGL_glGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision)
#define glGetShaderSource(shader, bufSize, length, source) ANYGL_CALL(AnyGL_glGetShaderSource)(shader, bufSize, length, source)
#define glGetString(name) ANYGL_CALL(AnyGL_glGetString)(name)
#define glGetTexParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterfv)(target, pname, params)
#define glGetTexParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameteriv)(target, pname, params)
#define glGetUniformfv(program, location, params) ANYGL_CALL(AnyGL_glGetUniformfv)(program, location, params)
#define glGetUniformiv(program, location, params) ANYGL_CALL(AnyGL_glGetUniformiv)(program, location, params)
#define glGetUniformLocation(program, name) ANYGL_CALL(AnyGL_glGetUniformLocation)(program, name)
#define glGetVertexAttribfv(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribfv)(index, pname, params)
#define glGetVertexAttribiv(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribiv)(index, pname, params)
#define glGetVertexAttribPointerv(index, pname, pointer) ANYGL_CALL(AnyGL_glGetVertexAttribPointerv)(index, pname, pointer)
#define glHint(target, mode) ANYGL_CALL(AnyGL_glHint)(target, mode)
#define glIsBuffer(buffer) ANYGL_CALL(AnyGL_glIsBuffer)(buffer)
#define glIsEnabled(cap) ANYGL_CALL(AnyGL_glIsEnabled)(cap)
#define glIsFramebuffer(framebuffer) ANYGL_CALL(AnyGL_glIsFramebuffer)(framebuffer)
#define glIsProgram(program) ANYGL_CALL(AnyGL_glIsProgram)(program)
#define glIsRenderbuffer(renderbuffer) ANYGL_CALL(AnyGL_glIsRenderbuffer)(renderbuffer)
#define glIsShader(shader) ANYGL_CALL(AnyGL_glIsShader)(shader)
#define glIsTexture(texture) ANYGL_CALL(AnyGL_glIsTexture)(texture)
#define glLineWidth(width) ANYGL_CALL(AnyGL_glLineWidth)(width)
#define glLinkProgram(program) ANYGL_CALL(AnyGL_glLinkProgram)(program)
#define glPixelStorei(pname, param) ANYGL_CALL(AnyGL_glPixelStorei)(pname, param)
#define glPolygonOffset(factor, units) ANYGL_CALL(AnyGL_glPolygonOffset)(factor, units)
#define glReadPixels(x, y, width, height, format, type, pixels) ANYGL_CALL(AnyGL_glReadPixels)(x, y, width, height, format, type, pixels)
#define glReleaseShaderCompiler() ANYGL_CALL(AnyGL_glReleaseShaderCompiler)()
#define glRenderbufferStorage(target, internalformat, width, height) ANYGL_CALL(AnyGL_glRenderbufferStorage)(target, internalformat, width, height)
#define glSampleCoverage(value, invert) ANYGL_CALL(AnyGL_glSampleCoverage)(value, invert)
#define glScissor(x, y, width, height) ANYGL_CALL(AnyGL_glScissor)(x, y, width, height)
#define glShaderBinary(count, shaders, binaryFormat, binary, length) ANYGL_CALL(AnyGL_glShaderBinary)(count, shaders, binaryFormat, binary, length)
#define glShaderSource(shader, count, string, length) ANYGL_CALL(AnyGL_glShaderSource)(shader, count, string, length)
#define glStencilFunc(func, ref, mask) ANYGL_CALL(AnyGL_glStencilFunc)(func, ref, mask)
#define glStencilFuncSeparate(face, func, ref, mask) ANYGL_CALL(AnyGL_glStencilFuncSeparate)(face, func, ref, mask)
#define glStencilMask(mask) ANYGL_CALL(AnyGL_glStencilMask)(mask)
#define glStencilMaskSeparate(face, mask) ANYGL_CALL(AnyGL_glStencilMaskSeparate)(face, mask)
#define glStencilOp(fail, zfail, zpass) ANYGL_CALL(AnyGL_glStencilOp)(fail, zfail, zpass)
#define glStencilOpSeparate(face, sfail, dpfail, dppass) ANYGL_CALL(AnyGL_glStencilOpSeparate)(face, sfail, dpfail, dppass)
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) ANYGL_CALL(AnyGL_glTexImage2D)(target, level, internalformat, width, height, border, format, type, pixels)
#define glTexParameterf(target, pname, param) ANYGL_CALL(AnyGL_glTexParameterf)(target, pname, param)
#define glTexParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterfv)(target, pname, params)
#define glTexParameteri(target, pname, param) ANYGL_CALL(AnyGL_glTexParameteri)(target, pname, param)
#define glTexParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glTexParameteriv)(target, pname, params)
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) ANYGL_CALL(AnyGL_glTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels)
#define glUniform1f(location, v0) ANYGL_CALL(AnyGL_glUniform1f)(location, v0)
#define glUniform1fv(location, count, value) ANYGL_CALL(AnyGL_glUniform1fv)(location, count, value)
#define glUniform1i(location, v0) ANYGL_CALL(AnyGL_glUniform1i)(location, v0)
#define glUniform1iv(location, count, value) ANYGL_CALL(AnyGL_glUniform1iv)(location, count, value)
#define glUniform2f(location, v0, v1) ANYGL_CALL(AnyGL_glUniform2f)(location, v0, v1)
#define glUniform2fv(location, count, value) ANYGL_CALL(AnyGL_glUniform2fv)(location, count, value)
#define glUniform2i(location, v0, v1) ANYGL_CALL(AnyGL_glUniform2i)(location, v0, v1)
#define glUniform2iv(location, count, value) ANYGL_CALL(AnyGL_glUniform2iv)(location, count, value)
#define glUniform3f(location, v0, v1, v2) ANYGL_CALL(AnyGL_glUniform3f)(location, v0, v1, v2)
#define glUniform3fv(location, count, value) ANYGL_CALL(AnyGL_glUniform3fv)(location, count, value)
#define glUniform3i(location, v0, v1, v2) ANYGL_CALL(AnyGL_glUniform3i)(location, v0, v1, v2)
#define glUniform3iv(location, count, value) ANYGL_CALL(AnyGL_glUniform3iv)(location, count, value)
#define glUniform4f(location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glUniform4f)(location, v0, v1, v2, v3)
#define glUniform4fv(location, count, value) ANYGL_CALL(AnyGL_glUniform4fv)(location, count, value)
#define glUniform4i(location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glUniform4i)(location, v0, v1, v2, v3)
#define glUniform4iv(location, count, value) ANYGL_CALL(AnyGL_glUniform4iv)(location, count, value)
#define glUniformMatrix2fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix2fv)(location, count, transpose, value)
#define glUniformMatrix3fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix3fv)(location, count, transpose, value)
#define glUniformMatrix4fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix4fv)(location, count, transpose, value)
#define glUseProgram(program) ANYGL_CALL(AnyGL_glUseProgram)(program)
#define glValidateProgram(program) ANYGL_CALL(AnyGL_glValidateProgram)(program)
#define glVertexAttrib1f(index, x) ANYGL_CALL(AnyGL_glVertexAttrib1f)(index, x)
#define glVertexAttrib1fv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib1fv)(index, v)
#define glVertexAttrib2f(index, x, y) ANYGL_CALL(AnyGL_glVertexAttrib2f)(index, x, y)
#define glVertexAttrib2fv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib2fv)(index, v)
#define glVertexAttrib3f(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttrib3f)(index, x, y, z)
#define glVertexAttrib3fv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib3fv)(index, v)
#define glVertexAttrib4f(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4f)(index, x, y, z, w)
#define glVertexAttrib4fv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4fv)(index, v)
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) ANYGL_CALL(AnyGL_glVertexAttribPointer)(index, size, type, normalized, stride, pointer)
#define glViewport(x, y, width, height) ANYGL_CALL(AnyGL_glViewport)(x, y, width, height)
#endif /* ANYGL_NO_DEFINES */

/* GL_ES_VERSION_3_0 */
typedef void (APIENTRY* PFNANYGLREADBUFFERPROC)(GLenum src);
typedef void (APIENTRY* PFNANYGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRY* PFNANYGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
typedef void (APIENTRY* PFNANYGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
typedef GLboolean (APIENTRY* PFNANYGLISQUERYPROC)(GLuint id);
typedef void (APIENTRY* PFNANYGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (APIENTRY* PFNANYGLENDQUERYPROC)(GLenum target);
typedef void (APIENTRY* PFNANYGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
typedef GLboolean (APIENTRY* PFNANYGLUNMAPBUFFERPROC)(GLenum target);
typedef void (APIENTRY* PFNANYGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);
typedef void (APIENTRY* PFNANYGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (APIENTRY* PFNANYGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void *(APIENTRY* PFNANYGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRY* PFNANYGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRY* PFNANYGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (APIENTRY* PFNANYGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
typedef void (APIENTRY* PFNANYGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
typedef GLboolean (APIENTRY* PFNANYGLISVERTEXARRAYPROC)(GLuint array);
typedef void (APIENTRY* PFNANYGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
typedef void (APIENTRY* PFNANYGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (APIENTRY* PFNANYGLENDTRANSFORMFEEDBACKPROC)();
typedef void (APIENTRY* PFNANYGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (APIENTRY* PFNANYGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void (APIENTRY* PFNANYGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRY* PFNANYGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
typedef GLint (APIENTRY* PFNANYGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRY* PFNANYGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (APIENTRY* PFNANYGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRY* PFNANYGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRY* PFNANYGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRY* PFNANYGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (APIENTRY* PFNANYGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (APIENTRY* PFNANYGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef const GLubyte *(APIENTRY* PFNANYGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef void (APIENTRY* PFNANYGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
typedef void (APIENTRY* PFNANYGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef GLuint (APIENTRY* PFNANYGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
typedef void (APIENTRY* PFNANYGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void (APIENTRY* PFNANYGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (APIENTRY* PFNANYGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (APIENTRY* PFNANYGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
typedef GLsync (APIENTRY* PFNANYGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef GLboolean (APIENTRY* PFNANYGLISSYNCPROC)(GLsync sync);
typedef void (APIENTRY* PFNANYGLDELETESYNCPROC)(GLsync sync);
typedef GLenum (APIENTRY* PFNANYGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRY* PFNANYGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRY* PFNANYGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);
typedef void (APIENTRY* PFNANYGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
typedef void (APIENTRY* PFNANYGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
typedef void (APIENTRY* PFNANYGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
typedef void (APIENTRY* PFNANYGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
typedef void (APIENTRY* PFNANYGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
typedef GLboolean (APIENTRY* PFNANYGLISSAMPLERPROC)(GLuint sampler);
typedef void (APIENTRY* PFNANYGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (APIENTRY* PFNANYGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRY* PFNANYGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
typedef void (APIENTRY* PFNANYGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (APIENTRY* PFNANYGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (APIENTRY* PFNANYGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
typedef void (APIENTRY* PFNANYGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
typedef GLboolean (APIENTRY* PFNANYGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef void (APIENTRY* PFNANYGLPAUSETRANSFORMFEEDBACKPROC)();
typedef void (APIENTRY* PFNANYGLRESUMETRANSFORMFEEDBACKPROC)();
typedef void (APIENTRY* PFNANYGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
typedef void (APIENTRY* PFNANYGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (APIENTRY* PFNANYGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (APIENTRY* PFNANYGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
typedef void (APIENTRY* PFNANYGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRY* PFNANYGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);

ANYGL_EXPORT extern PFNANYGLREADBUFFERPROC AnyGL_glReadBuffer;
ANYGL_EXPORT extern PFNANYGLDRAWRANGEELEMENTSPROC AnyGL_glDrawRangeElements;
ANYGL_EXPORT extern PFNANYGLTEXIMAGE3DPROC AnyGL_glTexImage3D;
ANYGL_EXPORT extern PFNANYGLTEXSUBIMAGE3DPROC AnyGL_glTexSubImage3D;
ANYGL_EXPORT extern PFNANYGLCOPYTEXSUBIMAGE3DPROC AnyGL_glCopyTexSubImage3D;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXIMAGE3DPROC AnyGL_glCompressedTexImage3D;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXSUBIMAGE3DPROC AnyGL_glCompressedTexSubImage3D;
ANYGL_EXPORT extern PFNANYGLGENQUERIESPROC AnyGL_glGenQueries;
ANYGL_EXPORT extern PFNANYGLDELETEQUERIESPROC AnyGL_glDeleteQueries;
ANYGL_EXPORT extern PFNANYGLISQUERYPROC AnyGL_glIsQuery;
ANYGL_EXPORT extern PFNANYGLBEGINQUERYPROC AnyGL_glBeginQuery;
ANYGL_EXPORT extern PFNANYGLENDQUERYPROC AnyGL_glEndQuery;
ANYGL_EXPORT extern PFNANYGLGETQUERYIVPROC AnyGL_glGetQueryiv;
ANYGL_EXPORT extern PFNANYGLGETQUERYOBJECTUIVPROC AnyGL_glGetQueryObjectuiv;
ANYGL_EXPORT extern PFNANYGLUNMAPBUFFERPROC AnyGL_glUnmapBuffer;
ANYGL_EXPORT extern PFNANYGLGETBUFFERPOINTERVPROC AnyGL_glGetBufferPointerv;
ANYGL_EXPORT extern PFNANYGLDRAWBUFFERSPROC AnyGL_glDrawBuffers;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX2X3FVPROC AnyGL_glUniformMatrix2x3fv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX3X2FVPROC AnyGL_glUniformMatrix3x2fv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX2X4FVPROC AnyGL_glUniformMatrix2x4fv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX4X2FVPROC AnyGL_glUniformMatrix4x2fv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX3X4FVPROC AnyGL_glUniformMatrix3x4fv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX4X3FVPROC AnyGL_glUniformMatrix4x3fv;
ANYGL_EXPORT extern PFNANYGLBLITFRAMEBUFFERPROC AnyGL_glBlitFramebuffer;
ANYGL_EXPORT extern PFNANYGLRENDERBUFFERSTORAGEMULTISAMPLEPROC AnyGL_glRenderbufferStorageMultisample;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTURELAYERPROC AnyGL_glFramebufferTextureLayer;
ANYGL_EXPORT extern PFNANYGLMAPBUFFERRANGEPROC AnyGL_glMapBufferRange;
ANYGL_EXPORT extern PFNANYGLFLUSHMAPPEDBUFFERRANGEPROC AnyGL_glFlushMappedBufferRange;
ANYGL_EXPORT extern PFNANYGLBINDVERTEXARRAYPROC AnyGL_glBindVertexArray;
ANYGL_EXPORT extern PFNANYGLDELETEVERTEXARRAYSPROC AnyGL_glDeleteVertexArrays;
ANYGL_EXPORT extern PFNANYGLGENVERTEXARRAYSPROC AnyGL_glGenVertexArrays;
ANYGL_EXPORT extern PFNANYGLISVERTEXARRAYPROC AnyGL_glIsVertexArray;
ANYGL_EXPORT extern PFNANYGLGETINTEGERI_VPROC AnyGL_glGetIntegeri_v;
ANYGL_EXPORT extern PFNANYGLBEGINTRANSFORMFEEDBACKPROC AnyGL_glBeginTransformFeedback;
ANYGL_EXPORT extern PFNANYGLENDTRANSFORMFEEDBACKPROC AnyGL_glEndTransformFeedback;
ANYGL_EXPORT extern PFNANYGLBINDBUFFERRANGEPROC AnyGL_glBindBufferRange;
ANYGL_EXPORT extern PFNANYGLBINDBUFFERBASEPROC AnyGL_glBindBufferBase;
ANYGL_EXPORT extern PFNANYGLTRANSFORMFEEDBACKVARYINGSPROC AnyGL_glTransformFeedbackVaryings;
ANYGL_EXPORT extern PFNANYGLGETTRANSFORMFEEDBACKVARYINGPROC AnyGL_glGetTransformFeedbackVarying;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBIPOINTERPROC AnyGL_glVertexAttribIPointer;
ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBIIVPROC AnyGL_glGetVertexAttribIiv;
ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBIUIVPROC AnyGL_glGetVertexAttribIuiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4IPROC AnyGL_glVertexAttribI4i;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4UIPROC AnyGL_glVertexAttribI4ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4IVPROC AnyGL_glVertexAttribI4iv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4UIVPROC AnyGL_glVertexAttribI4uiv;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMUIVPROC AnyGL_glGetUniformuiv;
ANYGL_EXPORT extern PFNANYGLGETFRAGDATALOCATIONPROC AnyGL_glGetFragDataLocation;
ANYGL_EXPORT extern PFNANYGLUNIFORM1UIPROC AnyGL_glUniform1ui;
ANYGL_EXPORT extern PFNANYGLUNIFORM2UIPROC AnyGL_glUniform2ui;
ANYGL_EXPORT extern PFNANYGLUNIFORM3UIPROC AnyGL_glUniform3ui;
ANYGL_EXPORT extern PFNANYGLUNIFORM4UIPROC AnyGL_glUniform4ui;
ANYGL_EXPORT extern PFNANYGLUNIFORM1UIVPROC AnyGL_glUniform1uiv;
ANYGL_EXPORT extern PFNANYGLUNIFORM2UIVPROC AnyGL_glUniform2uiv;
ANYGL_EXPORT extern PFNANYGLUNIFORM3UIVPROC AnyGL_glUniform3uiv;
ANYGL_EXPORT extern PFNANYGLUNIFORM4UIVPROC AnyGL_glUniform4uiv;
ANYGL_EXPORT extern PFNANYGLCLEARBUFFERIVPROC AnyGL_glClearBufferiv;
ANYGL_EXPORT extern PFNANYGLCLEARBUFFERUIVPROC AnyGL_glClearBufferuiv;
ANYGL_EXPORT extern PFNANYGLCLEARBUFFERFVPROC AnyGL_glClearBufferfv;
ANYGL_EXPORT extern PFNANYGLCLEARBUFFERFIPROC AnyGL_glClearBufferfi;
ANYGL_EXPORT extern PFNANYGLGETSTRINGIPROC AnyGL_glGetStringi;
ANYGL_EXPORT extern PFNANYGLCOPYBUFFERSUBDATAPROC AnyGL_glCopyBufferSubData;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMINDICESPROC AnyGL_glGetUniformIndices;
ANYGL_EXPORT extern PFNANYGLGETACTIVEUNIFORMSIVPROC AnyGL_glGetActiveUniformsiv;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMBLOCKINDEXPROC AnyGL_glGetUniformBlockIndex;
ANYGL_EXPORT extern PFNANYGLGETACTIVEUNIFORMBLOCKIVPROC AnyGL_glGetActiveUniformBlockiv;
ANYGL_EXPORT extern PFNANYGLGETACTIVEUNIFORMBLOCKNAMEPROC AnyGL_glGetActiveUniformBlockName;
ANYGL_EXPORT extern PFNANYGLUNIFORMBLOCKBINDINGPROC AnyGL_glUniformBlockBinding;
ANYGL_EXPORT extern PFNANYGLDRAWARRAYSINSTANCEDPROC AnyGL_glDrawArraysInstanced;
ANYGL_EXPORT extern PFNANYGLDRAWELEMENTSINSTANCEDPROC AnyGL_glDrawElementsInstanced;
ANYGL_EXPORT extern PFNANYGLFENCESYNCPROC AnyGL_glFenceSync;
ANYGL_EXPORT extern PFNANYGLISSYNCPROC AnyGL_glIsSync;
ANYGL_EXPORT extern PFNANYGLDELETESYNCPROC AnyGL_glDeleteSync;
ANYGL_EXPORT extern PFNANYGLCLIENTWAITSYNCPROC AnyGL_glClientWaitSync;
ANYGL_EXPORT extern PFNANYGLWAITSYNCPROC AnyGL_glWaitSync;
ANYGL_EXPORT extern PFNANYGLGETINTEGER64VPROC AnyGL_glGetInteger64v;
ANYGL_EXPORT extern PFNANYGLGETSYNCIVPROC AnyGL_glGetSynciv;
ANYGL_EXPORT extern PFNANYGLGETINTEGER64I_VPROC AnyGL_glGetInteger64i_v;
ANYGL_EXPORT extern PFNANYGLGETBUFFERPARAMETERI64VPROC AnyGL_glGetBufferParameteri64v;
ANYGL_EXPORT extern PFNANYGLGENSAMPLERSPROC AnyGL_glGenSamplers;
ANYGL_EXPORT extern PFNANYGLDELETESAMPLERSPROC AnyGL_glDeleteSamplers;
ANYGL_EXPORT extern PFNANYGLISSAMPLERPROC AnyGL_glIsSampler;
ANYGL_EXPORT extern PFNANYGLBINDSAMPLERPROC AnyGL_glBindSampler;
ANYGL_EXPORT extern PFNANYGLSAMPLERPARAMETERIPROC AnyGL_glSamplerParameteri;
ANYGL_EXPORT extern PFNANYGLSAMPLERPARAMETERIVPROC AnyGL_glSamplerParameteriv;
ANYGL_EXPORT extern PFNANYGLSAMPLERPARAMETERFPROC AnyGL_glSamplerParameterf;
ANYGL_EXPORT extern PFNANYGLSAMPLERPARAMETERFVPROC AnyGL_glSamplerParameterfv;
ANYGL_EXPORT extern PFNANYGLGETSAMPLERPARAMETERIVPROC AnyGL_glGetSamplerParameteriv;
ANYGL_EXPORT extern PFNANYGLGETSAMPLERPARAMETERFVPROC AnyGL_glGetSamplerParameterfv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBDIVISORPROC AnyGL_glVertexAttribDivisor;
ANYGL_EXPORT extern PFNANYGLBINDTRANSFORMFEEDBACKPROC AnyGL_glBindTransformFeedback;
ANYGL_EXPORT extern PFNANYGLDELETETRANSFORMFEEDBACKSPROC AnyGL_glDeleteTransformFeedbacks;
ANYGL_EXPORT extern PFNANYGLGENTRANSFORMFEEDBACKSPROC AnyGL_glGenTransformFeedbacks;
ANYGL_EXPORT extern PFNANYGLISTRANSFORMFEEDBACKPROC AnyGL_glIsTransformFeedback;
ANYGL_EXPORT extern PFNANYGLPAUSETRANSFORMFEEDBACKPROC AnyGL_glPauseTransformFeedback;
ANYGL_EXPORT extern PFNANYGLRESUMETRANSFORMFEEDBACKPROC AnyGL_glResumeTransformFeedback;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMBINARYPROC AnyGL_glGetProgramBinary;
ANYGL_EXPORT extern PFNANYGLPROGRAMBINARYPROC AnyGL_glProgramBinary;
ANYGL_EXPORT extern PFNANYGLPROGRAMPARAMETERIPROC AnyGL_glProgramParameteri;
ANYGL_EXPORT extern PFNANYGLINVALIDATEFRAMEBUFFERPROC AnyGL_glInvalidateFramebuffer;
ANYGL_EXPORT extern PFNANYGLINVALIDATESUBFRAMEBUFFERPROC AnyGL_glInvalidateSubFramebuffer;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGE2DPROC AnyGL_glTexStorage2D;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGE3DPROC AnyGL_glTexStorage3D;
ANYGL_EXPORT extern PFNANYGLGETINTERNALFORMATIVPROC AnyGL_glGetInternalformativ;

#ifndef ANYGL_NO_DEFINES
#define glReadBuffer(src) ANYGL_CALL(AnyGL_glReadBuffer)(src)
#define glDrawRangeElements(mode, start, end, count, type, indices) ANYGL_CALL(AnyGL_glDrawRangeElements)(mode, start, end, count, type, indices)
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) ANYGL_CALL(AnyGL_glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels)
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ANYGL_CALL(AnyGL_glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height)
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data)
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
#define glGenQueries(n, ids) ANYGL_CALL(AnyGL_glGenQueries)(n, ids)
#define glDeleteQueries(n, ids) ANYGL_CALL(AnyGL_glDeleteQueries)(n, ids)
#define glIsQuery(id) ANYGL_CALL(AnyGL_glIsQuery)(id)
#define glBeginQuery(target, id) ANYGL_CALL(AnyGL_glBeginQuery)(target, id)
#define glEndQuery(target) ANYGL_CALL(AnyGL_glEndQuery)(target)
#define glGetQueryiv(target, pname, params) ANYGL_CALL(AnyGL_glGetQueryiv)(target, pname, params)
#define glGetQueryObjectuiv(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectuiv)(id, pname, params)
#define glUnmapBuffer(target) ANYGL_CALL(AnyGL_glUnmapBuffer)(target)
#define glGetBufferPointerv(target, pname, params) ANYGL_CALL(AnyGL_glGetBufferPointerv)(target, pname, params)
#define glDrawBuffers(n, bufs) ANYGL_CALL(AnyGL_glDrawBuffers)(n, bufs)
#define glUniformMatrix2x3fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix2x3fv)(location, count, transpose, value)
#define glUniformMatrix3x2fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix3x2fv)(location, count, transpose, value)
#define glUniformMatrix2x4fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix2x4fv)(location, count, transpose, value)
#define glUniformMatrix4x2fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix4x2fv)(location, count, transpose, value)
#define glUniformMatrix3x4fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix3x4fv)(location, count, transpose, value)
#define glUniformMatrix4x3fv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix4x3fv)(location, count, transpose, value)
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) ANYGL_CALL(AnyGL_glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) ANYGL_CALL(AnyGL_glRenderbufferStorageMultisample)(target, samples, internalformat, width, height)
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) ANYGL_CALL(AnyGL_glFramebufferTextureLayer)(target, attachment, texture, level, layer)
#define glMapBufferRange(target, offset, length, access) ANYGL_CALL(AnyGL_glMapBufferRange)(target, offset, length, access)
#define glFlushMappedBufferRange(target, offset, length) ANYGL_CALL(AnyGL_glFlushMappedBufferRange)(target, offset, length)
#define glBindVertexArray(array) ANYGL_CALL(AnyGL_glBindVertexArray)(array)
#define glDeleteVertexArrays(n, arrays) ANYGL_CALL(AnyGL_glDeleteVertexArrays)(n, arrays)
#define glGenVertexArrays(n, arrays) ANYGL_CALL(AnyGL_glGenVertexArrays)(n, arrays)
#define glIsVertexArray(array) ANYGL_CALL(AnyGL_glIsVertexArray)(array)
#define glGetIntegeri_v(target, index, data) ANYGL_CALL(AnyGL_glGetIntegeri_v)(target, index, data)
#define glBeginTransformFeedback(primitiveMode) ANYGL_CALL(AnyGL_glBeginTransformFeedback)(primitiveMode)
#define glEndTransformFeedback() ANYGL_CALL(AnyGL_glEndTransformFeedback)()
#define glBindBufferRange(target, index, buffer, offset, size) ANYGL_CALL(AnyGL_glBindBufferRange)(target, index, buffer, offset, size)
#define glBindBufferBase(target, index, buffer) ANYGL_CALL(AnyGL_glBindBufferBase)(target, index, buffer)
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) ANYGL_CALL(AnyGL_glTransformFeedbackVaryings)(program, count, varyings, bufferMode)
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) ANYGL_CALL(AnyGL_glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name)
#define glVertexAttribIPointer(index, size, type, stride, pointer) ANYGL_CALL(AnyGL_glVertexAttribIPointer)(index, size, type, stride, pointer)
#define glGetVertexAttribIiv(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribIiv)(index, pname, params)
#define glGetVertexAttribIuiv(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribIuiv)(index, pname, params)
#define glVertexAttribI4i(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttribI4i)(index, x, y, z, w)
#define glVertexAttribI4ui(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttribI4ui)(index, x, y, z, w)
#define glVertexAttribI4iv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI4iv)(index, v)
#define glVertexAttribI4uiv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI4uiv)(index, v)
#define glGetUniformuiv(program, location, params) ANYGL_CALL(AnyGL_glGetUniformuiv)(program, location, params)
#define glGetFragDataLocation(program, name) ANYGL_CALL(AnyGL_glGetFragDataLocation)(program, name)
#define glUniform1ui(location, v0) ANYGL_CALL(AnyGL_glUniform1ui)(location, v0)
#define glUniform2ui(location, v0, v1) ANYGL_CALL(AnyGL_glUniform2ui)(location, v0, v1)
#define glUniform3ui(location, v0, v1, v2) ANYGL_CALL(AnyGL_glUniform3ui)(location, v0, v1, v2)
#define glUniform4ui(location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glUniform4ui)(location, v0, v1, v2, v3)
#define glUniform1uiv(location, count, value) ANYGL_CALL(AnyGL_glUniform1uiv)(location, count, value)
#define glUniform2uiv(location, count, value) ANYGL_CALL(AnyGL_glUniform2uiv)(location, count, value)
#define glUniform3uiv(location, count, value) ANYGL_CALL(AnyGL_glUniform3uiv)(location, count, value)
#define glUniform4uiv(location, count, value) ANYGL_CALL(AnyGL_glUniform4uiv)(location, count, value)
#define glClearBufferiv(buffer, drawbuffer, value) ANYGL_CALL(AnyGL_glClearBufferiv)(buffer, drawbuffer, value)
#define glClearBufferuiv(buffer, drawbuffer, value) ANYGL_CALL(AnyGL_glClearBufferuiv)(buffer, drawbuffer, value)
#define glClearBufferfv(buffer, drawbuffer, value) ANYGL_CALL(AnyGL_glClearBufferfv)(buffer, drawbuffer, value)
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) ANYGL_CALL(AnyGL_glClearBufferfi)(buffer, drawbuffer, depth, stencil)
#define glGetStringi(name, index) ANYGL_CALL(AnyGL_glGetStringi)(name, index)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) ANYGL_CALL(AnyGL_glCopyBufferSubData)(readTarget, writeTarget, readOffset, writeOffset, size)
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) ANYGL_CALL(AnyGL_glGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices)
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) ANYGL_CALL(AnyGL_glGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, params)
#define glGetUniformBlockIndex(program, uniformBlockName) ANYGL_CALL(AnyGL_glGetUniformBlockIndex)(program, uniformBlockName)
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) ANYGL_CALL(AnyGL_glGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, params)
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) ANYGL_CALL(AnyGL_glGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName)
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) ANYGL_CALL(AnyGL_glUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding)
#define glDrawArraysInstanced(mode, first, count, instancecount) ANYGL_CALL(AnyGL_glDrawArraysInstanced)(mode, first, count, instancecount)
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) ANYGL_CALL(AnyGL_glDrawElementsInstanced)(mode, count, type, indices, instancecount)
#define glFenceSync(condition, flags) ANYGL_CALL(AnyGL_glFenceSync)(condition, flags)
#define glIsSync(sync) ANYGL_CALL(AnyGL_glIsSync)(sync)
#define glDeleteSync(sync) ANYGL_CALL(AnyGL_glDeleteSync)(sync)
#define glClientWaitSync(sync, flags, timeout) ANYGL_CALL(AnyGL_glClientWaitSync)(sync, flags, timeout)
#define glWaitSync(sync, flags, timeout) ANYGL_CALL(AnyGL_glWaitSync)(sync, flags, timeout)
#define glGetInteger64v(pname, data) ANYGL_CALL(AnyGL_glGetInteger64v)(pname, data)
#define glGetSynciv(sync, pname, count, length, values) ANYGL_CALL(AnyGL_glGetSynciv)(sync, pname, count, length, values)
#define glGetInteger64i_v(target, index, data) ANYGL_CALL(AnyGL_glGetInteger64i_v)(target, index, data)
#define glGetBufferParameteri64v(target, pname, params) ANYGL_CALL(AnyGL_glGetBufferParameteri64v)(target, pname, params)
#define glGenSamplers(count, samplers) ANYGL_CALL(AnyGL_glGenSamplers)(count, samplers)
#define glDeleteSamplers(count, samplers) ANYGL_CALL(AnyGL_glDeleteSamplers)(count, samplers)
#define glIsSampler(sampler) ANYGL_CALL(AnyGL_glIsSampler)(sampler)
#define glBindSampler(unit, sampler) ANYGL_CALL(AnyGL_glBindSampler)(unit, sampler)
#define glSamplerParameteri(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameteri)(sampler, pname, param)
#define glSamplerParameteriv(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameteriv)(sampler, pname, param)
#define glSamplerParameterf(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterf)(sampler, pname, param)
#define glSamplerParameterfv(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterfv)(sampler, pname, param)
#define glGetSamplerParameteriv(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameteriv)(sampler, pname, params)
#define glGetSamplerParameterfv(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameterfv)(sampler, pname, params)
#define glVertexAttribDivisor(index, divisor) ANYGL_CALL(AnyGL_glVertexAttribDivisor)(index, divisor)
#define glBindTransformFeedback(target, id) ANYGL_CALL(AnyGL_glBindTransformFeedback)(target, id)
#define glDeleteTransformFeedbacks(n, ids) ANYGL_CALL(AnyGL_glDeleteTransformFeedbacks)(n, ids)
#define glGenTransformFeedbacks(n, ids) ANYGL_CALL(AnyGL_glGenTransformFeedbacks)(n, ids)
#define glIsTransformFeedback(id) ANYGL_CALL(AnyGL_glIsTransformFeedback)(id)
#define glPauseTransformFeedback() ANYGL_CALL(AnyGL_glPauseTransformFeedback)()
#define glResumeTransformFeedback() ANYGL_CALL(AnyGL_glResumeTransformFeedback)()
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) ANYGL_CALL(AnyGL_glGetProgramBinary)(program, bufSize, length, binaryFormat, binary)
#define glProgramBinary(program, binaryFormat, binary, length) ANYGL_CALL(AnyGL_glProgramBinary)(program, binaryFormat, binary, length)
#define glProgramParameteri(program, pname, value) ANYGL_CALL(AnyGL_glProgramParameteri)(program, pname, value)
#define glInvalidateFramebuffer(target, numAttachments, attachments) ANYGL_CALL(AnyGL_glInvalidateFramebuffer)(target, numAttachments, attachments)
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) ANYGL_CALL(AnyGL_glInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height)
#define glTexStorage2D(target, levels, internalformat, width, height) ANYGL_CALL(AnyGL_glTexStorage2D)(target, levels, internalformat, width, height)
#define glTexStorage3D(target, levels, internalformat, width, height, depth) ANYGL_CALL(AnyGL_glTexStorage3D)(target, levels, internalformat, width, height, depth)
#define glGetInternalformativ(target, internalformat, pname, count, params) ANYGL_CALL(AnyGL_glGetInternalformativ)(target, internalformat, pname, count, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_ES_VERSION_3_1 */
typedef void (APIENTRY* PFNANYGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (APIENTRY* PFNANYGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void (APIENTRY* PFNANYGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
typedef void (APIENTRY* PFNANYGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
typedef GLuint (APIENTRY* PFNANYGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
typedef void (APIENTRY* PFNANYGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (APIENTRY* PFNANYGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
typedef GLint (APIENTRY* PFNANYGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar *name);
typedef void (APIENTRY* PFNANYGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (APIENTRY* PFNANYGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef GLuint (APIENTRY* PFNANYGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
typedef void (APIENTRY* PFNANYGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (APIENTRY* PFNANYGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
typedef void (APIENTRY* PFNANYGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
typedef GLboolean (APIENTRY* PFNANYGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (APIENTRY* PFNANYGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (APIENTRY* PFNANYGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRY* PFNANYGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (APIENTRY* PFNANYGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
typedef void (APIENTRY* PFNANYGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void (APIENTRY* PFNANYGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void (APIENTRY* PFNANYGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRY* PFNANYGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
typedef void (APIENTRY* PFNANYGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (APIENTRY* PFNANYGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRY* PFNANYGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);

ANYGL_EXPORT extern PFNANYGLDISPATCHCOMPUTEPROC AnyGL_glDispatchCompute;
ANYGL_EXPORT extern PFNANYGLDISPATCHCOMPUTEINDIRECTPROC AnyGL_glDispatchComputeIndirect;
ANYGL_EXPORT extern PFNANYGLDRAWARRAYSINDIRECTPROC AnyGL_glDrawArraysIndirect;
ANYGL_EXPORT extern PFNANYGLDRAWELEMENTSINDIRECTPROC AnyGL_glDrawElementsIndirect;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERPARAMETERIPROC AnyGL_glFramebufferParameteri;
ANYGL_EXPORT extern PFNANYGLGETFRAMEBUFFERPARAMETERIVPROC AnyGL_glGetFramebufferParameteriv;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMINTERFACEIVPROC AnyGL_glGetProgramInterfaceiv;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMRESOURCEINDEXPROC AnyGL_glGetProgramResourceIndex;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMRESOURCENAMEPROC AnyGL_glGetProgramResourceName;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMRESOURCEIVPROC AnyGL_glGetProgramResourceiv;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMRESOURCELOCATIONPROC AnyGL_glGetProgramResourceLocation;
ANYGL_EXPORT extern PFNANYGLUSEPROGRAMSTAGESPROC AnyGL_glUseProgramStages;
ANYGL_EXPORT extern PFNANYGLACTIVESHADERPROGRAMPROC AnyGL_glActiveShaderProgram;
ANYGL_EXPORT extern PFNANYGLCREATESHADERPROGRAMVPROC AnyGL_glCreateShaderProgramv;
ANYGL_EXPORT extern PFNANYGLBINDPROGRAMPIPELINEPROC AnyGL_glBindProgramPipeline;
ANYGL_EXPORT extern PFNANYGLDELETEPROGRAMPIPELINESPROC AnyGL_glDeleteProgramPipelines;
ANYGL_EXPORT extern PFNANYGLGENPROGRAMPIPELINESPROC AnyGL_glGenProgramPipelines;
ANYGL_EXPORT extern PFNANYGLISPROGRAMPIPELINEPROC AnyGL_glIsProgramPipeline;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMPIPELINEIVPROC AnyGL_glGetProgramPipelineiv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1IPROC AnyGL_glProgramUniform1i;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2IPROC AnyGL_glProgramUniform2i;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3IPROC AnyGL_glProgramUniform3i;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4IPROC AnyGL_glProgramUniform4i;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1UIPROC AnyGL_glProgramUniform1ui;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2UIPROC AnyGL_glProgramUniform2ui;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3UIPROC AnyGL_glProgramUniform3ui;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4UIPROC AnyGL_glProgramUniform4ui;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1FPROC AnyGL_glProgramUniform1f;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2FPROC AnyGL_glProgramUniform2f;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3FPROC AnyGL_glProgramUniform3f;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4FPROC AnyGL_glProgramUniform4f;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1IVPROC AnyGL_glProgramUniform1iv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2IVPROC AnyGL_glProgramUniform2iv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3IVPROC AnyGL_glProgramUniform3iv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4IVPROC AnyGL_glProgramUniform4iv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1UIVPROC AnyGL_glProgramUniform1uiv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2UIVPROC AnyGL_glProgramUniform2uiv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3UIVPROC AnyGL_glProgramUniform3uiv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4UIVPROC AnyGL_glProgramUniform4uiv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1FVPROC AnyGL_glProgramUniform1fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2FVPROC AnyGL_glProgramUniform2fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3FVPROC AnyGL_glProgramUniform3fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4FVPROC AnyGL_glProgramUniform4fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2FVPROC AnyGL_glProgramUniformMatrix2fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3FVPROC AnyGL_glProgramUniformMatrix3fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4FVPROC AnyGL_glProgramUniformMatrix4fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2X3FVPROC AnyGL_glProgramUniformMatrix2x3fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3X2FVPROC AnyGL_glProgramUniformMatrix3x2fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2X4FVPROC AnyGL_glProgramUniformMatrix2x4fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4X2FVPROC AnyGL_glProgramUniformMatrix4x2fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3X4FVPROC AnyGL_glProgramUniformMatrix3x4fv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4X3FVPROC AnyGL_glProgramUniformMatrix4x3fv;
ANYGL_EXPORT extern PFNANYGLVALIDATEPROGRAMPIPELINEPROC AnyGL_glValidateProgramPipeline;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMPIPELINEINFOLOGPROC AnyGL_glGetProgramPipelineInfoLog;
ANYGL_EXPORT extern PFNANYGLBINDIMAGETEXTUREPROC AnyGL_glBindImageTexture;
ANYGL_EXPORT extern PFNANYGLGETBOOLEANI_VPROC AnyGL_glGetBooleani_v;
ANYGL_EXPORT extern PFNANYGLMEMORYBARRIERPROC AnyGL_glMemoryBarrier;
ANYGL_EXPORT extern PFNANYGLMEMORYBARRIERBYREGIONPROC AnyGL_glMemoryBarrierByRegion;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGE2DMULTISAMPLEPROC AnyGL_glTexStorage2DMultisample;
ANYGL_EXPORT extern PFNANYGLGETMULTISAMPLEFVPROC AnyGL_glGetMultisamplefv;
ANYGL_EXPORT extern PFNANYGLSAMPLEMASKIPROC AnyGL_glSampleMaski;
ANYGL_EXPORT extern PFNANYGLGETTEXLEVELPARAMETERIVPROC AnyGL_glGetTexLevelParameteriv;
ANYGL_EXPORT extern PFNANYGLGETTEXLEVELPARAMETERFVPROC AnyGL_glGetTexLevelParameterfv;
ANYGL_EXPORT extern PFNANYGLBINDVERTEXBUFFERPROC AnyGL_glBindVertexBuffer;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBFORMATPROC AnyGL_glVertexAttribFormat;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBIFORMATPROC AnyGL_glVertexAttribIFormat;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBBINDINGPROC AnyGL_glVertexAttribBinding;
ANYGL_EXPORT extern PFNANYGLVERTEXBINDINGDIVISORPROC AnyGL_glVertexBindingDivisor;

#ifndef ANYGL_NO_DEFINES
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) ANYGL_CALL(AnyGL_glDispatchCompute)(num_groups_x, num_groups_y, num_groups_z)
#define glDispatchComputeIndirect(indirect) ANYGL_CALL(AnyGL_glDispatchComputeIndirect)(indirect)
#define glDrawArraysIndirect(mode, indirect) ANYGL_CALL(AnyGL_glDrawArraysIndirect)(mode, indirect)
#define glDrawElementsIndirect(mode, type, indirect) ANYGL_CALL(AnyGL_glDrawElementsIndirect)(mode, type, indirect)
#define glFramebufferParameteri(target, pname, param) ANYGL_CALL(AnyGL_glFramebufferParameteri)(target, pname, param)
#define glGetFramebufferParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetFramebufferParameteriv)(target, pname, params)
#define glGetProgramInterfaceiv(program, programInterface, pname, params) ANYGL_CALL(AnyGL_glGetProgramInterfaceiv)(program, programInterface, pname, params)
#define glGetProgramResourceIndex(program, programInterface, name) ANYGL_CALL(AnyGL_glGetProgramResourceIndex)(program, programInterface, name)
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) ANYGL_CALL(AnyGL_glGetProgramResourceName)(program, programInterface, index, bufSize, length, name)
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params) ANYGL_CALL(AnyGL_glGetProgramResourceiv)(program, programInterface, index, propCount, props, count, length, params)
#define glGetProgramResourceLocation(program, programInterface, name) ANYGL_CALL(AnyGL_glGetProgramResourceLocation)(program, programInterface, name)
#define glUseProgramStages(pipeline, stages, program) ANYGL_CALL(AnyGL_glUseProgramStages)(pipeline, stages, program)
#define glActiveShaderProgram(pipeline, program) ANYGL_CALL(AnyGL_glActiveShaderProgram)(pipeline, program)
#define glCreateShaderProgramv(type, count, strings) ANYGL_CALL(AnyGL_glCreateShaderProgramv)(type, count, strings)
#define glBindProgramPipeline(pipeline) ANYGL_CALL(AnyGL_glBindProgramPipeline)(pipeline)
#define glDeleteProgramPipelines(n, pipelines) ANYGL_CALL(AnyGL_glDeleteProgramPipelines)(n, pipelines)
#define glGenProgramPipelines(n, pipelines) ANYGL_CALL(AnyGL_glGenProgramPipelines)(n, pipelines)
#define glIsProgramPipeline(pipeline) ANYGL_CALL(AnyGL_glIsProgramPipeline)(pipeline)
#define glGetProgramPipelineiv(pipeline, pname, params) ANYGL_CALL(AnyGL_glGetProgramPipelineiv)(pipeline, pname, params)
#define glProgramUniform1i(program, location, v0) ANYGL_CALL(AnyGL_glProgramUniform1i)(program, location, v0)
#define glProgramUniform2i(program, location, v0, v1) ANYGL_CALL(AnyGL_glProgramUniform2i)(program, location, v0, v1)
#define glProgramUniform3i(program, location, v0, v1, v2) ANYGL_CALL(AnyGL_glProgramUniform3i)(program, location, v0, v1, v2)
#define glProgramUniform4i(program, location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glProgramUniform4i)(program, location, v0, v1, v2, v3)
#define glProgramUniform1ui(program, location, v0) ANYGL_CALL(AnyGL_glProgramUniform1ui)(program, location, v0)
#define glProgramUniform2ui(program, location, v0, v1) ANYGL_CALL(AnyGL_glProgramUniform2ui)(program, location, v0, v1)
#define glProgramUniform3ui(program, location, v0, v1, v2) ANYGL_CALL(AnyGL_glProgramUniform3ui)(program, location, v0, v1, v2)
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glProgramUniform4ui)(program, location, v0, v1, v2, v3)
#define glProgramUniform1f(program, location, v0) ANYGL_CALL(AnyGL_glProgramUniform1f)(program, location, v0)
#define glProgramUniform2f(program, location, v0, v1) ANYGL_CALL(AnyGL_glProgramUniform2f)(program, location, v0, v1)
#define glProgramUniform3f(program, location, v0, v1, v2) ANYGL_CALL(AnyGL_glProgramUniform3f)(program, location, v0, v1, v2)
#define glProgramUniform4f(program, location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glProgramUniform4f)(program, location, v0, v1, v2, v3)
#define glProgramUniform1iv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1iv)(program, location, count, value)
#define glProgramUniform2iv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2iv)(program, location, count, value)
#define glProgramUniform3iv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3iv)(program, location, count, value)
#define glProgramUniform4iv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4iv)(program, location, count, value)
#define glProgramUniform1uiv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1uiv)(program, location, count, value)
#define glProgramUniform2uiv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2uiv)(program, location, count, value)
#define glProgramUniform3uiv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3uiv)(program, location, count, value)
#define glProgramUniform4uiv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4uiv)(program, location, count, value)
#define glProgramUniform1fv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1fv)(program, location, count, value)
#define glProgramUniform2fv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2fv)(program, location, count, value)
#define glProgramUniform3fv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3fv)(program, location, count, value)
#define glProgramUniform4fv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4fv)(program, location, count, value)
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x3fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x2fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x4fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x2fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x4fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x3fv)(program, location, count, transpose, value)
#define glValidateProgramPipeline(pipeline) ANYGL_CALL(AnyGL_glValidateProgramPipeline)(pipeline)
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) ANYGL_CALL(AnyGL_glGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) ANYGL_CALL(AnyGL_glBindImageTexture)(unit, texture, level, layered, layer, access, format)
#define glGetBooleani_v(target, index, data) ANYGL_CALL(AnyGL_glGetBooleani_v)(target, index, data)
#define glMemoryBarrier(barriers) ANYGL_CALL(AnyGL_glMemoryBarrier)(barriers)
#define glMemoryBarrierByRegion(barriers) ANYGL_CALL(AnyGL_glMemoryBarrierByRegion)(barriers)
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) ANYGL_CALL(AnyGL_glTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations)
#define glGetMultisamplefv(pname, index, val) ANYGL_CALL(AnyGL_glGetMultisamplefv)(pname, index, val)
#define glSampleMaski(maskNumber, mask) ANYGL_CALL(AnyGL_glSampleMaski)(maskNumber, mask)
#define glGetTexLevelParameteriv(target, level, pname, params) ANYGL_CALL(AnyGL_glGetTexLevelParameteriv)(target, level, pname, params)
#define glGetTexLevelParameterfv(target, level, pname, params) ANYGL_CALL(AnyGL_glGetTexLevelParameterfv)(target, level, pname, params)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) ANYGL_CALL(AnyGL_glBindVertexBuffer)(bindingindex, buffer, offset, stride)
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) ANYGL_CALL(AnyGL_glVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset)
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) ANYGL_CALL(AnyGL_glVertexAttribIFormat)(attribindex, size, type, relativeoffset)
#define glVertexAttribBinding(attribindex, bindingindex) ANYGL_CALL(AnyGL_glVertexAttribBinding)(attribindex, bindingindex)
#define glVertexBindingDivisor(bindingindex, divisor) ANYGL_CALL(AnyGL_glVertexBindingDivisor)(bindingindex, divisor)
#endif /* ANYGL_NO_DEFINES */

/* GL_ES_VERSION_3_2 */
typedef void (APIENTRY* PFNANYGLBLENDBARRIERPROC)();
typedef void (APIENTRY* PFNANYGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (APIENTRY* PFNANYGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (APIENTRY* PFNANYGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void (APIENTRY* PFNANYGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void *userParam);
typedef GLuint (APIENTRY* PFNANYGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
typedef void (APIENTRY* PFNANYGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
typedef void (APIENTRY* PFNANYGLPOPDEBUGGROUPPROC)();
typedef void (APIENTRY* PFNANYGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
typedef void (APIENTRY* PFNANYGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void (APIENTRY* PFNANYGLOBJECTPTRLABELPROC)(const void *ptr, GLsizei length, const GLchar *label);
typedef void (APIENTRY* PFNANYGLGETOBJECTPTRLABELPROC)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void (APIENTRY* PFNANYGLGETPOINTERVPROC)(GLenum pname, void **params);
typedef void (APIENTRY* PFNANYGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (APIENTRY* PFNANYGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (APIENTRY* PFNANYGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (APIENTRY* PFNANYGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRY* PFNANYGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRY* PFNANYGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (APIENTRY* PFNANYGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef GLboolean (APIENTRY* PFNANYGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef void (APIENTRY* PFNANYGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRY* PFNANYGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRY* PFNANYGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLPRIMITIVEBOUNDINGBOXPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef GLenum (APIENTRY* PFNANYGLGETGRAPHICSRESETSTATUSPROC)();
typedef void (APIENTRY* PFNANYGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void (APIENTRY* PFNANYGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void (APIENTRY* PFNANYGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void (APIENTRY* PFNANYGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (APIENTRY* PFNANYGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRY* PFNANYGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRY* PFNANYGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRY* PFNANYGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
typedef void (APIENTRY* PFNANYGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
typedef void (APIENTRY* PFNANYGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRY* PFNANYGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);

ANYGL_EXPORT extern PFNANYGLBLENDBARRIERPROC AnyGL_glBlendBarrier;
ANYGL_EXPORT extern PFNANYGLCOPYIMAGESUBDATAPROC AnyGL_glCopyImageSubData;
ANYGL_EXPORT extern PFNANYGLDEBUGMESSAGECONTROLPROC AnyGL_glDebugMessageControl;
ANYGL_EXPORT extern PFNANYGLDEBUGMESSAGEINSERTPROC AnyGL_glDebugMessageInsert;
ANYGL_EXPORT extern PFNANYGLDEBUGMESSAGECALLBACKPROC AnyGL_glDebugMessageCallback;
ANYGL_EXPORT extern PFNANYGLGETDEBUGMESSAGELOGPROC AnyGL_glGetDebugMessageLog;
ANYGL_EXPORT extern PFNANYGLPUSHDEBUGGROUPPROC AnyGL_glPushDebugGroup;
ANYGL_EXPORT extern PFNANYGLPOPDEBUGGROUPPROC AnyGL_glPopDebugGroup;
ANYGL_EXPORT extern PFNANYGLOBJECTLABELPROC AnyGL_glObjectLabel;
ANYGL_EXPORT extern PFNANYGLGETOBJECTLABELPROC AnyGL_glGetObjectLabel;
ANYGL_EXPORT extern PFNANYGLOBJECTPTRLABELPROC AnyGL_glObjectPtrLabel;
ANYGL_EXPORT extern PFNANYGLGETOBJECTPTRLABELPROC AnyGL_glGetObjectPtrLabel;
ANYGL_EXPORT extern PFNANYGLGETPOINTERVPROC AnyGL_glGetPointerv;
ANYGL_EXPORT extern PFNANYGLENABLEIPROC AnyGL_glEnablei;
ANYGL_EXPORT extern PFNANYGLDISABLEIPROC AnyGL_glDisablei;
ANYGL_EXPORT extern PFNANYGLBLENDEQUATIONIPROC AnyGL_glBlendEquationi;
ANYGL_EXPORT extern PFNANYGLBLENDEQUATIONSEPARATEIPROC AnyGL_glBlendEquationSeparatei;
ANYGL_EXPORT extern PFNANYGLBLENDFUNCIPROC AnyGL_glBlendFunci;
ANYGL_EXPORT extern PFNANYGLBLENDFUNCSEPARATEIPROC AnyGL_glBlendFuncSeparatei;
ANYGL_EXPORT extern PFNANYGLCOLORMASKIPROC AnyGL_glColorMaski;
ANYGL_EXPORT extern PFNANYGLISENABLEDIPROC AnyGL_glIsEnabledi;
ANYGL_EXPORT extern PFNANYGLDRAWELEMENTSBASEVERTEXPROC AnyGL_glDrawElementsBaseVertex;
ANYGL_EXPORT extern PFNANYGLDRAWRANGEELEMENTSBASEVERTEXPROC AnyGL_glDrawRangeElementsBaseVertex;
ANYGL_EXPORT extern PFNANYGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC AnyGL_glDrawElementsInstancedBaseVertex;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTUREPROC AnyGL_glFramebufferTexture;
ANYGL_EXPORT extern PFNANYGLPRIMITIVEBOUNDINGBOXPROC AnyGL_glPrimitiveBoundingBox;
ANYGL_EXPORT extern PFNANYGLGETGRAPHICSRESETSTATUSPROC AnyGL_glGetGraphicsResetStatus;
ANYGL_EXPORT extern PFNANYGLREADNPIXELSPROC AnyGL_glReadnPixels;
ANYGL_EXPORT extern PFNANYGLGETNUNIFORMFVPROC AnyGL_glGetnUniformfv;
ANYGL_EXPORT extern PFNANYGLGETNUNIFORMIVPROC AnyGL_glGetnUniformiv;
ANYGL_EXPORT extern PFNANYGLGETNUNIFORMUIVPROC AnyGL_glGetnUniformuiv;
ANYGL_EXPORT extern PFNANYGLMINSAMPLESHADINGPROC AnyGL_glMinSampleShading;
ANYGL_EXPORT extern PFNANYGLPATCHPARAMETERIPROC AnyGL_glPatchParameteri;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERIIVPROC AnyGL_glTexParameterIiv;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERIUIVPROC AnyGL_glTexParameterIuiv;
ANYGL_EXPORT extern PFNANYGLGETTEXPARAMETERIIVPROC AnyGL_glGetTexParameterIiv;
ANYGL_EXPORT extern PFNANYGLGETTEXPARAMETERIUIVPROC AnyGL_glGetTexParameterIuiv;
ANYGL_EXPORT extern PFNANYGLSAMPLERPARAMETERIIVPROC AnyGL_glSamplerParameterIiv;
ANYGL_EXPORT extern PFNANYGLSAMPLERPARAMETERIUIVPROC AnyGL_glSamplerParameterIuiv;
ANYGL_EXPORT extern PFNANYGLGETSAMPLERPARAMETERIIVPROC AnyGL_glGetSamplerParameterIiv;
ANYGL_EXPORT extern PFNANYGLGETSAMPLERPARAMETERIUIVPROC AnyGL_glGetSamplerParameterIuiv;
ANYGL_EXPORT extern PFNANYGLTEXBUFFERPROC AnyGL_glTexBuffer;
ANYGL_EXPORT extern PFNANYGLTEXBUFFERRANGEPROC AnyGL_glTexBufferRange;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGE3DMULTISAMPLEPROC AnyGL_glTexStorage3DMultisample;

#ifndef ANYGL_NO_DEFINES
#define glBlendBarrier() ANYGL_CALL(AnyGL_glBlendBarrier)()
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) ANYGL_CALL(AnyGL_glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth)
#define glDebugMessageControl(source, type, severity, count, ids, enabled) ANYGL_CALL(AnyGL_glDebugMessageControl)(source, type, severity, count, ids, enabled)
#define glDebugMessageInsert(source, type, id, severity, length, buf) ANYGL_CALL(AnyGL_glDebugMessageInsert)(source, type, id, severity, length, buf)
#define glDebugMessageCallback(callback, userParam) ANYGL_CALL(AnyGL_glDebugMessageCallback)(callback, userParam)
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) ANYGL_CALL(AnyGL_glGetDebugMessageLog)(count, bufSize, sources, types, ids, severities, lengths, messageLog)
#define glPushDebugGroup(source, id, length, message) ANYGL_CALL(AnyGL_glPushDebugGroup)(source, id, length, message)
#define glPopDebugGroup() ANYGL_CALL(AnyGL_glPopDebugGroup)()
#define glObjectLabel(identifier, name, length, label) ANYGL_CALL(AnyGL_glObjectLabel)(identifier, name, length, label)
#define glGetObjectLabel(identifier, name, bufSize, length, label) ANYGL_CALL(AnyGL_glGetObjectLabel)(identifier, name, bufSize, length, label)
#define glObjectPtrLabel(ptr, length, label) ANYGL_CALL(AnyGL_glObjectPtrLabel)(ptr, length, label)
#define glGetObjectPtrLabel(ptr, bufSize, length, label) ANYGL_CALL(AnyGL_glGetObjectPtrLabel)(ptr, bufSize, length, label)
#define glGetPointerv(pname, params) ANYGL_CALL(AnyGL_glGetPointerv)(pname, params)
#define glEnablei(target, index) ANYGL_CALL(AnyGL_glEnablei)(target, index)
#define glDisablei(target, index) ANYGL_CALL(AnyGL_glDisablei)(target, index)
#define glBlendEquationi(buf, mode) ANYGL_CALL(AnyGL_glBlendEquationi)(buf, mode)
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) ANYGL_CALL(AnyGL_glBlendEquationSeparatei)(buf, modeRGB, modeAlpha)
#define glBlendFunci(buf, src, dst) ANYGL_CALL(AnyGL_glBlendFunci)(buf, src, dst)
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) ANYGL_CALL(AnyGL_glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
#define glColorMaski(index, r, g, b, a) ANYGL_CALL(AnyGL_glColorMaski)(index, r, g, b, a)
#define glIsEnabledi(target, index) ANYGL_CALL(AnyGL_glIsEnabledi)(target, index)
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) ANYGL_CALL(AnyGL_glDrawElementsBaseVertex)(mode, count, type, indices, basevertex)
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) ANYGL_CALL(AnyGL_glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex)
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) ANYGL_CALL(AnyGL_glDrawElementsInstancedBaseVertex)(mode, count, type, indices, instancecount, basevertex)
#define glFramebufferTexture(target, attachment, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture)(target, attachment, texture, level)
#define glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) ANYGL_CALL(AnyGL_glPrimitiveBoundingBox)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)
#define glGetGraphicsResetStatus() ANYGL_CALL(AnyGL_glGetGraphicsResetStatus)()
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) ANYGL_CALL(AnyGL_glReadnPixels)(x, y, width, height, format, type, bufSize, data)
#define glGetnUniformfv(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformfv)(program, location, bufSize, params)
#define glGetnUniformiv(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformiv)(program, location, bufSize, params)
#define glGetnUniformuiv(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformuiv)(program, location, bufSize, params)
#define glMinSampleShading(value) ANYGL_CALL(AnyGL_glMinSampleShading)(value)
#define glPatchParameteri(pname, value) ANYGL_CALL(AnyGL_glPatchParameteri)(pname, value)
#define glTexParameterIiv(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterIiv)(target, pname, params)
#define glTexParameterIuiv(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterIuiv)(target, pname, params)
#define glGetTexParameterIiv(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterIiv)(target, pname, params)
#define glGetTexParameterIuiv(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterIuiv)(target, pname, params)
#define glSamplerParameterIiv(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterIiv)(sampler, pname, param)
#define glSamplerParameterIuiv(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterIuiv)(sampler, pname, param)
#define glGetSamplerParameterIiv(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameterIiv)(sampler, pname, params)
#define glGetSamplerParameterIuiv(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameterIuiv)(sampler, pname, params)
#define glTexBuffer(target, internalformat, buffer) ANYGL_CALL(AnyGL_glTexBuffer)(target, internalformat, buffer)
#define glTexBufferRange(target, internalformat, buffer, offset, size) ANYGL_CALL(AnyGL_glTexBufferRange)(target, internalformat, buffer, offset, size)
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) ANYGL_CALL(AnyGL_glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_1_0 */
typedef void (APIENTRY* PFNANYGLPOINTSIZEPROC)(GLfloat size);
typedef void (APIENTRY* PFNANYGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (APIENTRY* PFNANYGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLDRAWBUFFERPROC)(GLenum buf);
typedef void (APIENTRY* PFNANYGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (APIENTRY* PFNANYGLLOGICOPPROC)(GLenum opcode);
typedef void (APIENTRY* PFNANYGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
typedef void (APIENTRY* PFNANYGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRY* PFNANYGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (APIENTRY* PFNANYGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (APIENTRY* PFNANYGLENDLISTPROC)();
typedef void (APIENTRY* PFNANYGLCALLLISTPROC)(GLuint list);
typedef void (APIENTRY* PFNANYGLCALLLISTSPROC)(GLsizei n, GLenum type, const void *lists);
typedef void (APIENTRY* PFNANYGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef GLuint (APIENTRY* PFNANYGLGENLISTSPROC)(GLsizei range);
typedef void (APIENTRY* PFNANYGLLISTBASEPROC)(GLuint base);
typedef void (APIENTRY* PFNANYGLBEGINPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
typedef void (APIENTRY* PFNANYGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (APIENTRY* PFNANYGLCOLOR3BVPROC)(const GLbyte *v);
typedef void (APIENTRY* PFNANYGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (APIENTRY* PFNANYGLCOLOR3DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (APIENTRY* PFNANYGLCOLOR3FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (APIENTRY* PFNANYGLCOLOR3IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (APIENTRY* PFNANYGLCOLOR3SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (APIENTRY* PFNANYGLCOLOR3UBVPROC)(const GLubyte *v);
typedef void (APIENTRY* PFNANYGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (APIENTRY* PFNANYGLCOLOR3UIVPROC)(const GLuint *v);
typedef void (APIENTRY* PFNANYGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (APIENTRY* PFNANYGLCOLOR3USVPROC)(const GLushort *v);
typedef void (APIENTRY* PFNANYGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4BVPROC)(const GLbyte *v);
typedef void (APIENTRY* PFNANYGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4UBVPROC)(const GLubyte *v);
typedef void (APIENTRY* PFNANYGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4UIVPROC)(const GLuint *v);
typedef void (APIENTRY* PFNANYGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (APIENTRY* PFNANYGLCOLOR4USVPROC)(const GLushort *v);
typedef void (APIENTRY* PFNANYGLEDGEFLAGPROC)(GLboolean flag);
typedef void (APIENTRY* PFNANYGLEDGEFLAGVPROC)(const GLboolean *flag);
typedef void (APIENTRY* PFNANYGLENDPROC)();
typedef void (APIENTRY* PFNANYGLINDEXDPROC)(GLdouble c);
typedef void (APIENTRY* PFNANYGLINDEXDVPROC)(const GLdouble *c);
typedef void (APIENTRY* PFNANYGLINDEXFPROC)(GLfloat c);
typedef void (APIENTRY* PFNANYGLINDEXFVPROC)(const GLfloat *c);
typedef void (APIENTRY* PFNANYGLINDEXIPROC)(GLint c);
typedef void (APIENTRY* PFNANYGLINDEXIVPROC)(const GLint *c);
typedef void (APIENTRY* PFNANYGLINDEXSPROC)(GLshort c);
typedef void (APIENTRY* PFNANYGLINDEXSVPROC)(const GLshort *c);
typedef void (APIENTRY* PFNANYGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (APIENTRY* PFNANYGLNORMAL3BVPROC)(const GLbyte *v);
typedef void (APIENTRY* PFNANYGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (APIENTRY* PFNANYGLNORMAL3DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (APIENTRY* PFNANYGLNORMAL3FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (APIENTRY* PFNANYGLNORMAL3IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (APIENTRY* PFNANYGLNORMAL3SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (APIENTRY* PFNANYGLRASTERPOS2DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (APIENTRY* PFNANYGLRASTERPOS2FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (APIENTRY* PFNANYGLRASTERPOS2IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (APIENTRY* PFNANYGLRASTERPOS2SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLRASTERPOS3DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLRASTERPOS3FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (APIENTRY* PFNANYGLRASTERPOS3IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (APIENTRY* PFNANYGLRASTERPOS3SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLRASTERPOS4DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRY* PFNANYGLRASTERPOS4FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRY* PFNANYGLRASTERPOS4IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRY* PFNANYGLRASTERPOS4SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (APIENTRY* PFNANYGLRECTDVPROC)(const GLdouble *v1, const GLdouble *v2);
typedef void (APIENTRY* PFNANYGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (APIENTRY* PFNANYGLRECTFVPROC)(const GLfloat *v1, const GLfloat *v2);
typedef void (APIENTRY* PFNANYGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (APIENTRY* PFNANYGLRECTIVPROC)(const GLint *v1, const GLint *v2);
typedef void (APIENTRY* PFNANYGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (APIENTRY* PFNANYGLRECTSVPROC)(const GLshort *v1, const GLshort *v2);
typedef void (APIENTRY* PFNANYGLTEXCOORD1DPROC)(GLdouble s);
typedef void (APIENTRY* PFNANYGLTEXCOORD1DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD1FPROC)(GLfloat s);
typedef void (APIENTRY* PFNANYGLTEXCOORD1FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD1IPROC)(GLint s);
typedef void (APIENTRY* PFNANYGLTEXCOORD1IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD1SPROC)(GLshort s);
typedef void (APIENTRY* PFNANYGLTEXCOORD1SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (APIENTRY* PFNANYGLTEXCOORD2DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (APIENTRY* PFNANYGLTEXCOORD2FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (APIENTRY* PFNANYGLTEXCOORD2IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (APIENTRY* PFNANYGLTEXCOORD2SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (APIENTRY* PFNANYGLTEXCOORD3DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (APIENTRY* PFNANYGLTEXCOORD3FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (APIENTRY* PFNANYGLTEXCOORD3IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (APIENTRY* PFNANYGLTEXCOORD3SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (APIENTRY* PFNANYGLTEXCOORD4DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (APIENTRY* PFNANYGLTEXCOORD4FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (APIENTRY* PFNANYGLTEXCOORD4IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (APIENTRY* PFNANYGLTEXCOORD4SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (APIENTRY* PFNANYGLVERTEX2DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (APIENTRY* PFNANYGLVERTEX2FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (APIENTRY* PFNANYGLVERTEX2IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (APIENTRY* PFNANYGLVERTEX2SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLVERTEX3DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLVERTEX3FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (APIENTRY* PFNANYGLVERTEX3IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (APIENTRY* PFNANYGLVERTEX3SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLVERTEX4DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRY* PFNANYGLVERTEX4FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRY* PFNANYGLVERTEX4IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRY* PFNANYGLVERTEX4SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLCLIPPLANEPROC)(GLenum plane, const GLdouble *equation);
typedef void (APIENTRY* PFNANYGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (APIENTRY* PFNANYGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLFOGFVPROC)(GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLFOGIPROC)(GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLFOGIVPROC)(GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLLIGHTMODELIVPROC)(GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (APIENTRY* PFNANYGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLPOLYGONSTIPPLEPROC)(const GLubyte *mask);
typedef void (APIENTRY* PFNANYGLSHADEMODELPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (APIENTRY* PFNANYGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble *params);
typedef void (APIENTRY* PFNANYGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat *buffer);
typedef void (APIENTRY* PFNANYGLSELECTBUFFERPROC)(GLsizei size, GLuint *buffer);
typedef GLint (APIENTRY* PFNANYGLRENDERMODEPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLINITNAMESPROC)();
typedef void (APIENTRY* PFNANYGLLOADNAMEPROC)(GLuint name);
typedef void (APIENTRY* PFNANYGLPASSTHROUGHPROC)(GLfloat token);
typedef void (APIENTRY* PFNANYGLPOPNAMEPROC)();
typedef void (APIENTRY* PFNANYGLPUSHNAMEPROC)(GLuint name);
typedef void (APIENTRY* PFNANYGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRY* PFNANYGLCLEARINDEXPROC)(GLfloat c);
typedef void (APIENTRY* PFNANYGLINDEXMASKPROC)(GLuint mask);
typedef void (APIENTRY* PFNANYGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (APIENTRY* PFNANYGLPOPATTRIBPROC)();
typedef void (APIENTRY* PFNANYGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (APIENTRY* PFNANYGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
typedef void (APIENTRY* PFNANYGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
typedef void (APIENTRY* PFNANYGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
typedef void (APIENTRY* PFNANYGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
typedef void (APIENTRY* PFNANYGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (APIENTRY* PFNANYGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (APIENTRY* PFNANYGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (APIENTRY* PFNANYGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (APIENTRY* PFNANYGLEVALCOORD1DPROC)(GLdouble u);
typedef void (APIENTRY* PFNANYGLEVALCOORD1DVPROC)(const GLdouble *u);
typedef void (APIENTRY* PFNANYGLEVALCOORD1FPROC)(GLfloat u);
typedef void (APIENTRY* PFNANYGLEVALCOORD1FVPROC)(const GLfloat *u);
typedef void (APIENTRY* PFNANYGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (APIENTRY* PFNANYGLEVALCOORD2DVPROC)(const GLdouble *u);
typedef void (APIENTRY* PFNANYGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (APIENTRY* PFNANYGLEVALCOORD2FVPROC)(const GLfloat *u);
typedef void (APIENTRY* PFNANYGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (APIENTRY* PFNANYGLEVALPOINT1PROC)(GLint i);
typedef void (APIENTRY* PFNANYGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (APIENTRY* PFNANYGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (APIENTRY* PFNANYGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef void (APIENTRY* PFNANYGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (APIENTRY* PFNANYGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat *values);
typedef void (APIENTRY* PFNANYGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint *values);
typedef void (APIENTRY* PFNANYGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort *values);
typedef void (APIENTRY* PFNANYGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (APIENTRY* PFNANYGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLGETCLIPPLANEPROC)(GLenum plane, GLdouble *equation);
typedef void (APIENTRY* PFNANYGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble *v);
typedef void (APIENTRY* PFNANYGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat *v);
typedef void (APIENTRY* PFNANYGLGETMAPIVPROC)(GLenum target, GLenum query, GLint *v);
typedef void (APIENTRY* PFNANYGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETPIXELMAPFVPROC)(GLenum map, GLfloat *values);
typedef void (APIENTRY* PFNANYGLGETPIXELMAPUIVPROC)(GLenum map, GLuint *values);
typedef void (APIENTRY* PFNANYGLGETPIXELMAPUSVPROC)(GLenum map, GLushort *values);
typedef void (APIENTRY* PFNANYGLGETPOLYGONSTIPPLEPROC)(GLubyte *mask);
typedef void (APIENTRY* PFNANYGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble *params);
typedef void (APIENTRY* PFNANYGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint *params);
typedef GLboolean (APIENTRY* PFNANYGLISLISTPROC)(GLuint list);
typedef void (APIENTRY* PFNANYGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRY* PFNANYGLLOADIDENTITYPROC)();
typedef void (APIENTRY* PFNANYGLLOADMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRY* PFNANYGLLOADMATRIXDPROC)(const GLdouble *m);
typedef void (APIENTRY* PFNANYGLMATRIXMODEPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLMULTMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRY* PFNANYGLMULTMATRIXDPROC)(const GLdouble *m);
typedef void (APIENTRY* PFNANYGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRY* PFNANYGLPOPMATRIXPROC)();
typedef void (APIENTRY* PFNANYGLPUSHMATRIXPROC)();
typedef void (APIENTRY* PFNANYGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);

ANYGL_EXPORT extern PFNANYGLPOINTSIZEPROC AnyGL_glPointSize;
ANYGL_EXPORT extern PFNANYGLPOLYGONMODEPROC AnyGL_glPolygonMode;
ANYGL_EXPORT extern PFNANYGLTEXIMAGE1DPROC AnyGL_glTexImage1D;
ANYGL_EXPORT extern PFNANYGLDRAWBUFFERPROC AnyGL_glDrawBuffer;
ANYGL_EXPORT extern PFNANYGLCLEARDEPTHPROC AnyGL_glClearDepth;
ANYGL_EXPORT extern PFNANYGLLOGICOPPROC AnyGL_glLogicOp;
ANYGL_EXPORT extern PFNANYGLPIXELSTOREFPROC AnyGL_glPixelStoref;
ANYGL_EXPORT extern PFNANYGLGETDOUBLEVPROC AnyGL_glGetDoublev;
ANYGL_EXPORT extern PFNANYGLGETTEXIMAGEPROC AnyGL_glGetTexImage;
ANYGL_EXPORT extern PFNANYGLDEPTHRANGEPROC AnyGL_glDepthRange;
ANYGL_EXPORT extern PFNANYGLNEWLISTPROC AnyGL_glNewList;
ANYGL_EXPORT extern PFNANYGLENDLISTPROC AnyGL_glEndList;
ANYGL_EXPORT extern PFNANYGLCALLLISTPROC AnyGL_glCallList;
ANYGL_EXPORT extern PFNANYGLCALLLISTSPROC AnyGL_glCallLists;
ANYGL_EXPORT extern PFNANYGLDELETELISTSPROC AnyGL_glDeleteLists;
ANYGL_EXPORT extern PFNANYGLGENLISTSPROC AnyGL_glGenLists;
ANYGL_EXPORT extern PFNANYGLLISTBASEPROC AnyGL_glListBase;
ANYGL_EXPORT extern PFNANYGLBEGINPROC AnyGL_glBegin;
ANYGL_EXPORT extern PFNANYGLBITMAPPROC AnyGL_glBitmap;
ANYGL_EXPORT extern PFNANYGLCOLOR3BPROC AnyGL_glColor3b;
ANYGL_EXPORT extern PFNANYGLCOLOR3BVPROC AnyGL_glColor3bv;
ANYGL_EXPORT extern PFNANYGLCOLOR3DPROC AnyGL_glColor3d;
ANYGL_EXPORT extern PFNANYGLCOLOR3DVPROC AnyGL_glColor3dv;
ANYGL_EXPORT extern PFNANYGLCOLOR3FPROC AnyGL_glColor3f;
ANYGL_EXPORT extern PFNANYGLCOLOR3FVPROC AnyGL_glColor3fv;
ANYGL_EXPORT extern PFNANYGLCOLOR3IPROC AnyGL_glColor3i;
ANYGL_EXPORT extern PFNANYGLCOLOR3IVPROC AnyGL_glColor3iv;
ANYGL_EXPORT extern PFNANYGLCOLOR3SPROC AnyGL_glColor3s;
ANYGL_EXPORT extern PFNANYGLCOLOR3SVPROC AnyGL_glColor3sv;
ANYGL_EXPORT extern PFNANYGLCOLOR3UBPROC AnyGL_glColor3ub;
ANYGL_EXPORT extern PFNANYGLCOLOR3UBVPROC AnyGL_glColor3ubv;
ANYGL_EXPORT extern PFNANYGLCOLOR3UIPROC AnyGL_glColor3ui;
ANYGL_EXPORT extern PFNANYGLCOLOR3UIVPROC AnyGL_glColor3uiv;
ANYGL_EXPORT extern PFNANYGLCOLOR3USPROC AnyGL_glColor3us;
ANYGL_EXPORT extern PFNANYGLCOLOR3USVPROC AnyGL_glColor3usv;
ANYGL_EXPORT extern PFNANYGLCOLOR4BPROC AnyGL_glColor4b;
ANYGL_EXPORT extern PFNANYGLCOLOR4BVPROC AnyGL_glColor4bv;
ANYGL_EXPORT extern PFNANYGLCOLOR4DPROC AnyGL_glColor4d;
ANYGL_EXPORT extern PFNANYGLCOLOR4DVPROC AnyGL_glColor4dv;
ANYGL_EXPORT extern PFNANYGLCOLOR4FPROC AnyGL_glColor4f;
ANYGL_EXPORT extern PFNANYGLCOLOR4FVPROC AnyGL_glColor4fv;
ANYGL_EXPORT extern PFNANYGLCOLOR4IPROC AnyGL_glColor4i;
ANYGL_EXPORT extern PFNANYGLCOLOR4IVPROC AnyGL_glColor4iv;
ANYGL_EXPORT extern PFNANYGLCOLOR4SPROC AnyGL_glColor4s;
ANYGL_EXPORT extern PFNANYGLCOLOR4SVPROC AnyGL_glColor4sv;
ANYGL_EXPORT extern PFNANYGLCOLOR4UBPROC AnyGL_glColor4ub;
ANYGL_EXPORT extern PFNANYGLCOLOR4UBVPROC AnyGL_glColor4ubv;
ANYGL_EXPORT extern PFNANYGLCOLOR4UIPROC AnyGL_glColor4ui;
ANYGL_EXPORT extern PFNANYGLCOLOR4UIVPROC AnyGL_glColor4uiv;
ANYGL_EXPORT extern PFNANYGLCOLOR4USPROC AnyGL_glColor4us;
ANYGL_EXPORT extern PFNANYGLCOLOR4USVPROC AnyGL_glColor4usv;
ANYGL_EXPORT extern PFNANYGLEDGEFLAGPROC AnyGL_glEdgeFlag;
ANYGL_EXPORT extern PFNANYGLEDGEFLAGVPROC AnyGL_glEdgeFlagv;
ANYGL_EXPORT extern PFNANYGLENDPROC AnyGL_glEnd;
ANYGL_EXPORT extern PFNANYGLINDEXDPROC AnyGL_glIndexd;
ANYGL_EXPORT extern PFNANYGLINDEXDVPROC AnyGL_glIndexdv;
ANYGL_EXPORT extern PFNANYGLINDEXFPROC AnyGL_glIndexf;
ANYGL_EXPORT extern PFNANYGLINDEXFVPROC AnyGL_glIndexfv;
ANYGL_EXPORT extern PFNANYGLINDEXIPROC AnyGL_glIndexi;
ANYGL_EXPORT extern PFNANYGLINDEXIVPROC AnyGL_glIndexiv;
ANYGL_EXPORT extern PFNANYGLINDEXSPROC AnyGL_glIndexs;
ANYGL_EXPORT extern PFNANYGLINDEXSVPROC AnyGL_glIndexsv;
ANYGL_EXPORT extern PFNANYGLNORMAL3BPROC AnyGL_glNormal3b;
ANYGL_EXPORT extern PFNANYGLNORMAL3BVPROC AnyGL_glNormal3bv;
ANYGL_EXPORT extern PFNANYGLNORMAL3DPROC AnyGL_glNormal3d;
ANYGL_EXPORT extern PFNANYGLNORMAL3DVPROC AnyGL_glNormal3dv;
ANYGL_EXPORT extern PFNANYGLNORMAL3FPROC AnyGL_glNormal3f;
ANYGL_EXPORT extern PFNANYGLNORMAL3FVPROC AnyGL_glNormal3fv;
ANYGL_EXPORT extern PFNANYGLNORMAL3IPROC AnyGL_glNormal3i;
ANYGL_EXPORT extern PFNANYGLNORMAL3IVPROC AnyGL_glNormal3iv;
ANYGL_EXPORT extern PFNANYGLNORMAL3SPROC AnyGL_glNormal3s;
ANYGL_EXPORT extern PFNANYGLNORMAL3SVPROC AnyGL_glNormal3sv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2DPROC AnyGL_glRasterPos2d;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2DVPROC AnyGL_glRasterPos2dv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2FPROC AnyGL_glRasterPos2f;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2FVPROC AnyGL_glRasterPos2fv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2IPROC AnyGL_glRasterPos2i;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2IVPROC AnyGL_glRasterPos2iv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2SPROC AnyGL_glRasterPos2s;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2SVPROC AnyGL_glRasterPos2sv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3DPROC AnyGL_glRasterPos3d;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3DVPROC AnyGL_glRasterPos3dv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3FPROC AnyGL_glRasterPos3f;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3FVPROC AnyGL_glRasterPos3fv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3IPROC AnyGL_glRasterPos3i;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3IVPROC AnyGL_glRasterPos3iv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3SPROC AnyGL_glRasterPos3s;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3SVPROC AnyGL_glRasterPos3sv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4DPROC AnyGL_glRasterPos4d;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4DVPROC AnyGL_glRasterPos4dv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4FPROC AnyGL_glRasterPos4f;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4FVPROC AnyGL_glRasterPos4fv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4IPROC AnyGL_glRasterPos4i;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4IVPROC AnyGL_glRasterPos4iv;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4SPROC AnyGL_glRasterPos4s;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4SVPROC AnyGL_glRasterPos4sv;
ANYGL_EXPORT extern PFNANYGLRECTDPROC AnyGL_glRectd;
ANYGL_EXPORT extern PFNANYGLRECTDVPROC AnyGL_glRectdv;
ANYGL_EXPORT extern PFNANYGLRECTFPROC AnyGL_glRectf;
ANYGL_EXPORT extern PFNANYGLRECTFVPROC AnyGL_glRectfv;
ANYGL_EXPORT extern PFNANYGLRECTIPROC AnyGL_glRecti;
ANYGL_EXPORT extern PFNANYGLRECTIVPROC AnyGL_glRectiv;
ANYGL_EXPORT extern PFNANYGLRECTSPROC AnyGL_glRects;
ANYGL_EXPORT extern PFNANYGLRECTSVPROC AnyGL_glRectsv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1DPROC AnyGL_glTexCoord1d;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1DVPROC AnyGL_glTexCoord1dv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1FPROC AnyGL_glTexCoord1f;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1FVPROC AnyGL_glTexCoord1fv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1IPROC AnyGL_glTexCoord1i;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1IVPROC AnyGL_glTexCoord1iv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1SPROC AnyGL_glTexCoord1s;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1SVPROC AnyGL_glTexCoord1sv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2DPROC AnyGL_glTexCoord2d;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2DVPROC AnyGL_glTexCoord2dv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2FPROC AnyGL_glTexCoord2f;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2FVPROC AnyGL_glTexCoord2fv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2IPROC AnyGL_glTexCoord2i;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2IVPROC AnyGL_glTexCoord2iv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2SPROC AnyGL_glTexCoord2s;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2SVPROC AnyGL_glTexCoord2sv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3DPROC AnyGL_glTexCoord3d;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3DVPROC AnyGL_glTexCoord3dv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3FPROC AnyGL_glTexCoord3f;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3FVPROC AnyGL_glTexCoord3fv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3IPROC AnyGL_glTexCoord3i;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3IVPROC AnyGL_glTexCoord3iv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3SPROC AnyGL_glTexCoord3s;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3SVPROC AnyGL_glTexCoord3sv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4DPROC AnyGL_glTexCoord4d;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4DVPROC AnyGL_glTexCoord4dv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4FPROC AnyGL_glTexCoord4f;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4FVPROC AnyGL_glTexCoord4fv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4IPROC AnyGL_glTexCoord4i;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4IVPROC AnyGL_glTexCoord4iv;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4SPROC AnyGL_glTexCoord4s;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4SVPROC AnyGL_glTexCoord4sv;
ANYGL_EXPORT extern PFNANYGLVERTEX2DPROC AnyGL_glVertex2d;
ANYGL_EXPORT extern PFNANYGLVERTEX2DVPROC AnyGL_glVertex2dv;
ANYGL_EXPORT extern PFNANYGLVERTEX2FPROC AnyGL_glVertex2f;
ANYGL_EXPORT extern PFNANYGLVERTEX2FVPROC AnyGL_glVertex2fv;
ANYGL_EXPORT extern PFNANYGLVERTEX2IPROC AnyGL_glVertex2i;
ANYGL_EXPORT extern PFNANYGLVERTEX2IVPROC AnyGL_glVertex2iv;
ANYGL_EXPORT extern PFNANYGLVERTEX2SPROC AnyGL_glVertex2s;
ANYGL_EXPORT extern PFNANYGLVERTEX2SVPROC AnyGL_glVertex2sv;
ANYGL_EXPORT extern PFNANYGLVERTEX3DPROC AnyGL_glVertex3d;
ANYGL_EXPORT extern PFNANYGLVERTEX3DVPROC AnyGL_glVertex3dv;
ANYGL_EXPORT extern PFNANYGLVERTEX3FPROC AnyGL_glVertex3f;
ANYGL_EXPORT extern PFNANYGLVERTEX3FVPROC AnyGL_glVertex3fv;
ANYGL_EXPORT extern PFNANYGLVERTEX3IPROC AnyGL_glVertex3i;
ANYGL_EXPORT extern PFNANYGLVERTEX3IVPROC AnyGL_glVertex3iv;
ANYGL_EXPORT extern PFNANYGLVERTEX3SPROC AnyGL_glVertex3s;
ANYGL_EXPORT extern PFNANYGLVERTEX3SVPROC AnyGL_glVertex3sv;
ANYGL_EXPORT extern PFNANYGLVERTEX4DPROC AnyGL_glVertex4d;
ANYGL_EXPORT extern PFNANYGLVERTEX4DVPROC AnyGL_glVertex4dv;
ANYGL_EXPORT extern PFNANYGLVERTEX4FPROC AnyGL_glVertex4f;
ANYGL_EXPORT extern PFNANYGLVERTEX4FVPROC AnyGL_glVertex4fv;
ANYGL_EXPORT extern PFNANYGLVERTEX4IPROC AnyGL_glVertex4i;
ANYGL_EXPORT extern PFNANYGLVERTEX4IVPROC AnyGL_glVertex4iv;
ANYGL_EXPORT extern PFNANYGLVERTEX4SPROC AnyGL_glVertex4s;
ANYGL_EXPORT extern PFNANYGLVERTEX4SVPROC AnyGL_glVertex4sv;
ANYGL_EXPORT extern PFNANYGLCLIPPLANEPROC AnyGL_glClipPlane;
ANYGL_EXPORT extern PFNANYGLCOLORMATERIALPROC AnyGL_glColorMaterial;
ANYGL_EXPORT extern PFNANYGLFOGFPROC AnyGL_glFogf;
ANYGL_EXPORT extern PFNANYGLFOGFVPROC AnyGL_glFogfv;
ANYGL_EXPORT extern PFNANYGLFOGIPROC AnyGL_glFogi;
ANYGL_EXPORT extern PFNANYGLFOGIVPROC AnyGL_glFogiv;
ANYGL_EXPORT extern PFNANYGLLIGHTFPROC AnyGL_glLightf;
ANYGL_EXPORT extern PFNANYGLLIGHTFVPROC AnyGL_glLightfv;
ANYGL_EXPORT extern PFNANYGLLIGHTIPROC AnyGL_glLighti;
ANYGL_EXPORT extern PFNANYGLLIGHTIVPROC AnyGL_glLightiv;
ANYGL_EXPORT extern PFNANYGLLIGHTMODELFPROC AnyGL_glLightModelf;
ANYGL_EXPORT extern PFNANYGLLIGHTMODELFVPROC AnyGL_glLightModelfv;
ANYGL_EXPORT extern PFNANYGLLIGHTMODELIPROC AnyGL_glLightModeli;
ANYGL_EXPORT extern PFNANYGLLIGHTMODELIVPROC AnyGL_glLightModeliv;
ANYGL_EXPORT extern PFNANYGLLINESTIPPLEPROC AnyGL_glLineStipple;
ANYGL_EXPORT extern PFNANYGLMATERIALFPROC AnyGL_glMaterialf;
ANYGL_EXPORT extern PFNANYGLMATERIALFVPROC AnyGL_glMaterialfv;
ANYGL_EXPORT extern PFNANYGLMATERIALIPROC AnyGL_glMateriali;
ANYGL_EXPORT extern PFNANYGLMATERIALIVPROC AnyGL_glMaterialiv;
ANYGL_EXPORT extern PFNANYGLPOLYGONSTIPPLEPROC AnyGL_glPolygonStipple;
ANYGL_EXPORT extern PFNANYGLSHADEMODELPROC AnyGL_glShadeModel;
ANYGL_EXPORT extern PFNANYGLTEXENVFPROC AnyGL_glTexEnvf;
ANYGL_EXPORT extern PFNANYGLTEXENVFVPROC AnyGL_glTexEnvfv;
ANYGL_EXPORT extern PFNANYGLTEXENVIPROC AnyGL_glTexEnvi;
ANYGL_EXPORT extern PFNANYGLTEXENVIVPROC AnyGL_glTexEnviv;
ANYGL_EXPORT extern PFNANYGLTEXGENDPROC AnyGL_glTexGend;
ANYGL_EXPORT extern PFNANYGLTEXGENDVPROC AnyGL_glTexGendv;
ANYGL_EXPORT extern PFNANYGLTEXGENFPROC AnyGL_glTexGenf;
ANYGL_EXPORT extern PFNANYGLTEXGENFVPROC AnyGL_glTexGenfv;
ANYGL_EXPORT extern PFNANYGLTEXGENIPROC AnyGL_glTexGeni;
ANYGL_EXPORT extern PFNANYGLTEXGENIVPROC AnyGL_glTexGeniv;
ANYGL_EXPORT extern PFNANYGLFEEDBACKBUFFERPROC AnyGL_glFeedbackBuffer;
ANYGL_EXPORT extern PFNANYGLSELECTBUFFERPROC AnyGL_glSelectBuffer;
ANYGL_EXPORT extern PFNANYGLRENDERMODEPROC AnyGL_glRenderMode;
ANYGL_EXPORT extern PFNANYGLINITNAMESPROC AnyGL_glInitNames;
ANYGL_EXPORT extern PFNANYGLLOADNAMEPROC AnyGL_glLoadName;
ANYGL_EXPORT extern PFNANYGLPASSTHROUGHPROC AnyGL_glPassThrough;
ANYGL_EXPORT extern PFNANYGLPOPNAMEPROC AnyGL_glPopName;
ANYGL_EXPORT extern PFNANYGLPUSHNAMEPROC AnyGL_glPushName;
ANYGL_EXPORT extern PFNANYGLCLEARACCUMPROC AnyGL_glClearAccum;
ANYGL_EXPORT extern PFNANYGLCLEARINDEXPROC AnyGL_glClearIndex;
ANYGL_EXPORT extern PFNANYGLINDEXMASKPROC AnyGL_glIndexMask;
ANYGL_EXPORT extern PFNANYGLACCUMPROC AnyGL_glAccum;
ANYGL_EXPORT extern PFNANYGLPOPATTRIBPROC AnyGL_glPopAttrib;
ANYGL_EXPORT extern PFNANYGLPUSHATTRIBPROC AnyGL_glPushAttrib;
ANYGL_EXPORT extern PFNANYGLMAP1DPROC AnyGL_glMap1d;
ANYGL_EXPORT extern PFNANYGLMAP1FPROC AnyGL_glMap1f;
ANYGL_EXPORT extern PFNANYGLMAP2DPROC AnyGL_glMap2d;
ANYGL_EXPORT extern PFNANYGLMAP2FPROC AnyGL_glMap2f;
ANYGL_EXPORT extern PFNANYGLMAPGRID1DPROC AnyGL_glMapGrid1d;
ANYGL_EXPORT extern PFNANYGLMAPGRID1FPROC AnyGL_glMapGrid1f;
ANYGL_EXPORT extern PFNANYGLMAPGRID2DPROC AnyGL_glMapGrid2d;
ANYGL_EXPORT extern PFNANYGLMAPGRID2FPROC AnyGL_glMapGrid2f;
ANYGL_EXPORT extern PFNANYGLEVALCOORD1DPROC AnyGL_glEvalCoord1d;
ANYGL_EXPORT extern PFNANYGLEVALCOORD1DVPROC AnyGL_glEvalCoord1dv;
ANYGL_EXPORT extern PFNANYGLEVALCOORD1FPROC AnyGL_glEvalCoord1f;
ANYGL_EXPORT extern PFNANYGLEVALCOORD1FVPROC AnyGL_glEvalCoord1fv;
ANYGL_EXPORT extern PFNANYGLEVALCOORD2DPROC AnyGL_glEvalCoord2d;
ANYGL_EXPORT extern PFNANYGLEVALCOORD2DVPROC AnyGL_glEvalCoord2dv;
ANYGL_EXPORT extern PFNANYGLEVALCOORD2FPROC AnyGL_glEvalCoord2f;
ANYGL_EXPORT extern PFNANYGLEVALCOORD2FVPROC AnyGL_glEvalCoord2fv;
ANYGL_EXPORT extern PFNANYGLEVALMESH1PROC AnyGL_glEvalMesh1;
ANYGL_EXPORT extern PFNANYGLEVALPOINT1PROC AnyGL_glEvalPoint1;
ANYGL_EXPORT extern PFNANYGLEVALMESH2PROC AnyGL_glEvalMesh2;
ANYGL_EXPORT extern PFNANYGLEVALPOINT2PROC AnyGL_glEvalPoint2;
ANYGL_EXPORT extern PFNANYGLALPHAFUNCPROC AnyGL_glAlphaFunc;
ANYGL_EXPORT extern PFNANYGLPIXELZOOMPROC AnyGL_glPixelZoom;
ANYGL_EXPORT extern PFNANYGLPIXELTRANSFERFPROC AnyGL_glPixelTransferf;
ANYGL_EXPORT extern PFNANYGLPIXELTRANSFERIPROC AnyGL_glPixelTransferi;
ANYGL_EXPORT extern PFNANYGLPIXELMAPFVPROC AnyGL_glPixelMapfv;
ANYGL_EXPORT extern PFNANYGLPIXELMAPUIVPROC AnyGL_glPixelMapuiv;
ANYGL_EXPORT extern PFNANYGLPIXELMAPUSVPROC AnyGL_glPixelMapusv;
ANYGL_EXPORT extern PFNANYGLCOPYPIXELSPROC AnyGL_glCopyPixels;
ANYGL_EXPORT extern PFNANYGLDRAWPIXELSPROC AnyGL_glDrawPixels;
ANYGL_EXPORT extern PFNANYGLGETCLIPPLANEPROC AnyGL_glGetClipPlane;
ANYGL_EXPORT extern PFNANYGLGETLIGHTFVPROC AnyGL_glGetLightfv;
ANYGL_EXPORT extern PFNANYGLGETLIGHTIVPROC AnyGL_glGetLightiv;
ANYGL_EXPORT extern PFNANYGLGETMAPDVPROC AnyGL_glGetMapdv;
ANYGL_EXPORT extern PFNANYGLGETMAPFVPROC AnyGL_glGetMapfv;
ANYGL_EXPORT extern PFNANYGLGETMAPIVPROC AnyGL_glGetMapiv;
ANYGL_EXPORT extern PFNANYGLGETMATERIALFVPROC AnyGL_glGetMaterialfv;
ANYGL_EXPORT extern PFNANYGLGETMATERIALIVPROC AnyGL_glGetMaterialiv;
ANYGL_EXPORT extern PFNANYGLGETPIXELMAPFVPROC AnyGL_glGetPixelMapfv;
ANYGL_EXPORT extern PFNANYGLGETPIXELMAPUIVPROC AnyGL_glGetPixelMapuiv;
ANYGL_EXPORT extern PFNANYGLGETPIXELMAPUSVPROC AnyGL_glGetPixelMapusv;
ANYGL_EXPORT extern PFNANYGLGETPOLYGONSTIPPLEPROC AnyGL_glGetPolygonStipple;
ANYGL_EXPORT extern PFNANYGLGETTEXENVFVPROC AnyGL_glGetTexEnvfv;
ANYGL_EXPORT extern PFNANYGLGETTEXENVIVPROC AnyGL_glGetTexEnviv;
ANYGL_EXPORT extern PFNANYGLGETTEXGENDVPROC AnyGL_glGetTexGendv;
ANYGL_EXPORT extern PFNANYGLGETTEXGENFVPROC AnyGL_glGetTexGenfv;
ANYGL_EXPORT extern PFNANYGLGETTEXGENIVPROC AnyGL_glGetTexGeniv;
ANYGL_EXPORT extern PFNANYGLISLISTPROC AnyGL_glIsList;
ANYGL_EXPORT extern PFNANYGLFRUSTUMPROC AnyGL_glFrustum;
ANYGL_EXPORT extern PFNANYGLLOADIDENTITYPROC AnyGL_glLoadIdentity;
ANYGL_EXPORT extern PFNANYGLLOADMATRIXFPROC AnyGL_glLoadMatrixf;
ANYGL_EXPORT extern PFNANYGLLOADMATRIXDPROC AnyGL_glLoadMatrixd;
ANYGL_EXPORT extern PFNANYGLMATRIXMODEPROC AnyGL_glMatrixMode;
ANYGL_EXPORT extern PFNANYGLMULTMATRIXFPROC AnyGL_glMultMatrixf;
ANYGL_EXPORT extern PFNANYGLMULTMATRIXDPROC AnyGL_glMultMatrixd;
ANYGL_EXPORT extern PFNANYGLORTHOPROC AnyGL_glOrtho;
ANYGL_EXPORT extern PFNANYGLPOPMATRIXPROC AnyGL_glPopMatrix;
ANYGL_EXPORT extern PFNANYGLPUSHMATRIXPROC AnyGL_glPushMatrix;
ANYGL_EXPORT extern PFNANYGLROTATEDPROC AnyGL_glRotated;
ANYGL_EXPORT extern PFNANYGLROTATEFPROC AnyGL_glRotatef;
ANYGL_EXPORT extern PFNANYGLSCALEDPROC AnyGL_glScaled;
ANYGL_EXPORT extern PFNANYGLSCALEFPROC AnyGL_glScalef;
ANYGL_EXPORT extern PFNANYGLTRANSLATEDPROC AnyGL_glTranslated;
ANYGL_EXPORT extern PFNANYGLTRANSLATEFPROC AnyGL_glTranslatef;

#ifndef ANYGL_NO_DEFINES
#define glPointSize(size) ANYGL_CALL(AnyGL_glPointSize)(size)
#define glPolygonMode(face, mode) ANYGL_CALL(AnyGL_glPolygonMode)(face, mode)
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) ANYGL_CALL(AnyGL_glTexImage1D)(target, level, internalformat, width, border, format, type, pixels)
#define glDrawBuffer(buf) ANYGL_CALL(AnyGL_glDrawBuffer)(buf)
#define glClearDepth(depth) ANYGL_CALL(AnyGL_glClearDepth)(depth)
#define glLogicOp(opcode) ANYGL_CALL(AnyGL_glLogicOp)(opcode)
#define glPixelStoref(pname, param) ANYGL_CALL(AnyGL_glPixelStoref)(pname, param)
#define glGetDoublev(pname, data) ANYGL_CALL(AnyGL_glGetDoublev)(pname, data)
#define glGetTexImage(target, level, format, type, pixels) ANYGL_CALL(AnyGL_glGetTexImage)(target, level, format, type, pixels)
#define glDepthRange(n, f) ANYGL_CALL(AnyGL_glDepthRange)(n, f)
#define glNewList(list, mode) ANYGL_CALL(AnyGL_glNewList)(list, mode)
#define glEndList() ANYGL_CALL(AnyGL_glEndList)()
#define glCallList(list) ANYGL_CALL(AnyGL_glCallList)(list)
#define glCallLists(n, type, lists) ANYGL_CALL(AnyGL_glCallLists)(n, type, lists)
#define glDeleteLists(list, range) ANYGL_CALL(AnyGL_glDeleteLists)(list, range)
#define glGenLists(range) ANYGL_CALL(AnyGL_glGenLists)(range)
#define glListBase(base) ANYGL_CALL(AnyGL_glListBase)(base)
#define glBegin(mode) ANYGL_CALL(AnyGL_glBegin)(mode)
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) ANYGL_CALL(AnyGL_glBitmap)(width, height, xorig, yorig, xmove, ymove, bitmap)
#define glColor3b(red, green, blue) ANYGL_CALL(AnyGL_glColor3b)(red, green, blue)
#define glColor3bv(v) ANYGL_CALL(AnyGL_glColor3bv)(v)
#define glColor3d(red, green, blue) ANYGL_CALL(AnyGL_glColor3d)(red, green, blue)
#define glColor3dv(v) ANYGL_CALL(AnyGL_glColor3dv)(v)
#define glColor3f(red, green, blue) ANYGL_CALL(AnyGL_glColor3f)(red, green, blue)
#define glColor3fv(v) ANYGL_CALL(AnyGL_glColor3fv)(v)
#define glColor3i(red, green, blue) ANYGL_CALL(AnyGL_glColor3i)(red, green, blue)
#define glColor3iv(v) ANYGL_CALL(AnyGL_glColor3iv)(v)
#define glColor3s(red, green, blue) ANYGL_CALL(AnyGL_glColor3s)(red, green, blue)
#define glColor3sv(v) ANYGL_CALL(AnyGL_glColor3sv)(v)
#define glColor3ub(red, green, blue) ANYGL_CALL(AnyGL_glColor3ub)(red, green, blue)
#define glColor3ubv(v) ANYGL_CALL(AnyGL_glColor3ubv)(v)
#define glColor3ui(red, green, blue) ANYGL_CALL(AnyGL_glColor3ui)(red, green, blue)
#define glColor3uiv(v) ANYGL_CALL(AnyGL_glColor3uiv)(v)
#define glColor3us(red, green, blue) ANYGL_CALL(AnyGL_glColor3us)(red, green, blue)
#define glColor3usv(v) ANYGL_CALL(AnyGL_glColor3usv)(v)
#define glColor4b(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4b)(red, green, blue, alpha)
#define glColor4bv(v) ANYGL_CALL(AnyGL_glColor4bv)(v)
#define glColor4d(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4d)(red, green, blue, alpha)
#define glColor4dv(v) ANYGL_CALL(AnyGL_glColor4dv)(v)
#define glColor4f(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4f)(red, green, blue, alpha)
#define glColor4fv(v) ANYGL_CALL(AnyGL_glColor4fv)(v)
#define glColor4i(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4i)(red, green, blue, alpha)
#define glColor4iv(v) ANYGL_CALL(AnyGL_glColor4iv)(v)
#define glColor4s(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4s)(red, green, blue, alpha)
#define glColor4sv(v) ANYGL_CALL(AnyGL_glColor4sv)(v)
#define glColor4ub(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4ub)(red, green, blue, alpha)
#define glColor4ubv(v) ANYGL_CALL(AnyGL_glColor4ubv)(v)
#define glColor4ui(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4ui)(red, green, blue, alpha)
#define glColor4uiv(v) ANYGL_CALL(AnyGL_glColor4uiv)(v)
#define glColor4us(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4us)(red, green, blue, alpha)
#define glColor4usv(v) ANYGL_CALL(AnyGL_glColor4usv)(v)
#define glEdgeFlag(flag) ANYGL_CALL(AnyGL_glEdgeFlag)(flag)
#define glEdgeFlagv(flag) ANYGL_CALL(AnyGL_glEdgeFlagv)(flag)
#define glEnd() ANYGL_CALL(AnyGL_glEnd)()
#define glIndexd(c) ANYGL_CALL(AnyGL_glIndexd)(c)
#define glIndexdv(c) ANYGL_CALL(AnyGL_glIndexdv)(c)
#define glIndexf(c) ANYGL_CALL(AnyGL_glIndexf)(c)
#define glIndexfv(c) ANYGL_CALL(AnyGL_glIndexfv)(c)
#define glIndexi(c) ANYGL_CALL(AnyGL_glIndexi)(c)
#define glIndexiv(c) ANYGL_CALL(AnyGL_glIndexiv)(c)
#define glIndexs(c) ANYGL_CALL(AnyGL_glIndexs)(c)
#define glIndexsv(c) ANYGL_CALL(AnyGL_glIndexsv)(c)
#define glNormal3b(nx, ny, nz) ANYGL_CALL(AnyGL_glNormal3b)(nx, ny, nz)
#define glNormal3bv(v) ANYGL_CALL(AnyGL_glNormal3bv)(v)
#define glNormal3d(nx, ny, nz) ANYGL_CALL(AnyGL_glNormal3d)(nx, ny, nz)
#define glNormal3dv(v) ANYGL_CALL(AnyGL_glNormal3dv)(v)
#define glNormal3f(nx, ny, nz) ANYGL_CALL(AnyGL_glNormal3f)(nx, ny, nz)
#define glNormal3fv(v) ANYGL_CALL(AnyGL_glNormal3fv)(v)
#define glNormal3i(nx, ny, nz) ANYGL_CALL(AnyGL_glNormal3i)(nx, ny, nz)
#define glNormal3iv(v) ANYGL_CALL(AnyGL_glNormal3iv)(v)
#define glNormal3s(nx, ny, nz) ANYGL_CALL(AnyGL_glNormal3s)(nx, ny, nz)
#define glNormal3sv(v) ANYGL_CALL(AnyGL_glNormal3sv)(v)
#define glRasterPos2d(x, y) ANYGL_CALL(AnyGL_glRasterPos2d)(x, y)
#define glRasterPos2dv(v) ANYGL_CALL(AnyGL_glRasterPos2dv)(v)
#define glRasterPos2f(x, y) ANYGL_CALL(AnyGL_glRasterPos2f)(x, y)
#define glRasterPos2fv(v) ANYGL_CALL(AnyGL_glRasterPos2fv)(v)
#define glRasterPos2i(x, y) ANYGL_CALL(AnyGL_glRasterPos2i)(x, y)
#define glRasterPos2iv(v) ANYGL_CALL(AnyGL_glRasterPos2iv)(v)
#define glRasterPos2s(x, y) ANYGL_CALL(AnyGL_glRasterPos2s)(x, y)
#define glRasterPos2sv(v) ANYGL_CALL(AnyGL_glRasterPos2sv)(v)
#define glRasterPos3d(x, y, z) ANYGL_CALL(AnyGL_glRasterPos3d)(x, y, z)
#define glRasterPos3dv(v) ANYGL_CALL(AnyGL_glRasterPos3dv)(v)
#define glRasterPos3f(x, y, z) ANYGL_CALL(AnyGL_glRasterPos3f)(x, y, z)
#define glRasterPos3fv(v) ANYGL_CALL(AnyGL_glRasterPos3fv)(v)
#define glRasterPos3i(x, y, z) ANYGL_CALL(AnyGL_glRasterPos3i)(x, y, z)
#define glRasterPos3iv(v) ANYGL_CALL(AnyGL_glRasterPos3iv)(v)
#define glRasterPos3s(x, y, z) ANYGL_CALL(AnyGL_glRasterPos3s)(x, y, z)
#define glRasterPos3sv(v) ANYGL_CALL(AnyGL_glRasterPos3sv)(v)
#define glRasterPos4d(x, y, z, w) ANYGL_CALL(AnyGL_glRasterPos4d)(x, y, z, w)
#define glRasterPos4dv(v) ANYGL_CALL(AnyGL_glRasterPos4dv)(v)
#define glRasterPos4f(x, y, z, w) ANYGL_CALL(AnyGL_glRasterPos4f)(x, y, z, w)
#define glRasterPos4fv(v) ANYGL_CALL(AnyGL_glRasterPos4fv)(v)
#define glRasterPos4i(x, y, z, w) ANYGL_CALL(AnyGL_glRasterPos4i)(x, y, z, w)
#define glRasterPos4iv(v) ANYGL_CALL(AnyGL_glRasterPos4iv)(v)
#define glRasterPos4s(x, y, z, w) ANYGL_CALL(AnyGL_glRasterPos4s)(x, y, z, w)
#define glRasterPos4sv(v) ANYGL_CALL(AnyGL_glRasterPos4sv)(v)
#define glRectd(x1, y1, x2, y2) ANYGL_CALL(AnyGL_glRectd)(x1, y1, x2, y2)
#define glRectdv(v1, v2) ANYGL_CALL(AnyGL_glRectdv)(v1, v2)
#define glRectf(x1, y1, x2, y2) ANYGL_CALL(AnyGL_glRectf)(x1, y1, x2, y2)
#define glRectfv(v1, v2) ANYGL_CALL(AnyGL_glRectfv)(v1, v2)
#define glRecti(x1, y1, x2, y2) ANYGL_CALL(AnyGL_glRecti)(x1, y1, x2, y2)
#define glRectiv(v1, v2) ANYGL_CALL(AnyGL_glRectiv)(v1, v2)
#define glRects(x1, y1, x2, y2) ANYGL_CALL(AnyGL_glRects)(x1, y1, x2, y2)
#define glRectsv(v1, v2) ANYGL_CALL(AnyGL_glRectsv)(v1, v2)
#define glTexCoord1d(s) ANYGL_CALL(AnyGL_glTexCoord1d)(s)
#define glTexCoord1dv(v) ANYGL_CALL(AnyGL_glTexCoord1dv)(v)
#define glTexCoord1f(s) ANYGL_CALL(AnyGL_glTexCoord1f)(s)
#define glTexCoord1fv(v) ANYGL_CALL(AnyGL_glTexCoord1fv)(v)
#define glTexCoord1i(s) ANYGL_CALL(AnyGL_glTexCoord1i)(s)
#define glTexCoord1iv(v) ANYGL_CALL(AnyGL_glTexCoord1iv)(v)
#define glTexCoord1s(s) ANYGL_CALL(AnyGL_glTexCoord1s)(s)
#define glTexCoord1sv(v) ANYGL_CALL(AnyGL_glTexCoord1sv)(v)
#define glTexCoord2d(s, t) ANYGL_CALL(AnyGL_glTexCoord2d)(s, t)
#define glTexCoord2dv(v) ANYGL_CALL(AnyGL_glTexCoord2dv)(v)
#define glTexCoord2f(s, t) ANYGL_CALL(AnyGL_glTexCoord2f)(s, t)
#define glTexCoord2fv(v) ANYGL_CALL(AnyGL_glTexCoord2fv)(v)
#define glTexCoord2i(s, t) ANYGL_CALL(AnyGL_glTexCoord2i)(s, t)
#define glTexCoord2iv(v) ANYGL_CALL(AnyGL_glTexCoord2iv)(v)
#define glTexCoord2s(s, t) ANYGL_CALL(AnyGL_glTexCoord2s)(s, t)
#define glTexCoord2sv(v) ANYGL_CALL(AnyGL_glTexCoord2sv)(v)
#define glTexCoord3d(s, t, r) ANYGL_CALL(AnyGL_glTexCoord3d)(s, t, r)
#define glTexCoord3dv(v) ANYGL_CALL(AnyGL_glTexCoord3dv)(v)
#define glTexCoord3f(s, t, r) ANYGL_CALL(AnyGL_glTexCoord3f)(s, t, r)
#define glTexCoord3fv(v) ANYGL_CALL(AnyGL_glTexCoord3fv)(v)
#define glTexCoord3i(s, t, r) ANYGL_CALL(AnyGL_glTexCoord3i)(s, t, r)
#define glTexCoord3iv(v) ANYGL_CALL(AnyGL_glTexCoord3iv)(v)
#define glTexCoord3s(s, t, r) ANYGL_CALL(AnyGL_glTexCoord3s)(s, t, r)
#define glTexCoord3sv(v) ANYGL_CALL(AnyGL_glTexCoord3sv)(v)
#define glTexCoord4d(s, t, r, q) ANYGL_CALL(AnyGL_glTexCoord4d)(s, t, r, q)
#define glTexCoord4dv(v) ANYGL_CALL(AnyGL_glTexCoord4dv)(v)
#define glTexCoord4f(s, t, r, q) ANYGL_CALL(AnyGL_glTexCoord4f)(s, t, r, q)
#define glTexCoord4fv(v) ANYGL_CALL(AnyGL_glTexCoord4fv)(v)
#define glTexCoord4i(s, t, r, q) ANYGL_CALL(AnyGL_glTexCoord4i)(s, t, r, q)
#define glTexCoord4iv(v) ANYGL_CALL(AnyGL_glTexCoord4iv)(v)
#define glTexCoord4s(s, t, r, q) ANYGL_CALL(AnyGL_glTexCoord4s)(s, t, r, q)
#define glTexCoord4sv(v) ANYGL_CALL(AnyGL_glTexCoord4sv)(v)
#define glVertex2d(x, y) ANYGL_CALL(AnyGL_glVertex2d)(x, y)
#define glVertex2dv(v) ANYGL_CALL(AnyGL_glVertex2dv)(v)
#define glVertex2f(x, y) ANYGL_CALL(AnyGL_glVertex2f)(x, y)
#define glVertex2fv(v) ANYGL_CALL(AnyGL_glVertex2fv)(v)
#define glVertex2i(x, y) ANYGL_CALL(AnyGL_glVertex2i)(x, y)
#define glVertex2iv(v) ANYGL_CALL(AnyGL_glVertex2iv)(v)
#define glVertex2s(x, y) ANYGL_CALL(AnyGL_glVertex2s)(x, y)
#define glVertex2sv(v) ANYGL_CALL(AnyGL_glVertex2sv)(v)
#define glVertex3d(x, y, z) ANYGL_CALL(AnyGL_glVertex3d)(x, y, z)
#define glVertex3dv(v) ANYGL_CALL(AnyGL_glVertex3dv)(v)
#define glVertex3f(x, y, z) ANYGL_CALL(AnyGL_glVertex3f)(x, y, z)
#define glVertex3fv(v) ANYGL_CALL(AnyGL_glVertex3fv)(v)
#define glVertex3i(x, y, z) ANYGL_CALL(AnyGL_glVertex3i)(x, y, z)
#define glVertex3iv(v) ANYGL_CALL(AnyGL_glVertex3iv)(v)
#define glVertex3s(x, y, z) ANYGL_CALL(AnyGL_glVertex3s)(x, y, z)
#define glVertex3sv(v) ANYGL_CALL(AnyGL_glVertex3sv)(v)
#define glVertex4d(x, y, z, w) ANYGL_CALL(AnyGL_glVertex4d)(x, y, z, w)
#define glVertex4dv(v) ANYGL_CALL(AnyGL_glVertex4dv)(v)
#define glVertex4f(x, y, z, w) ANYGL_CALL(AnyGL_glVertex4f)(x, y, z, w)
#define glVertex4fv(v) ANYGL_CALL(AnyGL_glVertex4fv)(v)
#define glVertex4i(x, y, z, w) ANYGL_CALL(AnyGL_glVertex4i)(x, y, z, w)
#define glVertex4iv(v) ANYGL_CALL(AnyGL_glVertex4iv)(v)
#define glVertex4s(x, y, z, w) ANYGL_CALL(AnyGL_glVertex4s)(x, y, z, w)
#define glVertex4sv(v) ANYGL_CALL(AnyGL_glVertex4sv)(v)
#define glClipPlane(plane, equation) ANYGL_CALL(AnyGL_glClipPlane)(plane, equation)
#define glColorMaterial(face, mode) ANYGL_CALL(AnyGL_glColorMaterial)(face, mode)
#define glFogf(pname, param) ANYGL_CALL(AnyGL_glFogf)(pname, param)
#define glFogfv(pname, params) ANYGL_CALL(AnyGL_glFogfv)(pname, params)
#define glFogi(pname, param) ANYGL_CALL(AnyGL_glFogi)(pname, param)
#define glFogiv(pname, params) ANYGL_CALL(AnyGL_glFogiv)(pname, params)
#define glLightf(light, pname, param) ANYGL_CALL(AnyGL_glLightf)(light, pname, param)
#define glLightfv(light, pname, params) ANYGL_CALL(AnyGL_glLightfv)(light, pname, params)
#define glLighti(light, pname, param) ANYGL_CALL(AnyGL_glLighti)(light, pname, param)
#define glLightiv(light, pname, params) ANYGL_CALL(AnyGL_glLightiv)(light, pname, params)
#define glLightModelf(pname, param) ANYGL_CALL(AnyGL_glLightModelf)(pname, param)
#define glLightModelfv(pname, params) ANYGL_CALL(AnyGL_glLightModelfv)(pname, params)
#define glLightModeli(pname, param) ANYGL_CALL(AnyGL_glLightModeli)(pname, param)
#define glLightModeliv(pname, params) ANYGL_CALL(AnyGL_glLightModeliv)(pname, params)
#define glLineStipple(factor, pattern) ANYGL_CALL(AnyGL_glLineStipple)(factor, pattern)
#define glMaterialf(face, pname, param) ANYGL_CALL(AnyGL_glMaterialf)(face, pname, param)
#define glMaterialfv(face, pname, params) ANYGL_CALL(AnyGL_glMaterialfv)(face, pname, params)
#define glMateriali(face, pname, param) ANYGL_CALL(AnyGL_glMateriali)(face, pname, param)
#define glMaterialiv(face, pname, params) ANYGL_CALL(AnyGL_glMaterialiv)(face, pname, params)
#define glPolygonStipple(mask) ANYGL_CALL(AnyGL_glPolygonStipple)(mask)
#define glShadeModel(mode) ANYGL_CALL(AnyGL_glShadeModel)(mode)
#define glTexEnvf(target, pname, param) ANYGL_CALL(AnyGL_glTexEnvf)(target, pname, param)
#define glTexEnvfv(target, pname, params) ANYGL_CALL(AnyGL_glTexEnvfv)(target, pname, params)
#define glTexEnvi(target, pname, param) ANYGL_CALL(AnyGL_glTexEnvi)(target, pname, param)
#define glTexEnviv(target, pname, params) ANYGL_CALL(AnyGL_glTexEnviv)(target, pname, params)
#define glTexGend(coord, pname, param) ANYGL_CALL(AnyGL_glTexGend)(coord, pname, param)
#define glTexGendv(coord, pname, params) ANYGL_CALL(AnyGL_glTexGendv)(coord, pname, params)
#define glTexGenf(coord, pname, param) ANYGL_CALL(AnyGL_glTexGenf)(coord, pname, param)
#define glTexGenfv(coord, pname, params) ANYGL_CALL(AnyGL_glTexGenfv)(coord, pname, params)
#define glTexGeni(coord, pname, param) ANYGL_CALL(AnyGL_glTexGeni)(coord, pname, param)
#define glTexGeniv(coord, pname, params) ANYGL_CALL(AnyGL_glTexGeniv)(coord, pname, params)
#define glFeedbackBuffer(size, type, buffer) ANYGL_CALL(AnyGL_glFeedbackBuffer)(size, type, buffer)
#define glSelectBuffer(size, buffer) ANYGL_CALL(AnyGL_glSelectBuffer)(size, buffer)
#define glRenderMode(mode) ANYGL_CALL(AnyGL_glRenderMode)(mode)
#define glInitNames() ANYGL_CALL(AnyGL_glInitNames)()
#define glLoadName(name) ANYGL_CALL(AnyGL_glLoadName)(name)
#define glPassThrough(token) ANYGL_CALL(AnyGL_glPassThrough)(token)
#define glPopName() ANYGL_CALL(AnyGL_glPopName)()
#define glPushName(name) ANYGL_CALL(AnyGL_glPushName)(name)
#define glClearAccum(red, green, blue, alpha) ANYGL_CALL(AnyGL_glClearAccum)(red, green, blue, alpha)
#define glClearIndex(c) ANYGL_CALL(AnyGL_glClearIndex)(c)
#define glIndexMask(mask) ANYGL_CALL(AnyGL_glIndexMask)(mask)
#define glAccum(op, value) ANYGL_CALL(AnyGL_glAccum)(op, value)
#define glPopAttrib() ANYGL_CALL(AnyGL_glPopAttrib)()
#define glPushAttrib(mask) ANYGL_CALL(AnyGL_glPushAttrib)(mask)
#define glMap1d(target, u1, u2, stride, order, points) ANYGL_CALL(AnyGL_glMap1d)(target, u1, u2, stride, order, points)
#define glMap1f(target, u1, u2, stride, order, points) ANYGL_CALL(AnyGL_glMap1f)(target, u1, u2, stride, order, points)
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ANYGL_CALL(AnyGL_glMap2d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ANYGL_CALL(AnyGL_glMap2f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
#define glMapGrid1d(un, u1, u2) ANYGL_CALL(AnyGL_glMapGrid1d)(un, u1, u2)
#define glMapGrid1f(un, u1, u2) ANYGL_CALL(AnyGL_glMapGrid1f)(un, u1, u2)
#define glMapGrid2d(un, u1, u2, vn, v1, v2) ANYGL_CALL(AnyGL_glMapGrid2d)(un, u1, u2, vn, v1, v2)
#define glMapGrid2f(un, u1, u2, vn, v1, v2) ANYGL_CALL(AnyGL_glMapGrid2f)(un, u1, u2, vn, v1, v2)
#define glEvalCoord1d(u) ANYGL_CALL(AnyGL_glEvalCoord1d)(u)
#define glEvalCoord1dv(u) ANYGL_CALL(AnyGL_glEvalCoord1dv)(u)
#define glEvalCoord1f(u) ANYGL_CALL(AnyGL_glEvalCoord1f)(u)
#define glEvalCoord1fv(u) ANYGL_CALL(AnyGL_glEvalCoord1fv)(u)
#define glEvalCoord2d(u, v) ANYGL_CALL(AnyGL_glEvalCoord2d)(u, v)
#define glEvalCoord2dv(u) ANYGL_CALL(AnyGL_glEvalCoord2dv)(u)
#define glEvalCoord2f(u, v) ANYGL_CALL(AnyGL_glEvalCoord2f)(u, v)
#define glEvalCoord2fv(u) ANYGL_CALL(AnyGL_glEvalCoord2fv)(u)
#define glEvalMesh1(mode, i1, i2) ANYGL_CALL(AnyGL_glEvalMesh1)(mode, i1, i2)
#define glEvalPoint1(i) ANYGL_CALL(AnyGL_glEvalPoint1)(i)
#define glEvalMesh2(mode, i1, i2, j1, j2) ANYGL_CALL(AnyGL_glEvalMesh2)(mode, i1, i2, j1, j2)
#define glEvalPoint2(i, j) ANYGL_CALL(AnyGL_glEvalPoint2)(i, j)
#define glAlphaFunc(func, ref) ANYGL_CALL(AnyGL_glAlphaFunc)(func, ref)
#define glPixelZoom(xfactor, yfactor) ANYGL_CALL(AnyGL_glPixelZoom)(xfactor, yfactor)
#define glPixelTransferf(pname, param) ANYGL_CALL(AnyGL_glPixelTransferf)(pname, param)
#define glPixelTransferi(pname, param) ANYGL_CALL(AnyGL_glPixelTransferi)(pname, param)
#define glPixelMapfv(map, mapsize, values) ANYGL_CALL(AnyGL_glPixelMapfv)(map, mapsize, values)
#define glPixelMapuiv(map, mapsize, values) ANYGL_CALL(AnyGL_glPixelMapuiv)(map, mapsize, values)
#define glPixelMapusv(map, mapsize, values) ANYGL_CALL(AnyGL_glPixelMapusv)(map, mapsize, values)
#define glCopyPixels(x, y, width, height, type) ANYGL_CALL(AnyGL_glCopyPixels)(x, y, width, height, type)
#define glDrawPixels(width, height, format, type, pixels) ANYGL_CALL(AnyGL_glDrawPixels)(width, height, format, type, pixels)
#define glGetClipPlane(plane, equation) ANYGL_CALL(AnyGL_glGetClipPlane)(plane, equation)
#define glGetLightfv(light, pname, params) ANYGL_CALL(AnyGL_glGetLightfv)(light, pname, params)
#define glGetLightiv(light, pname, params) ANYGL_CALL(AnyGL_glGetLightiv)(light, pname, params)
#define glGetMapdv(target, query, v) ANYGL_CALL(AnyGL_glGetMapdv)(target, query, v)
#define glGetMapfv(target, query, v) ANYGL_CALL(AnyGL_glGetMapfv)(target, query, v)
#define glGetMapiv(target, query, v) ANYGL_CALL(AnyGL_glGetMapiv)(target, query, v)
#define glGetMaterialfv(face, pname, params) ANYGL_CALL(AnyGL_glGetMaterialfv)(face, pname, params)
#define glGetMaterialiv(face, pname, params) ANYGL_CALL(AnyGL_glGetMaterialiv)(face, pname, params)
#define glGetPixelMapfv(map, values) ANYGL_CALL(AnyGL_glGetPixelMapfv)(map, values)
#define glGetPixelMapuiv(map, values) ANYGL_CALL(AnyGL_glGetPixelMapuiv)(map, values)
#define glGetPixelMapusv(map, values) ANYGL_CALL(AnyGL_glGetPixelMapusv)(map, values)
#define glGetPolygonStipple(mask) ANYGL_CALL(AnyGL_glGetPolygonStipple)(mask)
#define glGetTexEnvfv(target, pname, params) ANYGL_CALL(AnyGL_glGetTexEnvfv)(target, pname, params)
#define glGetTexEnviv(target, pname, params) ANYGL_CALL(AnyGL_glGetTexEnviv)(target, pname, params)
#define glGetTexGendv(coord, pname, params) ANYGL_CALL(AnyGL_glGetTexGendv)(coord, pname, params)
#define glGetTexGenfv(coord, pname, params) ANYGL_CALL(AnyGL_glGetTexGenfv)(coord, pname, params)
#define glGetTexGeniv(coord, pname, params) ANYGL_CALL(AnyGL_glGetTexGeniv)(coord, pname, params)
#define glIsList(list) ANYGL_CALL(AnyGL_glIsList)(list)
#define glFrustum(left, right, bottom, top, zNear, zFar) ANYGL_CALL(AnyGL_glFrustum)(left, right, bottom, top, zNear, zFar)
#define glLoadIdentity() ANYGL_CALL(AnyGL_glLoadIdentity)()
#define glLoadMatrixf(m) ANYGL_CALL(AnyGL_glLoadMatrixf)(m)
#define glLoadMatrixd(m) ANYGL_CALL(AnyGL_glLoadMatrixd)(m)
#define glMatrixMode(mode) ANYGL_CALL(AnyGL_glMatrixMode)(mode)
#define glMultMatrixf(m) ANYGL_CALL(AnyGL_glMultMatrixf)(m)
#define glMultMatrixd(m) ANYGL_CALL(AnyGL_glMultMatrixd)(m)
#define glOrtho(left, right, bottom, top, zNear, zFar) ANYGL_CALL(AnyGL_glOrtho)(left, right, bottom, top, zNear, zFar)
#define glPopMatrix() ANYGL_CALL(AnyGL_glPopMatrix)()
#define glPushMatrix() ANYGL_CALL(AnyGL_glPushMatrix)()
#define glRotated(angle, x, y, z) ANYGL_CALL(AnyGL_glRotated)(angle, x, y, z)
#define glRotatef(angle, x, y, z) ANYGL_CALL(AnyGL_glRotatef)(angle, x, y, z)
#define glScaled(x, y, z) ANYGL_CALL(AnyGL_glScaled)(x, y, z)
#define glScalef(x, y, z) ANYGL_CALL(AnyGL_glScalef)(x, y, z)
#define glTranslated(x, y, z) ANYGL_CALL(AnyGL_glTranslated)(x, y, z)
#define glTranslatef(x, y, z) ANYGL_CALL(AnyGL_glTranslatef)(x, y, z)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_1_1 */
typedef void (APIENTRY* PFNANYGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRY* PFNANYGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRY* PFNANYGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLARRAYELEMENTPROC)(GLint i);
typedef void (APIENTRY* PFNANYGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (APIENTRY* PFNANYGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (APIENTRY* PFNANYGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef GLboolean (APIENTRY* PFNANYGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint *textures, GLboolean *residences);
typedef void (APIENTRY* PFNANYGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint *textures, const GLfloat *priorities);
typedef void (APIENTRY* PFNANYGLINDEXUBPROC)(GLubyte c);
typedef void (APIENTRY* PFNANYGLINDEXUBVPROC)(const GLubyte *c);
typedef void (APIENTRY* PFNANYGLPOPCLIENTATTRIBPROC)();
typedef void (APIENTRY* PFNANYGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);

ANYGL_EXPORT extern PFNANYGLCOPYTEXIMAGE1DPROC AnyGL_glCopyTexImage1D;
ANYGL_EXPORT extern PFNANYGLCOPYTEXSUBIMAGE1DPROC AnyGL_glCopyTexSubImage1D;
ANYGL_EXPORT extern PFNANYGLTEXSUBIMAGE1DPROC AnyGL_glTexSubImage1D;
ANYGL_EXPORT extern PFNANYGLARRAYELEMENTPROC AnyGL_glArrayElement;
ANYGL_EXPORT extern PFNANYGLCOLORPOINTERPROC AnyGL_glColorPointer;
ANYGL_EXPORT extern PFNANYGLDISABLECLIENTSTATEPROC AnyGL_glDisableClientState;
ANYGL_EXPORT extern PFNANYGLEDGEFLAGPOINTERPROC AnyGL_glEdgeFlagPointer;
ANYGL_EXPORT extern PFNANYGLENABLECLIENTSTATEPROC AnyGL_glEnableClientState;
ANYGL_EXPORT extern PFNANYGLINDEXPOINTERPROC AnyGL_glIndexPointer;
ANYGL_EXPORT extern PFNANYGLINTERLEAVEDARRAYSPROC AnyGL_glInterleavedArrays;
ANYGL_EXPORT extern PFNANYGLNORMALPOINTERPROC AnyGL_glNormalPointer;
ANYGL_EXPORT extern PFNANYGLTEXCOORDPOINTERPROC AnyGL_glTexCoordPointer;
ANYGL_EXPORT extern PFNANYGLVERTEXPOINTERPROC AnyGL_glVertexPointer;
ANYGL_EXPORT extern PFNANYGLARETEXTURESRESIDENTPROC AnyGL_glAreTexturesResident;
ANYGL_EXPORT extern PFNANYGLPRIORITIZETEXTURESPROC AnyGL_glPrioritizeTextures;
ANYGL_EXPORT extern PFNANYGLINDEXUBPROC AnyGL_glIndexub;
ANYGL_EXPORT extern PFNANYGLINDEXUBVPROC AnyGL_glIndexubv;
ANYGL_EXPORT extern PFNANYGLPOPCLIENTATTRIBPROC AnyGL_glPopClientAttrib;
ANYGL_EXPORT extern PFNANYGLPUSHCLIENTATTRIBPROC AnyGL_glPushClientAttrib;

#ifndef ANYGL_NO_DEFINES
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) ANYGL_CALL(AnyGL_glCopyTexImage1D)(target, level, internalformat, x, y, width, border)
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) ANYGL_CALL(AnyGL_glCopyTexSubImage1D)(target, level, xoffset, x, y, width)
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) ANYGL_CALL(AnyGL_glTexSubImage1D)(target, level, xoffset, width, format, type, pixels)
#define glArrayElement(i) ANYGL_CALL(AnyGL_glArrayElement)(i)
#define glColorPointer(size, type, stride, pointer) ANYGL_CALL(AnyGL_glColorPointer)(size, type, stride, pointer)
#define glDisableClientState(array) ANYGL_CALL(AnyGL_glDisableClientState)(array)
#define glEdgeFlagPointer(stride, pointer) ANYGL_CALL(AnyGL_glEdgeFlagPointer)(stride, pointer)
#define glEnableClientState(array) ANYGL_CALL(AnyGL_glEnableClientState)(array)
#define glIndexPointer(type, stride, pointer) ANYGL_CALL(AnyGL_glIndexPointer)(type, stride, pointer)
#define glInterleavedArrays(format, stride, pointer) ANYGL_CALL(AnyGL_glInterleavedArrays)(format, stride, pointer)
#define glNormalPointer(type, stride, pointer) ANYGL_CALL(AnyGL_glNormalPointer)(type, stride, pointer)
#define glTexCoordPointer(size, type, stride, pointer) ANYGL_CALL(AnyGL_glTexCoordPointer)(size, type, stride, pointer)
#define glVertexPointer(size, type, stride, pointer) ANYGL_CALL(AnyGL_glVertexPointer)(size, type, stride, pointer)
#define glAreTexturesResident(n, textures, residences) ANYGL_CALL(AnyGL_glAreTexturesResident)(n, textures, residences)
#define glPrioritizeTextures(n, textures, priorities) ANYGL_CALL(AnyGL_glPrioritizeTextures)(n, textures, priorities)
#define glIndexub(c) ANYGL_CALL(AnyGL_glIndexub)(c)
#define glIndexubv(c) ANYGL_CALL(AnyGL_glIndexubv)(c)
#define glPopClientAttrib() ANYGL_CALL(AnyGL_glPopClientAttrib)()
#define glPushClientAttrib(mask) ANYGL_CALL(AnyGL_glPushClientAttrib)(mask)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_1_2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_1_3 */
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
typedef void (APIENTRY* PFNANYGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRY* PFNANYGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRY* PFNANYGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble *m);
typedef void (APIENTRY* PFNANYGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRY* PFNANYGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble *m);

ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXIMAGE1DPROC AnyGL_glCompressedTexImage1D;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXSUBIMAGE1DPROC AnyGL_glCompressedTexSubImage1D;
ANYGL_EXPORT extern PFNANYGLGETCOMPRESSEDTEXIMAGEPROC AnyGL_glGetCompressedTexImage;
ANYGL_EXPORT extern PFNANYGLCLIENTACTIVETEXTUREPROC AnyGL_glClientActiveTexture;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1DPROC AnyGL_glMultiTexCoord1d;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1DVPROC AnyGL_glMultiTexCoord1dv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1FPROC AnyGL_glMultiTexCoord1f;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1FVPROC AnyGL_glMultiTexCoord1fv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1IPROC AnyGL_glMultiTexCoord1i;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1IVPROC AnyGL_glMultiTexCoord1iv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1SPROC AnyGL_glMultiTexCoord1s;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1SVPROC AnyGL_glMultiTexCoord1sv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2DPROC AnyGL_glMultiTexCoord2d;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2DVPROC AnyGL_glMultiTexCoord2dv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2FPROC AnyGL_glMultiTexCoord2f;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2FVPROC AnyGL_glMultiTexCoord2fv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2IPROC AnyGL_glMultiTexCoord2i;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2IVPROC AnyGL_glMultiTexCoord2iv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2SPROC AnyGL_glMultiTexCoord2s;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2SVPROC AnyGL_glMultiTexCoord2sv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3DPROC AnyGL_glMultiTexCoord3d;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3DVPROC AnyGL_glMultiTexCoord3dv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3FPROC AnyGL_glMultiTexCoord3f;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3FVPROC AnyGL_glMultiTexCoord3fv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3IPROC AnyGL_glMultiTexCoord3i;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3IVPROC AnyGL_glMultiTexCoord3iv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3SPROC AnyGL_glMultiTexCoord3s;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3SVPROC AnyGL_glMultiTexCoord3sv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4DPROC AnyGL_glMultiTexCoord4d;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4DVPROC AnyGL_glMultiTexCoord4dv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4FPROC AnyGL_glMultiTexCoord4f;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4FVPROC AnyGL_glMultiTexCoord4fv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4IPROC AnyGL_glMultiTexCoord4i;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4IVPROC AnyGL_glMultiTexCoord4iv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4SPROC AnyGL_glMultiTexCoord4s;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4SVPROC AnyGL_glMultiTexCoord4sv;
ANYGL_EXPORT extern PFNANYGLLOADTRANSPOSEMATRIXFPROC AnyGL_glLoadTransposeMatrixf;
ANYGL_EXPORT extern PFNANYGLLOADTRANSPOSEMATRIXDPROC AnyGL_glLoadTransposeMatrixd;
ANYGL_EXPORT extern PFNANYGLMULTTRANSPOSEMATRIXFPROC AnyGL_glMultTransposeMatrixf;
ANYGL_EXPORT extern PFNANYGLMULTTRANSPOSEMATRIXDPROC AnyGL_glMultTransposeMatrixd;

#ifndef ANYGL_NO_DEFINES
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data)
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data)
#define glGetCompressedTexImage(target, level, img) ANYGL_CALL(AnyGL_glGetCompressedTexImage)(target, level, img)
#define glClientActiveTexture(texture) ANYGL_CALL(AnyGL_glClientActiveTexture)(texture)
#define glMultiTexCoord1d(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1d)(target, s)
#define glMultiTexCoord1dv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1dv)(target, v)
#define glMultiTexCoord1f(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1f)(target, s)
#define glMultiTexCoord1fv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1fv)(target, v)
#define glMultiTexCoord1i(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1i)(target, s)
#define glMultiTexCoord1iv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1iv)(target, v)
#define glMultiTexCoord1s(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1s)(target, s)
#define glMultiTexCoord1sv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1sv)(target, v)
#define glMultiTexCoord2d(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2d)(target, s, t)
#define glMultiTexCoord2dv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2dv)(target, v)
#define glMultiTexCoord2f(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2f)(target, s, t)
#define glMultiTexCoord2fv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2fv)(target, v)
#define glMultiTexCoord2i(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2i)(target, s, t)
#define glMultiTexCoord2iv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2iv)(target, v)
#define glMultiTexCoord2s(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2s)(target, s, t)
#define glMultiTexCoord2sv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2sv)(target, v)
#define glMultiTexCoord3d(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3d)(target, s, t, r)
#define glMultiTexCoord3dv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3dv)(target, v)
#define glMultiTexCoord3f(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3f)(target, s, t, r)
#define glMultiTexCoord3fv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3fv)(target, v)
#define glMultiTexCoord3i(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3i)(target, s, t, r)
#define glMultiTexCoord3iv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3iv)(target, v)
#define glMultiTexCoord3s(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3s)(target, s, t, r)
#define glMultiTexCoord3sv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3sv)(target, v)
#define glMultiTexCoord4d(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4d)(target, s, t, r, q)
#define glMultiTexCoord4dv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4dv)(target, v)
#define glMultiTexCoord4f(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4f)(target, s, t, r, q)
#define glMultiTexCoord4fv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4fv)(target, v)
#define glMultiTexCoord4i(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4i)(target, s, t, r, q)
#define glMultiTexCoord4iv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4iv)(target, v)
#define glMultiTexCoord4s(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4s)(target, s, t, r, q)
#define glMultiTexCoord4sv(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4sv)(target, v)
#define glLoadTransposeMatrixf(m) ANYGL_CALL(AnyGL_glLoadTransposeMatrixf)(m)
#define glLoadTransposeMatrixd(m) ANYGL_CALL(AnyGL_glLoadTransposeMatrixd)(m)
#define glMultTransposeMatrixf(m) ANYGL_CALL(AnyGL_glMultTransposeMatrixf)(m)
#define glMultTransposeMatrixd(m) ANYGL_CALL(AnyGL_glMultTransposeMatrixd)(m)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_1_4 */
typedef void (APIENTRY* PFNANYGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void (APIENTRY* PFNANYGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
typedef void (APIENTRY* PFNANYGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLFOGCOORDFPROC)(GLfloat coord);
typedef void (APIENTRY* PFNANYGLFOGCOORDFVPROC)(const GLfloat *coord);
typedef void (APIENTRY* PFNANYGLFOGCOORDDPROC)(GLdouble coord);
typedef void (APIENTRY* PFNANYGLFOGCOORDDVPROC)(const GLdouble *coord);
typedef void (APIENTRY* PFNANYGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3BVPROC)(const GLbyte *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3UBVPROC)(const GLubyte *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3UIVPROC)(const GLuint *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLOR3USVPROC)(const GLushort *v);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (APIENTRY* PFNANYGLWINDOWPOS2SVPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3DVPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3FVPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3IVPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (APIENTRY* PFNANYGLWINDOWPOS3SVPROC)(const GLshort *v);

ANYGL_EXPORT extern PFNANYGLMULTIDRAWARRAYSPROC AnyGL_glMultiDrawArrays;
ANYGL_EXPORT extern PFNANYGLMULTIDRAWELEMENTSPROC AnyGL_glMultiDrawElements;
ANYGL_EXPORT extern PFNANYGLPOINTPARAMETERFPROC AnyGL_glPointParameterf;
ANYGL_EXPORT extern PFNANYGLPOINTPARAMETERFVPROC AnyGL_glPointParameterfv;
ANYGL_EXPORT extern PFNANYGLPOINTPARAMETERIPROC AnyGL_glPointParameteri;
ANYGL_EXPORT extern PFNANYGLPOINTPARAMETERIVPROC AnyGL_glPointParameteriv;
ANYGL_EXPORT extern PFNANYGLFOGCOORDFPROC AnyGL_glFogCoordf;
ANYGL_EXPORT extern PFNANYGLFOGCOORDFVPROC AnyGL_glFogCoordfv;
ANYGL_EXPORT extern PFNANYGLFOGCOORDDPROC AnyGL_glFogCoordd;
ANYGL_EXPORT extern PFNANYGLFOGCOORDDVPROC AnyGL_glFogCoorddv;
ANYGL_EXPORT extern PFNANYGLFOGCOORDPOINTERPROC AnyGL_glFogCoordPointer;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3BPROC AnyGL_glSecondaryColor3b;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3BVPROC AnyGL_glSecondaryColor3bv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3DPROC AnyGL_glSecondaryColor3d;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3DVPROC AnyGL_glSecondaryColor3dv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3FPROC AnyGL_glSecondaryColor3f;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3FVPROC AnyGL_glSecondaryColor3fv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3IPROC AnyGL_glSecondaryColor3i;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3IVPROC AnyGL_glSecondaryColor3iv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3SPROC AnyGL_glSecondaryColor3s;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3SVPROC AnyGL_glSecondaryColor3sv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3UBPROC AnyGL_glSecondaryColor3ub;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3UBVPROC AnyGL_glSecondaryColor3ubv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3UIPROC AnyGL_glSecondaryColor3ui;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3UIVPROC AnyGL_glSecondaryColor3uiv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3USPROC AnyGL_glSecondaryColor3us;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLOR3USVPROC AnyGL_glSecondaryColor3usv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLORPOINTERPROC AnyGL_glSecondaryColorPointer;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2DPROC AnyGL_glWindowPos2d;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2DVPROC AnyGL_glWindowPos2dv;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2FPROC AnyGL_glWindowPos2f;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2FVPROC AnyGL_glWindowPos2fv;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2IPROC AnyGL_glWindowPos2i;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2IVPROC AnyGL_glWindowPos2iv;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2SPROC AnyGL_glWindowPos2s;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS2SVPROC AnyGL_glWindowPos2sv;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3DPROC AnyGL_glWindowPos3d;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3DVPROC AnyGL_glWindowPos3dv;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3FPROC AnyGL_glWindowPos3f;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3FVPROC AnyGL_glWindowPos3fv;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3IPROC AnyGL_glWindowPos3i;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3IVPROC AnyGL_glWindowPos3iv;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3SPROC AnyGL_glWindowPos3s;
ANYGL_EXPORT extern PFNANYGLWINDOWPOS3SVPROC AnyGL_glWindowPos3sv;

#ifndef ANYGL_NO_DEFINES
#define glMultiDrawArrays(mode, first, count, drawcount) ANYGL_CALL(AnyGL_glMultiDrawArrays)(mode, first, count, drawcount)
#define glMultiDrawElements(mode, count, type, indices, drawcount) ANYGL_CALL(AnyGL_glMultiDrawElements)(mode, count, type, indices, drawcount)
#define glPointParameterf(pname, param) ANYGL_CALL(AnyGL_glPointParameterf)(pname, param)
#define glPointParameterfv(pname, params) ANYGL_CALL(AnyGL_glPointParameterfv)(pname, params)
#define glPointParameteri(pname, param) ANYGL_CALL(AnyGL_glPointParameteri)(pname, param)
#define glPointParameteriv(pname, params) ANYGL_CALL(AnyGL_glPointParameteriv)(pname, params)
#define glFogCoordf(coord) ANYGL_CALL(AnyGL_glFogCoordf)(coord)
#define glFogCoordfv(coord) ANYGL_CALL(AnyGL_glFogCoordfv)(coord)
#define glFogCoordd(coord) ANYGL_CALL(AnyGL_glFogCoordd)(coord)
#define glFogCoorddv(coord) ANYGL_CALL(AnyGL_glFogCoorddv)(coord)
#define glFogCoordPointer(type, stride, pointer) ANYGL_CALL(AnyGL_glFogCoordPointer)(type, stride, pointer)
#define glSecondaryColor3b(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3b)(red, green, blue)
#define glSecondaryColor3bv(v) ANYGL_CALL(AnyGL_glSecondaryColor3bv)(v)
#define glSecondaryColor3d(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3d)(red, green, blue)
#define glSecondaryColor3dv(v) ANYGL_CALL(AnyGL_glSecondaryColor3dv)(v)
#define glSecondaryColor3f(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3f)(red, green, blue)
#define glSecondaryColor3fv(v) ANYGL_CALL(AnyGL_glSecondaryColor3fv)(v)
#define glSecondaryColor3i(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3i)(red, green, blue)
#define glSecondaryColor3iv(v) ANYGL_CALL(AnyGL_glSecondaryColor3iv)(v)
#define glSecondaryColor3s(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3s)(red, green, blue)
#define glSecondaryColor3sv(v) ANYGL_CALL(AnyGL_glSecondaryColor3sv)(v)
#define glSecondaryColor3ub(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3ub)(red, green, blue)
#define glSecondaryColor3ubv(v) ANYGL_CALL(AnyGL_glSecondaryColor3ubv)(v)
#define glSecondaryColor3ui(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3ui)(red, green, blue)
#define glSecondaryColor3uiv(v) ANYGL_CALL(AnyGL_glSecondaryColor3uiv)(v)
#define glSecondaryColor3us(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3us)(red, green, blue)
#define glSecondaryColor3usv(v) ANYGL_CALL(AnyGL_glSecondaryColor3usv)(v)
#define glSecondaryColorPointer(size, type, stride, pointer) ANYGL_CALL(AnyGL_glSecondaryColorPointer)(size, type, stride, pointer)
#define glWindowPos2d(x, y) ANYGL_CALL(AnyGL_glWindowPos2d)(x, y)
#define glWindowPos2dv(v) ANYGL_CALL(AnyGL_glWindowPos2dv)(v)
#define glWindowPos2f(x, y) ANYGL_CALL(AnyGL_glWindowPos2f)(x, y)
#define glWindowPos2fv(v) ANYGL_CALL(AnyGL_glWindowPos2fv)(v)
#define glWindowPos2i(x, y) ANYGL_CALL(AnyGL_glWindowPos2i)(x, y)
#define glWindowPos2iv(v) ANYGL_CALL(AnyGL_glWindowPos2iv)(v)
#define glWindowPos2s(x, y) ANYGL_CALL(AnyGL_glWindowPos2s)(x, y)
#define glWindowPos2sv(v) ANYGL_CALL(AnyGL_glWindowPos2sv)(v)
#define glWindowPos3d(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3d)(x, y, z)
#define glWindowPos3dv(v) ANYGL_CALL(AnyGL_glWindowPos3dv)(v)
#define glWindowPos3f(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3f)(x, y, z)
#define glWindowPos3fv(v) ANYGL_CALL(AnyGL_glWindowPos3fv)(v)
#define glWindowPos3i(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3i)(x, y, z)
#define glWindowPos3iv(v) ANYGL_CALL(AnyGL_glWindowPos3iv)(v)
#define glWindowPos3s(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3s)(x, y, z)
#define glWindowPos3sv(v) ANYGL_CALL(AnyGL_glWindowPos3sv)(v)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_1_5 */
typedef void (APIENTRY* PFNANYGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
typedef void *(APIENTRY* PFNANYGLMAPBUFFERPROC)(GLenum target, GLenum access);

ANYGL_EXPORT extern PFNANYGLGETQUERYOBJECTIVPROC AnyGL_glGetQueryObjectiv;
ANYGL_EXPORT extern PFNANYGLGETBUFFERSUBDATAPROC AnyGL_glGetBufferSubData;
ANYGL_EXPORT extern PFNANYGLMAPBUFFERPROC AnyGL_glMapBuffer;

#ifndef ANYGL_NO_DEFINES
#define glGetQueryObjectiv(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectiv)(id, pname, params)
#define glGetBufferSubData(target, offset, size, data) ANYGL_CALL(AnyGL_glGetBufferSubData)(target, offset, size, data)
#define glMapBuffer(target, access) ANYGL_CALL(AnyGL_glMapBuffer)(target, access)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_2_0 */
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);

ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBDVPROC AnyGL_glGetVertexAttribdv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB1DPROC AnyGL_glVertexAttrib1d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB1DVPROC AnyGL_glVertexAttrib1dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB1SPROC AnyGL_glVertexAttrib1s;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB1SVPROC AnyGL_glVertexAttrib1sv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB2DPROC AnyGL_glVertexAttrib2d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB2DVPROC AnyGL_glVertexAttrib2dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB2SPROC AnyGL_glVertexAttrib2s;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB2SVPROC AnyGL_glVertexAttrib2sv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB3DPROC AnyGL_glVertexAttrib3d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB3DVPROC AnyGL_glVertexAttrib3dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB3SPROC AnyGL_glVertexAttrib3s;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB3SVPROC AnyGL_glVertexAttrib3sv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4NBVPROC AnyGL_glVertexAttrib4Nbv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4NIVPROC AnyGL_glVertexAttrib4Niv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4NSVPROC AnyGL_glVertexAttrib4Nsv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4NUBPROC AnyGL_glVertexAttrib4Nub;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4NUBVPROC AnyGL_glVertexAttrib4Nubv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4NUIVPROC AnyGL_glVertexAttrib4Nuiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4NUSVPROC AnyGL_glVertexAttrib4Nusv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4BVPROC AnyGL_glVertexAttrib4bv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4DPROC AnyGL_glVertexAttrib4d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4DVPROC AnyGL_glVertexAttrib4dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4IVPROC AnyGL_glVertexAttrib4iv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4SPROC AnyGL_glVertexAttrib4s;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4SVPROC AnyGL_glVertexAttrib4sv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4UBVPROC AnyGL_glVertexAttrib4ubv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4UIVPROC AnyGL_glVertexAttrib4uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIB4USVPROC AnyGL_glVertexAttrib4usv;

#ifndef ANYGL_NO_DEFINES
#define glGetVertexAttribdv(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribdv)(index, pname, params)
#define glVertexAttrib1d(index, x) ANYGL_CALL(AnyGL_glVertexAttrib1d)(index, x)
#define glVertexAttrib1dv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib1dv)(index, v)
#define glVertexAttrib1s(index, x) ANYGL_CALL(AnyGL_glVertexAttrib1s)(index, x)
#define glVertexAttrib1sv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib1sv)(index, v)
#define glVertexAttrib2d(index, x, y) ANYGL_CALL(AnyGL_glVertexAttrib2d)(index, x, y)
#define glVertexAttrib2dv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib2dv)(index, v)
#define glVertexAttrib2s(index, x, y) ANYGL_CALL(AnyGL_glVertexAttrib2s)(index, x, y)
#define glVertexAttrib2sv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib2sv)(index, v)
#define glVertexAttrib3d(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttrib3d)(index, x, y, z)
#define glVertexAttrib3dv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib3dv)(index, v)
#define glVertexAttrib3s(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttrib3s)(index, x, y, z)
#define glVertexAttrib3sv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib3sv)(index, v)
#define glVertexAttrib4Nbv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nbv)(index, v)
#define glVertexAttrib4Niv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Niv)(index, v)
#define glVertexAttrib4Nsv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nsv)(index, v)
#define glVertexAttrib4Nub(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4Nub)(index, x, y, z, w)
#define glVertexAttrib4Nubv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nubv)(index, v)
#define glVertexAttrib4Nuiv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nuiv)(index, v)
#define glVertexAttrib4Nusv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nusv)(index, v)
#define glVertexAttrib4bv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4bv)(index, v)
#define glVertexAttrib4d(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4d)(index, x, y, z, w)
#define glVertexAttrib4dv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4dv)(index, v)
#define glVertexAttrib4iv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4iv)(index, v)
#define glVertexAttrib4s(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4s)(index, x, y, z, w)
#define glVertexAttrib4sv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4sv)(index, v)
#define glVertexAttrib4ubv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4ubv)(index, v)
#define glVertexAttrib4uiv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4uiv)(index, v)
#define glVertexAttrib4usv(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4usv)(index, v)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_2_1 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_3_0 */
typedef void (APIENTRY* PFNANYGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (APIENTRY* PFNANYGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (APIENTRY* PFNANYGLENDCONDITIONALRENDERPROC)();
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
typedef void (APIENTRY* PFNANYGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);

ANYGL_EXPORT extern PFNANYGLCLAMPCOLORPROC AnyGL_glClampColor;
ANYGL_EXPORT extern PFNANYGLBEGINCONDITIONALRENDERPROC AnyGL_glBeginConditionalRender;
ANYGL_EXPORT extern PFNANYGLENDCONDITIONALRENDERPROC AnyGL_glEndConditionalRender;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI1IPROC AnyGL_glVertexAttribI1i;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI2IPROC AnyGL_glVertexAttribI2i;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI3IPROC AnyGL_glVertexAttribI3i;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI1UIPROC AnyGL_glVertexAttribI1ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI2UIPROC AnyGL_glVertexAttribI2ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI3UIPROC AnyGL_glVertexAttribI3ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI1IVPROC AnyGL_glVertexAttribI1iv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI2IVPROC AnyGL_glVertexAttribI2iv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI3IVPROC AnyGL_glVertexAttribI3iv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI1UIVPROC AnyGL_glVertexAttribI1uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI2UIVPROC AnyGL_glVertexAttribI2uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI3UIVPROC AnyGL_glVertexAttribI3uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4BVPROC AnyGL_glVertexAttribI4bv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4SVPROC AnyGL_glVertexAttribI4sv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4UBVPROC AnyGL_glVertexAttribI4ubv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBI4USVPROC AnyGL_glVertexAttribI4usv;
ANYGL_EXPORT extern PFNANYGLBINDFRAGDATALOCATIONPROC AnyGL_glBindFragDataLocation;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTURE1DPROC AnyGL_glFramebufferTexture1D;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTURE3DPROC AnyGL_glFramebufferTexture3D;

#ifndef ANYGL_NO_DEFINES
#define glClampColor(target, clamp) ANYGL_CALL(AnyGL_glClampColor)(target, clamp)
#define glBeginConditionalRender(id, mode) ANYGL_CALL(AnyGL_glBeginConditionalRender)(id, mode)
#define glEndConditionalRender() ANYGL_CALL(AnyGL_glEndConditionalRender)()
#define glVertexAttribI1i(index, x) ANYGL_CALL(AnyGL_glVertexAttribI1i)(index, x)
#define glVertexAttribI2i(index, x, y) ANYGL_CALL(AnyGL_glVertexAttribI2i)(index, x, y)
#define glVertexAttribI3i(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttribI3i)(index, x, y, z)
#define glVertexAttribI1ui(index, x) ANYGL_CALL(AnyGL_glVertexAttribI1ui)(index, x)
#define glVertexAttribI2ui(index, x, y) ANYGL_CALL(AnyGL_glVertexAttribI2ui)(index, x, y)
#define glVertexAttribI3ui(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttribI3ui)(index, x, y, z)
#define glVertexAttribI1iv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI1iv)(index, v)
#define glVertexAttribI2iv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI2iv)(index, v)
#define glVertexAttribI3iv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI3iv)(index, v)
#define glVertexAttribI1uiv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI1uiv)(index, v)
#define glVertexAttribI2uiv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI2uiv)(index, v)
#define glVertexAttribI3uiv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI3uiv)(index, v)
#define glVertexAttribI4bv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI4bv)(index, v)
#define glVertexAttribI4sv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI4sv)(index, v)
#define glVertexAttribI4ubv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI4ubv)(index, v)
#define glVertexAttribI4usv(index, v) ANYGL_CALL(AnyGL_glVertexAttribI4usv)(index, v)
#define glBindFragDataLocation(program, color, name) ANYGL_CALL(AnyGL_glBindFragDataLocation)(program, color, name)
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture1D)(target, attachment, textarget, texture, level)
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) ANYGL_CALL(AnyGL_glFramebufferTexture3D)(target, attachment, textarget, texture, level, zoffset)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_3_1 */
typedef void (APIENTRY* PFNANYGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (APIENTRY* PFNANYGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);

ANYGL_EXPORT extern PFNANYGLPRIMITIVERESTARTINDEXPROC AnyGL_glPrimitiveRestartIndex;
ANYGL_EXPORT extern PFNANYGLGETACTIVEUNIFORMNAMEPROC AnyGL_glGetActiveUniformName;

#ifndef ANYGL_NO_DEFINES
#define glPrimitiveRestartIndex(index) ANYGL_CALL(AnyGL_glPrimitiveRestartIndex)(index)
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) ANYGL_CALL(AnyGL_glGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_3_2 */
typedef void (APIENTRY* PFNANYGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
typedef void (APIENTRY* PFNANYGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRY* PFNANYGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);

ANYGL_EXPORT extern PFNANYGLMULTIDRAWELEMENTSBASEVERTEXPROC AnyGL_glMultiDrawElementsBaseVertex;
ANYGL_EXPORT extern PFNANYGLPROVOKINGVERTEXPROC AnyGL_glProvokingVertex;
ANYGL_EXPORT extern PFNANYGLTEXIMAGE2DMULTISAMPLEPROC AnyGL_glTexImage2DMultisample;
ANYGL_EXPORT extern PFNANYGLTEXIMAGE3DMULTISAMPLEPROC AnyGL_glTexImage3DMultisample;

#ifndef ANYGL_NO_DEFINES
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) ANYGL_CALL(AnyGL_glMultiDrawElementsBaseVertex)(mode, count, type, indices, drawcount, basevertex)
#define glProvokingVertex(mode) ANYGL_CALL(AnyGL_glProvokingVertex)(mode)
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) ANYGL_CALL(AnyGL_glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations)
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) ANYGL_CALL(AnyGL_glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_3_3 */
typedef void (APIENTRY* PFNANYGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
typedef GLint (APIENTRY* PFNANYGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRY* PFNANYGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void (APIENTRY* PFNANYGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
typedef void (APIENTRY* PFNANYGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRY* PFNANYGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void (APIENTRY* PFNANYGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
typedef void (APIENTRY* PFNANYGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void (APIENTRY* PFNANYGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
typedef void (APIENTRY* PFNANYGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void (APIENTRY* PFNANYGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
typedef void (APIENTRY* PFNANYGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRY* PFNANYGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRY* PFNANYGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (APIENTRY* PFNANYGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
typedef void (APIENTRY* PFNANYGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void (APIENTRY* PFNANYGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (APIENTRY* PFNANYGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);

ANYGL_EXPORT extern PFNANYGLBINDFRAGDATALOCATIONINDEXEDPROC AnyGL_glBindFragDataLocationIndexed;
ANYGL_EXPORT extern PFNANYGLGETFRAGDATAINDEXPROC AnyGL_glGetFragDataIndex;
ANYGL_EXPORT extern PFNANYGLQUERYCOUNTERPROC AnyGL_glQueryCounter;
ANYGL_EXPORT extern PFNANYGLGETQUERYOBJECTI64VPROC AnyGL_glGetQueryObjecti64v;
ANYGL_EXPORT extern PFNANYGLGETQUERYOBJECTUI64VPROC AnyGL_glGetQueryObjectui64v;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP1UIPROC AnyGL_glVertexAttribP1ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP1UIVPROC AnyGL_glVertexAttribP1uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP2UIPROC AnyGL_glVertexAttribP2ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP2UIVPROC AnyGL_glVertexAttribP2uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP3UIPROC AnyGL_glVertexAttribP3ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP3UIVPROC AnyGL_glVertexAttribP3uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP4UIPROC AnyGL_glVertexAttribP4ui;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBP4UIVPROC AnyGL_glVertexAttribP4uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXP2UIPROC AnyGL_glVertexP2ui;
ANYGL_EXPORT extern PFNANYGLVERTEXP2UIVPROC AnyGL_glVertexP2uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXP3UIPROC AnyGL_glVertexP3ui;
ANYGL_EXPORT extern PFNANYGLVERTEXP3UIVPROC AnyGL_glVertexP3uiv;
ANYGL_EXPORT extern PFNANYGLVERTEXP4UIPROC AnyGL_glVertexP4ui;
ANYGL_EXPORT extern PFNANYGLVERTEXP4UIVPROC AnyGL_glVertexP4uiv;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP1UIPROC AnyGL_glTexCoordP1ui;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP1UIVPROC AnyGL_glTexCoordP1uiv;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP2UIPROC AnyGL_glTexCoordP2ui;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP2UIVPROC AnyGL_glTexCoordP2uiv;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP3UIPROC AnyGL_glTexCoordP3ui;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP3UIVPROC AnyGL_glTexCoordP3uiv;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP4UIPROC AnyGL_glTexCoordP4ui;
ANYGL_EXPORT extern PFNANYGLTEXCOORDP4UIVPROC AnyGL_glTexCoordP4uiv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP1UIPROC AnyGL_glMultiTexCoordP1ui;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP1UIVPROC AnyGL_glMultiTexCoordP1uiv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP2UIPROC AnyGL_glMultiTexCoordP2ui;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP2UIVPROC AnyGL_glMultiTexCoordP2uiv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP3UIPROC AnyGL_glMultiTexCoordP3ui;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP3UIVPROC AnyGL_glMultiTexCoordP3uiv;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP4UIPROC AnyGL_glMultiTexCoordP4ui;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDP4UIVPROC AnyGL_glMultiTexCoordP4uiv;
ANYGL_EXPORT extern PFNANYGLNORMALP3UIPROC AnyGL_glNormalP3ui;
ANYGL_EXPORT extern PFNANYGLNORMALP3UIVPROC AnyGL_glNormalP3uiv;
ANYGL_EXPORT extern PFNANYGLCOLORP3UIPROC AnyGL_glColorP3ui;
ANYGL_EXPORT extern PFNANYGLCOLORP3UIVPROC AnyGL_glColorP3uiv;
ANYGL_EXPORT extern PFNANYGLCOLORP4UIPROC AnyGL_glColorP4ui;
ANYGL_EXPORT extern PFNANYGLCOLORP4UIVPROC AnyGL_glColorP4uiv;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLORP3UIPROC AnyGL_glSecondaryColorP3ui;
ANYGL_EXPORT extern PFNANYGLSECONDARYCOLORP3UIVPROC AnyGL_glSecondaryColorP3uiv;

#ifndef ANYGL_NO_DEFINES
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) ANYGL_CALL(AnyGL_glBindFragDataLocationIndexed)(program, colorNumber, index, name)
#define glGetFragDataIndex(program, name) ANYGL_CALL(AnyGL_glGetFragDataIndex)(program, name)
#define glQueryCounter(id, target) ANYGL_CALL(AnyGL_glQueryCounter)(id, target)
#define glGetQueryObjecti64v(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjecti64v)(id, pname, params)
#define glGetQueryObjectui64v(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectui64v)(id, pname, params)
#define glVertexAttribP1ui(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP1ui)(index, type, normalized, value)
#define glVertexAttribP1uiv(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP1uiv)(index, type, normalized, value)
#define glVertexAttribP2ui(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP2ui)(index, type, normalized, value)
#define glVertexAttribP2uiv(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP2uiv)(index, type, normalized, value)
#define glVertexAttribP3ui(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP3ui)(index, type, normalized, value)
#define glVertexAttribP3uiv(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP3uiv)(index, type, normalized, value)
#define glVertexAttribP4ui(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP4ui)(index, type, normalized, value)
#define glVertexAttribP4uiv(index, type, normalized, value) ANYGL_CALL(AnyGL_glVertexAttribP4uiv)(index, type, normalized, value)
#define glVertexP2ui(type, value) ANYGL_CALL(AnyGL_glVertexP2ui)(type, value)
#define glVertexP2uiv(type, value) ANYGL_CALL(AnyGL_glVertexP2uiv)(type, value)
#define glVertexP3ui(type, value) ANYGL_CALL(AnyGL_glVertexP3ui)(type, value)
#define glVertexP3uiv(type, value) ANYGL_CALL(AnyGL_glVertexP3uiv)(type, value)
#define glVertexP4ui(type, value) ANYGL_CALL(AnyGL_glVertexP4ui)(type, value)
#define glVertexP4uiv(type, value) ANYGL_CALL(AnyGL_glVertexP4uiv)(type, value)
#define glTexCoordP1ui(type, coords) ANYGL_CALL(AnyGL_glTexCoordP1ui)(type, coords)
#define glTexCoordP1uiv(type, coords) ANYGL_CALL(AnyGL_glTexCoordP1uiv)(type, coords)
#define glTexCoordP2ui(type, coords) ANYGL_CALL(AnyGL_glTexCoordP2ui)(type, coords)
#define glTexCoordP2uiv(type, coords) ANYGL_CALL(AnyGL_glTexCoordP2uiv)(type, coords)
#define glTexCoordP3ui(type, coords) ANYGL_CALL(AnyGL_glTexCoordP3ui)(type, coords)
#define glTexCoordP3uiv(type, coords) ANYGL_CALL(AnyGL_glTexCoordP3uiv)(type, coords)
#define glTexCoordP4ui(type, coords) ANYGL_CALL(AnyGL_glTexCoordP4ui)(type, coords)
#define glTexCoordP4uiv(type, coords) ANYGL_CALL(AnyGL_glTexCoordP4uiv)(type, coords)
#define glMultiTexCoordP1ui(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP1ui)(texture, type, coords)
#define glMultiTexCoordP1uiv(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP1uiv)(texture, type, coords)
#define glMultiTexCoordP2ui(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP2ui)(texture, type, coords)
#define glMultiTexCoordP2uiv(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP2uiv)(texture, type, coords)
#define glMultiTexCoordP3ui(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP3ui)(texture, type, coords)
#define glMultiTexCoordP3uiv(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP3uiv)(texture, type, coords)
#define glMultiTexCoordP4ui(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP4ui)(texture, type, coords)
#define glMultiTexCoordP4uiv(texture, type, coords) ANYGL_CALL(AnyGL_glMultiTexCoordP4uiv)(texture, type, coords)
#define glNormalP3ui(type, coords) ANYGL_CALL(AnyGL_glNormalP3ui)(type, coords)
#define glNormalP3uiv(type, coords) ANYGL_CALL(AnyGL_glNormalP3uiv)(type, coords)
#define glColorP3ui(type, color) ANYGL_CALL(AnyGL_glColorP3ui)(type, color)
#define glColorP3uiv(type, color) ANYGL_CALL(AnyGL_glColorP3uiv)(type, color)
#define glColorP4ui(type, color) ANYGL_CALL(AnyGL_glColorP4ui)(type, color)
#define glColorP4uiv(type, color) ANYGL_CALL(AnyGL_glColorP4uiv)(type, color)
#define glSecondaryColorP3ui(type, color) ANYGL_CALL(AnyGL_glSecondaryColorP3ui)(type, color)
#define glSecondaryColorP3uiv(type, color) ANYGL_CALL(AnyGL_glSecondaryColorP3uiv)(type, color)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_4_0 */
typedef void (APIENTRY* PFNANYGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef void (APIENTRY* PFNANYGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRY* PFNANYGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
typedef GLint (APIENTRY* PFNANYGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
typedef GLuint (APIENTRY* PFNANYGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
typedef void (APIENTRY* PFNANYGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
typedef void (APIENTRY* PFNANYGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (APIENTRY* PFNANYGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (APIENTRY* PFNANYGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
typedef void (APIENTRY* PFNANYGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
typedef void (APIENTRY* PFNANYGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
typedef void (APIENTRY* PFNANYGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void (APIENTRY* PFNANYGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (APIENTRY* PFNANYGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void (APIENTRY* PFNANYGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void (APIENTRY* PFNANYGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);

ANYGL_EXPORT extern PFNANYGLUNIFORM1DPROC AnyGL_glUniform1d;
ANYGL_EXPORT extern PFNANYGLUNIFORM2DPROC AnyGL_glUniform2d;
ANYGL_EXPORT extern PFNANYGLUNIFORM3DPROC AnyGL_glUniform3d;
ANYGL_EXPORT extern PFNANYGLUNIFORM4DPROC AnyGL_glUniform4d;
ANYGL_EXPORT extern PFNANYGLUNIFORM1DVPROC AnyGL_glUniform1dv;
ANYGL_EXPORT extern PFNANYGLUNIFORM2DVPROC AnyGL_glUniform2dv;
ANYGL_EXPORT extern PFNANYGLUNIFORM3DVPROC AnyGL_glUniform3dv;
ANYGL_EXPORT extern PFNANYGLUNIFORM4DVPROC AnyGL_glUniform4dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX2DVPROC AnyGL_glUniformMatrix2dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX3DVPROC AnyGL_glUniformMatrix3dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX4DVPROC AnyGL_glUniformMatrix4dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX2X3DVPROC AnyGL_glUniformMatrix2x3dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX2X4DVPROC AnyGL_glUniformMatrix2x4dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX3X2DVPROC AnyGL_glUniformMatrix3x2dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX3X4DVPROC AnyGL_glUniformMatrix3x4dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX4X2DVPROC AnyGL_glUniformMatrix4x2dv;
ANYGL_EXPORT extern PFNANYGLUNIFORMMATRIX4X3DVPROC AnyGL_glUniformMatrix4x3dv;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMDVPROC AnyGL_glGetUniformdv;
ANYGL_EXPORT extern PFNANYGLGETSUBROUTINEUNIFORMLOCATIONPROC AnyGL_glGetSubroutineUniformLocation;
ANYGL_EXPORT extern PFNANYGLGETSUBROUTINEINDEXPROC AnyGL_glGetSubroutineIndex;
ANYGL_EXPORT extern PFNANYGLGETACTIVESUBROUTINEUNIFORMIVPROC AnyGL_glGetActiveSubroutineUniformiv;
ANYGL_EXPORT extern PFNANYGLGETACTIVESUBROUTINEUNIFORMNAMEPROC AnyGL_glGetActiveSubroutineUniformName;
ANYGL_EXPORT extern PFNANYGLGETACTIVESUBROUTINENAMEPROC AnyGL_glGetActiveSubroutineName;
ANYGL_EXPORT extern PFNANYGLUNIFORMSUBROUTINESUIVPROC AnyGL_glUniformSubroutinesuiv;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMSUBROUTINEUIVPROC AnyGL_glGetUniformSubroutineuiv;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMSTAGEIVPROC AnyGL_glGetProgramStageiv;
ANYGL_EXPORT extern PFNANYGLPATCHPARAMETERFVPROC AnyGL_glPatchParameterfv;
ANYGL_EXPORT extern PFNANYGLDRAWTRANSFORMFEEDBACKPROC AnyGL_glDrawTransformFeedback;
ANYGL_EXPORT extern PFNANYGLDRAWTRANSFORMFEEDBACKSTREAMPROC AnyGL_glDrawTransformFeedbackStream;
ANYGL_EXPORT extern PFNANYGLBEGINQUERYINDEXEDPROC AnyGL_glBeginQueryIndexed;
ANYGL_EXPORT extern PFNANYGLENDQUERYINDEXEDPROC AnyGL_glEndQueryIndexed;
ANYGL_EXPORT extern PFNANYGLGETQUERYINDEXEDIVPROC AnyGL_glGetQueryIndexediv;

#ifndef ANYGL_NO_DEFINES
#define glUniform1d(location, x) ANYGL_CALL(AnyGL_glUniform1d)(location, x)
#define glUniform2d(location, x, y) ANYGL_CALL(AnyGL_glUniform2d)(location, x, y)
#define glUniform3d(location, x, y, z) ANYGL_CALL(AnyGL_glUniform3d)(location, x, y, z)
#define glUniform4d(location, x, y, z, w) ANYGL_CALL(AnyGL_glUniform4d)(location, x, y, z, w)
#define glUniform1dv(location, count, value) ANYGL_CALL(AnyGL_glUniform1dv)(location, count, value)
#define glUniform2dv(location, count, value) ANYGL_CALL(AnyGL_glUniform2dv)(location, count, value)
#define glUniform3dv(location, count, value) ANYGL_CALL(AnyGL_glUniform3dv)(location, count, value)
#define glUniform4dv(location, count, value) ANYGL_CALL(AnyGL_glUniform4dv)(location, count, value)
#define glUniformMatrix2dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix2dv)(location, count, transpose, value)
#define glUniformMatrix3dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix3dv)(location, count, transpose, value)
#define glUniformMatrix4dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix4dv)(location, count, transpose, value)
#define glUniformMatrix2x3dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix2x3dv)(location, count, transpose, value)
#define glUniformMatrix2x4dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix2x4dv)(location, count, transpose, value)
#define glUniformMatrix3x2dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix3x2dv)(location, count, transpose, value)
#define glUniformMatrix3x4dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix3x4dv)(location, count, transpose, value)
#define glUniformMatrix4x2dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix4x2dv)(location, count, transpose, value)
#define glUniformMatrix4x3dv(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix4x3dv)(location, count, transpose, value)
#define glGetUniformdv(program, location, params) ANYGL_CALL(AnyGL_glGetUniformdv)(program, location, params)
#define glGetSubroutineUniformLocation(program, shadertype, name) ANYGL_CALL(AnyGL_glGetSubroutineUniformLocation)(program, shadertype, name)
#define glGetSubroutineIndex(program, shadertype, name) ANYGL_CALL(AnyGL_glGetSubroutineIndex)(program, shadertype, name)
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) ANYGL_CALL(AnyGL_glGetActiveSubroutineUniformiv)(program, shadertype, index, pname, values)
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name) ANYGL_CALL(AnyGL_glGetActiveSubroutineUniformName)(program, shadertype, index, bufSize, length, name)
#define glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name) ANYGL_CALL(AnyGL_glGetActiveSubroutineName)(program, shadertype, index, bufSize, length, name)
#define glUniformSubroutinesuiv(shadertype, count, indices) ANYGL_CALL(AnyGL_glUniformSubroutinesuiv)(shadertype, count, indices)
#define glGetUniformSubroutineuiv(shadertype, location, params) ANYGL_CALL(AnyGL_glGetUniformSubroutineuiv)(shadertype, location, params)
#define glGetProgramStageiv(program, shadertype, pname, values) ANYGL_CALL(AnyGL_glGetProgramStageiv)(program, shadertype, pname, values)
#define glPatchParameterfv(pname, values) ANYGL_CALL(AnyGL_glPatchParameterfv)(pname, values)
#define glDrawTransformFeedback(mode, id) ANYGL_CALL(AnyGL_glDrawTransformFeedback)(mode, id)
#define glDrawTransformFeedbackStream(mode, id, stream) ANYGL_CALL(AnyGL_glDrawTransformFeedbackStream)(mode, id, stream)
#define glBeginQueryIndexed(target, index, id) ANYGL_CALL(AnyGL_glBeginQueryIndexed)(target, index, id)
#define glEndQueryIndexed(target, index) ANYGL_CALL(AnyGL_glEndQueryIndexed)(target, index)
#define glGetQueryIndexediv(target, index, pname, params) ANYGL_CALL(AnyGL_glGetQueryIndexediv)(target, index, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_4_1 */
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRY* PFNANYGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (APIENTRY* PFNANYGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
typedef void (APIENTRY* PFNANYGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRY* PFNANYGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (APIENTRY* PFNANYGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
typedef void (APIENTRY* PFNANYGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);

ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1DPROC AnyGL_glProgramUniform1d;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1DVPROC AnyGL_glProgramUniform1dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2DPROC AnyGL_glProgramUniform2d;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2DVPROC AnyGL_glProgramUniform2dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3DPROC AnyGL_glProgramUniform3d;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3DVPROC AnyGL_glProgramUniform3dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4DPROC AnyGL_glProgramUniform4d;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4DVPROC AnyGL_glProgramUniform4dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2DVPROC AnyGL_glProgramUniformMatrix2dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3DVPROC AnyGL_glProgramUniformMatrix3dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4DVPROC AnyGL_glProgramUniformMatrix4dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2X3DVPROC AnyGL_glProgramUniformMatrix2x3dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3X2DVPROC AnyGL_glProgramUniformMatrix3x2dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2X4DVPROC AnyGL_glProgramUniformMatrix2x4dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4X2DVPROC AnyGL_glProgramUniformMatrix4x2dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3X4DVPROC AnyGL_glProgramUniformMatrix3x4dv;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4X3DVPROC AnyGL_glProgramUniformMatrix4x3dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL1DPROC AnyGL_glVertexAttribL1d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL2DPROC AnyGL_glVertexAttribL2d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL3DPROC AnyGL_glVertexAttribL3d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL4DPROC AnyGL_glVertexAttribL4d;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL1DVPROC AnyGL_glVertexAttribL1dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL2DVPROC AnyGL_glVertexAttribL2dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL3DVPROC AnyGL_glVertexAttribL3dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL4DVPROC AnyGL_glVertexAttribL4dv;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBLPOINTERPROC AnyGL_glVertexAttribLPointer;
ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBLDVPROC AnyGL_glGetVertexAttribLdv;
ANYGL_EXPORT extern PFNANYGLVIEWPORTARRAYVPROC AnyGL_glViewportArrayv;
ANYGL_EXPORT extern PFNANYGLVIEWPORTINDEXEDFPROC AnyGL_glViewportIndexedf;
ANYGL_EXPORT extern PFNANYGLVIEWPORTINDEXEDFVPROC AnyGL_glViewportIndexedfv;
ANYGL_EXPORT extern PFNANYGLSCISSORARRAYVPROC AnyGL_glScissorArrayv;
ANYGL_EXPORT extern PFNANYGLSCISSORINDEXEDPROC AnyGL_glScissorIndexed;
ANYGL_EXPORT extern PFNANYGLSCISSORINDEXEDVPROC AnyGL_glScissorIndexedv;
ANYGL_EXPORT extern PFNANYGLDEPTHRANGEARRAYVPROC AnyGL_glDepthRangeArrayv;
ANYGL_EXPORT extern PFNANYGLDEPTHRANGEINDEXEDPROC AnyGL_glDepthRangeIndexed;
ANYGL_EXPORT extern PFNANYGLGETFLOATI_VPROC AnyGL_glGetFloati_v;
ANYGL_EXPORT extern PFNANYGLGETDOUBLEI_VPROC AnyGL_glGetDoublei_v;

#ifndef ANYGL_NO_DEFINES
#define glProgramUniform1d(program, location, v0) ANYGL_CALL(AnyGL_glProgramUniform1d)(program, location, v0)
#define glProgramUniform1dv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1dv)(program, location, count, value)
#define glProgramUniform2d(program, location, v0, v1) ANYGL_CALL(AnyGL_glProgramUniform2d)(program, location, v0, v1)
#define glProgramUniform2dv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2dv)(program, location, count, value)
#define glProgramUniform3d(program, location, v0, v1, v2) ANYGL_CALL(AnyGL_glProgramUniform3d)(program, location, v0, v1, v2)
#define glProgramUniform3dv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3dv)(program, location, count, value)
#define glProgramUniform4d(program, location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glProgramUniform4d)(program, location, v0, v1, v2, v3)
#define glProgramUniform4dv(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4dv)(program, location, count, value)
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x3dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x2dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x4dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x2dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x4dv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x3dv)(program, location, count, transpose, value)
#define glVertexAttribL1d(index, x) ANYGL_CALL(AnyGL_glVertexAttribL1d)(index, x)
#define glVertexAttribL2d(index, x, y) ANYGL_CALL(AnyGL_glVertexAttribL2d)(index, x, y)
#define glVertexAttribL3d(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttribL3d)(index, x, y, z)
#define glVertexAttribL4d(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttribL4d)(index, x, y, z, w)
#define glVertexAttribL1dv(index, v) ANYGL_CALL(AnyGL_glVertexAttribL1dv)(index, v)
#define glVertexAttribL2dv(index, v) ANYGL_CALL(AnyGL_glVertexAttribL2dv)(index, v)
#define glVertexAttribL3dv(index, v) ANYGL_CALL(AnyGL_glVertexAttribL3dv)(index, v)
#define glVertexAttribL4dv(index, v) ANYGL_CALL(AnyGL_glVertexAttribL4dv)(index, v)
#define glVertexAttribLPointer(index, size, type, stride, pointer) ANYGL_CALL(AnyGL_glVertexAttribLPointer)(index, size, type, stride, pointer)
#define glGetVertexAttribLdv(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribLdv)(index, pname, params)
#define glViewportArrayv(first, count, v) ANYGL_CALL(AnyGL_glViewportArrayv)(first, count, v)
#define glViewportIndexedf(index, x, y, w, h) ANYGL_CALL(AnyGL_glViewportIndexedf)(index, x, y, w, h)
#define glViewportIndexedfv(index, v) ANYGL_CALL(AnyGL_glViewportIndexedfv)(index, v)
#define glScissorArrayv(first, count, v) ANYGL_CALL(AnyGL_glScissorArrayv)(first, count, v)
#define glScissorIndexed(index, left, bottom, width, height) ANYGL_CALL(AnyGL_glScissorIndexed)(index, left, bottom, width, height)
#define glScissorIndexedv(index, v) ANYGL_CALL(AnyGL_glScissorIndexedv)(index, v)
#define glDepthRangeArrayv(first, count, v) ANYGL_CALL(AnyGL_glDepthRangeArrayv)(first, count, v)
#define glDepthRangeIndexed(index, n, f) ANYGL_CALL(AnyGL_glDepthRangeIndexed)(index, n, f)
#define glGetFloati_v(target, index, data) ANYGL_CALL(AnyGL_glGetFloati_v)(target, index, data)
#define glGetDoublei_v(target, index, data) ANYGL_CALL(AnyGL_glGetDoublei_v)(target, index, data)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_4_2 */
typedef void (APIENTRY* PFNANYGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRY* PFNANYGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRY* PFNANYGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (APIENTRY* PFNANYGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRY* PFNANYGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
typedef void (APIENTRY* PFNANYGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);

ANYGL_EXPORT extern PFNANYGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC AnyGL_glDrawArraysInstancedBaseInstance;
ANYGL_EXPORT extern PFNANYGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC AnyGL_glDrawElementsInstancedBaseInstance;
ANYGL_EXPORT extern PFNANYGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC AnyGL_glDrawElementsInstancedBaseVertexBaseInstance;
ANYGL_EXPORT extern PFNANYGLGETACTIVEATOMICCOUNTERBUFFERIVPROC AnyGL_glGetActiveAtomicCounterBufferiv;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGE1DPROC AnyGL_glTexStorage1D;
ANYGL_EXPORT extern PFNANYGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC AnyGL_glDrawTransformFeedbackInstanced;
ANYGL_EXPORT extern PFNANYGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC AnyGL_glDrawTransformFeedbackStreamInstanced;

#ifndef ANYGL_NO_DEFINES
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) ANYGL_CALL(AnyGL_glDrawArraysInstancedBaseInstance)(mode, first, count, instancecount, baseinstance)
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) ANYGL_CALL(AnyGL_glDrawElementsInstancedBaseInstance)(mode, count, type, indices, instancecount, baseinstance)
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) ANYGL_CALL(AnyGL_glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, instancecount, basevertex, baseinstance)
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) ANYGL_CALL(AnyGL_glGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, params)
#define glTexStorage1D(target, levels, internalformat, width) ANYGL_CALL(AnyGL_glTexStorage1D)(target, levels, internalformat, width)
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) ANYGL_CALL(AnyGL_glDrawTransformFeedbackInstanced)(mode, id, instancecount)
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) ANYGL_CALL(AnyGL_glDrawTransformFeedbackStreamInstanced)(mode, id, stream, instancecount)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_4_3 */
typedef void (APIENTRY* PFNANYGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
typedef void (APIENTRY* PFNANYGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRY* PFNANYGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRY* PFNANYGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
typedef void (APIENTRY* PFNANYGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRY* PFNANYGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef GLint (APIENTRY* PFNANYGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
typedef void (APIENTRY* PFNANYGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (APIENTRY* PFNANYGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);

ANYGL_EXPORT extern PFNANYGLCLEARBUFFERDATAPROC AnyGL_glClearBufferData;
ANYGL_EXPORT extern PFNANYGLCLEARBUFFERSUBDATAPROC AnyGL_glClearBufferSubData;
ANYGL_EXPORT extern PFNANYGLGETINTERNALFORMATI64VPROC AnyGL_glGetInternalformati64v;
ANYGL_EXPORT extern PFNANYGLINVALIDATETEXSUBIMAGEPROC AnyGL_glInvalidateTexSubImage;
ANYGL_EXPORT extern PFNANYGLINVALIDATETEXIMAGEPROC AnyGL_glInvalidateTexImage;
ANYGL_EXPORT extern PFNANYGLINVALIDATEBUFFERSUBDATAPROC AnyGL_glInvalidateBufferSubData;
ANYGL_EXPORT extern PFNANYGLINVALIDATEBUFFERDATAPROC AnyGL_glInvalidateBufferData;
ANYGL_EXPORT extern PFNANYGLMULTIDRAWARRAYSINDIRECTPROC AnyGL_glMultiDrawArraysIndirect;
ANYGL_EXPORT extern PFNANYGLMULTIDRAWELEMENTSINDIRECTPROC AnyGL_glMultiDrawElementsIndirect;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMRESOURCELOCATIONINDEXPROC AnyGL_glGetProgramResourceLocationIndex;
ANYGL_EXPORT extern PFNANYGLSHADERSTORAGEBLOCKBINDINGPROC AnyGL_glShaderStorageBlockBinding;
ANYGL_EXPORT extern PFNANYGLTEXTUREVIEWPROC AnyGL_glTextureView;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBLFORMATPROC AnyGL_glVertexAttribLFormat;

#ifndef ANYGL_NO_DEFINES
#define glClearBufferData(target, internalformat, format, type, data) ANYGL_CALL(AnyGL_glClearBufferData)(target, internalformat, format, type, data)
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) ANYGL_CALL(AnyGL_glClearBufferSubData)(target, internalformat, offset, size, format, type, data)
#define glGetInternalformati64v(target, internalformat, pname, count, params) ANYGL_CALL(AnyGL_glGetInternalformati64v)(target, internalformat, pname, count, params)
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) ANYGL_CALL(AnyGL_glInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth)
#define glInvalidateTexImage(texture, level) ANYGL_CALL(AnyGL_glInvalidateTexImage)(texture, level)
#define glInvalidateBufferSubData(buffer, offset, length) ANYGL_CALL(AnyGL_glInvalidateBufferSubData)(buffer, offset, length)
#define glInvalidateBufferData(buffer) ANYGL_CALL(AnyGL_glInvalidateBufferData)(buffer)
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawArraysIndirect)(mode, indirect, drawcount, stride)
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawElementsIndirect)(mode, type, indirect, drawcount, stride)
#define glGetProgramResourceLocationIndex(program, programInterface, name) ANYGL_CALL(AnyGL_glGetProgramResourceLocationIndex)(program, programInterface, name)
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) ANYGL_CALL(AnyGL_glShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding)
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) ANYGL_CALL(AnyGL_glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers)
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) ANYGL_CALL(AnyGL_glVertexAttribLFormat)(attribindex, size, type, relativeoffset)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_4_4 */
typedef void (APIENTRY* PFNANYGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRY* PFNANYGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
typedef void (APIENTRY* PFNANYGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
typedef void (APIENTRY* PFNANYGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
typedef void (APIENTRY* PFNANYGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint *samplers);
typedef void (APIENTRY* PFNANYGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
typedef void (APIENTRY* PFNANYGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);

ANYGL_EXPORT extern PFNANYGLBUFFERSTORAGEPROC AnyGL_glBufferStorage;
ANYGL_EXPORT extern PFNANYGLCLEARTEXIMAGEPROC AnyGL_glClearTexImage;
ANYGL_EXPORT extern PFNANYGLCLEARTEXSUBIMAGEPROC AnyGL_glClearTexSubImage;
ANYGL_EXPORT extern PFNANYGLBINDBUFFERSBASEPROC AnyGL_glBindBuffersBase;
ANYGL_EXPORT extern PFNANYGLBINDBUFFERSRANGEPROC AnyGL_glBindBuffersRange;
ANYGL_EXPORT extern PFNANYGLBINDTEXTURESPROC AnyGL_glBindTextures;
ANYGL_EXPORT extern PFNANYGLBINDSAMPLERSPROC AnyGL_glBindSamplers;
ANYGL_EXPORT extern PFNANYGLBINDIMAGETEXTURESPROC AnyGL_glBindImageTextures;
ANYGL_EXPORT extern PFNANYGLBINDVERTEXBUFFERSPROC AnyGL_glBindVertexBuffers;

#ifndef ANYGL_NO_DEFINES
#define glBufferStorage(target, size, data, flags) ANYGL_CALL(AnyGL_glBufferStorage)(target, size, data, flags)
#define glClearTexImage(texture, level, format, type, data) ANYGL_CALL(AnyGL_glClearTexImage)(texture, level, format, type, data)
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) ANYGL_CALL(AnyGL_glClearTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data)
#define glBindBuffersBase(target, first, count, buffers) ANYGL_CALL(AnyGL_glBindBuffersBase)(target, first, count, buffers)
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) ANYGL_CALL(AnyGL_glBindBuffersRange)(target, first, count, buffers, offsets, sizes)
#define glBindTextures(first, count, textures) ANYGL_CALL(AnyGL_glBindTextures)(first, count, textures)
#define glBindSamplers(first, count, samplers) ANYGL_CALL(AnyGL_glBindSamplers)(first, count, samplers)
#define glBindImageTextures(first, count, textures) ANYGL_CALL(AnyGL_glBindImageTextures)(first, count, textures)
#define glBindVertexBuffers(first, count, buffers, offsets, strides) ANYGL_CALL(AnyGL_glBindVertexBuffers)(first, count, buffers, offsets, strides)
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_4_5 */
typedef void (APIENTRY* PFNANYGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
typedef void (APIENTRY* PFNANYGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
typedef void (APIENTRY* PFNANYGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
typedef void (APIENTRY* PFNANYGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint *param);
typedef void (APIENTRY* PFNANYGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint *param);
typedef void (APIENTRY* PFNANYGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
typedef void (APIENTRY* PFNANYGLCREATEBUFFERSPROC)(GLsizei n, GLuint *buffers);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (APIENTRY* PFNANYGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void *(APIENTRY* PFNANYGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
typedef void *(APIENTRY* PFNANYGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef GLboolean (APIENTRY* PFNANYGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
typedef void (APIENTRY* PFNANYGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRY* PFNANYGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64 *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void **params);
typedef void (APIENTRY* PFNANYGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (APIENTRY* PFNANYGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
typedef void (APIENTRY* PFNANYGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
typedef void (APIENTRY* PFNANYGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (APIENTRY* PFNANYGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (APIENTRY* PFNANYGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
typedef void (APIENTRY* PFNANYGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint *param);
typedef void (APIENTRY* PFNANYGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
typedef void (APIENTRY* PFNANYGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint *textures);
typedef void (APIENTRY* PFNANYGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (APIENTRY* PFNANYGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRY* PFNANYGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRY* PFNANYGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat *param);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint *params);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint *param);
typedef void (APIENTRY* PFNANYGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
typedef void (APIENTRY* PFNANYGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
typedef void (APIENTRY* PFNANYGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRY* PFNANYGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
typedef void (APIENTRY* PFNANYGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint *params);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
typedef void (APIENTRY* PFNANYGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (APIENTRY* PFNANYGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRY* PFNANYGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint *param);
typedef void (APIENTRY* PFNANYGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (APIENTRY* PFNANYGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
typedef void (APIENTRY* PFNANYGLCREATESAMPLERSPROC)(GLsizei n, GLuint *samplers);
typedef void (APIENTRY* PFNANYGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
typedef void (APIENTRY* PFNANYGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint *ids);
typedef void (APIENTRY* PFNANYGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRY* PFNANYGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRY* PFNANYGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRY* PFNANYGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRY* PFNANYGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRY* PFNANYGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
typedef void (APIENTRY* PFNANYGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
typedef void (APIENTRY* PFNANYGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRY* PFNANYGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
typedef void (APIENTRY* PFNANYGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
typedef void (APIENTRY* PFNANYGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
typedef void (APIENTRY* PFNANYGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
typedef void (APIENTRY* PFNANYGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat *values);
typedef void (APIENTRY* PFNANYGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint *values);
typedef void (APIENTRY* PFNANYGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort *values);
typedef void (APIENTRY* PFNANYGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte *pattern);
typedef void (APIENTRY* PFNANYGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
typedef void (APIENTRY* PFNANYGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
typedef void (APIENTRY* PFNANYGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
typedef void (APIENTRY* PFNANYGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
typedef void (APIENTRY* PFNANYGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
typedef void (APIENTRY* PFNANYGLTEXTUREBARRIERPROC)();

ANYGL_EXPORT extern PFNANYGLCLIPCONTROLPROC AnyGL_glClipControl;
ANYGL_EXPORT extern PFNANYGLCREATETRANSFORMFEEDBACKSPROC AnyGL_glCreateTransformFeedbacks;
ANYGL_EXPORT extern PFNANYGLTRANSFORMFEEDBACKBUFFERBASEPROC AnyGL_glTransformFeedbackBufferBase;
ANYGL_EXPORT extern PFNANYGLTRANSFORMFEEDBACKBUFFERRANGEPROC AnyGL_glTransformFeedbackBufferRange;
ANYGL_EXPORT extern PFNANYGLGETTRANSFORMFEEDBACKIVPROC AnyGL_glGetTransformFeedbackiv;
ANYGL_EXPORT extern PFNANYGLGETTRANSFORMFEEDBACKI_VPROC AnyGL_glGetTransformFeedbacki_v;
ANYGL_EXPORT extern PFNANYGLGETTRANSFORMFEEDBACKI64_VPROC AnyGL_glGetTransformFeedbacki64_v;
ANYGL_EXPORT extern PFNANYGLCREATEBUFFERSPROC AnyGL_glCreateBuffers;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERSTORAGEPROC AnyGL_glNamedBufferStorage;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERDATAPROC AnyGL_glNamedBufferData;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERSUBDATAPROC AnyGL_glNamedBufferSubData;
ANYGL_EXPORT extern PFNANYGLCOPYNAMEDBUFFERSUBDATAPROC AnyGL_glCopyNamedBufferSubData;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDBUFFERDATAPROC AnyGL_glClearNamedBufferData;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDBUFFERSUBDATAPROC AnyGL_glClearNamedBufferSubData;
ANYGL_EXPORT extern PFNANYGLMAPNAMEDBUFFERPROC AnyGL_glMapNamedBuffer;
ANYGL_EXPORT extern PFNANYGLMAPNAMEDBUFFERRANGEPROC AnyGL_glMapNamedBufferRange;
ANYGL_EXPORT extern PFNANYGLUNMAPNAMEDBUFFERPROC AnyGL_glUnmapNamedBuffer;
ANYGL_EXPORT extern PFNANYGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC AnyGL_glFlushMappedNamedBufferRange;
ANYGL_EXPORT extern PFNANYGLGETNAMEDBUFFERPARAMETERIVPROC AnyGL_glGetNamedBufferParameteriv;
ANYGL_EXPORT extern PFNANYGLGETNAMEDBUFFERPARAMETERI64VPROC AnyGL_glGetNamedBufferParameteri64v;
ANYGL_EXPORT extern PFNANYGLGETNAMEDBUFFERPOINTERVPROC AnyGL_glGetNamedBufferPointerv;
ANYGL_EXPORT extern PFNANYGLGETNAMEDBUFFERSUBDATAPROC AnyGL_glGetNamedBufferSubData;
ANYGL_EXPORT extern PFNANYGLCREATEFRAMEBUFFERSPROC AnyGL_glCreateFramebuffers;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERRENDERBUFFERPROC AnyGL_glNamedFramebufferRenderbuffer;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERPARAMETERIPROC AnyGL_glNamedFramebufferParameteri;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTUREPROC AnyGL_glNamedFramebufferTexture;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTURELAYERPROC AnyGL_glNamedFramebufferTextureLayer;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERDRAWBUFFERPROC AnyGL_glNamedFramebufferDrawBuffer;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC AnyGL_glNamedFramebufferDrawBuffers;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERREADBUFFERPROC AnyGL_glNamedFramebufferReadBuffer;
ANYGL_EXPORT extern PFNANYGLINVALIDATENAMEDFRAMEBUFFERDATAPROC AnyGL_glInvalidateNamedFramebufferData;
ANYGL_EXPORT extern PFNANYGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC AnyGL_glInvalidateNamedFramebufferSubData;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDFRAMEBUFFERIVPROC AnyGL_glClearNamedFramebufferiv;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDFRAMEBUFFERUIVPROC AnyGL_glClearNamedFramebufferuiv;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDFRAMEBUFFERFVPROC AnyGL_glClearNamedFramebufferfv;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDFRAMEBUFFERFIPROC AnyGL_glClearNamedFramebufferfi;
ANYGL_EXPORT extern PFNANYGLBLITNAMEDFRAMEBUFFERPROC AnyGL_glBlitNamedFramebuffer;
ANYGL_EXPORT extern PFNANYGLCHECKNAMEDFRAMEBUFFERSTATUSPROC AnyGL_glCheckNamedFramebufferStatus;
ANYGL_EXPORT extern PFNANYGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC AnyGL_glGetNamedFramebufferParameteriv;
ANYGL_EXPORT extern PFNANYGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC AnyGL_glGetNamedFramebufferAttachmentParameteriv;
ANYGL_EXPORT extern PFNANYGLCREATERENDERBUFFERSPROC AnyGL_glCreateRenderbuffers;
ANYGL_EXPORT extern PFNANYGLNAMEDRENDERBUFFERSTORAGEPROC AnyGL_glNamedRenderbufferStorage;
ANYGL_EXPORT extern PFNANYGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC AnyGL_glNamedRenderbufferStorageMultisample;
ANYGL_EXPORT extern PFNANYGLGETNAMEDRENDERBUFFERPARAMETERIVPROC AnyGL_glGetNamedRenderbufferParameteriv;
ANYGL_EXPORT extern PFNANYGLCREATETEXTURESPROC AnyGL_glCreateTextures;
ANYGL_EXPORT extern PFNANYGLTEXTUREBUFFERPROC AnyGL_glTextureBuffer;
ANYGL_EXPORT extern PFNANYGLTEXTUREBUFFERRANGEPROC AnyGL_glTextureBufferRange;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE1DPROC AnyGL_glTextureStorage1D;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE2DPROC AnyGL_glTextureStorage2D;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE3DPROC AnyGL_glTextureStorage3D;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE2DMULTISAMPLEPROC AnyGL_glTextureStorage2DMultisample;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE3DMULTISAMPLEPROC AnyGL_glTextureStorage3DMultisample;
ANYGL_EXPORT extern PFNANYGLTEXTURESUBIMAGE1DPROC AnyGL_glTextureSubImage1D;
ANYGL_EXPORT extern PFNANYGLTEXTURESUBIMAGE2DPROC AnyGL_glTextureSubImage2D;
ANYGL_EXPORT extern PFNANYGLTEXTURESUBIMAGE3DPROC AnyGL_glTextureSubImage3D;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTURESUBIMAGE1DPROC AnyGL_glCompressedTextureSubImage1D;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTURESUBIMAGE2DPROC AnyGL_glCompressedTextureSubImage2D;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTURESUBIMAGE3DPROC AnyGL_glCompressedTextureSubImage3D;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTURESUBIMAGE1DPROC AnyGL_glCopyTextureSubImage1D;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTURESUBIMAGE2DPROC AnyGL_glCopyTextureSubImage2D;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTURESUBIMAGE3DPROC AnyGL_glCopyTextureSubImage3D;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERFPROC AnyGL_glTextureParameterf;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERFVPROC AnyGL_glTextureParameterfv;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIPROC AnyGL_glTextureParameteri;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIIVPROC AnyGL_glTextureParameterIiv;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIUIVPROC AnyGL_glTextureParameterIuiv;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIVPROC AnyGL_glTextureParameteriv;
ANYGL_EXPORT extern PFNANYGLGENERATETEXTUREMIPMAPPROC AnyGL_glGenerateTextureMipmap;
ANYGL_EXPORT extern PFNANYGLBINDTEXTUREUNITPROC AnyGL_glBindTextureUnit;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREIMAGEPROC AnyGL_glGetTextureImage;
ANYGL_EXPORT extern PFNANYGLGETCOMPRESSEDTEXTUREIMAGEPROC AnyGL_glGetCompressedTextureImage;
ANYGL_EXPORT extern PFNANYGLGETTEXTURELEVELPARAMETERFVPROC AnyGL_glGetTextureLevelParameterfv;
ANYGL_EXPORT extern PFNANYGLGETTEXTURELEVELPARAMETERIVPROC AnyGL_glGetTextureLevelParameteriv;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERFVPROC AnyGL_glGetTextureParameterfv;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERIIVPROC AnyGL_glGetTextureParameterIiv;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERIUIVPROC AnyGL_glGetTextureParameterIuiv;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERIVPROC AnyGL_glGetTextureParameteriv;
ANYGL_EXPORT extern PFNANYGLCREATEVERTEXARRAYSPROC AnyGL_glCreateVertexArrays;
ANYGL_EXPORT extern PFNANYGLDISABLEVERTEXARRAYATTRIBPROC AnyGL_glDisableVertexArrayAttrib;
ANYGL_EXPORT extern PFNANYGLENABLEVERTEXARRAYATTRIBPROC AnyGL_glEnableVertexArrayAttrib;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYELEMENTBUFFERPROC AnyGL_glVertexArrayElementBuffer;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXBUFFERPROC AnyGL_glVertexArrayVertexBuffer;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXBUFFERSPROC AnyGL_glVertexArrayVertexBuffers;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYATTRIBBINDINGPROC AnyGL_glVertexArrayAttribBinding;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYATTRIBFORMATPROC AnyGL_glVertexArrayAttribFormat;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYATTRIBIFORMATPROC AnyGL_glVertexArrayAttribIFormat;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYATTRIBLFORMATPROC AnyGL_glVertexArrayAttribLFormat;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYBINDINGDIVISORPROC AnyGL_glVertexArrayBindingDivisor;
ANYGL_EXPORT extern PFNANYGLGETVERTEXARRAYIVPROC AnyGL_glGetVertexArrayiv;
ANYGL_EXPORT extern PFNANYGLGETVERTEXARRAYINDEXEDIVPROC AnyGL_glGetVertexArrayIndexediv;
ANYGL_EXPORT extern PFNANYGLGETVERTEXARRAYINDEXED64IVPROC AnyGL_glGetVertexArrayIndexed64iv;
ANYGL_EXPORT extern PFNANYGLCREATESAMPLERSPROC AnyGL_glCreateSamplers;
ANYGL_EXPORT extern PFNANYGLCREATEPROGRAMPIPELINESPROC AnyGL_glCreateProgramPipelines;
ANYGL_EXPORT extern PFNANYGLCREATEQUERIESPROC AnyGL_glCreateQueries;
ANYGL_EXPORT extern PFNANYGLGETQUERYBUFFEROBJECTI64VPROC AnyGL_glGetQueryBufferObjecti64v;
ANYGL_EXPORT extern PFNANYGLGETQUERYBUFFEROBJECTIVPROC AnyGL_glGetQueryBufferObjectiv;
ANYGL_EXPORT extern PFNANYGLGETQUERYBUFFEROBJECTUI64VPROC AnyGL_glGetQueryBufferObjectui64v;
ANYGL_EXPORT extern PFNANYGLGETQUERYBUFFEROBJECTUIVPROC AnyGL_glGetQueryBufferObjectuiv;
ANYGL_EXPORT extern PFNANYGLGETTEXTURESUBIMAGEPROC AnyGL_glGetTextureSubImage;
ANYGL_EXPORT extern PFNANYGLGETCOMPRESSEDTEXTURESUBIMAGEPROC AnyGL_glGetCompressedTextureSubImage;
ANYGL_EXPORT extern PFNANYGLGETNCOMPRESSEDTEXIMAGEPROC AnyGL_glGetnCompressedTexImage;
ANYGL_EXPORT extern PFNANYGLGETNTEXIMAGEPROC AnyGL_glGetnTexImage;
ANYGL_EXPORT extern PFNANYGLGETNUNIFORMDVPROC AnyGL_glGetnUniformdv;
ANYGL_EXPORT extern PFNANYGLGETNMAPDVPROC AnyGL_glGetnMapdv;
ANYGL_EXPORT extern PFNANYGLGETNMAPFVPROC AnyGL_glGetnMapfv;
ANYGL_EXPORT extern PFNANYGLGETNMAPIVPROC AnyGL_glGetnMapiv;
ANYGL_EXPORT extern PFNANYGLGETNPIXELMAPFVPROC AnyGL_glGetnPixelMapfv;
ANYGL_EXPORT extern PFNANYGLGETNPIXELMAPUIVPROC AnyGL_glGetnPixelMapuiv;
ANYGL_EXPORT extern PFNANYGLGETNPIXELMAPUSVPROC AnyGL_glGetnPixelMapusv;
ANYGL_EXPORT extern PFNANYGLGETNPOLYGONSTIPPLEPROC AnyGL_glGetnPolygonStipple;
ANYGL_EXPORT extern PFNANYGLGETNCOLORTABLEPROC AnyGL_glGetnColorTable;
ANYGL_EXPORT extern PFNANYGLGETNCONVOLUTIONFILTERPROC AnyGL_glGetnConvolutionFilter;
ANYGL_EXPORT extern PFNANYGLGETNSEPARABLEFILTERPROC AnyGL_glGetnSeparableFilter;
ANYGL_EXPORT extern PFNANYGLGETNHISTOGRAMPROC AnyGL_glGetnHistogram;
ANYGL_EXPORT extern PFNANYGLGETNMINMAXPROC AnyGL_glGetnMinmax;
ANYGL_EXPORT extern PFNANYGLTEXTUREBARRIERPROC AnyGL_glTextureBarrier;

#ifndef ANYGL_NO_DEFINES
#define glClipControl(origin, depth) ANYGL_CALL(AnyGL_glClipControl)(origin, depth)
#define glCreateTransformFeedbacks(n, ids) ANYGL_CALL(AnyGL_glCreateTransformFeedbacks)(n, ids)
#define glTransformFeedbackBufferBase(xfb, index, buffer) ANYGL_CALL(AnyGL_glTransformFeedbackBufferBase)(xfb, index, buffer)
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) ANYGL_CALL(AnyGL_glTransformFeedbackBufferRange)(xfb, index, buffer, offset, size)
#define glGetTransformFeedbackiv(xfb, pname, param) ANYGL_CALL(AnyGL_glGetTransformFeedbackiv)(xfb, pname, param)
#define glGetTransformFeedbacki_v(xfb, pname, index, param) ANYGL_CALL(AnyGL_glGetTransformFeedbacki_v)(xfb, pname, index, param)
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) ANYGL_CALL(AnyGL_glGetTransformFeedbacki64_v)(xfb, pname, index, param)
#define glCreateBuffers(n, buffers) ANYGL_CALL(AnyGL_glCreateBuffers)(n, buffers)
#define glNamedBufferStorage(buffer, size, data, flags) ANYGL_CALL(AnyGL_glNamedBufferStorage)(buffer, size, data, flags)
#define glNamedBufferData(buffer, size, data, usage) ANYGL_CALL(AnyGL_glNamedBufferData)(buffer, size, data, usage)
#define glNamedBufferSubData(buffer, offset, size, data) ANYGL_CALL(AnyGL_glNamedBufferSubData)(buffer, offset, size, data)
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) ANYGL_CALL(AnyGL_glCopyNamedBufferSubData)(readBuffer, writeBuffer, readOffset, writeOffset, size)
#define glClearNamedBufferData(buffer, internalformat, format, type, data) ANYGL_CALL(AnyGL_glClearNamedBufferData)(buffer, internalformat, format, type, data)
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) ANYGL_CALL(AnyGL_glClearNamedBufferSubData)(buffer, internalformat, offset, size, format, type, data)
#define glMapNamedBuffer(buffer, access) ANYGL_CALL(AnyGL_glMapNamedBuffer)(buffer, access)
#define glMapNamedBufferRange(buffer, offset, length, access) ANYGL_CALL(AnyGL_glMapNamedBufferRange)(buffer, offset, length, access)
#define glUnmapNamedBuffer(buffer) ANYGL_CALL(AnyGL_glUnmapNamedBuffer)(buffer)
#define glFlushMappedNamedBufferRange(buffer, offset, length) ANYGL_CALL(AnyGL_glFlushMappedNamedBufferRange)(buffer, offset, length)
#define glGetNamedBufferParameteriv(buffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedBufferParameteriv)(buffer, pname, params)
#define glGetNamedBufferParameteri64v(buffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedBufferParameteri64v)(buffer, pname, params)
#define glGetNamedBufferPointerv(buffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedBufferPointerv)(buffer, pname, params)
#define glGetNamedBufferSubData(buffer, offset, size, data) ANYGL_CALL(AnyGL_glGetNamedBufferSubData)(buffer, offset, size, data)
#define glCreateFramebuffers(n, framebuffers) ANYGL_CALL(AnyGL_glCreateFramebuffers)(n, framebuffers)
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) ANYGL_CALL(AnyGL_glNamedFramebufferRenderbuffer)(framebuffer, attachment, renderbuffertarget, renderbuffer)
#define glNamedFramebufferParameteri(framebuffer, pname, param) ANYGL_CALL(AnyGL_glNamedFramebufferParameteri)(framebuffer, pname, param)
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) ANYGL_CALL(AnyGL_glNamedFramebufferTexture)(framebuffer, attachment, texture, level)
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) ANYGL_CALL(AnyGL_glNamedFramebufferTextureLayer)(framebuffer, attachment, texture, level, layer)
#define glNamedFramebufferDrawBuffer(framebuffer, buf) ANYGL_CALL(AnyGL_glNamedFramebufferDrawBuffer)(framebuffer, buf)
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) ANYGL_CALL(AnyGL_glNamedFramebufferDrawBuffers)(framebuffer, n, bufs)
#define glNamedFramebufferReadBuffer(framebuffer, src) ANYGL_CALL(AnyGL_glNamedFramebufferReadBuffer)(framebuffer, src)
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) ANYGL_CALL(AnyGL_glInvalidateNamedFramebufferData)(framebuffer, numAttachments, attachments)
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) ANYGL_CALL(AnyGL_glInvalidateNamedFramebufferSubData)(framebuffer, numAttachments, attachments, x, y, width, height)
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) ANYGL_CALL(AnyGL_glClearNamedFramebufferiv)(framebuffer, buffer, drawbuffer, value)
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) ANYGL_CALL(AnyGL_glClearNamedFramebufferuiv)(framebuffer, buffer, drawbuffer, value)
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) ANYGL_CALL(AnyGL_glClearNamedFramebufferfv)(framebuffer, buffer, drawbuffer, value)
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) ANYGL_CALL(AnyGL_glClearNamedFramebufferfi)(framebuffer, buffer, drawbuffer, depth, stencil)
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) ANYGL_CALL(AnyGL_glBlitNamedFramebuffer)(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
#define glCheckNamedFramebufferStatus(framebuffer, target) ANYGL_CALL(AnyGL_glCheckNamedFramebufferStatus)(framebuffer, target)
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) ANYGL_CALL(AnyGL_glGetNamedFramebufferParameteriv)(framebuffer, pname, param)
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) ANYGL_CALL(AnyGL_glGetNamedFramebufferAttachmentParameteriv)(framebuffer, attachment, pname, params)
#define glCreateRenderbuffers(n, renderbuffers) ANYGL_CALL(AnyGL_glCreateRenderbuffers)(n, renderbuffers)
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) ANYGL_CALL(AnyGL_glNamedRenderbufferStorage)(renderbuffer, internalformat, width, height)
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) ANYGL_CALL(AnyGL_glNamedRenderbufferStorageMultisample)(renderbuffer, samples, internalformat, width, height)
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedRenderbufferParameteriv)(renderbuffer, pname, params)
#define glCreateTextures(target, n, textures) ANYGL_CALL(AnyGL_glCreateTextures)(target, n, textures)
#define glTextureBuffer(texture, internalformat, buffer) ANYGL_CALL(AnyGL_glTextureBuffer)(texture, internalformat, buffer)
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) ANYGL_CALL(AnyGL_glTextureBufferRange)(texture, internalformat, buffer, offset, size)
#define glTextureStorage1D(texture, levels, internalformat, width) ANYGL_CALL(AnyGL_glTextureStorage1D)(texture, levels, internalformat, width)
#define glTextureStorage2D(texture, levels, internalformat, width, height) ANYGL_CALL(AnyGL_glTextureStorage2D)(texture, levels, internalformat, width, height)
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) ANYGL_CALL(AnyGL_glTextureStorage3D)(texture, levels, internalformat, width, height, depth)
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) ANYGL_CALL(AnyGL_glTextureStorage2DMultisample)(texture, samples, internalformat, width, height, fixedsamplelocations)
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) ANYGL_CALL(AnyGL_glTextureStorage3DMultisample)(texture, samples, internalformat, width, height, depth, fixedsamplelocations)
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) ANYGL_CALL(AnyGL_glTextureSubImage1D)(texture, level, xoffset, width, format, type, pixels)
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) ANYGL_CALL(AnyGL_glTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, type, pixels)
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ANYGL_CALL(AnyGL_glTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTextureSubImage1D)(texture, level, xoffset, width, format, imageSize, data)
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, imageSize, data)
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) ANYGL_CALL(AnyGL_glCopyTextureSubImage1D)(texture, level, xoffset, x, y, width)
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTextureSubImage2D)(texture, level, xoffset, yoffset, x, y, width, height)
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, x, y, width, height)
#define glTextureParameterf(texture, pname, param) ANYGL_CALL(AnyGL_glTextureParameterf)(texture, pname, param)
#define glTextureParameterfv(texture, pname, param) ANYGL_CALL(AnyGL_glTextureParameterfv)(texture, pname, param)
#define glTextureParameteri(texture, pname, param) ANYGL_CALL(AnyGL_glTextureParameteri)(texture, pname, param)
#define glTextureParameterIiv(texture, pname, params) ANYGL_CALL(AnyGL_glTextureParameterIiv)(texture, pname, params)
#define glTextureParameterIuiv(texture, pname, params) ANYGL_CALL(AnyGL_glTextureParameterIuiv)(texture, pname, params)
#define glTextureParameteriv(texture, pname, param) ANYGL_CALL(AnyGL_glTextureParameteriv)(texture, pname, param)
#define glGenerateTextureMipmap(texture) ANYGL_CALL(AnyGL_glGenerateTextureMipmap)(texture)
#define glBindTextureUnit(unit, texture) ANYGL_CALL(AnyGL_glBindTextureUnit)(unit, texture)
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) ANYGL_CALL(AnyGL_glGetTextureImage)(texture, level, format, type, bufSize, pixels)
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) ANYGL_CALL(AnyGL_glGetCompressedTextureImage)(texture, level, bufSize, pixels)
#define glGetTextureLevelParameterfv(texture, level, pname, params) ANYGL_CALL(AnyGL_glGetTextureLevelParameterfv)(texture, level, pname, params)
#define glGetTextureLevelParameteriv(texture, level, pname, params) ANYGL_CALL(AnyGL_glGetTextureLevelParameteriv)(texture, level, pname, params)
#define glGetTextureParameterfv(texture, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameterfv)(texture, pname, params)
#define glGetTextureParameterIiv(texture, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameterIiv)(texture, pname, params)
#define glGetTextureParameterIuiv(texture, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameterIuiv)(texture, pname, params)
#define glGetTextureParameteriv(texture, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameteriv)(texture, pname, params)
#define glCreateVertexArrays(n, arrays) ANYGL_CALL(AnyGL_glCreateVertexArrays)(n, arrays)
#define glDisableVertexArrayAttrib(vaobj, index) ANYGL_CALL(AnyGL_glDisableVertexArrayAttrib)(vaobj, index)
#define glEnableVertexArrayAttrib(vaobj, index) ANYGL_CALL(AnyGL_glEnableVertexArrayAttrib)(vaobj, index)
#define glVertexArrayElementBuffer(vaobj, buffer) ANYGL_CALL(AnyGL_glVertexArrayElementBuffer)(vaobj, buffer)
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) ANYGL_CALL(AnyGL_glVertexArrayVertexBuffer)(vaobj, bindingindex, buffer, offset, stride)
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) ANYGL_CALL(AnyGL_glVertexArrayVertexBuffers)(vaobj, first, count, buffers, offsets, strides)
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) ANYGL_CALL(AnyGL_glVertexArrayAttribBinding)(vaobj, attribindex, bindingindex)
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) ANYGL_CALL(AnyGL_glVertexArrayAttribFormat)(vaobj, attribindex, size, type, normalized, relativeoffset)
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) ANYGL_CALL(AnyGL_glVertexArrayAttribIFormat)(vaobj, attribindex, size, type, relativeoffset)
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) ANYGL_CALL(AnyGL_glVertexArrayAttribLFormat)(vaobj, attribindex, size, type, relativeoffset)
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) ANYGL_CALL(AnyGL_glVertexArrayBindingDivisor)(vaobj, bindingindex, divisor)
#define glGetVertexArrayiv(vaobj, pname, param) ANYGL_CALL(AnyGL_glGetVertexArrayiv)(vaobj, pname, param)
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) ANYGL_CALL(AnyGL_glGetVertexArrayIndexediv)(vaobj, index, pname, param)
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) ANYGL_CALL(AnyGL_glGetVertexArrayIndexed64iv)(vaobj, index, pname, param)
#define glCreateSamplers(n, samplers) ANYGL_CALL(AnyGL_glCreateSamplers)(n, samplers)
#define glCreateProgramPipelines(n, pipelines) ANYGL_CALL(AnyGL_glCreateProgramPipelines)(n, pipelines)
#define glCreateQueries(target, n, ids) ANYGL_CALL(AnyGL_glCreateQueries)(target, n, ids)
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) ANYGL_CALL(AnyGL_glGetQueryBufferObjecti64v)(id, buffer, pname, offset)
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) ANYGL_CALL(AnyGL_glGetQueryBufferObjectiv)(id, buffer, pname, offset)
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) ANYGL_CALL(AnyGL_glGetQueryBufferObjectui64v)(id, buffer, pname, offset)
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) ANYGL_CALL(AnyGL_glGetQueryBufferObjectuiv)(id, buffer, pname, offset)
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) ANYGL_CALL(AnyGL_glGetTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels)
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) ANYGL_CALL(AnyGL_glGetCompressedTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels)
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) ANYGL_CALL(AnyGL_glGetnCompressedTexImage)(target, lod, bufSize, pixels)
#define glGetnTexImage(target, level, format, type, bufSize, pixels) ANYGL_CALL(AnyGL_glGetnTexImage)(target, level, format, type, bufSize, pixels)
#define glGetnUniformdv(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformdv)(program, location, bufSize, params)
#define glGetnMapdv(target, query, bufSize, v) ANYGL_CALL(AnyGL_glGetnMapdv)(target, query, bufSize, v)
#define glGetnMapfv(target, query, bufSize, v) ANYGL_CALL(AnyGL_glGetnMapfv)(target, query, bufSize, v)
#define glGetnMapiv(target, query, bufSize, v) ANYGL_CALL(AnyGL_glGetnMapiv)(target, query, bufSize, v)
#define glGetnPixelMapfv(map, bufSize, values) ANYGL_CALL(AnyGL_glGetnPixelMapfv)(map, bufSize, values)
#define glGetnPixelMapuiv(map, bufSize, values) ANYGL_CALL(AnyGL_glGetnPixelMapuiv)(map, bufSize, values)
#define glGetnPixelMapusv(map, bufSize, values) ANYGL_CALL(AnyGL_glGetnPixelMapusv)(map, bufSize, values)
#define glGetnPolygonStipple(bufSize, pattern) ANYGL_CALL(AnyGL_glGetnPolygonStipple)(bufSize, pattern)
#define glGetnColorTable(target, format, type, bufSize, table) ANYGL_CALL(AnyGL_glGetnColorTable)(target, format, type, bufSize, table)
#define glGetnConvolutionFilter(target, format, type, bufSize, image) ANYGL_CALL(AnyGL_glGetnConvolutionFilter)(target, format, type, bufSize, image)
#define glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span) ANYGL_CALL(AnyGL_glGetnSeparableFilter)(target, format, type, rowBufSize, row, columnBufSize, column, span)
#define glGetnHistogram(target, reset, format, type, bufSize, values) ANYGL_CALL(AnyGL_glGetnHistogram)(target, reset, format, type, bufSize, values)
#define glGetnMinmax(target, reset, format, type, bufSize, values) ANYGL_CALL(AnyGL_glGetnMinmax)(target, reset, format, type, bufSize, values)
#define glTextureBarrier() ANYGL_CALL(AnyGL_glTextureBarrier)()
#endif /* ANYGL_NO_DEFINES */

/* GL_VERSION_4_6 */
typedef void (APIENTRY* PFNANYGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
typedef void (APIENTRY* PFNANYGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRY* PFNANYGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRY* PFNANYGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);

ANYGL_EXPORT extern PFNANYGLSPECIALIZESHADERPROC AnyGL_glSpecializeShader;
ANYGL_EXPORT extern PFNANYGLMULTIDRAWARRAYSINDIRECTCOUNTPROC AnyGL_glMultiDrawArraysIndirectCount;
ANYGL_EXPORT extern PFNANYGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC AnyGL_glMultiDrawElementsIndirectCount;
ANYGL_EXPORT extern PFNANYGLPOLYGONOFFSETCLAMPPROC AnyGL_glPolygonOffsetClamp;

#ifndef ANYGL_NO_DEFINES
#define glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) ANYGL_CALL(AnyGL_glSpecializeShader)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue)
#define glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawArraysIndirectCount)(mode, indirect, drawcount, maxdrawcount, stride)
#define glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawElementsIndirectCount)(mode, type, indirect, drawcount, maxdrawcount, stride)
#define glPolygonOffsetClamp(factor, units, clamp) ANYGL_CALL(AnyGL_glPolygonOffsetClamp)(factor, units, clamp)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_ES2_compatibility */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_ES3_1_compatibility */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_ES3_2_compatibility */


#ifndef ANYGL_NO_DEFINES
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) ANYGL_CALL(AnyGL_glPrimitiveBoundingBox)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_ES3_compatibility */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_arrays_of_arrays */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_base_instance */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_bindless_texture */
typedef GLuint64 (APIENTRY* PFNANYGLGETTEXTUREHANDLEARBPROC)(GLuint texture);
typedef GLuint64 (APIENTRY* PFNANYGLGETTEXTURESAMPLERHANDLEARBPROC)(GLuint texture, GLuint sampler);
typedef void (APIENTRY* PFNANYGLMAKETEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef void (APIENTRY* PFNANYGLMAKETEXTUREHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef GLuint64 (APIENTRY* PFNANYGLGETIMAGEHANDLEARBPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (APIENTRY* PFNANYGLMAKEIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle, GLenum access);
typedef void (APIENTRY* PFNANYGLMAKEIMAGEHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef void (APIENTRY* PFNANYGLUNIFORMHANDLEUI64ARBPROC)(GLint location, GLuint64 value);
typedef void (APIENTRY* PFNANYGLUNIFORMHANDLEUI64VARBPROC)(GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMHANDLEUI64ARBPROC)(GLuint program, GLint location, GLuint64 value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMHANDLEUI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean (APIENTRY* PFNANYGLISTEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef GLboolean (APIENTRY* PFNANYGLISIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL1UI64ARBPROC)(GLuint index, GLuint64EXT x);
typedef void (APIENTRY* PFNANYGLVERTEXATTRIBL1UI64VARBPROC)(GLuint index, const GLuint64EXT *v);
typedef void (APIENTRY* PFNANYGLGETVERTEXATTRIBLUI64VARBPROC)(GLuint index, GLenum pname, GLuint64EXT *params);

ANYGL_EXPORT extern PFNANYGLGETTEXTUREHANDLEARBPROC AnyGL_glGetTextureHandleARB;
ANYGL_EXPORT extern PFNANYGLGETTEXTURESAMPLERHANDLEARBPROC AnyGL_glGetTextureSamplerHandleARB;
ANYGL_EXPORT extern PFNANYGLMAKETEXTUREHANDLERESIDENTARBPROC AnyGL_glMakeTextureHandleResidentARB;
ANYGL_EXPORT extern PFNANYGLMAKETEXTUREHANDLENONRESIDENTARBPROC AnyGL_glMakeTextureHandleNonResidentARB;
ANYGL_EXPORT extern PFNANYGLGETIMAGEHANDLEARBPROC AnyGL_glGetImageHandleARB;
ANYGL_EXPORT extern PFNANYGLMAKEIMAGEHANDLERESIDENTARBPROC AnyGL_glMakeImageHandleResidentARB;
ANYGL_EXPORT extern PFNANYGLMAKEIMAGEHANDLENONRESIDENTARBPROC AnyGL_glMakeImageHandleNonResidentARB;
ANYGL_EXPORT extern PFNANYGLUNIFORMHANDLEUI64ARBPROC AnyGL_glUniformHandleui64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORMHANDLEUI64VARBPROC AnyGL_glUniformHandleui64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMHANDLEUI64ARBPROC AnyGL_glProgramUniformHandleui64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMHANDLEUI64VARBPROC AnyGL_glProgramUniformHandleui64vARB;
ANYGL_EXPORT extern PFNANYGLISTEXTUREHANDLERESIDENTARBPROC AnyGL_glIsTextureHandleResidentARB;
ANYGL_EXPORT extern PFNANYGLISIMAGEHANDLERESIDENTARBPROC AnyGL_glIsImageHandleResidentARB;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL1UI64ARBPROC AnyGL_glVertexAttribL1ui64ARB;
ANYGL_EXPORT extern PFNANYGLVERTEXATTRIBL1UI64VARBPROC AnyGL_glVertexAttribL1ui64vARB;
ANYGL_EXPORT extern PFNANYGLGETVERTEXATTRIBLUI64VARBPROC AnyGL_glGetVertexAttribLui64vARB;

#ifndef ANYGL_NO_DEFINES
#define glGetTextureHandleARB(texture) ANYGL_CALL(AnyGL_glGetTextureHandleARB)(texture)
#define glGetTextureSamplerHandleARB(texture, sampler) ANYGL_CALL(AnyGL_glGetTextureSamplerHandleARB)(texture, sampler)
#define glMakeTextureHandleResidentARB(handle) ANYGL_CALL(AnyGL_glMakeTextureHandleResidentARB)(handle)
#define glMakeTextureHandleNonResidentARB(handle) ANYGL_CALL(AnyGL_glMakeTextureHandleNonResidentARB)(handle)
#define glGetImageHandleARB(texture, level, layered, layer, format) ANYGL_CALL(AnyGL_glGetImageHandleARB)(texture, level, layered, layer, format)
#define glMakeImageHandleResidentARB(handle, access) ANYGL_CALL(AnyGL_glMakeImageHandleResidentARB)(handle, access)
#define glMakeImageHandleNonResidentARB(handle) ANYGL_CALL(AnyGL_glMakeImageHandleNonResidentARB)(handle)
#define glUniformHandleui64ARB(location, value) ANYGL_CALL(AnyGL_glUniformHandleui64ARB)(location, value)
#define glUniformHandleui64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniformHandleui64vARB)(location, count, value)
#define glProgramUniformHandleui64ARB(program, location, value) ANYGL_CALL(AnyGL_glProgramUniformHandleui64ARB)(program, location, value)
#define glProgramUniformHandleui64vARB(program, location, count, values) ANYGL_CALL(AnyGL_glProgramUniformHandleui64vARB)(program, location, count, values)
#define glIsTextureHandleResidentARB(handle) ANYGL_CALL(AnyGL_glIsTextureHandleResidentARB)(handle)
#define glIsImageHandleResidentARB(handle) ANYGL_CALL(AnyGL_glIsImageHandleResidentARB)(handle)
#define glVertexAttribL1ui64ARB(index, x) ANYGL_CALL(AnyGL_glVertexAttribL1ui64ARB)(index, x)
#define glVertexAttribL1ui64vARB(index, v) ANYGL_CALL(AnyGL_glVertexAttribL1ui64vARB)(index, v)
#define glGetVertexAttribLui64vARB(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribLui64vARB)(index, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_blend_func_extended */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_buffer_storage */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_cl_event */
typedef GLsync (APIENTRY* PFNANYGLCREATESYNCFROMCLEVENTARBPROC)(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);

ANYGL_EXPORT extern PFNANYGLCREATESYNCFROMCLEVENTARBPROC AnyGL_glCreateSyncFromCLeventARB;

#ifndef ANYGL_NO_DEFINES
#define glCreateSyncFromCLeventARB(context, event, flags) ANYGL_CALL(AnyGL_glCreateSyncFromCLeventARB)(context, event, flags)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_clear_buffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_clear_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_clip_control */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_color_buffer_float */


#ifndef ANYGL_NO_DEFINES
#define glClampColorARB(target, clamp) ANYGL_CALL(AnyGL_glClampColor)(target, clamp)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_compatibility */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_compressed_texture_pixel_storage */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_compute_shader */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_compute_variable_group_size */
typedef void (APIENTRY* PFNANYGLDISPATCHCOMPUTEGROUPSIZEARBPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);

ANYGL_EXPORT extern PFNANYGLDISPATCHCOMPUTEGROUPSIZEARBPROC AnyGL_glDispatchComputeGroupSizeARB;

#ifndef ANYGL_NO_DEFINES
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) ANYGL_CALL(AnyGL_glDispatchComputeGroupSizeARB)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_conditional_render_inverted */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_conservative_depth */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_copy_buffer */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_copy_image */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_cull_distance */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_debug_output */


#ifndef ANYGL_NO_DEFINES
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) ANYGL_CALL(AnyGL_glDebugMessageControl)(source, type, severity, count, ids, enabled)
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) ANYGL_CALL(AnyGL_glDebugMessageInsert)(source, type, id, severity, length, buf)
#define glDebugMessageCallbackARB(callback, userParam) ANYGL_CALL(AnyGL_glDebugMessageCallback)(callback, userParam)
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) ANYGL_CALL(AnyGL_glGetDebugMessageLog)(count, bufSize, sources, types, ids, severities, lengths, messageLog)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_depth_buffer_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_depth_clamp */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_depth_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_derivative_control */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_direct_state_access */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_draw_buffers */


#ifndef ANYGL_NO_DEFINES
#define glDrawBuffersARB(n, bufs) ANYGL_CALL(AnyGL_glDrawBuffers)(n, bufs)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_draw_buffers_blend */


#ifndef ANYGL_NO_DEFINES
#define glBlendEquationiARB(buf, mode) ANYGL_CALL(AnyGL_glBlendEquationi)(buf, mode)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) ANYGL_CALL(AnyGL_glBlendEquationSeparatei)(buf, modeRGB, modeAlpha)
#define glBlendFunciARB(buf, src, dst) ANYGL_CALL(AnyGL_glBlendFunci)(buf, src, dst)
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) ANYGL_CALL(AnyGL_glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_draw_elements_base_vertex */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_draw_indirect */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_draw_instanced */


#ifndef ANYGL_NO_DEFINES
#define glDrawArraysInstancedARB(mode, first, count, primcount) ANYGL_CALL(AnyGL_glDrawArraysInstanced)(mode, first, count, primcount)
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) ANYGL_CALL(AnyGL_glDrawElementsInstanced)(mode, count, type, indices, primcount)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_enhanced_layouts */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_explicit_attrib_location */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_explicit_uniform_location */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_fragment_coord_conventions */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_fragment_layer_viewport */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_fragment_program */
typedef void (APIENTRY* PFNANYGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (APIENTRY* PFNANYGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (APIENTRY* PFNANYGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint *programs);
typedef void (APIENTRY* PFNANYGLGENPROGRAMSARBPROC)(GLsizei n, GLuint *programs);
typedef void (APIENTRY* PFNANYGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble *params);
typedef void (APIENTRY* PFNANYGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRY* PFNANYGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble *params);
typedef void (APIENTRY* PFNANYGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRY* PFNANYGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void *string);
typedef GLboolean (APIENTRY* PFNANYGLISPROGRAMARBPROC)(GLuint program);

ANYGL_EXPORT extern PFNANYGLPROGRAMSTRINGARBPROC AnyGL_glProgramStringARB;
ANYGL_EXPORT extern PFNANYGLBINDPROGRAMARBPROC AnyGL_glBindProgramARB;
ANYGL_EXPORT extern PFNANYGLDELETEPROGRAMSARBPROC AnyGL_glDeleteProgramsARB;
ANYGL_EXPORT extern PFNANYGLGENPROGRAMSARBPROC AnyGL_glGenProgramsARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMENVPARAMETER4DARBPROC AnyGL_glProgramEnvParameter4dARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMENVPARAMETER4DVARBPROC AnyGL_glProgramEnvParameter4dvARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMENVPARAMETER4FARBPROC AnyGL_glProgramEnvParameter4fARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMENVPARAMETER4FVARBPROC AnyGL_glProgramEnvParameter4fvARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMLOCALPARAMETER4DARBPROC AnyGL_glProgramLocalParameter4dARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMLOCALPARAMETER4DVARBPROC AnyGL_glProgramLocalParameter4dvARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMLOCALPARAMETER4FARBPROC AnyGL_glProgramLocalParameter4fARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMLOCALPARAMETER4FVARBPROC AnyGL_glProgramLocalParameter4fvARB;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMENVPARAMETERDVARBPROC AnyGL_glGetProgramEnvParameterdvARB;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMENVPARAMETERFVARBPROC AnyGL_glGetProgramEnvParameterfvARB;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMLOCALPARAMETERDVARBPROC AnyGL_glGetProgramLocalParameterdvARB;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMLOCALPARAMETERFVARBPROC AnyGL_glGetProgramLocalParameterfvARB;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMIVARBPROC AnyGL_glGetProgramivARB;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMSTRINGARBPROC AnyGL_glGetProgramStringARB;
ANYGL_EXPORT extern PFNANYGLISPROGRAMARBPROC AnyGL_glIsProgramARB;

#ifndef ANYGL_NO_DEFINES
#define glProgramStringARB(target, format, len, string) ANYGL_CALL(AnyGL_glProgramStringARB)(target, format, len, string)
#define glBindProgramARB(target, program) ANYGL_CALL(AnyGL_glBindProgramARB)(target, program)
#define glDeleteProgramsARB(n, programs) ANYGL_CALL(AnyGL_glDeleteProgramsARB)(n, programs)
#define glGenProgramsARB(n, programs) ANYGL_CALL(AnyGL_glGenProgramsARB)(n, programs)
#define glProgramEnvParameter4dARB(target, index, x, y, z, w) ANYGL_CALL(AnyGL_glProgramEnvParameter4dARB)(target, index, x, y, z, w)
#define glProgramEnvParameter4dvARB(target, index, params) ANYGL_CALL(AnyGL_glProgramEnvParameter4dvARB)(target, index, params)
#define glProgramEnvParameter4fARB(target, index, x, y, z, w) ANYGL_CALL(AnyGL_glProgramEnvParameter4fARB)(target, index, x, y, z, w)
#define glProgramEnvParameter4fvARB(target, index, params) ANYGL_CALL(AnyGL_glProgramEnvParameter4fvARB)(target, index, params)
#define glProgramLocalParameter4dARB(target, index, x, y, z, w) ANYGL_CALL(AnyGL_glProgramLocalParameter4dARB)(target, index, x, y, z, w)
#define glProgramLocalParameter4dvARB(target, index, params) ANYGL_CALL(AnyGL_glProgramLocalParameter4dvARB)(target, index, params)
#define glProgramLocalParameter4fARB(target, index, x, y, z, w) ANYGL_CALL(AnyGL_glProgramLocalParameter4fARB)(target, index, x, y, z, w)
#define glProgramLocalParameter4fvARB(target, index, params) ANYGL_CALL(AnyGL_glProgramLocalParameter4fvARB)(target, index, params)
#define glGetProgramEnvParameterdvARB(target, index, params) ANYGL_CALL(AnyGL_glGetProgramEnvParameterdvARB)(target, index, params)
#define glGetProgramEnvParameterfvARB(target, index, params) ANYGL_CALL(AnyGL_glGetProgramEnvParameterfvARB)(target, index, params)
#define glGetProgramLocalParameterdvARB(target, index, params) ANYGL_CALL(AnyGL_glGetProgramLocalParameterdvARB)(target, index, params)
#define glGetProgramLocalParameterfvARB(target, index, params) ANYGL_CALL(AnyGL_glGetProgramLocalParameterfvARB)(target, index, params)
#define glGetProgramivARB(target, pname, params) ANYGL_CALL(AnyGL_glGetProgramivARB)(target, pname, params)
#define glGetProgramStringARB(target, pname, string) ANYGL_CALL(AnyGL_glGetProgramStringARB)(target, pname, string)
#define glIsProgramARB(program) ANYGL_CALL(AnyGL_glIsProgramARB)(program)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_fragment_program_shadow */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_fragment_shader */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_fragment_shader_interlock */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_framebuffer_no_attachments */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_framebuffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_framebuffer_sRGB */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_geometry_shader4 */
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);

ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTUREFACEARBPROC AnyGL_glFramebufferTextureFaceARB;

#ifndef ANYGL_NO_DEFINES
#define glProgramParameteriARB(program, pname, value) ANYGL_CALL(AnyGL_glProgramParameteri)(program, pname, value)
#define glFramebufferTextureARB(target, attachment, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture)(target, attachment, texture, level)
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) ANYGL_CALL(AnyGL_glFramebufferTextureLayer)(target, attachment, texture, level, layer)
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) ANYGL_CALL(AnyGL_glFramebufferTextureFaceARB)(target, attachment, texture, level, face)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_get_program_binary */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_get_texture_sub_image */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_gl_spirv */


#ifndef ANYGL_NO_DEFINES
#define glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) ANYGL_CALL(AnyGL_glSpecializeShader)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_gpu_shader5 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_gpu_shader_fp64 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_gpu_shader_int64 */
typedef void (APIENTRY* PFNANYGLUNIFORM1I64ARBPROC)(GLint location, GLint64 x);
typedef void (APIENTRY* PFNANYGLUNIFORM2I64ARBPROC)(GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRY* PFNANYGLUNIFORM3I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRY* PFNANYGLUNIFORM4I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRY* PFNANYGLUNIFORM1I64VARBPROC)(GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLUNIFORM2I64VARBPROC)(GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLUNIFORM3I64VARBPROC)(GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLUNIFORM4I64VARBPROC)(GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLUNIFORM1UI64ARBPROC)(GLint location, GLuint64 x);
typedef void (APIENTRY* PFNANYGLUNIFORM2UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRY* PFNANYGLUNIFORM3UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRY* PFNANYGLUNIFORM4UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRY* PFNANYGLUNIFORM1UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLUNIFORM2UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLUNIFORM3UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLUNIFORM4UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLGETUNIFORMI64VARBPROC)(GLuint program, GLint location, GLint64 *params);
typedef void (APIENTRY* PFNANYGLGETUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLuint64 *params);
typedef void (APIENTRY* PFNANYGLGETNUNIFORMI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
typedef void (APIENTRY* PFNANYGLGETNUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1I64ARBPROC)(GLuint program, GLint location, GLint64 x);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1UI64ARBPROC)(GLuint program, GLint location, GLuint64 x);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);

ANYGL_EXPORT extern PFNANYGLUNIFORM1I64ARBPROC AnyGL_glUniform1i64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM2I64ARBPROC AnyGL_glUniform2i64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM3I64ARBPROC AnyGL_glUniform3i64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM4I64ARBPROC AnyGL_glUniform4i64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM1I64VARBPROC AnyGL_glUniform1i64vARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM2I64VARBPROC AnyGL_glUniform2i64vARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM3I64VARBPROC AnyGL_glUniform3i64vARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM4I64VARBPROC AnyGL_glUniform4i64vARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM1UI64ARBPROC AnyGL_glUniform1ui64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM2UI64ARBPROC AnyGL_glUniform2ui64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM3UI64ARBPROC AnyGL_glUniform3ui64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM4UI64ARBPROC AnyGL_glUniform4ui64ARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM1UI64VARBPROC AnyGL_glUniform1ui64vARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM2UI64VARBPROC AnyGL_glUniform2ui64vARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM3UI64VARBPROC AnyGL_glUniform3ui64vARB;
ANYGL_EXPORT extern PFNANYGLUNIFORM4UI64VARBPROC AnyGL_glUniform4ui64vARB;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMI64VARBPROC AnyGL_glGetUniformi64vARB;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMUI64VARBPROC AnyGL_glGetUniformui64vARB;
ANYGL_EXPORT extern PFNANYGLGETNUNIFORMI64VARBPROC AnyGL_glGetnUniformi64vARB;
ANYGL_EXPORT extern PFNANYGLGETNUNIFORMUI64VARBPROC AnyGL_glGetnUniformui64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1I64ARBPROC AnyGL_glProgramUniform1i64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2I64ARBPROC AnyGL_glProgramUniform2i64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3I64ARBPROC AnyGL_glProgramUniform3i64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4I64ARBPROC AnyGL_glProgramUniform4i64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1I64VARBPROC AnyGL_glProgramUniform1i64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2I64VARBPROC AnyGL_glProgramUniform2i64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3I64VARBPROC AnyGL_glProgramUniform3i64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4I64VARBPROC AnyGL_glProgramUniform4i64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1UI64ARBPROC AnyGL_glProgramUniform1ui64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2UI64ARBPROC AnyGL_glProgramUniform2ui64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3UI64ARBPROC AnyGL_glProgramUniform3ui64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4UI64ARBPROC AnyGL_glProgramUniform4ui64ARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1UI64VARBPROC AnyGL_glProgramUniform1ui64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2UI64VARBPROC AnyGL_glProgramUniform2ui64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3UI64VARBPROC AnyGL_glProgramUniform3ui64vARB;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4UI64VARBPROC AnyGL_glProgramUniform4ui64vARB;

#ifndef ANYGL_NO_DEFINES
#define glUniform1i64ARB(location, x) ANYGL_CALL(AnyGL_glUniform1i64ARB)(location, x)
#define glUniform2i64ARB(location, x, y) ANYGL_CALL(AnyGL_glUniform2i64ARB)(location, x, y)
#define glUniform3i64ARB(location, x, y, z) ANYGL_CALL(AnyGL_glUniform3i64ARB)(location, x, y, z)
#define glUniform4i64ARB(location, x, y, z, w) ANYGL_CALL(AnyGL_glUniform4i64ARB)(location, x, y, z, w)
#define glUniform1i64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform1i64vARB)(location, count, value)
#define glUniform2i64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform2i64vARB)(location, count, value)
#define glUniform3i64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform3i64vARB)(location, count, value)
#define glUniform4i64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform4i64vARB)(location, count, value)
#define glUniform1ui64ARB(location, x) ANYGL_CALL(AnyGL_glUniform1ui64ARB)(location, x)
#define glUniform2ui64ARB(location, x, y) ANYGL_CALL(AnyGL_glUniform2ui64ARB)(location, x, y)
#define glUniform3ui64ARB(location, x, y, z) ANYGL_CALL(AnyGL_glUniform3ui64ARB)(location, x, y, z)
#define glUniform4ui64ARB(location, x, y, z, w) ANYGL_CALL(AnyGL_glUniform4ui64ARB)(location, x, y, z, w)
#define glUniform1ui64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform1ui64vARB)(location, count, value)
#define glUniform2ui64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform2ui64vARB)(location, count, value)
#define glUniform3ui64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform3ui64vARB)(location, count, value)
#define glUniform4ui64vARB(location, count, value) ANYGL_CALL(AnyGL_glUniform4ui64vARB)(location, count, value)
#define glGetUniformi64vARB(program, location, params) ANYGL_CALL(AnyGL_glGetUniformi64vARB)(program, location, params)
#define glGetUniformui64vARB(program, location, params) ANYGL_CALL(AnyGL_glGetUniformui64vARB)(program, location, params)
#define glGetnUniformi64vARB(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformi64vARB)(program, location, bufSize, params)
#define glGetnUniformui64vARB(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformui64vARB)(program, location, bufSize, params)
#define glProgramUniform1i64ARB(program, location, x) ANYGL_CALL(AnyGL_glProgramUniform1i64ARB)(program, location, x)
#define glProgramUniform2i64ARB(program, location, x, y) ANYGL_CALL(AnyGL_glProgramUniform2i64ARB)(program, location, x, y)
#define glProgramUniform3i64ARB(program, location, x, y, z) ANYGL_CALL(AnyGL_glProgramUniform3i64ARB)(program, location, x, y, z)
#define glProgramUniform4i64ARB(program, location, x, y, z, w) ANYGL_CALL(AnyGL_glProgramUniform4i64ARB)(program, location, x, y, z, w)
#define glProgramUniform1i64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1i64vARB)(program, location, count, value)
#define glProgramUniform2i64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2i64vARB)(program, location, count, value)
#define glProgramUniform3i64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3i64vARB)(program, location, count, value)
#define glProgramUniform4i64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4i64vARB)(program, location, count, value)
#define glProgramUniform1ui64ARB(program, location, x) ANYGL_CALL(AnyGL_glProgramUniform1ui64ARB)(program, location, x)
#define glProgramUniform2ui64ARB(program, location, x, y) ANYGL_CALL(AnyGL_glProgramUniform2ui64ARB)(program, location, x, y)
#define glProgramUniform3ui64ARB(program, location, x, y, z) ANYGL_CALL(AnyGL_glProgramUniform3ui64ARB)(program, location, x, y, z)
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) ANYGL_CALL(AnyGL_glProgramUniform4ui64ARB)(program, location, x, y, z, w)
#define glProgramUniform1ui64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1ui64vARB)(program, location, count, value)
#define glProgramUniform2ui64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2ui64vARB)(program, location, count, value)
#define glProgramUniform3ui64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3ui64vARB)(program, location, count, value)
#define glProgramUniform4ui64vARB(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4ui64vARB)(program, location, count, value)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_half_float_pixel */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_half_float_vertex */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_imaging */
typedef void (APIENTRY* PFNANYGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void (APIENTRY* PFNANYGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (APIENTRY* PFNANYGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void *table);
typedef void (APIENTRY* PFNANYGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (APIENTRY* PFNANYGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void *image);
typedef void (APIENTRY* PFNANYGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void (APIENTRY* PFNANYGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
typedef void (APIENTRY* PFNANYGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (APIENTRY* PFNANYGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (APIENTRY* PFNANYGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (APIENTRY* PFNANYGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (APIENTRY* PFNANYGLRESETHISTOGRAMPROC)(GLenum target);
typedef void (APIENTRY* PFNANYGLRESETMINMAXPROC)(GLenum target);

ANYGL_EXPORT extern PFNANYGLCOLORTABLEPROC AnyGL_glColorTable;
ANYGL_EXPORT extern PFNANYGLCOLORTABLEPARAMETERFVPROC AnyGL_glColorTableParameterfv;
ANYGL_EXPORT extern PFNANYGLCOLORTABLEPARAMETERIVPROC AnyGL_glColorTableParameteriv;
ANYGL_EXPORT extern PFNANYGLCOPYCOLORTABLEPROC AnyGL_glCopyColorTable;
ANYGL_EXPORT extern PFNANYGLGETCOLORTABLEPROC AnyGL_glGetColorTable;
ANYGL_EXPORT extern PFNANYGLGETCOLORTABLEPARAMETERFVPROC AnyGL_glGetColorTableParameterfv;
ANYGL_EXPORT extern PFNANYGLGETCOLORTABLEPARAMETERIVPROC AnyGL_glGetColorTableParameteriv;
ANYGL_EXPORT extern PFNANYGLCOLORSUBTABLEPROC AnyGL_glColorSubTable;
ANYGL_EXPORT extern PFNANYGLCOPYCOLORSUBTABLEPROC AnyGL_glCopyColorSubTable;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONFILTER1DPROC AnyGL_glConvolutionFilter1D;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONFILTER2DPROC AnyGL_glConvolutionFilter2D;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONPARAMETERFPROC AnyGL_glConvolutionParameterf;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONPARAMETERFVPROC AnyGL_glConvolutionParameterfv;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONPARAMETERIPROC AnyGL_glConvolutionParameteri;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONPARAMETERIVPROC AnyGL_glConvolutionParameteriv;
ANYGL_EXPORT extern PFNANYGLCOPYCONVOLUTIONFILTER1DPROC AnyGL_glCopyConvolutionFilter1D;
ANYGL_EXPORT extern PFNANYGLCOPYCONVOLUTIONFILTER2DPROC AnyGL_glCopyConvolutionFilter2D;
ANYGL_EXPORT extern PFNANYGLGETCONVOLUTIONFILTERPROC AnyGL_glGetConvolutionFilter;
ANYGL_EXPORT extern PFNANYGLGETCONVOLUTIONPARAMETERFVPROC AnyGL_glGetConvolutionParameterfv;
ANYGL_EXPORT extern PFNANYGLGETCONVOLUTIONPARAMETERIVPROC AnyGL_glGetConvolutionParameteriv;
ANYGL_EXPORT extern PFNANYGLGETSEPARABLEFILTERPROC AnyGL_glGetSeparableFilter;
ANYGL_EXPORT extern PFNANYGLSEPARABLEFILTER2DPROC AnyGL_glSeparableFilter2D;
ANYGL_EXPORT extern PFNANYGLGETHISTOGRAMPROC AnyGL_glGetHistogram;
ANYGL_EXPORT extern PFNANYGLGETHISTOGRAMPARAMETERFVPROC AnyGL_glGetHistogramParameterfv;
ANYGL_EXPORT extern PFNANYGLGETHISTOGRAMPARAMETERIVPROC AnyGL_glGetHistogramParameteriv;
ANYGL_EXPORT extern PFNANYGLGETMINMAXPROC AnyGL_glGetMinmax;
ANYGL_EXPORT extern PFNANYGLGETMINMAXPARAMETERFVPROC AnyGL_glGetMinmaxParameterfv;
ANYGL_EXPORT extern PFNANYGLGETMINMAXPARAMETERIVPROC AnyGL_glGetMinmaxParameteriv;
ANYGL_EXPORT extern PFNANYGLHISTOGRAMPROC AnyGL_glHistogram;
ANYGL_EXPORT extern PFNANYGLMINMAXPROC AnyGL_glMinmax;
ANYGL_EXPORT extern PFNANYGLRESETHISTOGRAMPROC AnyGL_glResetHistogram;
ANYGL_EXPORT extern PFNANYGLRESETMINMAXPROC AnyGL_glResetMinmax;

#ifndef ANYGL_NO_DEFINES
#define glColorTable(target, internalformat, width, format, type, table) ANYGL_CALL(AnyGL_glColorTable)(target, internalformat, width, format, type, table)
#define glColorTableParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glColorTableParameterfv)(target, pname, params)
#define glColorTableParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glColorTableParameteriv)(target, pname, params)
#define glCopyColorTable(target, internalformat, x, y, width) ANYGL_CALL(AnyGL_glCopyColorTable)(target, internalformat, x, y, width)
#define glGetColorTable(target, format, type, table) ANYGL_CALL(AnyGL_glGetColorTable)(target, format, type, table)
#define glGetColorTableParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glGetColorTableParameterfv)(target, pname, params)
#define glGetColorTableParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetColorTableParameteriv)(target, pname, params)
#define glColorSubTable(target, start, count, format, type, data) ANYGL_CALL(AnyGL_glColorSubTable)(target, start, count, format, type, data)
#define glCopyColorSubTable(target, start, x, y, width) ANYGL_CALL(AnyGL_glCopyColorSubTable)(target, start, x, y, width)
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) ANYGL_CALL(AnyGL_glConvolutionFilter1D)(target, internalformat, width, format, type, image)
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) ANYGL_CALL(AnyGL_glConvolutionFilter2D)(target, internalformat, width, height, format, type, image)
#define glConvolutionParameterf(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameterf)(target, pname, params)
#define glConvolutionParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameterfv)(target, pname, params)
#define glConvolutionParameteri(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameteri)(target, pname, params)
#define glConvolutionParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameteriv)(target, pname, params)
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) ANYGL_CALL(AnyGL_glCopyConvolutionFilter1D)(target, internalformat, x, y, width)
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) ANYGL_CALL(AnyGL_glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height)
#define glGetConvolutionFilter(target, format, type, image) ANYGL_CALL(AnyGL_glGetConvolutionFilter)(target, format, type, image)
#define glGetConvolutionParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glGetConvolutionParameterfv)(target, pname, params)
#define glGetConvolutionParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetConvolutionParameteriv)(target, pname, params)
#define glGetSeparableFilter(target, format, type, row, column, span) ANYGL_CALL(AnyGL_glGetSeparableFilter)(target, format, type, row, column, span)
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) ANYGL_CALL(AnyGL_glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column)
#define glGetHistogram(target, reset, format, type, values) ANYGL_CALL(AnyGL_glGetHistogram)(target, reset, format, type, values)
#define glGetHistogramParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glGetHistogramParameterfv)(target, pname, params)
#define glGetHistogramParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetHistogramParameteriv)(target, pname, params)
#define glGetMinmax(target, reset, format, type, values) ANYGL_CALL(AnyGL_glGetMinmax)(target, reset, format, type, values)
#define glGetMinmaxParameterfv(target, pname, params) ANYGL_CALL(AnyGL_glGetMinmaxParameterfv)(target, pname, params)
#define glGetMinmaxParameteriv(target, pname, params) ANYGL_CALL(AnyGL_glGetMinmaxParameteriv)(target, pname, params)
#define glHistogram(target, width, internalformat, sink) ANYGL_CALL(AnyGL_glHistogram)(target, width, internalformat, sink)
#define glMinmax(target, internalformat, sink) ANYGL_CALL(AnyGL_glMinmax)(target, internalformat, sink)
#define glResetHistogram(target) ANYGL_CALL(AnyGL_glResetHistogram)(target)
#define glResetMinmax(target) ANYGL_CALL(AnyGL_glResetMinmax)(target)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_indirect_parameters */


#ifndef ANYGL_NO_DEFINES
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawArraysIndirectCount)(mode, indirect, drawcount, maxdrawcount, stride)
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawElementsIndirectCount)(mode, type, indirect, drawcount, maxdrawcount, stride)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_instanced_arrays */


#ifndef ANYGL_NO_DEFINES
#define glVertexAttribDivisorARB(index, divisor) ANYGL_CALL(AnyGL_glVertexAttribDivisor)(index, divisor)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_internalformat_query */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_internalformat_query2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_invalidate_subdata */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_map_buffer_alignment */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_map_buffer_range */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_matrix_palette */
typedef void (APIENTRY* PFNANYGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
typedef void (APIENTRY* PFNANYGLMATRIXINDEXUBVARBPROC)(GLint size, const GLubyte *indices);
typedef void (APIENTRY* PFNANYGLMATRIXINDEXUSVARBPROC)(GLint size, const GLushort *indices);
typedef void (APIENTRY* PFNANYGLMATRIXINDEXUIVARBPROC)(GLint size, const GLuint *indices);
typedef void (APIENTRY* PFNANYGLMATRIXINDEXPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);

ANYGL_EXPORT extern PFNANYGLCURRENTPALETTEMATRIXARBPROC AnyGL_glCurrentPaletteMatrixARB;
ANYGL_EXPORT extern PFNANYGLMATRIXINDEXUBVARBPROC AnyGL_glMatrixIndexubvARB;
ANYGL_EXPORT extern PFNANYGLMATRIXINDEXUSVARBPROC AnyGL_glMatrixIndexusvARB;
ANYGL_EXPORT extern PFNANYGLMATRIXINDEXUIVARBPROC AnyGL_glMatrixIndexuivARB;
ANYGL_EXPORT extern PFNANYGLMATRIXINDEXPOINTERARBPROC AnyGL_glMatrixIndexPointerARB;

#ifndef ANYGL_NO_DEFINES
#define glCurrentPaletteMatrixARB(index) ANYGL_CALL(AnyGL_glCurrentPaletteMatrixARB)(index)
#define glMatrixIndexubvARB(size, indices) ANYGL_CALL(AnyGL_glMatrixIndexubvARB)(size, indices)
#define glMatrixIndexusvARB(size, indices) ANYGL_CALL(AnyGL_glMatrixIndexusvARB)(size, indices)
#define glMatrixIndexuivARB(size, indices) ANYGL_CALL(AnyGL_glMatrixIndexuivARB)(size, indices)
#define glMatrixIndexPointerARB(size, type, stride, pointer) ANYGL_CALL(AnyGL_glMatrixIndexPointerARB)(size, type, stride, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_multi_bind */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_multi_draw_indirect */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_multisample */


#ifndef ANYGL_NO_DEFINES
#define glSampleCoverageARB(value, invert) ANYGL_CALL(AnyGL_glSampleCoverage)(value, invert)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_multitexture */


#ifndef ANYGL_NO_DEFINES
#define glActiveTextureARB(texture) ANYGL_CALL(AnyGL_glActiveTexture)(texture)
#define glClientActiveTextureARB(texture) ANYGL_CALL(AnyGL_glClientActiveTexture)(texture)
#define glMultiTexCoord1dARB(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1d)(target, s)
#define glMultiTexCoord1dvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1dv)(target, v)
#define glMultiTexCoord1fARB(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1f)(target, s)
#define glMultiTexCoord1fvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1fv)(target, v)
#define glMultiTexCoord1iARB(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1i)(target, s)
#define glMultiTexCoord1ivARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1iv)(target, v)
#define glMultiTexCoord1sARB(target, s) ANYGL_CALL(AnyGL_glMultiTexCoord1s)(target, s)
#define glMultiTexCoord1svARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord1sv)(target, v)
#define glMultiTexCoord2dARB(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2d)(target, s, t)
#define glMultiTexCoord2dvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2dv)(target, v)
#define glMultiTexCoord2fARB(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2f)(target, s, t)
#define glMultiTexCoord2fvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2fv)(target, v)
#define glMultiTexCoord2iARB(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2i)(target, s, t)
#define glMultiTexCoord2ivARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2iv)(target, v)
#define glMultiTexCoord2sARB(target, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2s)(target, s, t)
#define glMultiTexCoord2svARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord2sv)(target, v)
#define glMultiTexCoord3dARB(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3d)(target, s, t, r)
#define glMultiTexCoord3dvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3dv)(target, v)
#define glMultiTexCoord3fARB(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3f)(target, s, t, r)
#define glMultiTexCoord3fvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3fv)(target, v)
#define glMultiTexCoord3iARB(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3i)(target, s, t, r)
#define glMultiTexCoord3ivARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3iv)(target, v)
#define glMultiTexCoord3sARB(target, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3s)(target, s, t, r)
#define glMultiTexCoord3svARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord3sv)(target, v)
#define glMultiTexCoord4dARB(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4d)(target, s, t, r, q)
#define glMultiTexCoord4dvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4dv)(target, v)
#define glMultiTexCoord4fARB(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4f)(target, s, t, r, q)
#define glMultiTexCoord4fvARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4fv)(target, v)
#define glMultiTexCoord4iARB(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4i)(target, s, t, r, q)
#define glMultiTexCoord4ivARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4iv)(target, v)
#define glMultiTexCoord4sARB(target, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4s)(target, s, t, r, q)
#define glMultiTexCoord4svARB(target, v) ANYGL_CALL(AnyGL_glMultiTexCoord4sv)(target, v)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_occlusion_query */


#ifndef ANYGL_NO_DEFINES
#define glGenQueriesARB(n, ids) ANYGL_CALL(AnyGL_glGenQueries)(n, ids)
#define glDeleteQueriesARB(n, ids) ANYGL_CALL(AnyGL_glDeleteQueries)(n, ids)
#define glIsQueryARB(id) ANYGL_CALL(AnyGL_glIsQuery)(id)
#define glBeginQueryARB(target, id) ANYGL_CALL(AnyGL_glBeginQuery)(target, id)
#define glEndQueryARB(target) ANYGL_CALL(AnyGL_glEndQuery)(target)
#define glGetQueryivARB(target, pname, params) ANYGL_CALL(AnyGL_glGetQueryiv)(target, pname, params)
#define glGetQueryObjectivARB(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectiv)(id, pname, params)
#define glGetQueryObjectuivARB(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectuiv)(id, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_occlusion_query2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_parallel_shader_compile */


#ifndef ANYGL_NO_DEFINES
#define glMaxShaderCompilerThreadsARB(count) ANYGL_CALL(AnyGL_glMaxShaderCompilerThreadsKHR)(count)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_pipeline_statistics_query */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_pixel_buffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_point_parameters */


#ifndef ANYGL_NO_DEFINES
#define glPointParameterfARB(pname, param) ANYGL_CALL(AnyGL_glPointParameterf)(pname, param)
#define glPointParameterfvARB(pname, params) ANYGL_CALL(AnyGL_glPointParameterfv)(pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_point_sprite */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_polygon_offset_clamp */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_post_depth_coverage */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_program_interface_query */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_provoking_vertex */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_query_buffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_robust_buffer_access_behavior */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_robustness */


#ifndef ANYGL_NO_DEFINES
#define glGetGraphicsResetStatusARB() ANYGL_CALL(AnyGL_glGetGraphicsResetStatus)()
#define glGetnTexImageARB(target, level, format, type, bufSize, img) ANYGL_CALL(AnyGL_glGetnTexImage)(target, level, format, type, bufSize, img)
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) ANYGL_CALL(AnyGL_glReadnPixels)(x, y, width, height, format, type, bufSize, data)
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) ANYGL_CALL(AnyGL_glGetnCompressedTexImage)(target, lod, bufSize, img)
#define glGetnUniformfvARB(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformfv)(program, location, bufSize, params)
#define glGetnUniformivARB(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformiv)(program, location, bufSize, params)
#define glGetnUniformuivARB(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformuiv)(program, location, bufSize, params)
#define glGetnUniformdvARB(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformdv)(program, location, bufSize, params)
#define glGetnMapdvARB(target, query, bufSize, v) ANYGL_CALL(AnyGL_glGetnMapdv)(target, query, bufSize, v)
#define glGetnMapfvARB(target, query, bufSize, v) ANYGL_CALL(AnyGL_glGetnMapfv)(target, query, bufSize, v)
#define glGetnMapivARB(target, query, bufSize, v) ANYGL_CALL(AnyGL_glGetnMapiv)(target, query, bufSize, v)
#define glGetnPixelMapfvARB(map, bufSize, values) ANYGL_CALL(AnyGL_glGetnPixelMapfv)(map, bufSize, values)
#define glGetnPixelMapuivARB(map, bufSize, values) ANYGL_CALL(AnyGL_glGetnPixelMapuiv)(map, bufSize, values)
#define glGetnPixelMapusvARB(map, bufSize, values) ANYGL_CALL(AnyGL_glGetnPixelMapusv)(map, bufSize, values)
#define glGetnPolygonStippleARB(bufSize, pattern) ANYGL_CALL(AnyGL_glGetnPolygonStipple)(bufSize, pattern)
#define glGetnColorTableARB(target, format, type, bufSize, table) ANYGL_CALL(AnyGL_glGetnColorTable)(target, format, type, bufSize, table)
#define glGetnConvolutionFilterARB(target, format, type, bufSize, image) ANYGL_CALL(AnyGL_glGetnConvolutionFilter)(target, format, type, bufSize, image)
#define glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span) ANYGL_CALL(AnyGL_glGetnSeparableFilter)(target, format, type, rowBufSize, row, columnBufSize, column, span)
#define glGetnHistogramARB(target, reset, format, type, bufSize, values) ANYGL_CALL(AnyGL_glGetnHistogram)(target, reset, format, type, bufSize, values)
#define glGetnMinmaxARB(target, reset, format, type, bufSize, values) ANYGL_CALL(AnyGL_glGetnMinmax)(target, reset, format, type, bufSize, values)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_robustness_isolation */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sample_locations */
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLEVALUATEDEPTHVALUESARBPROC)();

ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC AnyGL_glFramebufferSampleLocationsfvARB;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC AnyGL_glNamedFramebufferSampleLocationsfvARB;
ANYGL_EXPORT extern PFNANYGLEVALUATEDEPTHVALUESARBPROC AnyGL_glEvaluateDepthValuesARB;

#ifndef ANYGL_NO_DEFINES
#define glFramebufferSampleLocationsfvARB(target, start, count, v) ANYGL_CALL(AnyGL_glFramebufferSampleLocationsfvARB)(target, start, count, v)
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) ANYGL_CALL(AnyGL_glNamedFramebufferSampleLocationsfvARB)(framebuffer, start, count, v)
#define glEvaluateDepthValuesARB() ANYGL_CALL(AnyGL_glEvaluateDepthValuesARB)()
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sample_shading */


#ifndef ANYGL_NO_DEFINES
#define glMinSampleShadingARB(value) ANYGL_CALL(AnyGL_glMinSampleShading)(value)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sampler_objects */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_seamless_cube_map */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_seamless_cubemap_per_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_separate_shader_objects */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_atomic_counter_ops */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_atomic_counters */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_ballot */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_bit_encoding */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_clock */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_draw_parameters */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_group_vote */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_image_load_store */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_image_size */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_objects */
typedef void (APIENTRY* PFNANYGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef GLhandleARB (APIENTRY* PFNANYGLGETHANDLEARBPROC)(GLenum pname);
typedef void (APIENTRY* PFNANYGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
typedef void (APIENTRY* PFNANYGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);

ANYGL_EXPORT extern PFNANYGLDELETEOBJECTARBPROC AnyGL_glDeleteObjectARB;
ANYGL_EXPORT extern PFNANYGLGETHANDLEARBPROC AnyGL_glGetHandleARB;
ANYGL_EXPORT extern PFNANYGLGETOBJECTPARAMETERFVARBPROC AnyGL_glGetObjectParameterfvARB;
ANYGL_EXPORT extern PFNANYGLGETOBJECTPARAMETERIVARBPROC AnyGL_glGetObjectParameterivARB;
ANYGL_EXPORT extern PFNANYGLGETINFOLOGARBPROC AnyGL_glGetInfoLogARB;
ANYGL_EXPORT extern PFNANYGLGETATTACHEDOBJECTSARBPROC AnyGL_glGetAttachedObjectsARB;

#ifndef ANYGL_NO_DEFINES
#define glDeleteObjectARB(obj) ANYGL_CALL(AnyGL_glDeleteObjectARB)(obj)
#define glGetHandleARB(pname) ANYGL_CALL(AnyGL_glGetHandleARB)(pname)
#define glDetachObjectARB(containerObj, attachedObj) ANYGL_CALL(AnyGL_glDetachShader)(containerObj, attachedObj)
#define glCreateShaderObjectARB(shaderType) ANYGL_CALL(AnyGL_glCreateShader)(shaderType)
#define glShaderSourceARB(shaderObj, count, string, length) ANYGL_CALL(AnyGL_glShaderSource)(shaderObj, count, string, length)
#define glCompileShaderARB(shaderObj) ANYGL_CALL(AnyGL_glCompileShader)(shaderObj)
#define glCreateProgramObjectARB() ANYGL_CALL(AnyGL_glCreateProgram)()
#define glAttachObjectARB(containerObj, obj) ANYGL_CALL(AnyGL_glAttachShader)(containerObj, obj)
#define glLinkProgramARB(programObj) ANYGL_CALL(AnyGL_glLinkProgram)(programObj)
#define glUseProgramObjectARB(programObj) ANYGL_CALL(AnyGL_glUseProgram)(programObj)
#define glValidateProgramARB(programObj) ANYGL_CALL(AnyGL_glValidateProgram)(programObj)
#define glUniform1fARB(location, v0) ANYGL_CALL(AnyGL_glUniform1f)(location, v0)
#define glUniform2fARB(location, v0, v1) ANYGL_CALL(AnyGL_glUniform2f)(location, v0, v1)
#define glUniform3fARB(location, v0, v1, v2) ANYGL_CALL(AnyGL_glUniform3f)(location, v0, v1, v2)
#define glUniform4fARB(location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glUniform4f)(location, v0, v1, v2, v3)
#define glUniform1iARB(location, v0) ANYGL_CALL(AnyGL_glUniform1i)(location, v0)
#define glUniform2iARB(location, v0, v1) ANYGL_CALL(AnyGL_glUniform2i)(location, v0, v1)
#define glUniform3iARB(location, v0, v1, v2) ANYGL_CALL(AnyGL_glUniform3i)(location, v0, v1, v2)
#define glUniform4iARB(location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glUniform4i)(location, v0, v1, v2, v3)
#define glUniform1fvARB(location, count, value) ANYGL_CALL(AnyGL_glUniform1fv)(location, count, value)
#define glUniform2fvARB(location, count, value) ANYGL_CALL(AnyGL_glUniform2fv)(location, count, value)
#define glUniform3fvARB(location, count, value) ANYGL_CALL(AnyGL_glUniform3fv)(location, count, value)
#define glUniform4fvARB(location, count, value) ANYGL_CALL(AnyGL_glUniform4fv)(location, count, value)
#define glUniform1ivARB(location, count, value) ANYGL_CALL(AnyGL_glUniform1iv)(location, count, value)
#define glUniform2ivARB(location, count, value) ANYGL_CALL(AnyGL_glUniform2iv)(location, count, value)
#define glUniform3ivARB(location, count, value) ANYGL_CALL(AnyGL_glUniform3iv)(location, count, value)
#define glUniform4ivARB(location, count, value) ANYGL_CALL(AnyGL_glUniform4iv)(location, count, value)
#define glUniformMatrix2fvARB(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix2fv)(location, count, transpose, value)
#define glUniformMatrix3fvARB(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix3fv)(location, count, transpose, value)
#define glUniformMatrix4fvARB(location, count, transpose, value) ANYGL_CALL(AnyGL_glUniformMatrix4fv)(location, count, transpose, value)
#define glGetObjectParameterfvARB(obj, pname, params) ANYGL_CALL(AnyGL_glGetObjectParameterfvARB)(obj, pname, params)
#define glGetObjectParameterivARB(obj, pname, params) ANYGL_CALL(AnyGL_glGetObjectParameterivARB)(obj, pname, params)
#define glGetInfoLogARB(obj, maxLength, length, infoLog) ANYGL_CALL(AnyGL_glGetInfoLogARB)(obj, maxLength, length, infoLog)
#define glGetAttachedObjectsARB(containerObj, maxCount, count, obj) ANYGL_CALL(AnyGL_glGetAttachedObjectsARB)(containerObj, maxCount, count, obj)
#define glGetUniformLocationARB(programObj, name) ANYGL_CALL(AnyGL_glGetUniformLocation)(programObj, name)
#define glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name) ANYGL_CALL(AnyGL_glGetActiveUniform)(programObj, index, maxLength, length, size, type, name)
#define glGetUniformfvARB(programObj, location, params) ANYGL_CALL(AnyGL_glGetUniformfv)(programObj, location, params)
#define glGetUniformivARB(programObj, location, params) ANYGL_CALL(AnyGL_glGetUniformiv)(programObj, location, params)
#define glGetShaderSourceARB(obj, maxLength, length, source) ANYGL_CALL(AnyGL_glGetShaderSource)(obj, maxLength, length, source)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_precision */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_stencil_export */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_storage_buffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_subroutine */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_texture_image_samples */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_texture_lod */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shader_viewport_layer_array */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shading_language_100 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shading_language_420pack */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shading_language_include */
typedef void (APIENTRY* PFNANYGLNAMEDSTRINGARBPROC)(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
typedef void (APIENTRY* PFNANYGLDELETENAMEDSTRINGARBPROC)(GLint namelen, const GLchar *name);
typedef void (APIENTRY* PFNANYGLCOMPILESHADERINCLUDEARBPROC)(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
typedef GLboolean (APIENTRY* PFNANYGLISNAMEDSTRINGARBPROC)(GLint namelen, const GLchar *name);
typedef void (APIENTRY* PFNANYGLGETNAMEDSTRINGARBPROC)(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void (APIENTRY* PFNANYGLGETNAMEDSTRINGIVARBPROC)(GLint namelen, const GLchar *name, GLenum pname, GLint *params);

ANYGL_EXPORT extern PFNANYGLNAMEDSTRINGARBPROC AnyGL_glNamedStringARB;
ANYGL_EXPORT extern PFNANYGLDELETENAMEDSTRINGARBPROC AnyGL_glDeleteNamedStringARB;
ANYGL_EXPORT extern PFNANYGLCOMPILESHADERINCLUDEARBPROC AnyGL_glCompileShaderIncludeARB;
ANYGL_EXPORT extern PFNANYGLISNAMEDSTRINGARBPROC AnyGL_glIsNamedStringARB;
ANYGL_EXPORT extern PFNANYGLGETNAMEDSTRINGARBPROC AnyGL_glGetNamedStringARB;
ANYGL_EXPORT extern PFNANYGLGETNAMEDSTRINGIVARBPROC AnyGL_glGetNamedStringivARB;

#ifndef ANYGL_NO_DEFINES
#define glNamedStringARB(type, namelen, name, stringlen, string) ANYGL_CALL(AnyGL_glNamedStringARB)(type, namelen, name, stringlen, string)
#define glDeleteNamedStringARB(namelen, name) ANYGL_CALL(AnyGL_glDeleteNamedStringARB)(namelen, name)
#define glCompileShaderIncludeARB(shader, count, path, length) ANYGL_CALL(AnyGL_glCompileShaderIncludeARB)(shader, count, path, length)
#define glIsNamedStringARB(namelen, name) ANYGL_CALL(AnyGL_glIsNamedStringARB)(namelen, name)
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) ANYGL_CALL(AnyGL_glGetNamedStringARB)(namelen, name, bufSize, stringlen, string)
#define glGetNamedStringivARB(namelen, name, pname, params) ANYGL_CALL(AnyGL_glGetNamedStringivARB)(namelen, name, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shading_language_packing */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shadow */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_shadow_ambient */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sparse_buffer */
typedef void (APIENTRY* PFNANYGLBUFFERPAGECOMMITMENTARBPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERPAGECOMMITMENTARBPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);

ANYGL_EXPORT extern PFNANYGLBUFFERPAGECOMMITMENTARBPROC AnyGL_glBufferPageCommitmentARB;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERPAGECOMMITMENTEXTPROC AnyGL_glNamedBufferPageCommitmentEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERPAGECOMMITMENTARBPROC AnyGL_glNamedBufferPageCommitmentARB;

#ifndef ANYGL_NO_DEFINES
#define glBufferPageCommitmentARB(target, offset, size, commit) ANYGL_CALL(AnyGL_glBufferPageCommitmentARB)(target, offset, size, commit)
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) ANYGL_CALL(AnyGL_glNamedBufferPageCommitmentEXT)(buffer, offset, size, commit)
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) ANYGL_CALL(AnyGL_glNamedBufferPageCommitmentARB)(buffer, offset, size, commit)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sparse_texture */
typedef void (APIENTRY* PFNANYGLTEXPAGECOMMITMENTARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);

ANYGL_EXPORT extern PFNANYGLTEXPAGECOMMITMENTARBPROC AnyGL_glTexPageCommitmentARB;

#ifndef ANYGL_NO_DEFINES
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) ANYGL_CALL(AnyGL_glTexPageCommitmentARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sparse_texture2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sparse_texture_clamp */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_spirv_extensions */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_stencil_texturing */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_sync */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_tessellation_shader */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_barrier */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_border_clamp */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_buffer_object */


#ifndef ANYGL_NO_DEFINES
#define glTexBufferARB(target, internalformat, buffer) ANYGL_CALL(AnyGL_glTexBuffer)(target, internalformat, buffer)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_buffer_object_rgb32 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_buffer_range */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_compression */


#ifndef ANYGL_NO_DEFINES
#define glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data)
#define glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data)
#define glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data)
#define glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
#define glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data)
#define glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data)
#define glGetCompressedTexImageARB(target, level, img) ANYGL_CALL(AnyGL_glGetCompressedTexImage)(target, level, img)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_compression_bptc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_compression_rgtc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_cube_map */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_cube_map_array */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_env_add */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_env_combine */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_env_crossbar */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_env_dot3 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_filter_anisotropic */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_filter_minmax */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_gather */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_mirror_clamp_to_edge */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_mirrored_repeat */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_multisample */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_non_power_of_two */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_query_levels */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_query_lod */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_rectangle */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_rg */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_rgb10_a2ui */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_stencil8 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_storage */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_storage_multisample */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_swizzle */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_texture_view */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_timer_query */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_transform_feedback2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_transform_feedback3 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_transform_feedback_instanced */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_transform_feedback_overflow_query */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_transpose_matrix */


#ifndef ANYGL_NO_DEFINES
#define glLoadTransposeMatrixfARB(m) ANYGL_CALL(AnyGL_glLoadTransposeMatrixf)(m)
#define glLoadTransposeMatrixdARB(m) ANYGL_CALL(AnyGL_glLoadTransposeMatrixd)(m)
#define glMultTransposeMatrixfARB(m) ANYGL_CALL(AnyGL_glMultTransposeMatrixf)(m)
#define glMultTransposeMatrixdARB(m) ANYGL_CALL(AnyGL_glMultTransposeMatrixd)(m)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_uniform_buffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_array_bgra */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_array_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_attrib_64bit */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_attrib_binding */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_blend */
typedef void (APIENTRY* PFNANYGLWEIGHTBVARBPROC)(GLint size, const GLbyte *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTSVARBPROC)(GLint size, const GLshort *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTIVARBPROC)(GLint size, const GLint *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTFVARBPROC)(GLint size, const GLfloat *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTDVARBPROC)(GLint size, const GLdouble *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTUBVARBPROC)(GLint size, const GLubyte *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTUSVARBPROC)(GLint size, const GLushort *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTUIVARBPROC)(GLint size, const GLuint *weights);
typedef void (APIENTRY* PFNANYGLWEIGHTPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLVERTEXBLENDARBPROC)(GLint count);

ANYGL_EXPORT extern PFNANYGLWEIGHTBVARBPROC AnyGL_glWeightbvARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTSVARBPROC AnyGL_glWeightsvARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTIVARBPROC AnyGL_glWeightivARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTFVARBPROC AnyGL_glWeightfvARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTDVARBPROC AnyGL_glWeightdvARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTUBVARBPROC AnyGL_glWeightubvARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTUSVARBPROC AnyGL_glWeightusvARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTUIVARBPROC AnyGL_glWeightuivARB;
ANYGL_EXPORT extern PFNANYGLWEIGHTPOINTERARBPROC AnyGL_glWeightPointerARB;
ANYGL_EXPORT extern PFNANYGLVERTEXBLENDARBPROC AnyGL_glVertexBlendARB;

#ifndef ANYGL_NO_DEFINES
#define glWeightbvARB(size, weights) ANYGL_CALL(AnyGL_glWeightbvARB)(size, weights)
#define glWeightsvARB(size, weights) ANYGL_CALL(AnyGL_glWeightsvARB)(size, weights)
#define glWeightivARB(size, weights) ANYGL_CALL(AnyGL_glWeightivARB)(size, weights)
#define glWeightfvARB(size, weights) ANYGL_CALL(AnyGL_glWeightfvARB)(size, weights)
#define glWeightdvARB(size, weights) ANYGL_CALL(AnyGL_glWeightdvARB)(size, weights)
#define glWeightubvARB(size, weights) ANYGL_CALL(AnyGL_glWeightubvARB)(size, weights)
#define glWeightusvARB(size, weights) ANYGL_CALL(AnyGL_glWeightusvARB)(size, weights)
#define glWeightuivARB(size, weights) ANYGL_CALL(AnyGL_glWeightuivARB)(size, weights)
#define glWeightPointerARB(size, type, stride, pointer) ANYGL_CALL(AnyGL_glWeightPointerARB)(size, type, stride, pointer)
#define glVertexBlendARB(count) ANYGL_CALL(AnyGL_glVertexBlendARB)(count)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_buffer_object */


#ifndef ANYGL_NO_DEFINES
#define glBindBufferARB(target, buffer) ANYGL_CALL(AnyGL_glBindBuffer)(target, buffer)
#define glDeleteBuffersARB(n, buffers) ANYGL_CALL(AnyGL_glDeleteBuffers)(n, buffers)
#define glGenBuffersARB(n, buffers) ANYGL_CALL(AnyGL_glGenBuffers)(n, buffers)
#define glIsBufferARB(buffer) ANYGL_CALL(AnyGL_glIsBuffer)(buffer)
#define glBufferDataARB(target, size, data, usage) ANYGL_CALL(AnyGL_glBufferData)(target, size, data, usage)
#define glBufferSubDataARB(target, offset, size, data) ANYGL_CALL(AnyGL_glBufferSubData)(target, offset, size, data)
#define glGetBufferSubDataARB(target, offset, size, data) ANYGL_CALL(AnyGL_glGetBufferSubData)(target, offset, size, data)
#define glMapBufferARB(target, access) ANYGL_CALL(AnyGL_glMapBuffer)(target, access)
#define glUnmapBufferARB(target) ANYGL_CALL(AnyGL_glUnmapBuffer)(target)
#define glGetBufferParameterivARB(target, pname, params) ANYGL_CALL(AnyGL_glGetBufferParameteriv)(target, pname, params)
#define glGetBufferPointervARB(target, pname, params) ANYGL_CALL(AnyGL_glGetBufferPointerv)(target, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_program */


#ifndef ANYGL_NO_DEFINES
#define glVertexAttrib1dARB(index, x) ANYGL_CALL(AnyGL_glVertexAttrib1d)(index, x)
#define glVertexAttrib1dvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib1dv)(index, v)
#define glVertexAttrib1fARB(index, x) ANYGL_CALL(AnyGL_glVertexAttrib1f)(index, x)
#define glVertexAttrib1fvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib1fv)(index, v)
#define glVertexAttrib1sARB(index, x) ANYGL_CALL(AnyGL_glVertexAttrib1s)(index, x)
#define glVertexAttrib1svARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib1sv)(index, v)
#define glVertexAttrib2dARB(index, x, y) ANYGL_CALL(AnyGL_glVertexAttrib2d)(index, x, y)
#define glVertexAttrib2dvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib2dv)(index, v)
#define glVertexAttrib2fARB(index, x, y) ANYGL_CALL(AnyGL_glVertexAttrib2f)(index, x, y)
#define glVertexAttrib2fvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib2fv)(index, v)
#define glVertexAttrib2sARB(index, x, y) ANYGL_CALL(AnyGL_glVertexAttrib2s)(index, x, y)
#define glVertexAttrib2svARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib2sv)(index, v)
#define glVertexAttrib3dARB(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttrib3d)(index, x, y, z)
#define glVertexAttrib3dvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib3dv)(index, v)
#define glVertexAttrib3fARB(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttrib3f)(index, x, y, z)
#define glVertexAttrib3fvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib3fv)(index, v)
#define glVertexAttrib3sARB(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttrib3s)(index, x, y, z)
#define glVertexAttrib3svARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib3sv)(index, v)
#define glVertexAttrib4NbvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nbv)(index, v)
#define glVertexAttrib4NivARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Niv)(index, v)
#define glVertexAttrib4NsvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nsv)(index, v)
#define glVertexAttrib4NubARB(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4Nub)(index, x, y, z, w)
#define glVertexAttrib4NubvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nubv)(index, v)
#define glVertexAttrib4NuivARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nuiv)(index, v)
#define glVertexAttrib4NusvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4Nusv)(index, v)
#define glVertexAttrib4bvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4bv)(index, v)
#define glVertexAttrib4dARB(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4d)(index, x, y, z, w)
#define glVertexAttrib4dvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4dv)(index, v)
#define glVertexAttrib4fARB(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4f)(index, x, y, z, w)
#define glVertexAttrib4fvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4fv)(index, v)
#define glVertexAttrib4ivARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4iv)(index, v)
#define glVertexAttrib4sARB(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttrib4s)(index, x, y, z, w)
#define glVertexAttrib4svARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4sv)(index, v)
#define glVertexAttrib4ubvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4ubv)(index, v)
#define glVertexAttrib4uivARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4uiv)(index, v)
#define glVertexAttrib4usvARB(index, v) ANYGL_CALL(AnyGL_glVertexAttrib4usv)(index, v)
#define glVertexAttribPointerARB(index, size, type, normalized, stride, pointer) ANYGL_CALL(AnyGL_glVertexAttribPointer)(index, size, type, normalized, stride, pointer)
#define glEnableVertexAttribArrayARB(index) ANYGL_CALL(AnyGL_glEnableVertexAttribArray)(index)
#define glDisableVertexAttribArrayARB(index) ANYGL_CALL(AnyGL_glDisableVertexAttribArray)(index)
#define glGetVertexAttribdvARB(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribdv)(index, pname, params)
#define glGetVertexAttribfvARB(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribfv)(index, pname, params)
#define glGetVertexAttribivARB(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribiv)(index, pname, params)
#define glGetVertexAttribPointervARB(index, pname, pointer) ANYGL_CALL(AnyGL_glGetVertexAttribPointerv)(index, pname, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_shader */


#ifndef ANYGL_NO_DEFINES
#define glBindAttribLocationARB(programObj, index, name) ANYGL_CALL(AnyGL_glBindAttribLocation)(programObj, index, name)
#define glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name) ANYGL_CALL(AnyGL_glGetActiveAttrib)(programObj, index, maxLength, length, size, type, name)
#define glGetAttribLocationARB(programObj, name) ANYGL_CALL(AnyGL_glGetAttribLocation)(programObj, name)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_type_10f_11f_11f_rev */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_vertex_type_2_10_10_10_rev */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_viewport_array */
typedef void (APIENTRY* PFNANYGLDEPTHRANGEARRAYDVNVPROC)(GLuint first, GLsizei count, const GLdouble *v);
typedef void (APIENTRY* PFNANYGLDEPTHRANGEINDEXEDDNVPROC)(GLuint index, GLdouble n, GLdouble f);

ANYGL_EXPORT extern PFNANYGLDEPTHRANGEARRAYDVNVPROC AnyGL_glDepthRangeArraydvNV;
ANYGL_EXPORT extern PFNANYGLDEPTHRANGEINDEXEDDNVPROC AnyGL_glDepthRangeIndexeddNV;

#ifndef ANYGL_NO_DEFINES
#define glDepthRangeArraydvNV(first, count, v) ANYGL_CALL(AnyGL_glDepthRangeArraydvNV)(first, count, v)
#define glDepthRangeIndexeddNV(index, n, f) ANYGL_CALL(AnyGL_glDepthRangeIndexeddNV)(index, n, f)
#endif /* ANYGL_NO_DEFINES */

/* GL_ARB_window_pos */


#ifndef ANYGL_NO_DEFINES
#define glWindowPos2dARB(x, y) ANYGL_CALL(AnyGL_glWindowPos2d)(x, y)
#define glWindowPos2dvARB(v) ANYGL_CALL(AnyGL_glWindowPos2dv)(v)
#define glWindowPos2fARB(x, y) ANYGL_CALL(AnyGL_glWindowPos2f)(x, y)
#define glWindowPos2fvARB(v) ANYGL_CALL(AnyGL_glWindowPos2fv)(v)
#define glWindowPos2iARB(x, y) ANYGL_CALL(AnyGL_glWindowPos2i)(x, y)
#define glWindowPos2ivARB(v) ANYGL_CALL(AnyGL_glWindowPos2iv)(v)
#define glWindowPos2sARB(x, y) ANYGL_CALL(AnyGL_glWindowPos2s)(x, y)
#define glWindowPos2svARB(v) ANYGL_CALL(AnyGL_glWindowPos2sv)(v)
#define glWindowPos3dARB(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3d)(x, y, z)
#define glWindowPos3dvARB(v) ANYGL_CALL(AnyGL_glWindowPos3dv)(v)
#define glWindowPos3fARB(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3f)(x, y, z)
#define glWindowPos3fvARB(v) ANYGL_CALL(AnyGL_glWindowPos3fv)(v)
#define glWindowPos3iARB(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3i)(x, y, z)
#define glWindowPos3ivARB(v) ANYGL_CALL(AnyGL_glWindowPos3iv)(v)
#define glWindowPos3sARB(x, y, z) ANYGL_CALL(AnyGL_glWindowPos3s)(x, y, z)
#define glWindowPos3svARB(v) ANYGL_CALL(AnyGL_glWindowPos3sv)(v)
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_blend_equation_advanced */


#ifndef ANYGL_NO_DEFINES
#define glBlendBarrierKHR() ANYGL_CALL(AnyGL_glBlendBarrier)()
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_blend_equation_advanced_coherent */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_context_flush_control */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_debug */


#ifndef ANYGL_NO_DEFINES
#define glDebugMessageControlKHR(source, type, severity, count, ids, enabled) ANYGL_CALL(AnyGL_glDebugMessageControl)(source, type, severity, count, ids, enabled)
#define glDebugMessageInsertKHR(source, type, id, severity, length, buf) ANYGL_CALL(AnyGL_glDebugMessageInsert)(source, type, id, severity, length, buf)
#define glDebugMessageCallbackKHR(callback, userParam) ANYGL_CALL(AnyGL_glDebugMessageCallback)(callback, userParam)
#define glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog) ANYGL_CALL(AnyGL_glGetDebugMessageLog)(count, bufSize, sources, types, ids, severities, lengths, messageLog)
#define glPushDebugGroupKHR(source, id, length, message) ANYGL_CALL(AnyGL_glPushDebugGroup)(source, id, length, message)
#define glPopDebugGroupKHR() ANYGL_CALL(AnyGL_glPopDebugGroup)()
#define glObjectLabelKHR(identifier, name, length, label) ANYGL_CALL(AnyGL_glObjectLabel)(identifier, name, length, label)
#define glGetObjectLabelKHR(identifier, name, bufSize, length, label) ANYGL_CALL(AnyGL_glGetObjectLabel)(identifier, name, bufSize, length, label)
#define glObjectPtrLabelKHR(ptr, length, label) ANYGL_CALL(AnyGL_glObjectPtrLabel)(ptr, length, label)
#define glGetObjectPtrLabelKHR(ptr, bufSize, length, label) ANYGL_CALL(AnyGL_glGetObjectPtrLabel)(ptr, bufSize, length, label)
#define glGetPointervKHR(pname, params) ANYGL_CALL(AnyGL_glGetPointerv)(pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_no_error */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_parallel_shader_compile */
typedef void (APIENTRY* PFNANYGLMAXSHADERCOMPILERTHREADSKHRPROC)(GLuint count);

ANYGL_EXPORT extern PFNANYGLMAXSHADERCOMPILERTHREADSKHRPROC AnyGL_glMaxShaderCompilerThreadsKHR;

#ifndef ANYGL_NO_DEFINES
#define glMaxShaderCompilerThreadsKHR(count) ANYGL_CALL(AnyGL_glMaxShaderCompilerThreadsKHR)(count)
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_robust_buffer_access_behavior */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_robustness */


#ifndef ANYGL_NO_DEFINES
#define glGetGraphicsResetStatusKHR() ANYGL_CALL(AnyGL_glGetGraphicsResetStatus)()
#define glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data) ANYGL_CALL(AnyGL_glReadnPixels)(x, y, width, height, format, type, bufSize, data)
#define glGetnUniformfvKHR(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformfv)(program, location, bufSize, params)
#define glGetnUniformivKHR(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformiv)(program, location, bufSize, params)
#define glGetnUniformuivKHR(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformuiv)(program, location, bufSize, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_shader_subgroup */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_texture_compression_astc_hdr */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_texture_compression_astc_ldr */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_KHR_texture_compression_astc_sliced_3d */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_EGL_image */
typedef void (APIENTRY* PFNANYGLEGLIMAGETARGETTEXTURE2DOESPROC)(GLenum target, GLeglImageOES image);
typedef void (APIENTRY* PFNANYGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC)(GLenum target, GLeglImageOES image);

ANYGL_EXPORT extern PFNANYGLEGLIMAGETARGETTEXTURE2DOESPROC AnyGL_glEGLImageTargetTexture2DOES;
ANYGL_EXPORT extern PFNANYGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC AnyGL_glEGLImageTargetRenderbufferStorageOES;

#ifndef ANYGL_NO_DEFINES
#define glEGLImageTargetTexture2DOES(target, image) ANYGL_CALL(AnyGL_glEGLImageTargetTexture2DOES)(target, image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) ANYGL_CALL(AnyGL_glEGLImageTargetRenderbufferStorageOES)(target, image)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_EGL_image_external */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_EGL_image_external_essl3 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_blend_equation_separate */


#ifndef ANYGL_NO_DEFINES
#define glBlendEquationSeparateOES(modeRGB, modeAlpha) ANYGL_CALL(AnyGL_glBlendEquationSeparate)(modeRGB, modeAlpha)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_blend_func_separate */


#ifndef ANYGL_NO_DEFINES
#define glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha) ANYGL_CALL(AnyGL_glBlendFuncSeparate)(srcRGB, dstRGB, srcAlpha, dstAlpha)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_blend_subtract */


#ifndef ANYGL_NO_DEFINES
#define glBlendEquationOES(mode) ANYGL_CALL(AnyGL_glBlendEquation)(mode)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_byte_coordinates */
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1BOESPROC)(GLenum texture, GLbyte s);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1BVOESPROC)(GLenum texture, const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2BOESPROC)(GLenum texture, GLbyte s, GLbyte t);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2BVOESPROC)(GLenum texture, const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3BVOESPROC)(GLenum texture, const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4BVOESPROC)(GLenum texture, const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORD1BOESPROC)(GLbyte s);
typedef void (APIENTRY* PFNANYGLTEXCOORD1BVOESPROC)(const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORD2BOESPROC)(GLbyte s, GLbyte t);
typedef void (APIENTRY* PFNANYGLTEXCOORD2BVOESPROC)(const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORD3BOESPROC)(GLbyte s, GLbyte t, GLbyte r);
typedef void (APIENTRY* PFNANYGLTEXCOORD3BVOESPROC)(const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORD4BOESPROC)(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (APIENTRY* PFNANYGLTEXCOORD4BVOESPROC)(const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLVERTEX2BOESPROC)(GLbyte x, GLbyte y);
typedef void (APIENTRY* PFNANYGLVERTEX2BVOESPROC)(const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLVERTEX3BOESPROC)(GLbyte x, GLbyte y, GLbyte z);
typedef void (APIENTRY* PFNANYGLVERTEX3BVOESPROC)(const GLbyte *coords);
typedef void (APIENTRY* PFNANYGLVERTEX4BOESPROC)(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
typedef void (APIENTRY* PFNANYGLVERTEX4BVOESPROC)(const GLbyte *coords);

ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1BOESPROC AnyGL_glMultiTexCoord1bOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1BVOESPROC AnyGL_glMultiTexCoord1bvOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2BOESPROC AnyGL_glMultiTexCoord2bOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2BVOESPROC AnyGL_glMultiTexCoord2bvOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3BOESPROC AnyGL_glMultiTexCoord3bOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3BVOESPROC AnyGL_glMultiTexCoord3bvOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4BOESPROC AnyGL_glMultiTexCoord4bOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4BVOESPROC AnyGL_glMultiTexCoord4bvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1BOESPROC AnyGL_glTexCoord1bOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1BVOESPROC AnyGL_glTexCoord1bvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2BOESPROC AnyGL_glTexCoord2bOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2BVOESPROC AnyGL_glTexCoord2bvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3BOESPROC AnyGL_glTexCoord3bOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3BVOESPROC AnyGL_glTexCoord3bvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4BOESPROC AnyGL_glTexCoord4bOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4BVOESPROC AnyGL_glTexCoord4bvOES;
ANYGL_EXPORT extern PFNANYGLVERTEX2BOESPROC AnyGL_glVertex2bOES;
ANYGL_EXPORT extern PFNANYGLVERTEX2BVOESPROC AnyGL_glVertex2bvOES;
ANYGL_EXPORT extern PFNANYGLVERTEX3BOESPROC AnyGL_glVertex3bOES;
ANYGL_EXPORT extern PFNANYGLVERTEX3BVOESPROC AnyGL_glVertex3bvOES;
ANYGL_EXPORT extern PFNANYGLVERTEX4BOESPROC AnyGL_glVertex4bOES;
ANYGL_EXPORT extern PFNANYGLVERTEX4BVOESPROC AnyGL_glVertex4bvOES;

#ifndef ANYGL_NO_DEFINES
#define glMultiTexCoord1bOES(texture, s) ANYGL_CALL(AnyGL_glMultiTexCoord1bOES)(texture, s)
#define glMultiTexCoord1bvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord1bvOES)(texture, coords)
#define glMultiTexCoord2bOES(texture, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2bOES)(texture, s, t)
#define glMultiTexCoord2bvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord2bvOES)(texture, coords)
#define glMultiTexCoord3bOES(texture, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3bOES)(texture, s, t, r)
#define glMultiTexCoord3bvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord3bvOES)(texture, coords)
#define glMultiTexCoord4bOES(texture, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4bOES)(texture, s, t, r, q)
#define glMultiTexCoord4bvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord4bvOES)(texture, coords)
#define glTexCoord1bOES(s) ANYGL_CALL(AnyGL_glTexCoord1bOES)(s)
#define glTexCoord1bvOES(coords) ANYGL_CALL(AnyGL_glTexCoord1bvOES)(coords)
#define glTexCoord2bOES(s, t) ANYGL_CALL(AnyGL_glTexCoord2bOES)(s, t)
#define glTexCoord2bvOES(coords) ANYGL_CALL(AnyGL_glTexCoord2bvOES)(coords)
#define glTexCoord3bOES(s, t, r) ANYGL_CALL(AnyGL_glTexCoord3bOES)(s, t, r)
#define glTexCoord3bvOES(coords) ANYGL_CALL(AnyGL_glTexCoord3bvOES)(coords)
#define glTexCoord4bOES(s, t, r, q) ANYGL_CALL(AnyGL_glTexCoord4bOES)(s, t, r, q)
#define glTexCoord4bvOES(coords) ANYGL_CALL(AnyGL_glTexCoord4bvOES)(coords)
#define glVertex2bOES(x, y) ANYGL_CALL(AnyGL_glVertex2bOES)(x, y)
#define glVertex2bvOES(coords) ANYGL_CALL(AnyGL_glVertex2bvOES)(coords)
#define glVertex3bOES(x, y, z) ANYGL_CALL(AnyGL_glVertex3bOES)(x, y, z)
#define glVertex3bvOES(coords) ANYGL_CALL(AnyGL_glVertex3bvOES)(coords)
#define glVertex4bOES(x, y, z, w) ANYGL_CALL(AnyGL_glVertex4bOES)(x, y, z, w)
#define glVertex4bvOES(coords) ANYGL_CALL(AnyGL_glVertex4bvOES)(coords)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_compressed_ETC1_RGB8_sub_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_compressed_ETC1_RGB8_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_compressed_paletted_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_copy_image */


#ifndef ANYGL_NO_DEFINES
#define glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) ANYGL_CALL(AnyGL_glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_depth24 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_depth32 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_depth_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_draw_buffers_indexed */


#ifndef ANYGL_NO_DEFINES
#define glEnableiOES(target, index) ANYGL_CALL(AnyGL_glEnablei)(target, index)
#define glDisableiOES(target, index) ANYGL_CALL(AnyGL_glDisablei)(target, index)
#define glBlendEquationiOES(buf, mode) ANYGL_CALL(AnyGL_glBlendEquationi)(buf, mode)
#define glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha) ANYGL_CALL(AnyGL_glBlendEquationSeparatei)(buf, modeRGB, modeAlpha)
#define glBlendFunciOES(buf, src, dst) ANYGL_CALL(AnyGL_glBlendFunci)(buf, src, dst)
#define glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) ANYGL_CALL(AnyGL_glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
#define glColorMaskiOES(index, r, g, b, a) ANYGL_CALL(AnyGL_glColorMaski)(index, r, g, b, a)
#define glIsEnablediOES(target, index) ANYGL_CALL(AnyGL_glIsEnabledi)(target, index)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_draw_elements_base_vertex */


#ifndef ANYGL_NO_DEFINES
#define glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex) ANYGL_CALL(AnyGL_glDrawElementsBaseVertex)(mode, count, type, indices, basevertex)
#define glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex) ANYGL_CALL(AnyGL_glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex)
#define glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex) ANYGL_CALL(AnyGL_glDrawElementsInstancedBaseVertex)(mode, count, type, indices, instancecount, basevertex)
#define glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, drawcount, basevertex) ANYGL_CALL(AnyGL_glMultiDrawElementsBaseVertex)(mode, count, type, indices, drawcount, basevertex)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_draw_texture */
typedef void (APIENTRY* PFNANYGLDRAWTEXSOESPROC)(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
typedef void (APIENTRY* PFNANYGLDRAWTEXIOESPROC)(GLint x, GLint y, GLint z, GLint width, GLint height);
typedef void (APIENTRY* PFNANYGLDRAWTEXXOESPROC)(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
typedef void (APIENTRY* PFNANYGLDRAWTEXSVOESPROC)(const GLshort *coords);
typedef void (APIENTRY* PFNANYGLDRAWTEXIVOESPROC)(const GLint *coords);
typedef void (APIENTRY* PFNANYGLDRAWTEXXVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLDRAWTEXFOESPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
typedef void (APIENTRY* PFNANYGLDRAWTEXFVOESPROC)(const GLfloat *coords);

ANYGL_EXPORT extern PFNANYGLDRAWTEXSOESPROC AnyGL_glDrawTexsOES;
ANYGL_EXPORT extern PFNANYGLDRAWTEXIOESPROC AnyGL_glDrawTexiOES;
ANYGL_EXPORT extern PFNANYGLDRAWTEXXOESPROC AnyGL_glDrawTexxOES;
ANYGL_EXPORT extern PFNANYGLDRAWTEXSVOESPROC AnyGL_glDrawTexsvOES;
ANYGL_EXPORT extern PFNANYGLDRAWTEXIVOESPROC AnyGL_glDrawTexivOES;
ANYGL_EXPORT extern PFNANYGLDRAWTEXXVOESPROC AnyGL_glDrawTexxvOES;
ANYGL_EXPORT extern PFNANYGLDRAWTEXFOESPROC AnyGL_glDrawTexfOES;
ANYGL_EXPORT extern PFNANYGLDRAWTEXFVOESPROC AnyGL_glDrawTexfvOES;

#ifndef ANYGL_NO_DEFINES
#define glDrawTexsOES(x, y, z, width, height) ANYGL_CALL(AnyGL_glDrawTexsOES)(x, y, z, width, height)
#define glDrawTexiOES(x, y, z, width, height) ANYGL_CALL(AnyGL_glDrawTexiOES)(x, y, z, width, height)
#define glDrawTexxOES(x, y, z, width, height) ANYGL_CALL(AnyGL_glDrawTexxOES)(x, y, z, width, height)
#define glDrawTexsvOES(coords) ANYGL_CALL(AnyGL_glDrawTexsvOES)(coords)
#define glDrawTexivOES(coords) ANYGL_CALL(AnyGL_glDrawTexivOES)(coords)
#define glDrawTexxvOES(coords) ANYGL_CALL(AnyGL_glDrawTexxvOES)(coords)
#define glDrawTexfOES(x, y, z, width, height) ANYGL_CALL(AnyGL_glDrawTexfOES)(x, y, z, width, height)
#define glDrawTexfvOES(coords) ANYGL_CALL(AnyGL_glDrawTexfvOES)(coords)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_element_index_uint */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_extended_matrix_palette */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_fbo_render_mipmap */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_fixed_point */
typedef void (APIENTRY* PFNANYGLALPHAFUNCXOESPROC)(GLenum func, GLfixed ref);
typedef void (APIENTRY* PFNANYGLCLEARCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRY* PFNANYGLCLEARDEPTHXOESPROC)(GLfixed depth);
typedef void (APIENTRY* PFNANYGLCLIPPLANEXOESPROC)(GLenum plane, const GLfixed *equation);
typedef void (APIENTRY* PFNANYGLCOLOR4XOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRY* PFNANYGLDEPTHRANGEXOESPROC)(GLfixed n, GLfixed f);
typedef void (APIENTRY* PFNANYGLFOGXOESPROC)(GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLFOGXVOESPROC)(GLenum pname, const GLfixed *param);
typedef void (APIENTRY* PFNANYGLFRUSTUMXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (APIENTRY* PFNANYGLGETCLIPPLANEXOESPROC)(GLenum plane, GLfixed *equation);
typedef void (APIENTRY* PFNANYGLGETFIXEDVOESPROC)(GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLGETTEXENVXVOESPROC)(GLenum target, GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLGETTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLLIGHTMODELXOESPROC)(GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLLIGHTMODELXVOESPROC)(GLenum pname, const GLfixed *param);
typedef void (APIENTRY* PFNANYGLLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLLIGHTXVOESPROC)(GLenum light, GLenum pname, const GLfixed *params);
typedef void (APIENTRY* PFNANYGLLINEWIDTHXOESPROC)(GLfixed width);
typedef void (APIENTRY* PFNANYGLLOADMATRIXXOESPROC)(const GLfixed *m);
typedef void (APIENTRY* PFNANYGLMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLMATERIALXVOESPROC)(GLenum face, GLenum pname, const GLfixed *param);
typedef void (APIENTRY* PFNANYGLMULTMATRIXXOESPROC)(const GLfixed *m);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (APIENTRY* PFNANYGLNORMAL3XOESPROC)(GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (APIENTRY* PFNANYGLORTHOXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (APIENTRY* PFNANYGLPOINTPARAMETERXVOESPROC)(GLenum pname, const GLfixed *params);
typedef void (APIENTRY* PFNANYGLPOINTSIZEXOESPROC)(GLfixed size);
typedef void (APIENTRY* PFNANYGLPOLYGONOFFSETXOESPROC)(GLfixed factor, GLfixed units);
typedef void (APIENTRY* PFNANYGLROTATEXOESPROC)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRY* PFNANYGLSCALEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRY* PFNANYGLTEXENVXOESPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLTEXENVXVOESPROC)(GLenum target, GLenum pname, const GLfixed *params);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed *params);
typedef void (APIENTRY* PFNANYGLTRANSLATEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRY* PFNANYGLACCUMXOESPROC)(GLenum op, GLfixed value);
typedef void (APIENTRY* PFNANYGLBITMAPXOESPROC)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
typedef void (APIENTRY* PFNANYGLBLENDCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRY* PFNANYGLCLEARACCUMXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRY* PFNANYGLCOLOR3XOESPROC)(GLfixed red, GLfixed green, GLfixed blue);
typedef void (APIENTRY* PFNANYGLCOLOR3XVOESPROC)(const GLfixed *components);
typedef void (APIENTRY* PFNANYGLCOLOR4XVOESPROC)(const GLfixed *components);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed *params);
typedef void (APIENTRY* PFNANYGLEVALCOORD1XOESPROC)(GLfixed u);
typedef void (APIENTRY* PFNANYGLEVALCOORD1XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLEVALCOORD2XOESPROC)(GLfixed u, GLfixed v);
typedef void (APIENTRY* PFNANYGLEVALCOORD2XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLFEEDBACKBUFFERXOESPROC)(GLsizei n, GLenum type, const GLfixed *buffer);
typedef void (APIENTRY* PFNANYGLGETCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLGETHISTOGRAMPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLGETLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLGETMAPXVOESPROC)(GLenum target, GLenum query, GLfixed *v);
typedef void (APIENTRY* PFNANYGLGETMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLGETPIXELMAPXVPROC)(GLenum map, GLint size, GLfixed *values);
typedef void (APIENTRY* PFNANYGLGETTEXGENXVOESPROC)(GLenum coord, GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLGETTEXLEVELPARAMETERXVOESPROC)(GLenum target, GLint level, GLenum pname, GLfixed *params);
typedef void (APIENTRY* PFNANYGLINDEXXOESPROC)(GLfixed component);
typedef void (APIENTRY* PFNANYGLINDEXXVOESPROC)(const GLfixed *component);
typedef void (APIENTRY* PFNANYGLLOADTRANSPOSEMATRIXXOESPROC)(const GLfixed *m);
typedef void (APIENTRY* PFNANYGLMAP1XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
typedef void (APIENTRY* PFNANYGLMAP2XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
typedef void (APIENTRY* PFNANYGLMAPGRID1XOESPROC)(GLint n, GLfixed u1, GLfixed u2);
typedef void (APIENTRY* PFNANYGLMAPGRID2XOESPROC)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
typedef void (APIENTRY* PFNANYGLMULTTRANSPOSEMATRIXXOESPROC)(const GLfixed *m);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1XOESPROC)(GLenum texture, GLfixed s);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD1XVOESPROC)(GLenum texture, const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2XOESPROC)(GLenum texture, GLfixed s, GLfixed t);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD2XVOESPROC)(GLenum texture, const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD3XVOESPROC)(GLenum texture, const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORD4XVOESPROC)(GLenum texture, const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLNORMAL3XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLPASSTHROUGHXOESPROC)(GLfixed token);
typedef void (APIENTRY* PFNANYGLPIXELMAPXPROC)(GLenum map, GLint size, const GLfixed *values);
typedef void (APIENTRY* PFNANYGLPIXELSTOREXPROC)(GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLPIXELTRANSFERXOESPROC)(GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLPIXELZOOMXOESPROC)(GLfixed xfactor, GLfixed yfactor);
typedef void (APIENTRY* PFNANYGLPRIORITIZETEXTURESXOESPROC)(GLsizei n, const GLuint *textures, const GLfixed *priorities);
typedef void (APIENTRY* PFNANYGLRASTERPOS2XOESPROC)(GLfixed x, GLfixed y);
typedef void (APIENTRY* PFNANYGLRASTERPOS2XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLRASTERPOS3XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRY* PFNANYGLRASTERPOS3XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLRASTERPOS4XOESPROC)(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
typedef void (APIENTRY* PFNANYGLRASTERPOS4XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLRECTXOESPROC)(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
typedef void (APIENTRY* PFNANYGLRECTXVOESPROC)(const GLfixed *v1, const GLfixed *v2);
typedef void (APIENTRY* PFNANYGLTEXCOORD1XOESPROC)(GLfixed s);
typedef void (APIENTRY* PFNANYGLTEXCOORD1XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORD2XOESPROC)(GLfixed s, GLfixed t);
typedef void (APIENTRY* PFNANYGLTEXCOORD2XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORD3XOESPROC)(GLfixed s, GLfixed t, GLfixed r);
typedef void (APIENTRY* PFNANYGLTEXCOORD3XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLTEXCOORD4XOESPROC)(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (APIENTRY* PFNANYGLTEXCOORD4XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLTEXGENXOESPROC)(GLenum coord, GLenum pname, GLfixed param);
typedef void (APIENTRY* PFNANYGLTEXGENXVOESPROC)(GLenum coord, GLenum pname, const GLfixed *params);
typedef void (APIENTRY* PFNANYGLVERTEX2XOESPROC)(GLfixed x);
typedef void (APIENTRY* PFNANYGLVERTEX2XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLVERTEX3XOESPROC)(GLfixed x, GLfixed y);
typedef void (APIENTRY* PFNANYGLVERTEX3XVOESPROC)(const GLfixed *coords);
typedef void (APIENTRY* PFNANYGLVERTEX4XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRY* PFNANYGLVERTEX4XVOESPROC)(const GLfixed *coords);

ANYGL_EXPORT extern PFNANYGLALPHAFUNCXOESPROC AnyGL_glAlphaFuncxOES;
ANYGL_EXPORT extern PFNANYGLCLEARCOLORXOESPROC AnyGL_glClearColorxOES;
ANYGL_EXPORT extern PFNANYGLCLEARDEPTHXOESPROC AnyGL_glClearDepthxOES;
ANYGL_EXPORT extern PFNANYGLCLIPPLANEXOESPROC AnyGL_glClipPlanexOES;
ANYGL_EXPORT extern PFNANYGLCOLOR4XOESPROC AnyGL_glColor4xOES;
ANYGL_EXPORT extern PFNANYGLDEPTHRANGEXOESPROC AnyGL_glDepthRangexOES;
ANYGL_EXPORT extern PFNANYGLFOGXOESPROC AnyGL_glFogxOES;
ANYGL_EXPORT extern PFNANYGLFOGXVOESPROC AnyGL_glFogxvOES;
ANYGL_EXPORT extern PFNANYGLFRUSTUMXOESPROC AnyGL_glFrustumxOES;
ANYGL_EXPORT extern PFNANYGLGETCLIPPLANEXOESPROC AnyGL_glGetClipPlanexOES;
ANYGL_EXPORT extern PFNANYGLGETFIXEDVOESPROC AnyGL_glGetFixedvOES;
ANYGL_EXPORT extern PFNANYGLGETTEXENVXVOESPROC AnyGL_glGetTexEnvxvOES;
ANYGL_EXPORT extern PFNANYGLGETTEXPARAMETERXVOESPROC AnyGL_glGetTexParameterxvOES;
ANYGL_EXPORT extern PFNANYGLLIGHTMODELXOESPROC AnyGL_glLightModelxOES;
ANYGL_EXPORT extern PFNANYGLLIGHTMODELXVOESPROC AnyGL_glLightModelxvOES;
ANYGL_EXPORT extern PFNANYGLLIGHTXOESPROC AnyGL_glLightxOES;
ANYGL_EXPORT extern PFNANYGLLIGHTXVOESPROC AnyGL_glLightxvOES;
ANYGL_EXPORT extern PFNANYGLLINEWIDTHXOESPROC AnyGL_glLineWidthxOES;
ANYGL_EXPORT extern PFNANYGLLOADMATRIXXOESPROC AnyGL_glLoadMatrixxOES;
ANYGL_EXPORT extern PFNANYGLMATERIALXOESPROC AnyGL_glMaterialxOES;
ANYGL_EXPORT extern PFNANYGLMATERIALXVOESPROC AnyGL_glMaterialxvOES;
ANYGL_EXPORT extern PFNANYGLMULTMATRIXXOESPROC AnyGL_glMultMatrixxOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4XOESPROC AnyGL_glMultiTexCoord4xOES;
ANYGL_EXPORT extern PFNANYGLNORMAL3XOESPROC AnyGL_glNormal3xOES;
ANYGL_EXPORT extern PFNANYGLORTHOXOESPROC AnyGL_glOrthoxOES;
ANYGL_EXPORT extern PFNANYGLPOINTPARAMETERXVOESPROC AnyGL_glPointParameterxvOES;
ANYGL_EXPORT extern PFNANYGLPOINTSIZEXOESPROC AnyGL_glPointSizexOES;
ANYGL_EXPORT extern PFNANYGLPOLYGONOFFSETXOESPROC AnyGL_glPolygonOffsetxOES;
ANYGL_EXPORT extern PFNANYGLROTATEXOESPROC AnyGL_glRotatexOES;
ANYGL_EXPORT extern PFNANYGLSCALEXOESPROC AnyGL_glScalexOES;
ANYGL_EXPORT extern PFNANYGLTEXENVXOESPROC AnyGL_glTexEnvxOES;
ANYGL_EXPORT extern PFNANYGLTEXENVXVOESPROC AnyGL_glTexEnvxvOES;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERXOESPROC AnyGL_glTexParameterxOES;
ANYGL_EXPORT extern PFNANYGLTEXPARAMETERXVOESPROC AnyGL_glTexParameterxvOES;
ANYGL_EXPORT extern PFNANYGLTRANSLATEXOESPROC AnyGL_glTranslatexOES;
ANYGL_EXPORT extern PFNANYGLACCUMXOESPROC AnyGL_glAccumxOES;
ANYGL_EXPORT extern PFNANYGLBITMAPXOESPROC AnyGL_glBitmapxOES;
ANYGL_EXPORT extern PFNANYGLBLENDCOLORXOESPROC AnyGL_glBlendColorxOES;
ANYGL_EXPORT extern PFNANYGLCLEARACCUMXOESPROC AnyGL_glClearAccumxOES;
ANYGL_EXPORT extern PFNANYGLCOLOR3XOESPROC AnyGL_glColor3xOES;
ANYGL_EXPORT extern PFNANYGLCOLOR3XVOESPROC AnyGL_glColor3xvOES;
ANYGL_EXPORT extern PFNANYGLCOLOR4XVOESPROC AnyGL_glColor4xvOES;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONPARAMETERXOESPROC AnyGL_glConvolutionParameterxOES;
ANYGL_EXPORT extern PFNANYGLCONVOLUTIONPARAMETERXVOESPROC AnyGL_glConvolutionParameterxvOES;
ANYGL_EXPORT extern PFNANYGLEVALCOORD1XOESPROC AnyGL_glEvalCoord1xOES;
ANYGL_EXPORT extern PFNANYGLEVALCOORD1XVOESPROC AnyGL_glEvalCoord1xvOES;
ANYGL_EXPORT extern PFNANYGLEVALCOORD2XOESPROC AnyGL_glEvalCoord2xOES;
ANYGL_EXPORT extern PFNANYGLEVALCOORD2XVOESPROC AnyGL_glEvalCoord2xvOES;
ANYGL_EXPORT extern PFNANYGLFEEDBACKBUFFERXOESPROC AnyGL_glFeedbackBufferxOES;
ANYGL_EXPORT extern PFNANYGLGETCONVOLUTIONPARAMETERXVOESPROC AnyGL_glGetConvolutionParameterxvOES;
ANYGL_EXPORT extern PFNANYGLGETHISTOGRAMPARAMETERXVOESPROC AnyGL_glGetHistogramParameterxvOES;
ANYGL_EXPORT extern PFNANYGLGETLIGHTXOESPROC AnyGL_glGetLightxOES;
ANYGL_EXPORT extern PFNANYGLGETMAPXVOESPROC AnyGL_glGetMapxvOES;
ANYGL_EXPORT extern PFNANYGLGETMATERIALXOESPROC AnyGL_glGetMaterialxOES;
ANYGL_EXPORT extern PFNANYGLGETPIXELMAPXVPROC AnyGL_glGetPixelMapxv;
ANYGL_EXPORT extern PFNANYGLGETTEXGENXVOESPROC AnyGL_glGetTexGenxvOES;
ANYGL_EXPORT extern PFNANYGLGETTEXLEVELPARAMETERXVOESPROC AnyGL_glGetTexLevelParameterxvOES;
ANYGL_EXPORT extern PFNANYGLINDEXXOESPROC AnyGL_glIndexxOES;
ANYGL_EXPORT extern PFNANYGLINDEXXVOESPROC AnyGL_glIndexxvOES;
ANYGL_EXPORT extern PFNANYGLLOADTRANSPOSEMATRIXXOESPROC AnyGL_glLoadTransposeMatrixxOES;
ANYGL_EXPORT extern PFNANYGLMAP1XOESPROC AnyGL_glMap1xOES;
ANYGL_EXPORT extern PFNANYGLMAP2XOESPROC AnyGL_glMap2xOES;
ANYGL_EXPORT extern PFNANYGLMAPGRID1XOESPROC AnyGL_glMapGrid1xOES;
ANYGL_EXPORT extern PFNANYGLMAPGRID2XOESPROC AnyGL_glMapGrid2xOES;
ANYGL_EXPORT extern PFNANYGLMULTTRANSPOSEMATRIXXOESPROC AnyGL_glMultTransposeMatrixxOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1XOESPROC AnyGL_glMultiTexCoord1xOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD1XVOESPROC AnyGL_glMultiTexCoord1xvOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2XOESPROC AnyGL_glMultiTexCoord2xOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD2XVOESPROC AnyGL_glMultiTexCoord2xvOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3XOESPROC AnyGL_glMultiTexCoord3xOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD3XVOESPROC AnyGL_glMultiTexCoord3xvOES;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORD4XVOESPROC AnyGL_glMultiTexCoord4xvOES;
ANYGL_EXPORT extern PFNANYGLNORMAL3XVOESPROC AnyGL_glNormal3xvOES;
ANYGL_EXPORT extern PFNANYGLPASSTHROUGHXOESPROC AnyGL_glPassThroughxOES;
ANYGL_EXPORT extern PFNANYGLPIXELMAPXPROC AnyGL_glPixelMapx;
ANYGL_EXPORT extern PFNANYGLPIXELSTOREXPROC AnyGL_glPixelStorex;
ANYGL_EXPORT extern PFNANYGLPIXELTRANSFERXOESPROC AnyGL_glPixelTransferxOES;
ANYGL_EXPORT extern PFNANYGLPIXELZOOMXOESPROC AnyGL_glPixelZoomxOES;
ANYGL_EXPORT extern PFNANYGLPRIORITIZETEXTURESXOESPROC AnyGL_glPrioritizeTexturesxOES;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2XOESPROC AnyGL_glRasterPos2xOES;
ANYGL_EXPORT extern PFNANYGLRASTERPOS2XVOESPROC AnyGL_glRasterPos2xvOES;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3XOESPROC AnyGL_glRasterPos3xOES;
ANYGL_EXPORT extern PFNANYGLRASTERPOS3XVOESPROC AnyGL_glRasterPos3xvOES;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4XOESPROC AnyGL_glRasterPos4xOES;
ANYGL_EXPORT extern PFNANYGLRASTERPOS4XVOESPROC AnyGL_glRasterPos4xvOES;
ANYGL_EXPORT extern PFNANYGLRECTXOESPROC AnyGL_glRectxOES;
ANYGL_EXPORT extern PFNANYGLRECTXVOESPROC AnyGL_glRectxvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1XOESPROC AnyGL_glTexCoord1xOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD1XVOESPROC AnyGL_glTexCoord1xvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2XOESPROC AnyGL_glTexCoord2xOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD2XVOESPROC AnyGL_glTexCoord2xvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3XOESPROC AnyGL_glTexCoord3xOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD3XVOESPROC AnyGL_glTexCoord3xvOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4XOESPROC AnyGL_glTexCoord4xOES;
ANYGL_EXPORT extern PFNANYGLTEXCOORD4XVOESPROC AnyGL_glTexCoord4xvOES;
ANYGL_EXPORT extern PFNANYGLTEXGENXOESPROC AnyGL_glTexGenxOES;
ANYGL_EXPORT extern PFNANYGLTEXGENXVOESPROC AnyGL_glTexGenxvOES;
ANYGL_EXPORT extern PFNANYGLVERTEX2XOESPROC AnyGL_glVertex2xOES;
ANYGL_EXPORT extern PFNANYGLVERTEX2XVOESPROC AnyGL_glVertex2xvOES;
ANYGL_EXPORT extern PFNANYGLVERTEX3XOESPROC AnyGL_glVertex3xOES;
ANYGL_EXPORT extern PFNANYGLVERTEX3XVOESPROC AnyGL_glVertex3xvOES;
ANYGL_EXPORT extern PFNANYGLVERTEX4XOESPROC AnyGL_glVertex4xOES;
ANYGL_EXPORT extern PFNANYGLVERTEX4XVOESPROC AnyGL_glVertex4xvOES;

#ifndef ANYGL_NO_DEFINES
#define glAlphaFuncxOES(func, ref) ANYGL_CALL(AnyGL_glAlphaFuncxOES)(func, ref)
#define glClearColorxOES(red, green, blue, alpha) ANYGL_CALL(AnyGL_glClearColorxOES)(red, green, blue, alpha)
#define glClearDepthxOES(depth) ANYGL_CALL(AnyGL_glClearDepthxOES)(depth)
#define glClipPlanexOES(plane, equation) ANYGL_CALL(AnyGL_glClipPlanexOES)(plane, equation)
#define glColor4xOES(red, green, blue, alpha) ANYGL_CALL(AnyGL_glColor4xOES)(red, green, blue, alpha)
#define glDepthRangexOES(n, f) ANYGL_CALL(AnyGL_glDepthRangexOES)(n, f)
#define glFogxOES(pname, param) ANYGL_CALL(AnyGL_glFogxOES)(pname, param)
#define glFogxvOES(pname, param) ANYGL_CALL(AnyGL_glFogxvOES)(pname, param)
#define glFrustumxOES(l, r, b, t, n, f) ANYGL_CALL(AnyGL_glFrustumxOES)(l, r, b, t, n, f)
#define glGetClipPlanexOES(plane, equation) ANYGL_CALL(AnyGL_glGetClipPlanexOES)(plane, equation)
#define glGetFixedvOES(pname, params) ANYGL_CALL(AnyGL_glGetFixedvOES)(pname, params)
#define glGetTexEnvxvOES(target, pname, params) ANYGL_CALL(AnyGL_glGetTexEnvxvOES)(target, pname, params)
#define glGetTexParameterxvOES(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterxvOES)(target, pname, params)
#define glLightModelxOES(pname, param) ANYGL_CALL(AnyGL_glLightModelxOES)(pname, param)
#define glLightModelxvOES(pname, param) ANYGL_CALL(AnyGL_glLightModelxvOES)(pname, param)
#define glLightxOES(light, pname, param) ANYGL_CALL(AnyGL_glLightxOES)(light, pname, param)
#define glLightxvOES(light, pname, params) ANYGL_CALL(AnyGL_glLightxvOES)(light, pname, params)
#define glLineWidthxOES(width) ANYGL_CALL(AnyGL_glLineWidthxOES)(width)
#define glLoadMatrixxOES(m) ANYGL_CALL(AnyGL_glLoadMatrixxOES)(m)
#define glMaterialxOES(face, pname, param) ANYGL_CALL(AnyGL_glMaterialxOES)(face, pname, param)
#define glMaterialxvOES(face, pname, param) ANYGL_CALL(AnyGL_glMaterialxvOES)(face, pname, param)
#define glMultMatrixxOES(m) ANYGL_CALL(AnyGL_glMultMatrixxOES)(m)
#define glMultiTexCoord4xOES(texture, s, t, r, q) ANYGL_CALL(AnyGL_glMultiTexCoord4xOES)(texture, s, t, r, q)
#define glNormal3xOES(nx, ny, nz) ANYGL_CALL(AnyGL_glNormal3xOES)(nx, ny, nz)
#define glOrthoxOES(l, r, b, t, n, f) ANYGL_CALL(AnyGL_glOrthoxOES)(l, r, b, t, n, f)
#define glPointParameterxvOES(pname, params) ANYGL_CALL(AnyGL_glPointParameterxvOES)(pname, params)
#define glPointSizexOES(size) ANYGL_CALL(AnyGL_glPointSizexOES)(size)
#define glPolygonOffsetxOES(factor, units) ANYGL_CALL(AnyGL_glPolygonOffsetxOES)(factor, units)
#define glRotatexOES(angle, x, y, z) ANYGL_CALL(AnyGL_glRotatexOES)(angle, x, y, z)
#define glScalexOES(x, y, z) ANYGL_CALL(AnyGL_glScalexOES)(x, y, z)
#define glTexEnvxOES(target, pname, param) ANYGL_CALL(AnyGL_glTexEnvxOES)(target, pname, param)
#define glTexEnvxvOES(target, pname, params) ANYGL_CALL(AnyGL_glTexEnvxvOES)(target, pname, params)
#define glTexParameterxOES(target, pname, param) ANYGL_CALL(AnyGL_glTexParameterxOES)(target, pname, param)
#define glTexParameterxvOES(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterxvOES)(target, pname, params)
#define glTranslatexOES(x, y, z) ANYGL_CALL(AnyGL_glTranslatexOES)(x, y, z)
#define glAccumxOES(op, value) ANYGL_CALL(AnyGL_glAccumxOES)(op, value)
#define glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) ANYGL_CALL(AnyGL_glBitmapxOES)(width, height, xorig, yorig, xmove, ymove, bitmap)
#define glBlendColorxOES(red, green, blue, alpha) ANYGL_CALL(AnyGL_glBlendColorxOES)(red, green, blue, alpha)
#define glClearAccumxOES(red, green, blue, alpha) ANYGL_CALL(AnyGL_glClearAccumxOES)(red, green, blue, alpha)
#define glColor3xOES(red, green, blue) ANYGL_CALL(AnyGL_glColor3xOES)(red, green, blue)
#define glColor3xvOES(components) ANYGL_CALL(AnyGL_glColor3xvOES)(components)
#define glColor4xvOES(components) ANYGL_CALL(AnyGL_glColor4xvOES)(components)
#define glConvolutionParameterxOES(target, pname, param) ANYGL_CALL(AnyGL_glConvolutionParameterxOES)(target, pname, param)
#define glConvolutionParameterxvOES(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameterxvOES)(target, pname, params)
#define glEvalCoord1xOES(u) ANYGL_CALL(AnyGL_glEvalCoord1xOES)(u)
#define glEvalCoord1xvOES(coords) ANYGL_CALL(AnyGL_glEvalCoord1xvOES)(coords)
#define glEvalCoord2xOES(u, v) ANYGL_CALL(AnyGL_glEvalCoord2xOES)(u, v)
#define glEvalCoord2xvOES(coords) ANYGL_CALL(AnyGL_glEvalCoord2xvOES)(coords)
#define glFeedbackBufferxOES(n, type, buffer) ANYGL_CALL(AnyGL_glFeedbackBufferxOES)(n, type, buffer)
#define glGetConvolutionParameterxvOES(target, pname, params) ANYGL_CALL(AnyGL_glGetConvolutionParameterxvOES)(target, pname, params)
#define glGetHistogramParameterxvOES(target, pname, params) ANYGL_CALL(AnyGL_glGetHistogramParameterxvOES)(target, pname, params)
#define glGetLightxOES(light, pname, params) ANYGL_CALL(AnyGL_glGetLightxOES)(light, pname, params)
#define glGetMapxvOES(target, query, v) ANYGL_CALL(AnyGL_glGetMapxvOES)(target, query, v)
#define glGetMaterialxOES(face, pname, param) ANYGL_CALL(AnyGL_glGetMaterialxOES)(face, pname, param)
#define glGetPixelMapxv(map, size, values) ANYGL_CALL(AnyGL_glGetPixelMapxv)(map, size, values)
#define glGetTexGenxvOES(coord, pname, params) ANYGL_CALL(AnyGL_glGetTexGenxvOES)(coord, pname, params)
#define glGetTexLevelParameterxvOES(target, level, pname, params) ANYGL_CALL(AnyGL_glGetTexLevelParameterxvOES)(target, level, pname, params)
#define glIndexxOES(component) ANYGL_CALL(AnyGL_glIndexxOES)(component)
#define glIndexxvOES(component) ANYGL_CALL(AnyGL_glIndexxvOES)(component)
#define glLoadTransposeMatrixxOES(m) ANYGL_CALL(AnyGL_glLoadTransposeMatrixxOES)(m)
#define glMap1xOES(target, u1, u2, stride, order, points) ANYGL_CALL(AnyGL_glMap1xOES)(target, u1, u2, stride, order, points)
#define glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ANYGL_CALL(AnyGL_glMap2xOES)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
#define glMapGrid1xOES(n, u1, u2) ANYGL_CALL(AnyGL_glMapGrid1xOES)(n, u1, u2)
#define glMapGrid2xOES(n, u1, u2, v1, v2) ANYGL_CALL(AnyGL_glMapGrid2xOES)(n, u1, u2, v1, v2)
#define glMultTransposeMatrixxOES(m) ANYGL_CALL(AnyGL_glMultTransposeMatrixxOES)(m)
#define glMultiTexCoord1xOES(texture, s) ANYGL_CALL(AnyGL_glMultiTexCoord1xOES)(texture, s)
#define glMultiTexCoord1xvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord1xvOES)(texture, coords)
#define glMultiTexCoord2xOES(texture, s, t) ANYGL_CALL(AnyGL_glMultiTexCoord2xOES)(texture, s, t)
#define glMultiTexCoord2xvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord2xvOES)(texture, coords)
#define glMultiTexCoord3xOES(texture, s, t, r) ANYGL_CALL(AnyGL_glMultiTexCoord3xOES)(texture, s, t, r)
#define glMultiTexCoord3xvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord3xvOES)(texture, coords)
#define glMultiTexCoord4xvOES(texture, coords) ANYGL_CALL(AnyGL_glMultiTexCoord4xvOES)(texture, coords)
#define glNormal3xvOES(coords) ANYGL_CALL(AnyGL_glNormal3xvOES)(coords)
#define glPassThroughxOES(token) ANYGL_CALL(AnyGL_glPassThroughxOES)(token)
#define glPixelMapx(map, size, values) ANYGL_CALL(AnyGL_glPixelMapx)(map, size, values)
#define glPixelStorex(pname, param) ANYGL_CALL(AnyGL_glPixelStorex)(pname, param)
#define glPixelTransferxOES(pname, param) ANYGL_CALL(AnyGL_glPixelTransferxOES)(pname, param)
#define glPixelZoomxOES(xfactor, yfactor) ANYGL_CALL(AnyGL_glPixelZoomxOES)(xfactor, yfactor)
#define glPrioritizeTexturesxOES(n, textures, priorities) ANYGL_CALL(AnyGL_glPrioritizeTexturesxOES)(n, textures, priorities)
#define glRasterPos2xOES(x, y) ANYGL_CALL(AnyGL_glRasterPos2xOES)(x, y)
#define glRasterPos2xvOES(coords) ANYGL_CALL(AnyGL_glRasterPos2xvOES)(coords)
#define glRasterPos3xOES(x, y, z) ANYGL_CALL(AnyGL_glRasterPos3xOES)(x, y, z)
#define glRasterPos3xvOES(coords) ANYGL_CALL(AnyGL_glRasterPos3xvOES)(coords)
#define glRasterPos4xOES(x, y, z, w) ANYGL_CALL(AnyGL_glRasterPos4xOES)(x, y, z, w)
#define glRasterPos4xvOES(coords) ANYGL_CALL(AnyGL_glRasterPos4xvOES)(coords)
#define glRectxOES(x1, y1, x2, y2) ANYGL_CALL(AnyGL_glRectxOES)(x1, y1, x2, y2)
#define glRectxvOES(v1, v2) ANYGL_CALL(AnyGL_glRectxvOES)(v1, v2)
#define glTexCoord1xOES(s) ANYGL_CALL(AnyGL_glTexCoord1xOES)(s)
#define glTexCoord1xvOES(coords) ANYGL_CALL(AnyGL_glTexCoord1xvOES)(coords)
#define glTexCoord2xOES(s, t) ANYGL_CALL(AnyGL_glTexCoord2xOES)(s, t)
#define glTexCoord2xvOES(coords) ANYGL_CALL(AnyGL_glTexCoord2xvOES)(coords)
#define glTexCoord3xOES(s, t, r) ANYGL_CALL(AnyGL_glTexCoord3xOES)(s, t, r)
#define glTexCoord3xvOES(coords) ANYGL_CALL(AnyGL_glTexCoord3xvOES)(coords)
#define glTexCoord4xOES(s, t, r, q) ANYGL_CALL(AnyGL_glTexCoord4xOES)(s, t, r, q)
#define glTexCoord4xvOES(coords) ANYGL_CALL(AnyGL_glTexCoord4xvOES)(coords)
#define glTexGenxOES(coord, pname, param) ANYGL_CALL(AnyGL_glTexGenxOES)(coord, pname, param)
#define glTexGenxvOES(coord, pname, params) ANYGL_CALL(AnyGL_glTexGenxvOES)(coord, pname, params)
#define glVertex2xOES(x) ANYGL_CALL(AnyGL_glVertex2xOES)(x)
#define glVertex2xvOES(coords) ANYGL_CALL(AnyGL_glVertex2xvOES)(coords)
#define glVertex3xOES(x, y) ANYGL_CALL(AnyGL_glVertex3xOES)(x, y)
#define glVertex3xvOES(coords) ANYGL_CALL(AnyGL_glVertex3xvOES)(coords)
#define glVertex4xOES(x, y, z) ANYGL_CALL(AnyGL_glVertex4xOES)(x, y, z)
#define glVertex4xvOES(coords) ANYGL_CALL(AnyGL_glVertex4xvOES)(coords)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_fragment_precision_high */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_framebuffer_object */


#ifndef ANYGL_NO_DEFINES
#define glIsRenderbufferOES(renderbuffer) ANYGL_CALL(AnyGL_glIsRenderbuffer)(renderbuffer)
#define glBindRenderbufferOES(target, renderbuffer) ANYGL_CALL(AnyGL_glBindRenderbuffer)(target, renderbuffer)
#define glDeleteRenderbuffersOES(n, renderbuffers) ANYGL_CALL(AnyGL_glDeleteRenderbuffers)(n, renderbuffers)
#define glGenRenderbuffersOES(n, renderbuffers) ANYGL_CALL(AnyGL_glGenRenderbuffers)(n, renderbuffers)
#define glRenderbufferStorageOES(target, internalformat, width, height) ANYGL_CALL(AnyGL_glRenderbufferStorage)(target, internalformat, width, height)
#define glGetRenderbufferParameterivOES(target, pname, params) ANYGL_CALL(AnyGL_glGetRenderbufferParameteriv)(target, pname, params)
#define glIsFramebufferOES(framebuffer) ANYGL_CALL(AnyGL_glIsFramebuffer)(framebuffer)
#define glBindFramebufferOES(target, framebuffer) ANYGL_CALL(AnyGL_glBindFramebuffer)(target, framebuffer)
#define glDeleteFramebuffersOES(n, framebuffers) ANYGL_CALL(AnyGL_glDeleteFramebuffers)(n, framebuffers)
#define glGenFramebuffersOES(n, framebuffers) ANYGL_CALL(AnyGL_glGenFramebuffers)(n, framebuffers)
#define glCheckFramebufferStatusOES(target) ANYGL_CALL(AnyGL_glCheckFramebufferStatus)(target)
#define glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer) ANYGL_CALL(AnyGL_glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer)
#define glFramebufferTexture2DOES(target, attachment, textarget, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture2D)(target, attachment, textarget, texture, level)
#define glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params) ANYGL_CALL(AnyGL_glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params)
#define glGenerateMipmapOES(target) ANYGL_CALL(AnyGL_glGenerateMipmap)(target)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_geometry_point_size */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_geometry_shader */


#ifndef ANYGL_NO_DEFINES
#define glFramebufferTextureOES(target, attachment, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture)(target, attachment, texture, level)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_get_program_binary */


#ifndef ANYGL_NO_DEFINES
#define glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary) ANYGL_CALL(AnyGL_glGetProgramBinary)(program, bufSize, length, binaryFormat, binary)
#define glProgramBinaryOES(program, binaryFormat, binary, length) ANYGL_CALL(AnyGL_glProgramBinary)(program, binaryFormat, binary, length)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_gpu_shader5 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_mapbuffer */


#ifndef ANYGL_NO_DEFINES
#define glMapBufferOES(target, access) ANYGL_CALL(AnyGL_glMapBuffer)(target, access)
#define glUnmapBufferOES(target) ANYGL_CALL(AnyGL_glUnmapBuffer)(target)
#define glGetBufferPointervOES(target, pname, params) ANYGL_CALL(AnyGL_glGetBufferPointerv)(target, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_matrix_get */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_matrix_palette */
typedef void (APIENTRY* PFNANYGLCURRENTPALETTEMATRIXOESPROC)(GLuint matrixpaletteindex);
typedef void (APIENTRY* PFNANYGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC)();
typedef void (APIENTRY* PFNANYGLMATRIXINDEXPOINTEROESPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLWEIGHTPOINTEROESPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);

ANYGL_EXPORT extern PFNANYGLCURRENTPALETTEMATRIXOESPROC AnyGL_glCurrentPaletteMatrixOES;
ANYGL_EXPORT extern PFNANYGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC AnyGL_glLoadPaletteFromModelViewMatrixOES;
ANYGL_EXPORT extern PFNANYGLMATRIXINDEXPOINTEROESPROC AnyGL_glMatrixIndexPointerOES;
ANYGL_EXPORT extern PFNANYGLWEIGHTPOINTEROESPROC AnyGL_glWeightPointerOES;

#ifndef ANYGL_NO_DEFINES
#define glCurrentPaletteMatrixOES(matrixpaletteindex) ANYGL_CALL(AnyGL_glCurrentPaletteMatrixOES)(matrixpaletteindex)
#define glLoadPaletteFromModelViewMatrixOES() ANYGL_CALL(AnyGL_glLoadPaletteFromModelViewMatrixOES)()
#define glMatrixIndexPointerOES(size, type, stride, pointer) ANYGL_CALL(AnyGL_glMatrixIndexPointerOES)(size, type, stride, pointer)
#define glWeightPointerOES(size, type, stride, pointer) ANYGL_CALL(AnyGL_glWeightPointerOES)(size, type, stride, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_packed_depth_stencil */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_point_size_array */
typedef void (APIENTRY* PFNANYGLPOINTSIZEPOINTEROESPROC)(GLenum type, GLsizei stride, const void *pointer);

ANYGL_EXPORT extern PFNANYGLPOINTSIZEPOINTEROESPROC AnyGL_glPointSizePointerOES;

#ifndef ANYGL_NO_DEFINES
#define glPointSizePointerOES(type, stride, pointer) ANYGL_CALL(AnyGL_glPointSizePointerOES)(type, stride, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_point_sprite */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_primitive_bounding_box */


#ifndef ANYGL_NO_DEFINES
#define glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) ANYGL_CALL(AnyGL_glPrimitiveBoundingBox)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_query_matrix */
typedef GLbitfield (APIENTRY* PFNANYGLQUERYMATRIXXOESPROC)(GLfixed *mantissa, GLint *exponent);

ANYGL_EXPORT extern PFNANYGLQUERYMATRIXXOESPROC AnyGL_glQueryMatrixxOES;

#ifndef ANYGL_NO_DEFINES
#define glQueryMatrixxOES(mantissa, exponent) ANYGL_CALL(AnyGL_glQueryMatrixxOES)(mantissa, exponent)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_read_format */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_required_internalformat */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_rgb8_rgba8 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_sample_shading */


#ifndef ANYGL_NO_DEFINES
#define glMinSampleShadingOES(value) ANYGL_CALL(AnyGL_glMinSampleShading)(value)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_sample_variables */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_shader_image_atomic */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_shader_io_blocks */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_shader_multisample_interpolation */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_single_precision */
typedef void (APIENTRY* PFNANYGLCLIPPLANEFOESPROC)(GLenum plane, const GLfloat *equation);
typedef void (APIENTRY* PFNANYGLFRUSTUMFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (APIENTRY* PFNANYGLGETCLIPPLANEFOESPROC)(GLenum plane, GLfloat *equation);
typedef void (APIENTRY* PFNANYGLORTHOFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);

ANYGL_EXPORT extern PFNANYGLCLIPPLANEFOESPROC AnyGL_glClipPlanefOES;
ANYGL_EXPORT extern PFNANYGLFRUSTUMFOESPROC AnyGL_glFrustumfOES;
ANYGL_EXPORT extern PFNANYGLGETCLIPPLANEFOESPROC AnyGL_glGetClipPlanefOES;
ANYGL_EXPORT extern PFNANYGLORTHOFOESPROC AnyGL_glOrthofOES;

#ifndef ANYGL_NO_DEFINES
#define glClearDepthfOES(depth) ANYGL_CALL(AnyGL_glClearDepthf)(depth)
#define glClipPlanefOES(plane, equation) ANYGL_CALL(AnyGL_glClipPlanefOES)(plane, equation)
#define glDepthRangefOES(n, f) ANYGL_CALL(AnyGL_glDepthRangef)(n, f)
#define glFrustumfOES(l, r, b, t, n, f) ANYGL_CALL(AnyGL_glFrustumfOES)(l, r, b, t, n, f)
#define glGetClipPlanefOES(plane, equation) ANYGL_CALL(AnyGL_glGetClipPlanefOES)(plane, equation)
#define glOrthofOES(l, r, b, t, n, f) ANYGL_CALL(AnyGL_glOrthofOES)(l, r, b, t, n, f)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_standard_derivatives */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_stencil1 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_stencil4 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_stencil8 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_stencil_wrap */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_surfaceless_context */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_tessellation_point_size */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_tessellation_shader */


#ifndef ANYGL_NO_DEFINES
#define glPatchParameteriOES(pname, value) ANYGL_CALL(AnyGL_glPatchParameteri)(pname, value)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_3D */
typedef void (APIENTRY* PFNANYGLTEXIMAGE3DOESPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXSUBIMAGE3DOESPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLCOPYTEXSUBIMAGE3DOESPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXIMAGE3DOESPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXSUBIMAGE3DOESPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTURE3DOESPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);

ANYGL_EXPORT extern PFNANYGLTEXIMAGE3DOESPROC AnyGL_glTexImage3DOES;
ANYGL_EXPORT extern PFNANYGLTEXSUBIMAGE3DOESPROC AnyGL_glTexSubImage3DOES;
ANYGL_EXPORT extern PFNANYGLCOPYTEXSUBIMAGE3DOESPROC AnyGL_glCopyTexSubImage3DOES;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXIMAGE3DOESPROC AnyGL_glCompressedTexImage3DOES;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXSUBIMAGE3DOESPROC AnyGL_glCompressedTexSubImage3DOES;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTURE3DOESPROC AnyGL_glFramebufferTexture3DOES;

#ifndef ANYGL_NO_DEFINES
#define glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels) ANYGL_CALL(AnyGL_glTexImage3DOES)(target, level, internalformat, width, height, depth, border, format, type, pixels)
#define glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ANYGL_CALL(AnyGL_glTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
#define glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, x, y, width, height)
#define glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexImage3DOES)(target, level, internalformat, width, height, depth, border, imageSize, data)
#define glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) ANYGL_CALL(AnyGL_glCompressedTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
#define glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) ANYGL_CALL(AnyGL_glFramebufferTexture3DOES)(target, attachment, textarget, texture, level, zoffset)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_border_clamp */


#ifndef ANYGL_NO_DEFINES
#define glTexParameterIivOES(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterIiv)(target, pname, params)
#define glTexParameterIuivOES(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterIuiv)(target, pname, params)
#define glGetTexParameterIivOES(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterIiv)(target, pname, params)
#define glGetTexParameterIuivOES(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterIuiv)(target, pname, params)
#define glSamplerParameterIivOES(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterIiv)(sampler, pname, param)
#define glSamplerParameterIuivOES(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterIuiv)(sampler, pname, param)
#define glGetSamplerParameterIivOES(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameterIiv)(sampler, pname, params)
#define glGetSamplerParameterIuivOES(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameterIuiv)(sampler, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_buffer */


#ifndef ANYGL_NO_DEFINES
#define glTexBufferOES(target, internalformat, buffer) ANYGL_CALL(AnyGL_glTexBuffer)(target, internalformat, buffer)
#define glTexBufferRangeOES(target, internalformat, buffer, offset, size) ANYGL_CALL(AnyGL_glTexBufferRange)(target, internalformat, buffer, offset, size)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_compression_astc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_cube_map */
typedef void (APIENTRY* PFNANYGLTEXGENFOESPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLTEXGENFVOESPROC)(GLenum coord, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLTEXGENIOESPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLTEXGENIVOESPROC)(GLenum coord, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXGENFVOESPROC)(GLenum coord, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXGENIVOESPROC)(GLenum coord, GLenum pname, GLint *params);

ANYGL_EXPORT extern PFNANYGLTEXGENFOESPROC AnyGL_glTexGenfOES;
ANYGL_EXPORT extern PFNANYGLTEXGENFVOESPROC AnyGL_glTexGenfvOES;
ANYGL_EXPORT extern PFNANYGLTEXGENIOESPROC AnyGL_glTexGeniOES;
ANYGL_EXPORT extern PFNANYGLTEXGENIVOESPROC AnyGL_glTexGenivOES;
ANYGL_EXPORT extern PFNANYGLGETTEXGENFVOESPROC AnyGL_glGetTexGenfvOES;
ANYGL_EXPORT extern PFNANYGLGETTEXGENIVOESPROC AnyGL_glGetTexGenivOES;

#ifndef ANYGL_NO_DEFINES
#define glTexGenfOES(coord, pname, param) ANYGL_CALL(AnyGL_glTexGenfOES)(coord, pname, param)
#define glTexGenfvOES(coord, pname, params) ANYGL_CALL(AnyGL_glTexGenfvOES)(coord, pname, params)
#define glTexGeniOES(coord, pname, param) ANYGL_CALL(AnyGL_glTexGeniOES)(coord, pname, param)
#define glTexGenivOES(coord, pname, params) ANYGL_CALL(AnyGL_glTexGenivOES)(coord, pname, params)
#define glGetTexGenfvOES(coord, pname, params) ANYGL_CALL(AnyGL_glGetTexGenfvOES)(coord, pname, params)
#define glGetTexGenivOES(coord, pname, params) ANYGL_CALL(AnyGL_glGetTexGenivOES)(coord, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_cube_map_array */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_env_crossbar */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_float_linear */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_half_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_half_float_linear */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_mirrored_repeat */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_npot */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_stencil8 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_storage_multisample_2d_array */


#ifndef ANYGL_NO_DEFINES
#define glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations) ANYGL_CALL(AnyGL_glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_texture_view */


#ifndef ANYGL_NO_DEFINES
#define glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) ANYGL_CALL(AnyGL_glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_vertex_array_object */


#ifndef ANYGL_NO_DEFINES
#define glBindVertexArrayOES(array) ANYGL_CALL(AnyGL_glBindVertexArray)(array)
#define glDeleteVertexArraysOES(n, arrays) ANYGL_CALL(AnyGL_glDeleteVertexArrays)(n, arrays)
#define glGenVertexArraysOES(n, arrays) ANYGL_CALL(AnyGL_glGenVertexArrays)(n, arrays)
#define glIsVertexArrayOES(array) ANYGL_CALL(AnyGL_glIsVertexArray)(array)
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_vertex_half_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_vertex_type_10_10_10_2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_OES_viewport_array */
typedef void (APIENTRY* PFNANYGLDEPTHRANGEARRAYFVOESPROC)(GLuint first, GLsizei count, const GLfloat *v);
typedef void (APIENTRY* PFNANYGLDEPTHRANGEINDEXEDFOESPROC)(GLuint index, GLfloat n, GLfloat f);

ANYGL_EXPORT extern PFNANYGLDEPTHRANGEARRAYFVOESPROC AnyGL_glDepthRangeArrayfvOES;
ANYGL_EXPORT extern PFNANYGLDEPTHRANGEINDEXEDFOESPROC AnyGL_glDepthRangeIndexedfOES;

#ifndef ANYGL_NO_DEFINES
#define glViewportArrayvOES(first, count, v) ANYGL_CALL(AnyGL_glViewportArrayv)(first, count, v)
#define glViewportIndexedfOES(index, x, y, w, h) ANYGL_CALL(AnyGL_glViewportIndexedf)(index, x, y, w, h)
#define glViewportIndexedfvOES(index, v) ANYGL_CALL(AnyGL_glViewportIndexedfv)(index, v)
#define glScissorArrayvOES(first, count, v) ANYGL_CALL(AnyGL_glScissorArrayv)(first, count, v)
#define glScissorIndexedOES(index, left, bottom, width, height) ANYGL_CALL(AnyGL_glScissorIndexed)(index, left, bottom, width, height)
#define glScissorIndexedvOES(index, v) ANYGL_CALL(AnyGL_glScissorIndexedv)(index, v)
#define glDepthRangeArrayfvOES(first, count, v) ANYGL_CALL(AnyGL_glDepthRangeArrayfvOES)(first, count, v)
#define glDepthRangeIndexedfOES(index, n, f) ANYGL_CALL(AnyGL_glDepthRangeIndexedfOES)(index, n, f)
#define glGetFloati_vOES(target, index, data) ANYGL_CALL(AnyGL_glGetFloati_v)(target, index, data)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_422_pixels */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_EGL_image_array */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_EGL_image_storage */
typedef void (APIENTRY* PFNANYGLEGLIMAGETARGETTEXSTORAGEEXTPROC)(GLenum target, GLeglImageOES image, const GLint* attrib_list);
typedef void (APIENTRY* PFNANYGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC)(GLuint texture, GLeglImageOES image, const GLint* attrib_list);

ANYGL_EXPORT extern PFNANYGLEGLIMAGETARGETTEXSTORAGEEXTPROC AnyGL_glEGLImageTargetTexStorageEXT;
ANYGL_EXPORT extern PFNANYGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC AnyGL_glEGLImageTargetTextureStorageEXT;

#ifndef ANYGL_NO_DEFINES
#define glEGLImageTargetTexStorageEXT(target, image, attrib_list) ANYGL_CALL(AnyGL_glEGLImageTargetTexStorageEXT)(target, image, attrib_list)
#define glEGLImageTargetTextureStorageEXT(texture, image, attrib_list) ANYGL_CALL(AnyGL_glEGLImageTargetTextureStorageEXT)(texture, image, attrib_list)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_EGL_sync */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_YUV_target */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_abgr */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_base_instance */


#ifndef ANYGL_NO_DEFINES
#define glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance) ANYGL_CALL(AnyGL_glDrawArraysInstancedBaseInstance)(mode, first, count, instancecount, baseinstance)
#define glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance) ANYGL_CALL(AnyGL_glDrawElementsInstancedBaseInstance)(mode, count, type, indices, instancecount, baseinstance)
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance) ANYGL_CALL(AnyGL_glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, instancecount, basevertex, baseinstance)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_bgra */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_bindable_uniform */
typedef void (APIENTRY* PFNANYGLUNIFORMBUFFEREXTPROC)(GLuint program, GLint location, GLuint buffer);
typedef GLint (APIENTRY* PFNANYGLGETUNIFORMBUFFERSIZEEXTPROC)(GLuint program, GLint location);
typedef GLintptr (APIENTRY* PFNANYGLGETUNIFORMOFFSETEXTPROC)(GLuint program, GLint location);

ANYGL_EXPORT extern PFNANYGLUNIFORMBUFFEREXTPROC AnyGL_glUniformBufferEXT;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMBUFFERSIZEEXTPROC AnyGL_glGetUniformBufferSizeEXT;
ANYGL_EXPORT extern PFNANYGLGETUNIFORMOFFSETEXTPROC AnyGL_glGetUniformOffsetEXT;

#ifndef ANYGL_NO_DEFINES
#define glUniformBufferEXT(program, location, buffer) ANYGL_CALL(AnyGL_glUniformBufferEXT)(program, location, buffer)
#define glGetUniformBufferSizeEXT(program, location) ANYGL_CALL(AnyGL_glGetUniformBufferSizeEXT)(program, location)
#define glGetUniformOffsetEXT(program, location) ANYGL_CALL(AnyGL_glGetUniformOffsetEXT)(program, location)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_blend_color */


#ifndef ANYGL_NO_DEFINES
#define glBlendColorEXT(red, green, blue, alpha) ANYGL_CALL(AnyGL_glBlendColor)(red, green, blue, alpha)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_blend_equation_separate */


#ifndef ANYGL_NO_DEFINES
#define glBlendEquationSeparateEXT(modeRGB, modeAlpha) ANYGL_CALL(AnyGL_glBlendEquationSeparate)(modeRGB, modeAlpha)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_blend_func_extended */


#ifndef ANYGL_NO_DEFINES
#define glBindFragDataLocationIndexedEXT(program, colorNumber, index, name) ANYGL_CALL(AnyGL_glBindFragDataLocationIndexed)(program, colorNumber, index, name)
#define glBindFragDataLocationEXT(program, color, name) ANYGL_CALL(AnyGL_glBindFragDataLocation)(program, color, name)
#define glGetProgramResourceLocationIndexEXT(program, programInterface, name) ANYGL_CALL(AnyGL_glGetProgramResourceLocationIndex)(program, programInterface, name)
#define glGetFragDataIndexEXT(program, name) ANYGL_CALL(AnyGL_glGetFragDataIndex)(program, name)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_blend_func_separate */


#ifndef ANYGL_NO_DEFINES
#define glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) ANYGL_CALL(AnyGL_glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_blend_logic_op */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_blend_minmax */


#ifndef ANYGL_NO_DEFINES
#define glBlendEquationEXT(mode) ANYGL_CALL(AnyGL_glBlendEquation)(mode)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_blend_subtract */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_buffer_storage */


#ifndef ANYGL_NO_DEFINES
#define glBufferStorageEXT(target, size, data, flags) ANYGL_CALL(AnyGL_glBufferStorage)(target, size, data, flags)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_clear_texture */


#ifndef ANYGL_NO_DEFINES
#define glClearTexImageEXT(texture, level, format, type, data) ANYGL_CALL(AnyGL_glClearTexImage)(texture, level, format, type, data)
#define glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) ANYGL_CALL(AnyGL_glClearTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_clip_control */


#ifndef ANYGL_NO_DEFINES
#define glClipControlEXT(origin, depth) ANYGL_CALL(AnyGL_glClipControl)(origin, depth)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_clip_cull_distance */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_clip_volume_hint */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_cmyka */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_color_buffer_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_color_buffer_half_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_color_subtable */


#ifndef ANYGL_NO_DEFINES
#define glColorSubTableEXT(target, start, count, format, type, data) ANYGL_CALL(AnyGL_glColorSubTable)(target, start, count, format, type, data)
#define glCopyColorSubTableEXT(target, start, x, y, width) ANYGL_CALL(AnyGL_glCopyColorSubTable)(target, start, x, y, width)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_compiled_vertex_array */
typedef void (APIENTRY* PFNANYGLLOCKARRAYSEXTPROC)(GLint first, GLsizei count);
typedef void (APIENTRY* PFNANYGLUNLOCKARRAYSEXTPROC)();

ANYGL_EXPORT extern PFNANYGLLOCKARRAYSEXTPROC AnyGL_glLockArraysEXT;
ANYGL_EXPORT extern PFNANYGLUNLOCKARRAYSEXTPROC AnyGL_glUnlockArraysEXT;

#ifndef ANYGL_NO_DEFINES
#define glLockArraysEXT(first, count) ANYGL_CALL(AnyGL_glLockArraysEXT)(first, count)
#define glUnlockArraysEXT() ANYGL_CALL(AnyGL_glUnlockArraysEXT)()
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_conservative_depth */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_convolution */
typedef void (APIENTRY* PFNANYGLGETCONVOLUTIONFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void *image);
typedef void (APIENTRY* PFNANYGLGETCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETSEPARABLEFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);

ANYGL_EXPORT extern PFNANYGLGETCONVOLUTIONFILTEREXTPROC AnyGL_glGetConvolutionFilterEXT;
ANYGL_EXPORT extern PFNANYGLGETCONVOLUTIONPARAMETERFVEXTPROC AnyGL_glGetConvolutionParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETCONVOLUTIONPARAMETERIVEXTPROC AnyGL_glGetConvolutionParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGETSEPARABLEFILTEREXTPROC AnyGL_glGetSeparableFilterEXT;

#ifndef ANYGL_NO_DEFINES
#define glConvolutionFilter1DEXT(target, internalformat, width, format, type, image) ANYGL_CALL(AnyGL_glConvolutionFilter1D)(target, internalformat, width, format, type, image)
#define glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image) ANYGL_CALL(AnyGL_glConvolutionFilter2D)(target, internalformat, width, height, format, type, image)
#define glConvolutionParameterfEXT(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameterf)(target, pname, params)
#define glConvolutionParameterfvEXT(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameterfv)(target, pname, params)
#define glConvolutionParameteriEXT(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameteri)(target, pname, params)
#define glConvolutionParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glConvolutionParameteriv)(target, pname, params)
#define glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width) ANYGL_CALL(AnyGL_glCopyConvolutionFilter1D)(target, internalformat, x, y, width)
#define glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) ANYGL_CALL(AnyGL_glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height)
#define glGetConvolutionFilterEXT(target, format, type, image) ANYGL_CALL(AnyGL_glGetConvolutionFilterEXT)(target, format, type, image)
#define glGetConvolutionParameterfvEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetConvolutionParameterfvEXT)(target, pname, params)
#define glGetConvolutionParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetConvolutionParameterivEXT)(target, pname, params)
#define glGetSeparableFilterEXT(target, format, type, row, column, span) ANYGL_CALL(AnyGL_glGetSeparableFilterEXT)(target, format, type, row, column, span)
#define glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column) ANYGL_CALL(AnyGL_glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_coordinate_frame */
typedef void (APIENTRY* PFNANYGLTANGENT3BEXTPROC)(GLbyte tx, GLbyte ty, GLbyte tz);
typedef void (APIENTRY* PFNANYGLTANGENT3BVEXTPROC)(const GLbyte *v);
typedef void (APIENTRY* PFNANYGLTANGENT3DEXTPROC)(GLdouble tx, GLdouble ty, GLdouble tz);
typedef void (APIENTRY* PFNANYGLTANGENT3DVEXTPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLTANGENT3FEXTPROC)(GLfloat tx, GLfloat ty, GLfloat tz);
typedef void (APIENTRY* PFNANYGLTANGENT3FVEXTPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLTANGENT3IEXTPROC)(GLint tx, GLint ty, GLint tz);
typedef void (APIENTRY* PFNANYGLTANGENT3IVEXTPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLTANGENT3SEXTPROC)(GLshort tx, GLshort ty, GLshort tz);
typedef void (APIENTRY* PFNANYGLTANGENT3SVEXTPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLBINORMAL3BEXTPROC)(GLbyte bx, GLbyte by, GLbyte bz);
typedef void (APIENTRY* PFNANYGLBINORMAL3BVEXTPROC)(const GLbyte *v);
typedef void (APIENTRY* PFNANYGLBINORMAL3DEXTPROC)(GLdouble bx, GLdouble by, GLdouble bz);
typedef void (APIENTRY* PFNANYGLBINORMAL3DVEXTPROC)(const GLdouble *v);
typedef void (APIENTRY* PFNANYGLBINORMAL3FEXTPROC)(GLfloat bx, GLfloat by, GLfloat bz);
typedef void (APIENTRY* PFNANYGLBINORMAL3FVEXTPROC)(const GLfloat *v);
typedef void (APIENTRY* PFNANYGLBINORMAL3IEXTPROC)(GLint bx, GLint by, GLint bz);
typedef void (APIENTRY* PFNANYGLBINORMAL3IVEXTPROC)(const GLint *v);
typedef void (APIENTRY* PFNANYGLBINORMAL3SEXTPROC)(GLshort bx, GLshort by, GLshort bz);
typedef void (APIENTRY* PFNANYGLBINORMAL3SVEXTPROC)(const GLshort *v);
typedef void (APIENTRY* PFNANYGLTANGENTPOINTEREXTPROC)(GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLBINORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, const void *pointer);

ANYGL_EXPORT extern PFNANYGLTANGENT3BEXTPROC AnyGL_glTangent3bEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3BVEXTPROC AnyGL_glTangent3bvEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3DEXTPROC AnyGL_glTangent3dEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3DVEXTPROC AnyGL_glTangent3dvEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3FEXTPROC AnyGL_glTangent3fEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3FVEXTPROC AnyGL_glTangent3fvEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3IEXTPROC AnyGL_glTangent3iEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3IVEXTPROC AnyGL_glTangent3ivEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3SEXTPROC AnyGL_glTangent3sEXT;
ANYGL_EXPORT extern PFNANYGLTANGENT3SVEXTPROC AnyGL_glTangent3svEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3BEXTPROC AnyGL_glBinormal3bEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3BVEXTPROC AnyGL_glBinormal3bvEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3DEXTPROC AnyGL_glBinormal3dEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3DVEXTPROC AnyGL_glBinormal3dvEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3FEXTPROC AnyGL_glBinormal3fEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3FVEXTPROC AnyGL_glBinormal3fvEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3IEXTPROC AnyGL_glBinormal3iEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3IVEXTPROC AnyGL_glBinormal3ivEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3SEXTPROC AnyGL_glBinormal3sEXT;
ANYGL_EXPORT extern PFNANYGLBINORMAL3SVEXTPROC AnyGL_glBinormal3svEXT;
ANYGL_EXPORT extern PFNANYGLTANGENTPOINTEREXTPROC AnyGL_glTangentPointerEXT;
ANYGL_EXPORT extern PFNANYGLBINORMALPOINTEREXTPROC AnyGL_glBinormalPointerEXT;

#ifndef ANYGL_NO_DEFINES
#define glTangent3bEXT(tx, ty, tz) ANYGL_CALL(AnyGL_glTangent3bEXT)(tx, ty, tz)
#define glTangent3bvEXT(v) ANYGL_CALL(AnyGL_glTangent3bvEXT)(v)
#define glTangent3dEXT(tx, ty, tz) ANYGL_CALL(AnyGL_glTangent3dEXT)(tx, ty, tz)
#define glTangent3dvEXT(v) ANYGL_CALL(AnyGL_glTangent3dvEXT)(v)
#define glTangent3fEXT(tx, ty, tz) ANYGL_CALL(AnyGL_glTangent3fEXT)(tx, ty, tz)
#define glTangent3fvEXT(v) ANYGL_CALL(AnyGL_glTangent3fvEXT)(v)
#define glTangent3iEXT(tx, ty, tz) ANYGL_CALL(AnyGL_glTangent3iEXT)(tx, ty, tz)
#define glTangent3ivEXT(v) ANYGL_CALL(AnyGL_glTangent3ivEXT)(v)
#define glTangent3sEXT(tx, ty, tz) ANYGL_CALL(AnyGL_glTangent3sEXT)(tx, ty, tz)
#define glTangent3svEXT(v) ANYGL_CALL(AnyGL_glTangent3svEXT)(v)
#define glBinormal3bEXT(bx, by, bz) ANYGL_CALL(AnyGL_glBinormal3bEXT)(bx, by, bz)
#define glBinormal3bvEXT(v) ANYGL_CALL(AnyGL_glBinormal3bvEXT)(v)
#define glBinormal3dEXT(bx, by, bz) ANYGL_CALL(AnyGL_glBinormal3dEXT)(bx, by, bz)
#define glBinormal3dvEXT(v) ANYGL_CALL(AnyGL_glBinormal3dvEXT)(v)
#define glBinormal3fEXT(bx, by, bz) ANYGL_CALL(AnyGL_glBinormal3fEXT)(bx, by, bz)
#define glBinormal3fvEXT(v) ANYGL_CALL(AnyGL_glBinormal3fvEXT)(v)
#define glBinormal3iEXT(bx, by, bz) ANYGL_CALL(AnyGL_glBinormal3iEXT)(bx, by, bz)
#define glBinormal3ivEXT(v) ANYGL_CALL(AnyGL_glBinormal3ivEXT)(v)
#define glBinormal3sEXT(bx, by, bz) ANYGL_CALL(AnyGL_glBinormal3sEXT)(bx, by, bz)
#define glBinormal3svEXT(v) ANYGL_CALL(AnyGL_glBinormal3svEXT)(v)
#define glTangentPointerEXT(type, stride, pointer) ANYGL_CALL(AnyGL_glTangentPointerEXT)(type, stride, pointer)
#define glBinormalPointerEXT(type, stride, pointer) ANYGL_CALL(AnyGL_glBinormalPointerEXT)(type, stride, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_copy_image */


#ifndef ANYGL_NO_DEFINES
#define glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) ANYGL_CALL(AnyGL_glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_copy_texture */


#ifndef ANYGL_NO_DEFINES
#define glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border) ANYGL_CALL(AnyGL_glCopyTexImage1D)(target, level, internalformat, x, y, width, border)
#define glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) ANYGL_CALL(AnyGL_glCopyTexImage2D)(target, level, internalformat, x, y, width, height, border)
#define glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width) ANYGL_CALL(AnyGL_glCopyTexSubImage1D)(target, level, xoffset, x, y, width)
#define glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height)
#define glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_cull_vertex */
typedef void (APIENTRY* PFNANYGLCULLPARAMETERDVEXTPROC)(GLenum pname, GLdouble *params);
typedef void (APIENTRY* PFNANYGLCULLPARAMETERFVEXTPROC)(GLenum pname, GLfloat *params);

ANYGL_EXPORT extern PFNANYGLCULLPARAMETERDVEXTPROC AnyGL_glCullParameterdvEXT;
ANYGL_EXPORT extern PFNANYGLCULLPARAMETERFVEXTPROC AnyGL_glCullParameterfvEXT;

#ifndef ANYGL_NO_DEFINES
#define glCullParameterdvEXT(pname, params) ANYGL_CALL(AnyGL_glCullParameterdvEXT)(pname, params)
#define glCullParameterfvEXT(pname, params) ANYGL_CALL(AnyGL_glCullParameterfvEXT)(pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_debug_label */
typedef void (APIENTRY* PFNANYGLLABELOBJECTEXTPROC)(GLenum type, GLuint object, GLsizei length, const GLchar *label);
typedef void (APIENTRY* PFNANYGLGETOBJECTLABELEXTPROC)(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);

ANYGL_EXPORT extern PFNANYGLLABELOBJECTEXTPROC AnyGL_glLabelObjectEXT;
ANYGL_EXPORT extern PFNANYGLGETOBJECTLABELEXTPROC AnyGL_glGetObjectLabelEXT;

#ifndef ANYGL_NO_DEFINES
#define glLabelObjectEXT(type, object, length, label) ANYGL_CALL(AnyGL_glLabelObjectEXT)(type, object, length, label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) ANYGL_CALL(AnyGL_glGetObjectLabelEXT)(type, object, bufSize, length, label)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_debug_marker */
typedef void (APIENTRY* PFNANYGLINSERTEVENTMARKEREXTPROC)(GLsizei length, const GLchar *marker);
typedef void (APIENTRY* PFNANYGLPUSHGROUPMARKEREXTPROC)(GLsizei length, const GLchar *marker);
typedef void (APIENTRY* PFNANYGLPOPGROUPMARKEREXTPROC)();

ANYGL_EXPORT extern PFNANYGLINSERTEVENTMARKEREXTPROC AnyGL_glInsertEventMarkerEXT;
ANYGL_EXPORT extern PFNANYGLPUSHGROUPMARKEREXTPROC AnyGL_glPushGroupMarkerEXT;
ANYGL_EXPORT extern PFNANYGLPOPGROUPMARKEREXTPROC AnyGL_glPopGroupMarkerEXT;

#ifndef ANYGL_NO_DEFINES
#define glInsertEventMarkerEXT(length, marker) ANYGL_CALL(AnyGL_glInsertEventMarkerEXT)(length, marker)
#define glPushGroupMarkerEXT(length, marker) ANYGL_CALL(AnyGL_glPushGroupMarkerEXT)(length, marker)
#define glPopGroupMarkerEXT() ANYGL_CALL(AnyGL_glPopGroupMarkerEXT)()
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_depth_bounds_test */
typedef void (APIENTRY* PFNANYGLDEPTHBOUNDSEXTPROC)(GLclampd zmin, GLclampd zmax);

ANYGL_EXPORT extern PFNANYGLDEPTHBOUNDSEXTPROC AnyGL_glDepthBoundsEXT;

#ifndef ANYGL_NO_DEFINES
#define glDepthBoundsEXT(zmin, zmax) ANYGL_CALL(AnyGL_glDepthBoundsEXT)(zmin, zmax)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_depth_clamp */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_direct_state_access */
typedef void (APIENTRY* PFNANYGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat *m);
typedef void (APIENTRY* PFNANYGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble *m);
typedef void (APIENTRY* PFNANYGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat *m);
typedef void (APIENTRY* PFNANYGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble *m);
typedef void (APIENTRY* PFNANYGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRY* PFNANYGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRY* PFNANYGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRY* PFNANYGLMATRIXPOPEXTPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLMATRIXPUSHEXTPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef void (APIENTRY* PFNANYGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRY* PFNANYGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRY* PFNANYGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRY* PFNANYGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
typedef void (APIENTRY* PFNANYGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRY* PFNANYGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (APIENTRY* PFNANYGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
typedef void (APIENTRY* PFNANYGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRY* PFNANYGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRY* PFNANYGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRY* PFNANYGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRY* PFNANYGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRY* PFNANYGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (APIENTRY* PFNANYGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (APIENTRY* PFNANYGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, void **data);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, void *img);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRY* PFNANYGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, void *img);
typedef void (APIENTRY* PFNANYGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat *m);
typedef void (APIENTRY* PFNANYGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble *m);
typedef void (APIENTRY* PFNANYGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat *m);
typedef void (APIENTRY* PFNANYGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble *m);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void *(APIENTRY* PFNANYGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
typedef GLboolean (APIENTRY* PFNANYGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
typedef void (APIENTRY* PFNANYGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, void **params);
typedef void (APIENTRY* PFNANYGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (APIENTRY* PFNANYGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRY* PFNANYGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRY* PFNANYGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint *params);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint *params);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint *params);
typedef void (APIENTRY* PFNANYGLENABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (APIENTRY* PFNANYGLDISABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (APIENTRY* PFNANYGLGETPOINTERI_VEXTPROC)(GLenum pname, GLuint index, void **params);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble *params);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRY* PFNANYGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, void *string);
typedef void (APIENTRY* PFNANYGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef GLenum (APIENTRY* PFNANYGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRY* PFNANYGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
typedef void (APIENTRY* PFNANYGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (APIENTRY* PFNANYGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (APIENTRY* PFNANYGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (APIENTRY* PFNANYGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYINDEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYNORMALOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLENABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (APIENTRY* PFNANYGLDISABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (APIENTRY* PFNANYGLENABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (APIENTRY* PFNANYGLDISABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (APIENTRY* PFNANYGLGETVERTEXARRAYINTEGERVEXTPROC)(GLuint vaobj, GLenum pname, GLint *param);
typedef void (APIENTRY* PFNANYGLGETVERTEXARRAYPOINTERVEXTPROC)(GLuint vaobj, GLenum pname, void **param);
typedef void (APIENTRY* PFNANYGLGETVERTEXARRAYINTEGERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (APIENTRY* PFNANYGLGETVERTEXARRAYPOINTERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, void **param);
typedef void *(APIENTRY* PFNANYGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRY* PFNANYGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLCLEARNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (APIENTRY* PFNANYGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRY* PFNANYGLTEXTUREBUFFERRANGEEXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRY* PFNANYGLTEXTUREPAGECOMMITMENTEXTPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (APIENTRY* PFNANYGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)(GLuint vaobj, GLuint index, GLuint divisor);

ANYGL_EXPORT extern PFNANYGLMATRIXLOADFEXTPROC AnyGL_glMatrixLoadfEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXLOADDEXTPROC AnyGL_glMatrixLoaddEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXMULTFEXTPROC AnyGL_glMatrixMultfEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXMULTDEXTPROC AnyGL_glMatrixMultdEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXLOADIDENTITYEXTPROC AnyGL_glMatrixLoadIdentityEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXROTATEFEXTPROC AnyGL_glMatrixRotatefEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXROTATEDEXTPROC AnyGL_glMatrixRotatedEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXSCALEFEXTPROC AnyGL_glMatrixScalefEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXSCALEDEXTPROC AnyGL_glMatrixScaledEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXTRANSLATEFEXTPROC AnyGL_glMatrixTranslatefEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXTRANSLATEDEXTPROC AnyGL_glMatrixTranslatedEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXFRUSTUMEXTPROC AnyGL_glMatrixFrustumEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXORTHOEXTPROC AnyGL_glMatrixOrthoEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXPOPEXTPROC AnyGL_glMatrixPopEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXPUSHEXTPROC AnyGL_glMatrixPushEXT;
ANYGL_EXPORT extern PFNANYGLCLIENTATTRIBDEFAULTEXTPROC AnyGL_glClientAttribDefaultEXT;
ANYGL_EXPORT extern PFNANYGLPUSHCLIENTATTRIBDEFAULTEXTPROC AnyGL_glPushClientAttribDefaultEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERFEXTPROC AnyGL_glTextureParameterfEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERFVEXTPROC AnyGL_glTextureParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIEXTPROC AnyGL_glTextureParameteriEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIVEXTPROC AnyGL_glTextureParameterivEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREIMAGE1DEXTPROC AnyGL_glTextureImage1DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREIMAGE2DEXTPROC AnyGL_glTextureImage2DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESUBIMAGE1DEXTPROC AnyGL_glTextureSubImage1DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESUBIMAGE2DEXTPROC AnyGL_glTextureSubImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTUREIMAGE1DEXTPROC AnyGL_glCopyTextureImage1DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTUREIMAGE2DEXTPROC AnyGL_glCopyTextureImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTURESUBIMAGE1DEXTPROC AnyGL_glCopyTextureSubImage1DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTURESUBIMAGE2DEXTPROC AnyGL_glCopyTextureSubImage2DEXT;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREIMAGEEXTPROC AnyGL_glGetTextureImageEXT;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERFVEXTPROC AnyGL_glGetTextureParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERIVEXTPROC AnyGL_glGetTextureParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGETTEXTURELEVELPARAMETERFVEXTPROC AnyGL_glGetTextureLevelParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETTEXTURELEVELPARAMETERIVEXTPROC AnyGL_glGetTextureLevelParameterivEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREIMAGE3DEXTPROC AnyGL_glTextureImage3DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESUBIMAGE3DEXTPROC AnyGL_glTextureSubImage3DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYTEXTURESUBIMAGE3DEXTPROC AnyGL_glCopyTextureSubImage3DEXT;
ANYGL_EXPORT extern PFNANYGLBINDMULTITEXTUREEXTPROC AnyGL_glBindMultiTextureEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXCOORDPOINTEREXTPROC AnyGL_glMultiTexCoordPointerEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXENVFEXTPROC AnyGL_glMultiTexEnvfEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXENVFVEXTPROC AnyGL_glMultiTexEnvfvEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXENVIEXTPROC AnyGL_glMultiTexEnviEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXENVIVEXTPROC AnyGL_glMultiTexEnvivEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXGENDEXTPROC AnyGL_glMultiTexGendEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXGENDVEXTPROC AnyGL_glMultiTexGendvEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXGENFEXTPROC AnyGL_glMultiTexGenfEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXGENFVEXTPROC AnyGL_glMultiTexGenfvEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXGENIEXTPROC AnyGL_glMultiTexGeniEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXGENIVEXTPROC AnyGL_glMultiTexGenivEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXENVFVEXTPROC AnyGL_glGetMultiTexEnvfvEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXENVIVEXTPROC AnyGL_glGetMultiTexEnvivEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXGENDVEXTPROC AnyGL_glGetMultiTexGendvEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXGENFVEXTPROC AnyGL_glGetMultiTexGenfvEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXGENIVEXTPROC AnyGL_glGetMultiTexGenivEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXPARAMETERIEXTPROC AnyGL_glMultiTexParameteriEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXPARAMETERIVEXTPROC AnyGL_glMultiTexParameterivEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXPARAMETERFEXTPROC AnyGL_glMultiTexParameterfEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXPARAMETERFVEXTPROC AnyGL_glMultiTexParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXIMAGE1DEXTPROC AnyGL_glMultiTexImage1DEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXIMAGE2DEXTPROC AnyGL_glMultiTexImage2DEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXSUBIMAGE1DEXTPROC AnyGL_glMultiTexSubImage1DEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXSUBIMAGE2DEXTPROC AnyGL_glMultiTexSubImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYMULTITEXIMAGE1DEXTPROC AnyGL_glCopyMultiTexImage1DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYMULTITEXIMAGE2DEXTPROC AnyGL_glCopyMultiTexImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYMULTITEXSUBIMAGE1DEXTPROC AnyGL_glCopyMultiTexSubImage1DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYMULTITEXSUBIMAGE2DEXTPROC AnyGL_glCopyMultiTexSubImage2DEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXIMAGEEXTPROC AnyGL_glGetMultiTexImageEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXPARAMETERFVEXTPROC AnyGL_glGetMultiTexParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXPARAMETERIVEXTPROC AnyGL_glGetMultiTexParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXLEVELPARAMETERFVEXTPROC AnyGL_glGetMultiTexLevelParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXLEVELPARAMETERIVEXTPROC AnyGL_glGetMultiTexLevelParameterivEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXIMAGE3DEXTPROC AnyGL_glMultiTexImage3DEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXSUBIMAGE3DEXTPROC AnyGL_glMultiTexSubImage3DEXT;
ANYGL_EXPORT extern PFNANYGLCOPYMULTITEXSUBIMAGE3DEXTPROC AnyGL_glCopyMultiTexSubImage3DEXT;
ANYGL_EXPORT extern PFNANYGLENABLECLIENTSTATEINDEXEDEXTPROC AnyGL_glEnableClientStateIndexedEXT;
ANYGL_EXPORT extern PFNANYGLDISABLECLIENTSTATEINDEXEDEXTPROC AnyGL_glDisableClientStateIndexedEXT;
ANYGL_EXPORT extern PFNANYGLGETPOINTERINDEXEDVEXTPROC AnyGL_glGetPointerIndexedvEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC AnyGL_glCompressedTextureImage3DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC AnyGL_glCompressedTextureImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC AnyGL_glCompressedTextureImage1DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC AnyGL_glCompressedTextureSubImage3DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC AnyGL_glCompressedTextureSubImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC AnyGL_glCompressedTextureSubImage1DEXT;
ANYGL_EXPORT extern PFNANYGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC AnyGL_glGetCompressedTextureImageEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC AnyGL_glCompressedMultiTexImage3DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC AnyGL_glCompressedMultiTexImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC AnyGL_glCompressedMultiTexImage1DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC AnyGL_glCompressedMultiTexSubImage3DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC AnyGL_glCompressedMultiTexSubImage2DEXT;
ANYGL_EXPORT extern PFNANYGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC AnyGL_glCompressedMultiTexSubImage1DEXT;
ANYGL_EXPORT extern PFNANYGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC AnyGL_glGetCompressedMultiTexImageEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXLOADTRANSPOSEFEXTPROC AnyGL_glMatrixLoadTransposefEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXLOADTRANSPOSEDEXTPROC AnyGL_glMatrixLoadTransposedEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXMULTTRANSPOSEFEXTPROC AnyGL_glMatrixMultTransposefEXT;
ANYGL_EXPORT extern PFNANYGLMATRIXMULTTRANSPOSEDEXTPROC AnyGL_glMatrixMultTransposedEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERDATAEXTPROC AnyGL_glNamedBufferDataEXT;
ANYGL_EXPORT extern PFNANYGLMAPNAMEDBUFFEREXTPROC AnyGL_glMapNamedBufferEXT;
ANYGL_EXPORT extern PFNANYGLUNMAPNAMEDBUFFEREXTPROC AnyGL_glUnmapNamedBufferEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDBUFFERPARAMETERIVEXTPROC AnyGL_glGetNamedBufferParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDBUFFERPOINTERVEXTPROC AnyGL_glGetNamedBufferPointervEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDBUFFERSUBDATAEXTPROC AnyGL_glGetNamedBufferSubDataEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREBUFFEREXTPROC AnyGL_glTextureBufferEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXBUFFEREXTPROC AnyGL_glMultiTexBufferEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIIVEXTPROC AnyGL_glTextureParameterIivEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREPARAMETERIUIVEXTPROC AnyGL_glTextureParameterIuivEXT;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERIIVEXTPROC AnyGL_glGetTextureParameterIivEXT;
ANYGL_EXPORT extern PFNANYGLGETTEXTUREPARAMETERIUIVEXTPROC AnyGL_glGetTextureParameterIuivEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXPARAMETERIIVEXTPROC AnyGL_glMultiTexParameterIivEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXPARAMETERIUIVEXTPROC AnyGL_glMultiTexParameterIuivEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXPARAMETERIIVEXTPROC AnyGL_glGetMultiTexParameterIivEXT;
ANYGL_EXPORT extern PFNANYGLGETMULTITEXPARAMETERIUIVEXTPROC AnyGL_glGetMultiTexParameterIuivEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC AnyGL_glNamedProgramLocalParameters4fvEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC AnyGL_glNamedProgramLocalParameterI4iEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC AnyGL_glNamedProgramLocalParameterI4ivEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC AnyGL_glNamedProgramLocalParametersI4ivEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC AnyGL_glNamedProgramLocalParameterI4uiEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC AnyGL_glNamedProgramLocalParameterI4uivEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC AnyGL_glNamedProgramLocalParametersI4uivEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC AnyGL_glGetNamedProgramLocalParameterIivEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC AnyGL_glGetNamedProgramLocalParameterIuivEXT;
ANYGL_EXPORT extern PFNANYGLENABLECLIENTSTATEIEXTPROC AnyGL_glEnableClientStateiEXT;
ANYGL_EXPORT extern PFNANYGLDISABLECLIENTSTATEIEXTPROC AnyGL_glDisableClientStateiEXT;
ANYGL_EXPORT extern PFNANYGLGETPOINTERI_VEXTPROC AnyGL_glGetPointeri_vEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMSTRINGEXTPROC AnyGL_glNamedProgramStringEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC AnyGL_glNamedProgramLocalParameter4dEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC AnyGL_glNamedProgramLocalParameter4dvEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC AnyGL_glNamedProgramLocalParameter4fEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC AnyGL_glNamedProgramLocalParameter4fvEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC AnyGL_glGetNamedProgramLocalParameterdvEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC AnyGL_glGetNamedProgramLocalParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDPROGRAMIVEXTPROC AnyGL_glGetNamedProgramivEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDPROGRAMSTRINGEXTPROC AnyGL_glGetNamedProgramStringEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDRENDERBUFFERSTORAGEEXTPROC AnyGL_glNamedRenderbufferStorageEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC AnyGL_glGetNamedRenderbufferParameterivEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC AnyGL_glNamedRenderbufferStorageMultisampleEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC AnyGL_glNamedRenderbufferStorageMultisampleCoverageEXT;
ANYGL_EXPORT extern PFNANYGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC AnyGL_glCheckNamedFramebufferStatusEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC AnyGL_glNamedFramebufferTexture1DEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC AnyGL_glNamedFramebufferTexture2DEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC AnyGL_glNamedFramebufferTexture3DEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC AnyGL_glNamedFramebufferRenderbufferEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC AnyGL_glGetNamedFramebufferAttachmentParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGENERATETEXTUREMIPMAPEXTPROC AnyGL_glGenerateTextureMipmapEXT;
ANYGL_EXPORT extern PFNANYGLGENERATEMULTITEXMIPMAPEXTPROC AnyGL_glGenerateMultiTexMipmapEXT;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERDRAWBUFFEREXTPROC AnyGL_glFramebufferDrawBufferEXT;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERDRAWBUFFERSEXTPROC AnyGL_glFramebufferDrawBuffersEXT;
ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERREADBUFFEREXTPROC AnyGL_glFramebufferReadBufferEXT;
ANYGL_EXPORT extern PFNANYGLGETFRAMEBUFFERPARAMETERIVEXTPROC AnyGL_glGetFramebufferParameterivEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDCOPYBUFFERSUBDATAEXTPROC AnyGL_glNamedCopyBufferSubDataEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTUREEXTPROC AnyGL_glNamedFramebufferTextureEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC AnyGL_glNamedFramebufferTextureLayerEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC AnyGL_glNamedFramebufferTextureFaceEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURERENDERBUFFEREXTPROC AnyGL_glTextureRenderbufferEXT;
ANYGL_EXPORT extern PFNANYGLMULTITEXRENDERBUFFEREXTPROC AnyGL_glMultiTexRenderbufferEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXOFFSETEXTPROC AnyGL_glVertexArrayVertexOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYCOLOROFFSETEXTPROC AnyGL_glVertexArrayColorOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC AnyGL_glVertexArrayEdgeFlagOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYINDEXOFFSETEXTPROC AnyGL_glVertexArrayIndexOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYNORMALOFFSETEXTPROC AnyGL_glVertexArrayNormalOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYTEXCOORDOFFSETEXTPROC AnyGL_glVertexArrayTexCoordOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC AnyGL_glVertexArrayMultiTexCoordOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYFOGCOORDOFFSETEXTPROC AnyGL_glVertexArrayFogCoordOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC AnyGL_glVertexArraySecondaryColorOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC AnyGL_glVertexArrayVertexAttribOffsetEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC AnyGL_glVertexArrayVertexAttribIOffsetEXT;
ANYGL_EXPORT extern PFNANYGLENABLEVERTEXARRAYEXTPROC AnyGL_glEnableVertexArrayEXT;
ANYGL_EXPORT extern PFNANYGLDISABLEVERTEXARRAYEXTPROC AnyGL_glDisableVertexArrayEXT;
ANYGL_EXPORT extern PFNANYGLENABLEVERTEXARRAYATTRIBEXTPROC AnyGL_glEnableVertexArrayAttribEXT;
ANYGL_EXPORT extern PFNANYGLDISABLEVERTEXARRAYATTRIBEXTPROC AnyGL_glDisableVertexArrayAttribEXT;
ANYGL_EXPORT extern PFNANYGLGETVERTEXARRAYINTEGERVEXTPROC AnyGL_glGetVertexArrayIntegervEXT;
ANYGL_EXPORT extern PFNANYGLGETVERTEXARRAYPOINTERVEXTPROC AnyGL_glGetVertexArrayPointervEXT;
ANYGL_EXPORT extern PFNANYGLGETVERTEXARRAYINTEGERI_VEXTPROC AnyGL_glGetVertexArrayIntegeri_vEXT;
ANYGL_EXPORT extern PFNANYGLGETVERTEXARRAYPOINTERI_VEXTPROC AnyGL_glGetVertexArrayPointeri_vEXT;
ANYGL_EXPORT extern PFNANYGLMAPNAMEDBUFFERRANGEEXTPROC AnyGL_glMapNamedBufferRangeEXT;
ANYGL_EXPORT extern PFNANYGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC AnyGL_glFlushMappedNamedBufferRangeEXT;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDBUFFERDATAEXTPROC AnyGL_glClearNamedBufferDataEXT;
ANYGL_EXPORT extern PFNANYGLCLEARNAMEDBUFFERSUBDATAEXTPROC AnyGL_glClearNamedBufferSubDataEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC AnyGL_glNamedFramebufferParameteriEXT;
ANYGL_EXPORT extern PFNANYGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC AnyGL_glGetNamedFramebufferParameterivEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1DEXTPROC AnyGL_glProgramUniform1dEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2DEXTPROC AnyGL_glProgramUniform2dEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3DEXTPROC AnyGL_glProgramUniform3dEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4DEXTPROC AnyGL_glProgramUniform4dEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM1DVEXTPROC AnyGL_glProgramUniform1dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM2DVEXTPROC AnyGL_glProgramUniform2dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM3DVEXTPROC AnyGL_glProgramUniform3dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORM4DVEXTPROC AnyGL_glProgramUniform4dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2DVEXTPROC AnyGL_glProgramUniformMatrix2dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3DVEXTPROC AnyGL_glProgramUniformMatrix3dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4DVEXTPROC AnyGL_glProgramUniformMatrix4dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC AnyGL_glProgramUniformMatrix2x3dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC AnyGL_glProgramUniformMatrix2x4dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC AnyGL_glProgramUniformMatrix3x2dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC AnyGL_glProgramUniformMatrix3x4dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC AnyGL_glProgramUniformMatrix4x2dvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC AnyGL_glProgramUniformMatrix4x3dvEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREBUFFERRANGEEXTPROC AnyGL_glTextureBufferRangeEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE1DEXTPROC AnyGL_glTextureStorage1DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE2DEXTPROC AnyGL_glTextureStorage2DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE3DEXTPROC AnyGL_glTextureStorage3DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC AnyGL_glTextureStorage2DMultisampleEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC AnyGL_glTextureStorage3DMultisampleEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC AnyGL_glVertexArrayBindVertexBufferEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC AnyGL_glVertexArrayVertexAttribFormatEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC AnyGL_glVertexArrayVertexAttribIFormatEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC AnyGL_glVertexArrayVertexAttribLFormatEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC AnyGL_glVertexArrayVertexAttribBindingEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC AnyGL_glVertexArrayVertexBindingDivisorEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC AnyGL_glVertexArrayVertexAttribLOffsetEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREPAGECOMMITMENTEXTPROC AnyGL_glTexturePageCommitmentEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC AnyGL_glVertexArrayVertexAttribDivisorEXT;

#ifndef ANYGL_NO_DEFINES
#define glMatrixLoadfEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixLoadfEXT)(mode, m)
#define glMatrixLoaddEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixLoaddEXT)(mode, m)
#define glMatrixMultfEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixMultfEXT)(mode, m)
#define glMatrixMultdEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixMultdEXT)(mode, m)
#define glMatrixLoadIdentityEXT(mode) ANYGL_CALL(AnyGL_glMatrixLoadIdentityEXT)(mode)
#define glMatrixRotatefEXT(mode, angle, x, y, z) ANYGL_CALL(AnyGL_glMatrixRotatefEXT)(mode, angle, x, y, z)
#define glMatrixRotatedEXT(mode, angle, x, y, z) ANYGL_CALL(AnyGL_glMatrixRotatedEXT)(mode, angle, x, y, z)
#define glMatrixScalefEXT(mode, x, y, z) ANYGL_CALL(AnyGL_glMatrixScalefEXT)(mode, x, y, z)
#define glMatrixScaledEXT(mode, x, y, z) ANYGL_CALL(AnyGL_glMatrixScaledEXT)(mode, x, y, z)
#define glMatrixTranslatefEXT(mode, x, y, z) ANYGL_CALL(AnyGL_glMatrixTranslatefEXT)(mode, x, y, z)
#define glMatrixTranslatedEXT(mode, x, y, z) ANYGL_CALL(AnyGL_glMatrixTranslatedEXT)(mode, x, y, z)
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) ANYGL_CALL(AnyGL_glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar)
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) ANYGL_CALL(AnyGL_glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar)
#define glMatrixPopEXT(mode) ANYGL_CALL(AnyGL_glMatrixPopEXT)(mode)
#define glMatrixPushEXT(mode) ANYGL_CALL(AnyGL_glMatrixPushEXT)(mode)
#define glClientAttribDefaultEXT(mask) ANYGL_CALL(AnyGL_glClientAttribDefaultEXT)(mask)
#define glPushClientAttribDefaultEXT(mask) ANYGL_CALL(AnyGL_glPushClientAttribDefaultEXT)(mask)
#define glTextureParameterfEXT(texture, target, pname, param) ANYGL_CALL(AnyGL_glTextureParameterfEXT)(texture, target, pname, param)
#define glTextureParameterfvEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glTextureParameterfvEXT)(texture, target, pname, params)
#define glTextureParameteriEXT(texture, target, pname, param) ANYGL_CALL(AnyGL_glTextureParameteriEXT)(texture, target, pname, param)
#define glTextureParameterivEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glTextureParameterivEXT)(texture, target, pname, params)
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) ANYGL_CALL(AnyGL_glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels)
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) ANYGL_CALL(AnyGL_glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels)
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) ANYGL_CALL(AnyGL_glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels)
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) ANYGL_CALL(AnyGL_glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels)
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) ANYGL_CALL(AnyGL_glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border)
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) ANYGL_CALL(AnyGL_glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border)
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) ANYGL_CALL(AnyGL_glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width)
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height)
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) ANYGL_CALL(AnyGL_glGetTextureImageEXT)(texture, target, level, format, type, pixels)
#define glGetTextureParameterfvEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameterfvEXT)(texture, target, pname, params)
#define glGetTextureParameterivEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameterivEXT)(texture, target, pname, params)
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) ANYGL_CALL(AnyGL_glGetTextureLevelParameterfvEXT)(texture, target, level, pname, params)
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) ANYGL_CALL(AnyGL_glGetTextureLevelParameterivEXT)(texture, target, level, pname, params)
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) ANYGL_CALL(AnyGL_glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels)
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ANYGL_CALL(AnyGL_glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height)
#define glBindMultiTextureEXT(texunit, target, texture) ANYGL_CALL(AnyGL_glBindMultiTextureEXT)(texunit, target, texture)
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) ANYGL_CALL(AnyGL_glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer)
#define glMultiTexEnvfEXT(texunit, target, pname, param) ANYGL_CALL(AnyGL_glMultiTexEnvfEXT)(texunit, target, pname, param)
#define glMultiTexEnvfvEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glMultiTexEnvfvEXT)(texunit, target, pname, params)
#define glMultiTexEnviEXT(texunit, target, pname, param) ANYGL_CALL(AnyGL_glMultiTexEnviEXT)(texunit, target, pname, param)
#define glMultiTexEnvivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glMultiTexEnvivEXT)(texunit, target, pname, params)
#define glMultiTexGendEXT(texunit, coord, pname, param) ANYGL_CALL(AnyGL_glMultiTexGendEXT)(texunit, coord, pname, param)
#define glMultiTexGendvEXT(texunit, coord, pname, params) ANYGL_CALL(AnyGL_glMultiTexGendvEXT)(texunit, coord, pname, params)
#define glMultiTexGenfEXT(texunit, coord, pname, param) ANYGL_CALL(AnyGL_glMultiTexGenfEXT)(texunit, coord, pname, param)
#define glMultiTexGenfvEXT(texunit, coord, pname, params) ANYGL_CALL(AnyGL_glMultiTexGenfvEXT)(texunit, coord, pname, params)
#define glMultiTexGeniEXT(texunit, coord, pname, param) ANYGL_CALL(AnyGL_glMultiTexGeniEXT)(texunit, coord, pname, param)
#define glMultiTexGenivEXT(texunit, coord, pname, params) ANYGL_CALL(AnyGL_glMultiTexGenivEXT)(texunit, coord, pname, params)
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexEnvfvEXT)(texunit, target, pname, params)
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexEnvivEXT)(texunit, target, pname, params)
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexGendvEXT)(texunit, coord, pname, params)
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexGenfvEXT)(texunit, coord, pname, params)
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexGenivEXT)(texunit, coord, pname, params)
#define glMultiTexParameteriEXT(texunit, target, pname, param) ANYGL_CALL(AnyGL_glMultiTexParameteriEXT)(texunit, target, pname, param)
#define glMultiTexParameterivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glMultiTexParameterivEXT)(texunit, target, pname, params)
#define glMultiTexParameterfEXT(texunit, target, pname, param) ANYGL_CALL(AnyGL_glMultiTexParameterfEXT)(texunit, target, pname, param)
#define glMultiTexParameterfvEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glMultiTexParameterfvEXT)(texunit, target, pname, params)
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) ANYGL_CALL(AnyGL_glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels)
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) ANYGL_CALL(AnyGL_glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels)
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) ANYGL_CALL(AnyGL_glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels)
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) ANYGL_CALL(AnyGL_glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels)
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) ANYGL_CALL(AnyGL_glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border)
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) ANYGL_CALL(AnyGL_glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border)
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) ANYGL_CALL(AnyGL_glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width)
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height)
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) ANYGL_CALL(AnyGL_glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels)
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexParameterfvEXT)(texunit, target, pname, params)
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexParameterivEXT)(texunit, target, pname, params)
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, params)
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, params)
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) ANYGL_CALL(AnyGL_glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels)
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ANYGL_CALL(AnyGL_glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) ANYGL_CALL(AnyGL_glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height)
#define glEnableClientStateIndexedEXT(array, index) ANYGL_CALL(AnyGL_glEnableClientStateIndexedEXT)(array, index)
#define glDisableClientStateIndexedEXT(array, index) ANYGL_CALL(AnyGL_glDisableClientStateIndexedEXT)(array, index)
#define glGetFloatIndexedvEXT(target, index, data) ANYGL_CALL(AnyGL_glGetFloati_v)(target, index, data)
#define glGetDoubleIndexedvEXT(target, index, data) ANYGL_CALL(AnyGL_glGetDoublei_v)(target, index, data)
#define glGetPointerIndexedvEXT(target, index, data) ANYGL_CALL(AnyGL_glGetPointerIndexedvEXT)(target, index, data)
#define glEnableIndexedEXT(target, index) ANYGL_CALL(AnyGL_glEnablei)(target, index)
#define glDisableIndexedEXT(target, index) ANYGL_CALL(AnyGL_glDisablei)(target, index)
#define glIsEnabledIndexedEXT(target, index) ANYGL_CALL(AnyGL_glIsEnabledi)(target, index)
#define glGetIntegerIndexedvEXT(target, index, data) ANYGL_CALL(AnyGL_glGetIntegeri_v)(target, index, data)
#define glGetBooleanIndexedvEXT(target, index, data) ANYGL_CALL(AnyGL_glGetBooleani_v)(target, index, data)
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits)
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits)
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits)
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits)
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits)
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits)
#define glGetCompressedTextureImageEXT(texture, target, lod, img) ANYGL_CALL(AnyGL_glGetCompressedTextureImageEXT)(texture, target, lod, img)
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits)
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits)
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, bits)
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits)
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits)
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) ANYGL_CALL(AnyGL_glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, bits)
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) ANYGL_CALL(AnyGL_glGetCompressedMultiTexImageEXT)(texunit, target, lod, img)
#define glMatrixLoadTransposefEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixLoadTransposefEXT)(mode, m)
#define glMatrixLoadTransposedEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixLoadTransposedEXT)(mode, m)
#define glMatrixMultTransposefEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixMultTransposefEXT)(mode, m)
#define glMatrixMultTransposedEXT(mode, m) ANYGL_CALL(AnyGL_glMatrixMultTransposedEXT)(mode, m)
#define glNamedBufferDataEXT(buffer, size, data, usage) ANYGL_CALL(AnyGL_glNamedBufferDataEXT)(buffer, size, data, usage)
#define glNamedBufferSubDataEXT(buffer, offset, size, data) ANYGL_CALL(AnyGL_glNamedBufferSubData)(buffer, offset, size, data)
#define glMapNamedBufferEXT(buffer, access) ANYGL_CALL(AnyGL_glMapNamedBufferEXT)(buffer, access)
#define glUnmapNamedBufferEXT(buffer) ANYGL_CALL(AnyGL_glUnmapNamedBufferEXT)(buffer)
#define glGetNamedBufferParameterivEXT(buffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedBufferParameterivEXT)(buffer, pname, params)
#define glGetNamedBufferPointervEXT(buffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedBufferPointervEXT)(buffer, pname, params)
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) ANYGL_CALL(AnyGL_glGetNamedBufferSubDataEXT)(buffer, offset, size, data)
#define glProgramUniform1fEXT(program, location, v0) ANYGL_CALL(AnyGL_glProgramUniform1f)(program, location, v0)
#define glProgramUniform2fEXT(program, location, v0, v1) ANYGL_CALL(AnyGL_glProgramUniform2f)(program, location, v0, v1)
#define glProgramUniform3fEXT(program, location, v0, v1, v2) ANYGL_CALL(AnyGL_glProgramUniform3f)(program, location, v0, v1, v2)
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glProgramUniform4f)(program, location, v0, v1, v2, v3)
#define glProgramUniform1iEXT(program, location, v0) ANYGL_CALL(AnyGL_glProgramUniform1i)(program, location, v0)
#define glProgramUniform2iEXT(program, location, v0, v1) ANYGL_CALL(AnyGL_glProgramUniform2i)(program, location, v0, v1)
#define glProgramUniform3iEXT(program, location, v0, v1, v2) ANYGL_CALL(AnyGL_glProgramUniform3i)(program, location, v0, v1, v2)
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glProgramUniform4i)(program, location, v0, v1, v2, v3)
#define glProgramUniform1fvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1fv)(program, location, count, value)
#define glProgramUniform2fvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2fv)(program, location, count, value)
#define glProgramUniform3fvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3fv)(program, location, count, value)
#define glProgramUniform4fvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4fv)(program, location, count, value)
#define glProgramUniform1ivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1iv)(program, location, count, value)
#define glProgramUniform2ivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2iv)(program, location, count, value)
#define glProgramUniform3ivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3iv)(program, location, count, value)
#define glProgramUniform4ivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4iv)(program, location, count, value)
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x3fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x2fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x4fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x2fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x4fv)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x3fv)(program, location, count, transpose, value)
#define glTextureBufferEXT(texture, target, internalformat, buffer) ANYGL_CALL(AnyGL_glTextureBufferEXT)(texture, target, internalformat, buffer)
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) ANYGL_CALL(AnyGL_glMultiTexBufferEXT)(texunit, target, internalformat, buffer)
#define glTextureParameterIivEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glTextureParameterIivEXT)(texture, target, pname, params)
#define glTextureParameterIuivEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glTextureParameterIuivEXT)(texture, target, pname, params)
#define glGetTextureParameterIivEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameterIivEXT)(texture, target, pname, params)
#define glGetTextureParameterIuivEXT(texture, target, pname, params) ANYGL_CALL(AnyGL_glGetTextureParameterIuivEXT)(texture, target, pname, params)
#define glMultiTexParameterIivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glMultiTexParameterIivEXT)(texunit, target, pname, params)
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glMultiTexParameterIuivEXT)(texunit, target, pname, params)
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexParameterIivEXT)(texunit, target, pname, params)
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) ANYGL_CALL(AnyGL_glGetMultiTexParameterIuivEXT)(texunit, target, pname, params)
#define glProgramUniform1uiEXT(program, location, v0) ANYGL_CALL(AnyGL_glProgramUniform1ui)(program, location, v0)
#define glProgramUniform2uiEXT(program, location, v0, v1) ANYGL_CALL(AnyGL_glProgramUniform2ui)(program, location, v0, v1)
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) ANYGL_CALL(AnyGL_glProgramUniform3ui)(program, location, v0, v1, v2)
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glProgramUniform4ui)(program, location, v0, v1, v2, v3)
#define glProgramUniform1uivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1uiv)(program, location, count, value)
#define glProgramUniform2uivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2uiv)(program, location, count, value)
#define glProgramUniform3uivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3uiv)(program, location, count, value)
#define glProgramUniform4uivEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4uiv)(program, location, count, value)
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) ANYGL_CALL(AnyGL_glNamedProgramLocalParameters4fvEXT)(program, target, index, count, params)
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) ANYGL_CALL(AnyGL_glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w)
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) ANYGL_CALL(AnyGL_glNamedProgramLocalParameterI4ivEXT)(program, target, index, params)
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) ANYGL_CALL(AnyGL_glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, params)
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) ANYGL_CALL(AnyGL_glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w)
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) ANYGL_CALL(AnyGL_glNamedProgramLocalParameterI4uivEXT)(program, target, index, params)
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) ANYGL_CALL(AnyGL_glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, params)
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) ANYGL_CALL(AnyGL_glGetNamedProgramLocalParameterIivEXT)(program, target, index, params)
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) ANYGL_CALL(AnyGL_glGetNamedProgramLocalParameterIuivEXT)(program, target, index, params)
#define glEnableClientStateiEXT(array, index) ANYGL_CALL(AnyGL_glEnableClientStateiEXT)(array, index)
#define glDisableClientStateiEXT(array, index) ANYGL_CALL(AnyGL_glDisableClientStateiEXT)(array, index)
#define glGetFloati_vEXT(pname, index, params) ANYGL_CALL(AnyGL_glGetFloati_v)(pname, index, params)
#define glGetDoublei_vEXT(pname, index, params) ANYGL_CALL(AnyGL_glGetDoublei_v)(pname, index, params)
#define glGetPointeri_vEXT(pname, index, params) ANYGL_CALL(AnyGL_glGetPointeri_vEXT)(pname, index, params)
#define glNamedProgramStringEXT(program, target, format, len, string) ANYGL_CALL(AnyGL_glNamedProgramStringEXT)(program, target, format, len, string)
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) ANYGL_CALL(AnyGL_glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w)
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) ANYGL_CALL(AnyGL_glNamedProgramLocalParameter4dvEXT)(program, target, index, params)
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) ANYGL_CALL(AnyGL_glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w)
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) ANYGL_CALL(AnyGL_glNamedProgramLocalParameter4fvEXT)(program, target, index, params)
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) ANYGL_CALL(AnyGL_glGetNamedProgramLocalParameterdvEXT)(program, target, index, params)
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) ANYGL_CALL(AnyGL_glGetNamedProgramLocalParameterfvEXT)(program, target, index, params)
#define glGetNamedProgramivEXT(program, target, pname, params) ANYGL_CALL(AnyGL_glGetNamedProgramivEXT)(program, target, pname, params)
#define glGetNamedProgramStringEXT(program, target, pname, string) ANYGL_CALL(AnyGL_glGetNamedProgramStringEXT)(program, target, pname, string)
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) ANYGL_CALL(AnyGL_glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height)
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, params)
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) ANYGL_CALL(AnyGL_glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height)
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) ANYGL_CALL(AnyGL_glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height)
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) ANYGL_CALL(AnyGL_glCheckNamedFramebufferStatusEXT)(framebuffer, target)
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) ANYGL_CALL(AnyGL_glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level)
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) ANYGL_CALL(AnyGL_glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level)
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) ANYGL_CALL(AnyGL_glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset)
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) ANYGL_CALL(AnyGL_glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer)
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) ANYGL_CALL(AnyGL_glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, params)
#define glGenerateTextureMipmapEXT(texture, target) ANYGL_CALL(AnyGL_glGenerateTextureMipmapEXT)(texture, target)
#define glGenerateMultiTexMipmapEXT(texunit, target) ANYGL_CALL(AnyGL_glGenerateMultiTexMipmapEXT)(texunit, target)
#define glFramebufferDrawBufferEXT(framebuffer, mode) ANYGL_CALL(AnyGL_glFramebufferDrawBufferEXT)(framebuffer, mode)
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) ANYGL_CALL(AnyGL_glFramebufferDrawBuffersEXT)(framebuffer, n, bufs)
#define glFramebufferReadBufferEXT(framebuffer, mode) ANYGL_CALL(AnyGL_glFramebufferReadBufferEXT)(framebuffer, mode)
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) ANYGL_CALL(AnyGL_glGetFramebufferParameterivEXT)(framebuffer, pname, params)
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) ANYGL_CALL(AnyGL_glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size)
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) ANYGL_CALL(AnyGL_glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level)
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) ANYGL_CALL(AnyGL_glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer)
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) ANYGL_CALL(AnyGL_glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face)
#define glTextureRenderbufferEXT(texture, target, renderbuffer) ANYGL_CALL(AnyGL_glTextureRenderbufferEXT)(texture, target, renderbuffer)
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) ANYGL_CALL(AnyGL_glMultiTexRenderbufferEXT)(texunit, target, renderbuffer)
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayVertexOffsetEXT)(vaobj, buffer, size, type, stride, offset)
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayColorOffsetEXT)(vaobj, buffer, size, type, stride, offset)
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayEdgeFlagOffsetEXT)(vaobj, buffer, stride, offset)
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayIndexOffsetEXT)(vaobj, buffer, type, stride, offset)
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayNormalOffsetEXT)(vaobj, buffer, type, stride, offset)
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayTexCoordOffsetEXT)(vaobj, buffer, size, type, stride, offset)
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayMultiTexCoordOffsetEXT)(vaobj, buffer, texunit, size, type, stride, offset)
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayFogCoordOffsetEXT)(vaobj, buffer, type, stride, offset)
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArraySecondaryColorOffsetEXT)(vaobj, buffer, size, type, stride, offset)
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribOffsetEXT)(vaobj, buffer, index, size, type, normalized, stride, offset)
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribIOffsetEXT)(vaobj, buffer, index, size, type, stride, offset)
#define glEnableVertexArrayEXT(vaobj, array) ANYGL_CALL(AnyGL_glEnableVertexArrayEXT)(vaobj, array)
#define glDisableVertexArrayEXT(vaobj, array) ANYGL_CALL(AnyGL_glDisableVertexArrayEXT)(vaobj, array)
#define glEnableVertexArrayAttribEXT(vaobj, index) ANYGL_CALL(AnyGL_glEnableVertexArrayAttribEXT)(vaobj, index)
#define glDisableVertexArrayAttribEXT(vaobj, index) ANYGL_CALL(AnyGL_glDisableVertexArrayAttribEXT)(vaobj, index)
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) ANYGL_CALL(AnyGL_glGetVertexArrayIntegervEXT)(vaobj, pname, param)
#define glGetVertexArrayPointervEXT(vaobj, pname, param) ANYGL_CALL(AnyGL_glGetVertexArrayPointervEXT)(vaobj, pname, param)
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) ANYGL_CALL(AnyGL_glGetVertexArrayIntegeri_vEXT)(vaobj, index, pname, param)
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) ANYGL_CALL(AnyGL_glGetVertexArrayPointeri_vEXT)(vaobj, index, pname, param)
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) ANYGL_CALL(AnyGL_glMapNamedBufferRangeEXT)(buffer, offset, length, access)
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) ANYGL_CALL(AnyGL_glFlushMappedNamedBufferRangeEXT)(buffer, offset, length)
#define glNamedBufferStorageEXT(buffer, size, data, flags) ANYGL_CALL(AnyGL_glNamedBufferStorage)(buffer, size, data, flags)
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) ANYGL_CALL(AnyGL_glClearNamedBufferDataEXT)(buffer, internalformat, format, type, data)
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) ANYGL_CALL(AnyGL_glClearNamedBufferSubDataEXT)(buffer, internalformat, offset, size, format, type, data)
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) ANYGL_CALL(AnyGL_glNamedFramebufferParameteriEXT)(framebuffer, pname, param)
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) ANYGL_CALL(AnyGL_glGetNamedFramebufferParameterivEXT)(framebuffer, pname, params)
#define glProgramUniform1dEXT(program, location, x) ANYGL_CALL(AnyGL_glProgramUniform1dEXT)(program, location, x)
#define glProgramUniform2dEXT(program, location, x, y) ANYGL_CALL(AnyGL_glProgramUniform2dEXT)(program, location, x, y)
#define glProgramUniform3dEXT(program, location, x, y, z) ANYGL_CALL(AnyGL_glProgramUniform3dEXT)(program, location, x, y, z)
#define glProgramUniform4dEXT(program, location, x, y, z, w) ANYGL_CALL(AnyGL_glProgramUniform4dEXT)(program, location, x, y, z, w)
#define glProgramUniform1dvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform1dvEXT)(program, location, count, value)
#define glProgramUniform2dvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform2dvEXT)(program, location, count, value)
#define glProgramUniform3dvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform3dvEXT)(program, location, count, value)
#define glProgramUniform4dvEXT(program, location, count, value) ANYGL_CALL(AnyGL_glProgramUniform4dvEXT)(program, location, count, value)
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value)
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) ANYGL_CALL(AnyGL_glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value)
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) ANYGL_CALL(AnyGL_glTextureBufferRangeEXT)(texture, target, internalformat, buffer, offset, size)
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) ANYGL_CALL(AnyGL_glTextureStorage1DEXT)(texture, target, levels, internalformat, width)
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) ANYGL_CALL(AnyGL_glTextureStorage2DEXT)(texture, target, levels, internalformat, width, height)
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) ANYGL_CALL(AnyGL_glTextureStorage3DEXT)(texture, target, levels, internalformat, width, height, depth)
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) ANYGL_CALL(AnyGL_glTextureStorage2DMultisampleEXT)(texture, target, samples, internalformat, width, height, fixedsamplelocations)
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) ANYGL_CALL(AnyGL_glTextureStorage3DMultisampleEXT)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations)
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) ANYGL_CALL(AnyGL_glVertexArrayBindVertexBufferEXT)(vaobj, bindingindex, buffer, offset, stride)
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribFormatEXT)(vaobj, attribindex, size, type, normalized, relativeoffset)
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribIFormatEXT)(vaobj, attribindex, size, type, relativeoffset)
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribLFormatEXT)(vaobj, attribindex, size, type, relativeoffset)
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribBindingEXT)(vaobj, attribindex, bindingindex)
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) ANYGL_CALL(AnyGL_glVertexArrayVertexBindingDivisorEXT)(vaobj, bindingindex, divisor)
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribLOffsetEXT)(vaobj, buffer, index, size, type, stride, offset)
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) ANYGL_CALL(AnyGL_glTexturePageCommitmentEXT)(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit)
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) ANYGL_CALL(AnyGL_glVertexArrayVertexAttribDivisorEXT)(vaobj, index, divisor)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_discard_framebuffer */
typedef void (APIENTRY* PFNANYGLDISCARDFRAMEBUFFEREXTPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments);

ANYGL_EXPORT extern PFNANYGLDISCARDFRAMEBUFFEREXTPROC AnyGL_glDiscardFramebufferEXT;

#ifndef ANYGL_NO_DEFINES
#define glDiscardFramebufferEXT(target, numAttachments, attachments) ANYGL_CALL(AnyGL_glDiscardFramebufferEXT)(target, numAttachments, attachments)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_disjoint_timer_query */


#ifndef ANYGL_NO_DEFINES
#define glGenQueriesEXT(n, ids) ANYGL_CALL(AnyGL_glGenQueries)(n, ids)
#define glDeleteQueriesEXT(n, ids) ANYGL_CALL(AnyGL_glDeleteQueries)(n, ids)
#define glIsQueryEXT(id) ANYGL_CALL(AnyGL_glIsQuery)(id)
#define glBeginQueryEXT(target, id) ANYGL_CALL(AnyGL_glBeginQuery)(target, id)
#define glEndQueryEXT(target) ANYGL_CALL(AnyGL_glEndQuery)(target)
#define glQueryCounterEXT(id, target) ANYGL_CALL(AnyGL_glQueryCounter)(id, target)
#define glGetQueryivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetQueryiv)(target, pname, params)
#define glGetQueryObjectivEXT(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectiv)(id, pname, params)
#define glGetQueryObjectuivEXT(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectuiv)(id, pname, params)
#define glGetQueryObjecti64vEXT(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjecti64v)(id, pname, params)
#define glGetQueryObjectui64vEXT(id, pname, params) ANYGL_CALL(AnyGL_glGetQueryObjectui64v)(id, pname, params)
#define glGetInteger64vEXT(pname, data) ANYGL_CALL(AnyGL_glGetInteger64v)(pname, data)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_draw_buffers */


#ifndef ANYGL_NO_DEFINES
#define glDrawBuffersEXT(n, bufs) ANYGL_CALL(AnyGL_glDrawBuffers)(n, bufs)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_draw_buffers2 */


#ifndef ANYGL_NO_DEFINES
#define glColorMaskIndexedEXT(index, r, g, b, a) ANYGL_CALL(AnyGL_glColorMaski)(index, r, g, b, a)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_draw_buffers_indexed */


#ifndef ANYGL_NO_DEFINES
#define glEnableiEXT(target, index) ANYGL_CALL(AnyGL_glEnablei)(target, index)
#define glDisableiEXT(target, index) ANYGL_CALL(AnyGL_glDisablei)(target, index)
#define glBlendEquationiEXT(buf, mode) ANYGL_CALL(AnyGL_glBlendEquationi)(buf, mode)
#define glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha) ANYGL_CALL(AnyGL_glBlendEquationSeparatei)(buf, modeRGB, modeAlpha)
#define glBlendFunciEXT(buf, src, dst) ANYGL_CALL(AnyGL_glBlendFunci)(buf, src, dst)
#define glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) ANYGL_CALL(AnyGL_glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
#define glColorMaskiEXT(index, r, g, b, a) ANYGL_CALL(AnyGL_glColorMaski)(index, r, g, b, a)
#define glIsEnablediEXT(target, index) ANYGL_CALL(AnyGL_glIsEnabledi)(target, index)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_draw_elements_base_vertex */


#ifndef ANYGL_NO_DEFINES
#define glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex) ANYGL_CALL(AnyGL_glDrawElementsBaseVertex)(mode, count, type, indices, basevertex)
#define glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex) ANYGL_CALL(AnyGL_glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex)
#define glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex) ANYGL_CALL(AnyGL_glDrawElementsInstancedBaseVertex)(mode, count, type, indices, instancecount, basevertex)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_draw_instanced */


#ifndef ANYGL_NO_DEFINES
#define glDrawArraysInstancedEXT(mode, start, count, primcount) ANYGL_CALL(AnyGL_glDrawArraysInstanced)(mode, start, count, primcount)
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) ANYGL_CALL(AnyGL_glDrawElementsInstanced)(mode, count, type, indices, primcount)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_draw_range_elements */


#ifndef ANYGL_NO_DEFINES
#define glDrawRangeElementsEXT(mode, start, end, count, type, indices) ANYGL_CALL(AnyGL_glDrawRangeElements)(mode, start, end, count, type, indices)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_draw_transform_feedback */


#ifndef ANYGL_NO_DEFINES
#define glDrawTransformFeedbackEXT(mode, id) ANYGL_CALL(AnyGL_glDrawTransformFeedback)(mode, id)
#define glDrawTransformFeedbackInstancedEXT(mode, id, instancecount) ANYGL_CALL(AnyGL_glDrawTransformFeedbackInstanced)(mode, id, instancecount)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_external_buffer */
typedef void (APIENTRY* PFNANYGLBUFFERSTORAGEEXTERNALEXTPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);

ANYGL_EXPORT extern PFNANYGLBUFFERSTORAGEEXTERNALEXTPROC AnyGL_glBufferStorageExternalEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC AnyGL_glNamedBufferStorageExternalEXT;

#ifndef ANYGL_NO_DEFINES
#define glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags) ANYGL_CALL(AnyGL_glBufferStorageExternalEXT)(target, offset, size, clientBuffer, flags)
#define glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags) ANYGL_CALL(AnyGL_glNamedBufferStorageExternalEXT)(buffer, offset, size, clientBuffer, flags)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_float_blend */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_fog_coord */


#ifndef ANYGL_NO_DEFINES
#define glFogCoordfEXT(coord) ANYGL_CALL(AnyGL_glFogCoordf)(coord)
#define glFogCoordfvEXT(coord) ANYGL_CALL(AnyGL_glFogCoordfv)(coord)
#define glFogCoorddEXT(coord) ANYGL_CALL(AnyGL_glFogCoordd)(coord)
#define glFogCoorddvEXT(coord) ANYGL_CALL(AnyGL_glFogCoorddv)(coord)
#define glFogCoordPointerEXT(type, stride, pointer) ANYGL_CALL(AnyGL_glFogCoordPointer)(type, stride, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_framebuffer_blit */


#ifndef ANYGL_NO_DEFINES
#define glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) ANYGL_CALL(AnyGL_glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_framebuffer_multisample */


#ifndef ANYGL_NO_DEFINES
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) ANYGL_CALL(AnyGL_glRenderbufferStorageMultisample)(target, samples, internalformat, width, height)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_framebuffer_multisample_blit_scaled */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_framebuffer_object */


#ifndef ANYGL_NO_DEFINES
#define glIsRenderbufferEXT(renderbuffer) ANYGL_CALL(AnyGL_glIsRenderbuffer)(renderbuffer)
#define glBindRenderbufferEXT(target, renderbuffer) ANYGL_CALL(AnyGL_glBindRenderbuffer)(target, renderbuffer)
#define glDeleteRenderbuffersEXT(n, renderbuffers) ANYGL_CALL(AnyGL_glDeleteRenderbuffers)(n, renderbuffers)
#define glGenRenderbuffersEXT(n, renderbuffers) ANYGL_CALL(AnyGL_glGenRenderbuffers)(n, renderbuffers)
#define glRenderbufferStorageEXT(target, internalformat, width, height) ANYGL_CALL(AnyGL_glRenderbufferStorage)(target, internalformat, width, height)
#define glGetRenderbufferParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetRenderbufferParameteriv)(target, pname, params)
#define glIsFramebufferEXT(framebuffer) ANYGL_CALL(AnyGL_glIsFramebuffer)(framebuffer)
#define glBindFramebufferEXT(target, framebuffer) ANYGL_CALL(AnyGL_glBindFramebuffer)(target, framebuffer)
#define glDeleteFramebuffersEXT(n, framebuffers) ANYGL_CALL(AnyGL_glDeleteFramebuffers)(n, framebuffers)
#define glGenFramebuffersEXT(n, framebuffers) ANYGL_CALL(AnyGL_glGenFramebuffers)(n, framebuffers)
#define glCheckFramebufferStatusEXT(target) ANYGL_CALL(AnyGL_glCheckFramebufferStatus)(target)
#define glFramebufferTexture1DEXT(target, attachment, textarget, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture1D)(target, attachment, textarget, texture, level)
#define glFramebufferTexture2DEXT(target, attachment, textarget, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture2D)(target, attachment, textarget, texture, level)
#define glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) ANYGL_CALL(AnyGL_glFramebufferTexture3D)(target, attachment, textarget, texture, level, zoffset)
#define glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) ANYGL_CALL(AnyGL_glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer)
#define glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) ANYGL_CALL(AnyGL_glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params)
#define glGenerateMipmapEXT(target) ANYGL_CALL(AnyGL_glGenerateMipmap)(target)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_framebuffer_sRGB */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_geometry_point_size */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_geometry_shader */


#ifndef ANYGL_NO_DEFINES
#define glFramebufferTextureEXT(target, attachment, texture, level) ANYGL_CALL(AnyGL_glFramebufferTexture)(target, attachment, texture, level)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_geometry_shader4 */


#ifndef ANYGL_NO_DEFINES
#define glProgramParameteriEXT(program, pname, value) ANYGL_CALL(AnyGL_glProgramParameteri)(program, pname, value)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_gpu_program_parameters */
typedef void (APIENTRY* PFNANYGLPROGRAMENVPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat *params);

ANYGL_EXPORT extern PFNANYGLPROGRAMENVPARAMETERS4FVEXTPROC AnyGL_glProgramEnvParameters4fvEXT;
ANYGL_EXPORT extern PFNANYGLPROGRAMLOCALPARAMETERS4FVEXTPROC AnyGL_glProgramLocalParameters4fvEXT;

#ifndef ANYGL_NO_DEFINES
#define glProgramEnvParameters4fvEXT(target, index, count, params) ANYGL_CALL(AnyGL_glProgramEnvParameters4fvEXT)(target, index, count, params)
#define glProgramLocalParameters4fvEXT(target, index, count, params) ANYGL_CALL(AnyGL_glProgramLocalParameters4fvEXT)(target, index, count, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_gpu_shader4 */


#ifndef ANYGL_NO_DEFINES
#define glGetUniformuivEXT(program, location, params) ANYGL_CALL(AnyGL_glGetUniformuiv)(program, location, params)
#define glGetFragDataLocationEXT(program, name) ANYGL_CALL(AnyGL_glGetFragDataLocation)(program, name)
#define glUniform1uiEXT(location, v0) ANYGL_CALL(AnyGL_glUniform1ui)(location, v0)
#define glUniform2uiEXT(location, v0, v1) ANYGL_CALL(AnyGL_glUniform2ui)(location, v0, v1)
#define glUniform3uiEXT(location, v0, v1, v2) ANYGL_CALL(AnyGL_glUniform3ui)(location, v0, v1, v2)
#define glUniform4uiEXT(location, v0, v1, v2, v3) ANYGL_CALL(AnyGL_glUniform4ui)(location, v0, v1, v2, v3)
#define glUniform1uivEXT(location, count, value) ANYGL_CALL(AnyGL_glUniform1uiv)(location, count, value)
#define glUniform2uivEXT(location, count, value) ANYGL_CALL(AnyGL_glUniform2uiv)(location, count, value)
#define glUniform3uivEXT(location, count, value) ANYGL_CALL(AnyGL_glUniform3uiv)(location, count, value)
#define glUniform4uivEXT(location, count, value) ANYGL_CALL(AnyGL_glUniform4uiv)(location, count, value)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_gpu_shader5 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_histogram */
typedef void (APIENTRY* PFNANYGLGETHISTOGRAMEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (APIENTRY* PFNANYGLGETHISTOGRAMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETHISTOGRAMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETMINMAXEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (APIENTRY* PFNANYGLGETMINMAXPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETMINMAXPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);

ANYGL_EXPORT extern PFNANYGLGETHISTOGRAMEXTPROC AnyGL_glGetHistogramEXT;
ANYGL_EXPORT extern PFNANYGLGETHISTOGRAMPARAMETERFVEXTPROC AnyGL_glGetHistogramParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETHISTOGRAMPARAMETERIVEXTPROC AnyGL_glGetHistogramParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGETMINMAXEXTPROC AnyGL_glGetMinmaxEXT;
ANYGL_EXPORT extern PFNANYGLGETMINMAXPARAMETERFVEXTPROC AnyGL_glGetMinmaxParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETMINMAXPARAMETERIVEXTPROC AnyGL_glGetMinmaxParameterivEXT;

#ifndef ANYGL_NO_DEFINES
#define glGetHistogramEXT(target, reset, format, type, values) ANYGL_CALL(AnyGL_glGetHistogramEXT)(target, reset, format, type, values)
#define glGetHistogramParameterfvEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetHistogramParameterfvEXT)(target, pname, params)
#define glGetHistogramParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetHistogramParameterivEXT)(target, pname, params)
#define glGetMinmaxEXT(target, reset, format, type, values) ANYGL_CALL(AnyGL_glGetMinmaxEXT)(target, reset, format, type, values)
#define glGetMinmaxParameterfvEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetMinmaxParameterfvEXT)(target, pname, params)
#define glGetMinmaxParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetMinmaxParameterivEXT)(target, pname, params)
#define glHistogramEXT(target, width, internalformat, sink) ANYGL_CALL(AnyGL_glHistogram)(target, width, internalformat, sink)
#define glMinmaxEXT(target, internalformat, sink) ANYGL_CALL(AnyGL_glMinmax)(target, internalformat, sink)
#define glResetHistogramEXT(target) ANYGL_CALL(AnyGL_glResetHistogram)(target)
#define glResetMinmaxEXT(target) ANYGL_CALL(AnyGL_glResetMinmax)(target)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_index_array_formats */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_index_func */
typedef void (APIENTRY* PFNANYGLINDEXFUNCEXTPROC)(GLenum func, GLclampf ref);

ANYGL_EXPORT extern PFNANYGLINDEXFUNCEXTPROC AnyGL_glIndexFuncEXT;

#ifndef ANYGL_NO_DEFINES
#define glIndexFuncEXT(func, ref) ANYGL_CALL(AnyGL_glIndexFuncEXT)(func, ref)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_index_material */
typedef void (APIENTRY* PFNANYGLINDEXMATERIALEXTPROC)(GLenum face, GLenum mode);

ANYGL_EXPORT extern PFNANYGLINDEXMATERIALEXTPROC AnyGL_glIndexMaterialEXT;

#ifndef ANYGL_NO_DEFINES
#define glIndexMaterialEXT(face, mode) ANYGL_CALL(AnyGL_glIndexMaterialEXT)(face, mode)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_index_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_instanced_arrays */


#ifndef ANYGL_NO_DEFINES
#define glVertexAttribDivisorEXT(index, divisor) ANYGL_CALL(AnyGL_glVertexAttribDivisor)(index, divisor)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_light_texture */
typedef void (APIENTRY* PFNANYGLAPPLYTEXTUREEXTPROC)(GLenum mode);
typedef void (APIENTRY* PFNANYGLTEXTURELIGHTEXTPROC)(GLenum pname);
typedef void (APIENTRY* PFNANYGLTEXTUREMATERIALEXTPROC)(GLenum face, GLenum mode);

ANYGL_EXPORT extern PFNANYGLAPPLYTEXTUREEXTPROC AnyGL_glApplyTextureEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURELIGHTEXTPROC AnyGL_glTextureLightEXT;
ANYGL_EXPORT extern PFNANYGLTEXTUREMATERIALEXTPROC AnyGL_glTextureMaterialEXT;

#ifndef ANYGL_NO_DEFINES
#define glApplyTextureEXT(mode) ANYGL_CALL(AnyGL_glApplyTextureEXT)(mode)
#define glTextureLightEXT(pname) ANYGL_CALL(AnyGL_glTextureLightEXT)(pname)
#define glTextureMaterialEXT(face, mode) ANYGL_CALL(AnyGL_glTextureMaterialEXT)(face, mode)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_map_buffer_range */


#ifndef ANYGL_NO_DEFINES
#define glMapBufferRangeEXT(target, offset, length, access) ANYGL_CALL(AnyGL_glMapBufferRange)(target, offset, length, access)
#define glFlushMappedBufferRangeEXT(target, offset, length) ANYGL_CALL(AnyGL_glFlushMappedBufferRange)(target, offset, length)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_memory_object */
typedef void (APIENTRY* PFNANYGLGETUNSIGNEDBYTEVEXTPROC)(GLenum pname, GLubyte *data);
typedef void (APIENTRY* PFNANYGLGETUNSIGNEDBYTEI_VEXTPROC)(GLenum target, GLuint index, GLubyte *data);
typedef void (APIENTRY* PFNANYGLDELETEMEMORYOBJECTSEXTPROC)(GLsizei n, const GLuint *memoryObjects);
typedef GLboolean (APIENTRY* PFNANYGLISMEMORYOBJECTEXTPROC)(GLuint memoryObject);
typedef void (APIENTRY* PFNANYGLCREATEMEMORYOBJECTSEXTPROC)(GLsizei n, GLuint *memoryObjects);
typedef void (APIENTRY* PFNANYGLMEMORYOBJECTPARAMETERIVEXTPROC)(GLuint memoryObject, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLGETMEMORYOBJECTPARAMETERIVEXTPROC)(GLuint memoryObject, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLTEXSTORAGEMEM2DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXSTORAGEMEM3DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLBUFFERSTORAGEMEMEXTPROC)(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGEMEM2DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGEMEM3DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLNAMEDBUFFERSTORAGEMEMEXTPROC)(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXSTORAGEMEM1DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
typedef void (APIENTRY* PFNANYGLTEXTURESTORAGEMEM1DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);

ANYGL_EXPORT extern PFNANYGLGETUNSIGNEDBYTEVEXTPROC AnyGL_glGetUnsignedBytevEXT;
ANYGL_EXPORT extern PFNANYGLGETUNSIGNEDBYTEI_VEXTPROC AnyGL_glGetUnsignedBytei_vEXT;
ANYGL_EXPORT extern PFNANYGLDELETEMEMORYOBJECTSEXTPROC AnyGL_glDeleteMemoryObjectsEXT;
ANYGL_EXPORT extern PFNANYGLISMEMORYOBJECTEXTPROC AnyGL_glIsMemoryObjectEXT;
ANYGL_EXPORT extern PFNANYGLCREATEMEMORYOBJECTSEXTPROC AnyGL_glCreateMemoryObjectsEXT;
ANYGL_EXPORT extern PFNANYGLMEMORYOBJECTPARAMETERIVEXTPROC AnyGL_glMemoryObjectParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGETMEMORYOBJECTPARAMETERIVEXTPROC AnyGL_glGetMemoryObjectParameterivEXT;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGEMEM2DEXTPROC AnyGL_glTexStorageMem2DEXT;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC AnyGL_glTexStorageMem2DMultisampleEXT;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGEMEM3DEXTPROC AnyGL_glTexStorageMem3DEXT;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC AnyGL_glTexStorageMem3DMultisampleEXT;
ANYGL_EXPORT extern PFNANYGLBUFFERSTORAGEMEMEXTPROC AnyGL_glBufferStorageMemEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGEMEM2DEXTPROC AnyGL_glTextureStorageMem2DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC AnyGL_glTextureStorageMem2DMultisampleEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGEMEM3DEXTPROC AnyGL_glTextureStorageMem3DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC AnyGL_glTextureStorageMem3DMultisampleEXT;
ANYGL_EXPORT extern PFNANYGLNAMEDBUFFERSTORAGEMEMEXTPROC AnyGL_glNamedBufferStorageMemEXT;
ANYGL_EXPORT extern PFNANYGLTEXSTORAGEMEM1DEXTPROC AnyGL_glTexStorageMem1DEXT;
ANYGL_EXPORT extern PFNANYGLTEXTURESTORAGEMEM1DEXTPROC AnyGL_glTextureStorageMem1DEXT;

#ifndef ANYGL_NO_DEFINES
#define glGetUnsignedBytevEXT(pname, data) ANYGL_CALL(AnyGL_glGetUnsignedBytevEXT)(pname, data)
#define glGetUnsignedBytei_vEXT(target, index, data) ANYGL_CALL(AnyGL_glGetUnsignedBytei_vEXT)(target, index, data)
#define glDeleteMemoryObjectsEXT(n, memoryObjects) ANYGL_CALL(AnyGL_glDeleteMemoryObjectsEXT)(n, memoryObjects)
#define glIsMemoryObjectEXT(memoryObject) ANYGL_CALL(AnyGL_glIsMemoryObjectEXT)(memoryObject)
#define glCreateMemoryObjectsEXT(n, memoryObjects) ANYGL_CALL(AnyGL_glCreateMemoryObjectsEXT)(n, memoryObjects)
#define glMemoryObjectParameterivEXT(memoryObject, pname, params) ANYGL_CALL(AnyGL_glMemoryObjectParameterivEXT)(memoryObject, pname, params)
#define glGetMemoryObjectParameterivEXT(memoryObject, pname, params) ANYGL_CALL(AnyGL_glGetMemoryObjectParameterivEXT)(memoryObject, pname, params)
#define glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset) ANYGL_CALL(AnyGL_glTexStorageMem2DEXT)(target, levels, internalFormat, width, height, memory, offset)
#define glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) ANYGL_CALL(AnyGL_glTexStorageMem2DMultisampleEXT)(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset)
#define glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset) ANYGL_CALL(AnyGL_glTexStorageMem3DEXT)(target, levels, internalFormat, width, height, depth, memory, offset)
#define glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) ANYGL_CALL(AnyGL_glTexStorageMem3DMultisampleEXT)(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset)
#define glBufferStorageMemEXT(target, size, memory, offset) ANYGL_CALL(AnyGL_glBufferStorageMemEXT)(target, size, memory, offset)
#define glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset) ANYGL_CALL(AnyGL_glTextureStorageMem2DEXT)(texture, levels, internalFormat, width, height, memory, offset)
#define glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) ANYGL_CALL(AnyGL_glTextureStorageMem2DMultisampleEXT)(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset)
#define glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset) ANYGL_CALL(AnyGL_glTextureStorageMem3DEXT)(texture, levels, internalFormat, width, height, depth, memory, offset)
#define glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) ANYGL_CALL(AnyGL_glTextureStorageMem3DMultisampleEXT)(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset)
#define glNamedBufferStorageMemEXT(buffer, size, memory, offset) ANYGL_CALL(AnyGL_glNamedBufferStorageMemEXT)(buffer, size, memory, offset)
#define glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset) ANYGL_CALL(AnyGL_glTexStorageMem1DEXT)(target, levels, internalFormat, width, memory, offset)
#define glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset) ANYGL_CALL(AnyGL_glTextureStorageMem1DEXT)(texture, levels, internalFormat, width, memory, offset)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_memory_object_fd */
typedef void (APIENTRY* PFNANYGLIMPORTMEMORYFDEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);

ANYGL_EXPORT extern PFNANYGLIMPORTMEMORYFDEXTPROC AnyGL_glImportMemoryFdEXT;

#ifndef ANYGL_NO_DEFINES
#define glImportMemoryFdEXT(memory, size, handleType, fd) ANYGL_CALL(AnyGL_glImportMemoryFdEXT)(memory, size, handleType, fd)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_memory_object_win32 */
typedef void (APIENTRY* PFNANYGLIMPORTMEMORYWIN32HANDLEEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, void *handle);
typedef void (APIENTRY* PFNANYGLIMPORTMEMORYWIN32NAMEEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, const void *name);

ANYGL_EXPORT extern PFNANYGLIMPORTMEMORYWIN32HANDLEEXTPROC AnyGL_glImportMemoryWin32HandleEXT;
ANYGL_EXPORT extern PFNANYGLIMPORTMEMORYWIN32NAMEEXTPROC AnyGL_glImportMemoryWin32NameEXT;

#ifndef ANYGL_NO_DEFINES
#define glImportMemoryWin32HandleEXT(memory, size, handleType, handle) ANYGL_CALL(AnyGL_glImportMemoryWin32HandleEXT)(memory, size, handleType, handle)
#define glImportMemoryWin32NameEXT(memory, size, handleType, name) ANYGL_CALL(AnyGL_glImportMemoryWin32NameEXT)(memory, size, handleType, name)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_misc_attribute */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multi_draw_arrays */


#ifndef ANYGL_NO_DEFINES
#define glMultiDrawArraysEXT(mode, first, count, primcount) ANYGL_CALL(AnyGL_glMultiDrawArrays)(mode, first, count, primcount)
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) ANYGL_CALL(AnyGL_glMultiDrawElements)(mode, count, type, indices, primcount)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multi_draw_indirect */


#ifndef ANYGL_NO_DEFINES
#define glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawArraysIndirect)(mode, indirect, drawcount, stride)
#define glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride) ANYGL_CALL(AnyGL_glMultiDrawElementsIndirect)(mode, type, indirect, drawcount, stride)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multisample */
typedef void (APIENTRY* PFNANYGLSAMPLEMASKEXTPROC)(GLclampf value, GLboolean invert);
typedef void (APIENTRY* PFNANYGLSAMPLEPATTERNEXTPROC)(GLenum pattern);

ANYGL_EXPORT extern PFNANYGLSAMPLEMASKEXTPROC AnyGL_glSampleMaskEXT;
ANYGL_EXPORT extern PFNANYGLSAMPLEPATTERNEXTPROC AnyGL_glSamplePatternEXT;

#ifndef ANYGL_NO_DEFINES
#define glSampleMaskEXT(value, invert) ANYGL_CALL(AnyGL_glSampleMaskEXT)(value, invert)
#define glSamplePatternEXT(pattern) ANYGL_CALL(AnyGL_glSamplePatternEXT)(pattern)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multisampled_compatibility */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multisampled_render_to_texture */
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);

ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC AnyGL_glFramebufferTexture2DMultisampleEXT;

#ifndef ANYGL_NO_DEFINES
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) ANYGL_CALL(AnyGL_glFramebufferTexture2DMultisampleEXT)(target, attachment, textarget, texture, level, samples)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multisampled_render_to_texture2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multiview_draw_buffers */
typedef void (APIENTRY* PFNANYGLREADBUFFERINDEXEDEXTPROC)(GLenum src, GLint index);
typedef void (APIENTRY* PFNANYGLDRAWBUFFERSINDEXEDEXTPROC)(GLint n, const GLenum *location, const GLint *indices);
typedef void (APIENTRY* PFNANYGLGETINTEGERI_VEXTPROC)(GLenum target, GLuint index, GLint *data);

ANYGL_EXPORT extern PFNANYGLREADBUFFERINDEXEDEXTPROC AnyGL_glReadBufferIndexedEXT;
ANYGL_EXPORT extern PFNANYGLDRAWBUFFERSINDEXEDEXTPROC AnyGL_glDrawBuffersIndexedEXT;
ANYGL_EXPORT extern PFNANYGLGETINTEGERI_VEXTPROC AnyGL_glGetIntegeri_vEXT;

#ifndef ANYGL_NO_DEFINES
#define glReadBufferIndexedEXT(src, index) ANYGL_CALL(AnyGL_glReadBufferIndexedEXT)(src, index)
#define glDrawBuffersIndexedEXT(n, location, indices) ANYGL_CALL(AnyGL_glDrawBuffersIndexedEXT)(n, location, indices)
#define glGetIntegeri_vEXT(target, index, data) ANYGL_CALL(AnyGL_glGetIntegeri_vEXT)(target, index, data)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multiview_tessellation_geometry_shader */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multiview_texture_multisample */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_multiview_timer_query */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_occlusion_query_boolean */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_packed_depth_stencil */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_packed_float */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_packed_pixels */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_paletted_texture */


#ifndef ANYGL_NO_DEFINES
#define glColorTableEXT(target, internalFormat, width, format, type, table) ANYGL_CALL(AnyGL_glColorTable)(target, internalFormat, width, format, type, table)
#define glGetColorTableEXT(target, format, type, data) ANYGL_CALL(AnyGL_glGetColorTable)(target, format, type, data)
#define glGetColorTableParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetColorTableParameteriv)(target, pname, params)
#define glGetColorTableParameterfvEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetColorTableParameterfv)(target, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_pixel_buffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_pixel_transform */
typedef void (APIENTRY* PFNANYGLPIXELTRANSFORMPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint param);
typedef void (APIENTRY* PFNANYGLPIXELTRANSFORMPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRY* PFNANYGLPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRY* PFNANYGLPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRY* PFNANYGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRY* PFNANYGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);

ANYGL_EXPORT extern PFNANYGLPIXELTRANSFORMPARAMETERIEXTPROC AnyGL_glPixelTransformParameteriEXT;
ANYGL_EXPORT extern PFNANYGLPIXELTRANSFORMPARAMETERFEXTPROC AnyGL_glPixelTransformParameterfEXT;
ANYGL_EXPORT extern PFNANYGLPIXELTRANSFORMPARAMETERIVEXTPROC AnyGL_glPixelTransformParameterivEXT;
ANYGL_EXPORT extern PFNANYGLPIXELTRANSFORMPARAMETERFVEXTPROC AnyGL_glPixelTransformParameterfvEXT;
ANYGL_EXPORT extern PFNANYGLGETPIXELTRANSFORMPARAMETERIVEXTPROC AnyGL_glGetPixelTransformParameterivEXT;
ANYGL_EXPORT extern PFNANYGLGETPIXELTRANSFORMPARAMETERFVEXTPROC AnyGL_glGetPixelTransformParameterfvEXT;

#ifndef ANYGL_NO_DEFINES
#define glPixelTransformParameteriEXT(target, pname, param) ANYGL_CALL(AnyGL_glPixelTransformParameteriEXT)(target, pname, param)
#define glPixelTransformParameterfEXT(target, pname, param) ANYGL_CALL(AnyGL_glPixelTransformParameterfEXT)(target, pname, param)
#define glPixelTransformParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glPixelTransformParameterivEXT)(target, pname, params)
#define glPixelTransformParameterfvEXT(target, pname, params) ANYGL_CALL(AnyGL_glPixelTransformParameterfvEXT)(target, pname, params)
#define glGetPixelTransformParameterivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetPixelTransformParameterivEXT)(target, pname, params)
#define glGetPixelTransformParameterfvEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetPixelTransformParameterfvEXT)(target, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_pixel_transform_color_table */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_point_parameters */


#ifndef ANYGL_NO_DEFINES
#define glPointParameterfEXT(pname, param) ANYGL_CALL(AnyGL_glPointParameterf)(pname, param)
#define glPointParameterfvEXT(pname, params) ANYGL_CALL(AnyGL_glPointParameterfv)(pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_polygon_offset */
typedef void (APIENTRY* PFNANYGLPOLYGONOFFSETEXTPROC)(GLfloat factor, GLfloat bias);

ANYGL_EXPORT extern PFNANYGLPOLYGONOFFSETEXTPROC AnyGL_glPolygonOffsetEXT;

#ifndef ANYGL_NO_DEFINES
#define glPolygonOffsetEXT(factor, bias) ANYGL_CALL(AnyGL_glPolygonOffsetEXT)(factor, bias)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_polygon_offset_clamp */


#ifndef ANYGL_NO_DEFINES
#define glPolygonOffsetClampEXT(factor, units, clamp) ANYGL_CALL(AnyGL_glPolygonOffsetClamp)(factor, units, clamp)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_post_depth_coverage */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_primitive_bounding_box */


#ifndef ANYGL_NO_DEFINES
#define glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) ANYGL_CALL(AnyGL_glPrimitiveBoundingBox)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_protected_textures */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_provoking_vertex */


#ifndef ANYGL_NO_DEFINES
#define glProvokingVertexEXT(mode) ANYGL_CALL(AnyGL_glProvokingVertex)(mode)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_pvrtc_sRGB */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_raster_multisample */
typedef void (APIENTRY* PFNANYGLRASTERSAMPLESEXTPROC)(GLuint samples, GLboolean fixedsamplelocations);

ANYGL_EXPORT extern PFNANYGLRASTERSAMPLESEXTPROC AnyGL_glRasterSamplesEXT;

#ifndef ANYGL_NO_DEFINES
#define glRasterSamplesEXT(samples, fixedsamplelocations) ANYGL_CALL(AnyGL_glRasterSamplesEXT)(samples, fixedsamplelocations)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_read_format_bgra */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_render_snorm */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_rescale_normal */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_robustness */


#ifndef ANYGL_NO_DEFINES
#define glGetGraphicsResetStatusEXT() ANYGL_CALL(AnyGL_glGetGraphicsResetStatus)()
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) ANYGL_CALL(AnyGL_glReadnPixels)(x, y, width, height, format, type, bufSize, data)
#define glGetnUniformfvEXT(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformfv)(program, location, bufSize, params)
#define glGetnUniformivEXT(program, location, bufSize, params) ANYGL_CALL(AnyGL_glGetnUniformiv)(program, location, bufSize, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_sRGB */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_sRGB_write_control */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_secondary_color */


#ifndef ANYGL_NO_DEFINES
#define glSecondaryColor3bEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3b)(red, green, blue)
#define glSecondaryColor3bvEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3bv)(v)
#define glSecondaryColor3dEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3d)(red, green, blue)
#define glSecondaryColor3dvEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3dv)(v)
#define glSecondaryColor3fEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3f)(red, green, blue)
#define glSecondaryColor3fvEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3fv)(v)
#define glSecondaryColor3iEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3i)(red, green, blue)
#define glSecondaryColor3ivEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3iv)(v)
#define glSecondaryColor3sEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3s)(red, green, blue)
#define glSecondaryColor3svEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3sv)(v)
#define glSecondaryColor3ubEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3ub)(red, green, blue)
#define glSecondaryColor3ubvEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3ubv)(v)
#define glSecondaryColor3uiEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3ui)(red, green, blue)
#define glSecondaryColor3uivEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3uiv)(v)
#define glSecondaryColor3usEXT(red, green, blue) ANYGL_CALL(AnyGL_glSecondaryColor3us)(red, green, blue)
#define glSecondaryColor3usvEXT(v) ANYGL_CALL(AnyGL_glSecondaryColor3usv)(v)
#define glSecondaryColorPointerEXT(size, type, stride, pointer) ANYGL_CALL(AnyGL_glSecondaryColorPointer)(size, type, stride, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_semaphore */
typedef void (APIENTRY* PFNANYGLGENSEMAPHORESEXTPROC)(GLsizei n, GLuint *semaphores);
typedef void (APIENTRY* PFNANYGLDELETESEMAPHORESEXTPROC)(GLsizei n, const GLuint *semaphores);
typedef GLboolean (APIENTRY* PFNANYGLISSEMAPHOREEXTPROC)(GLuint semaphore);
typedef void (APIENTRY* PFNANYGLSEMAPHOREPARAMETERUI64VEXTPROC)(GLuint semaphore, GLenum pname, const GLuint64 *params);
typedef void (APIENTRY* PFNANYGLGETSEMAPHOREPARAMETERUI64VEXTPROC)(GLuint semaphore, GLenum pname, GLuint64 *params);
typedef void (APIENTRY* PFNANYGLWAITSEMAPHOREEXTPROC)(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
typedef void (APIENTRY* PFNANYGLSIGNALSEMAPHOREEXTPROC)(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);

ANYGL_EXPORT extern PFNANYGLGENSEMAPHORESEXTPROC AnyGL_glGenSemaphoresEXT;
ANYGL_EXPORT extern PFNANYGLDELETESEMAPHORESEXTPROC AnyGL_glDeleteSemaphoresEXT;
ANYGL_EXPORT extern PFNANYGLISSEMAPHOREEXTPROC AnyGL_glIsSemaphoreEXT;
ANYGL_EXPORT extern PFNANYGLSEMAPHOREPARAMETERUI64VEXTPROC AnyGL_glSemaphoreParameterui64vEXT;
ANYGL_EXPORT extern PFNANYGLGETSEMAPHOREPARAMETERUI64VEXTPROC AnyGL_glGetSemaphoreParameterui64vEXT;
ANYGL_EXPORT extern PFNANYGLWAITSEMAPHOREEXTPROC AnyGL_glWaitSemaphoreEXT;
ANYGL_EXPORT extern PFNANYGLSIGNALSEMAPHOREEXTPROC AnyGL_glSignalSemaphoreEXT;

#ifndef ANYGL_NO_DEFINES
#define glGenSemaphoresEXT(n, semaphores) ANYGL_CALL(AnyGL_glGenSemaphoresEXT)(n, semaphores)
#define glDeleteSemaphoresEXT(n, semaphores) ANYGL_CALL(AnyGL_glDeleteSemaphoresEXT)(n, semaphores)
#define glIsSemaphoreEXT(semaphore) ANYGL_CALL(AnyGL_glIsSemaphoreEXT)(semaphore)
#define glSemaphoreParameterui64vEXT(semaphore, pname, params) ANYGL_CALL(AnyGL_glSemaphoreParameterui64vEXT)(semaphore, pname, params)
#define glGetSemaphoreParameterui64vEXT(semaphore, pname, params) ANYGL_CALL(AnyGL_glGetSemaphoreParameterui64vEXT)(semaphore, pname, params)
#define glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts) ANYGL_CALL(AnyGL_glWaitSemaphoreEXT)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts)
#define glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts) ANYGL_CALL(AnyGL_glSignalSemaphoreEXT)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_semaphore_fd */
typedef void (APIENTRY* PFNANYGLIMPORTSEMAPHOREFDEXTPROC)(GLuint semaphore, GLenum handleType, GLint fd);

ANYGL_EXPORT extern PFNANYGLIMPORTSEMAPHOREFDEXTPROC AnyGL_glImportSemaphoreFdEXT;

#ifndef ANYGL_NO_DEFINES
#define glImportSemaphoreFdEXT(semaphore, handleType, fd) ANYGL_CALL(AnyGL_glImportSemaphoreFdEXT)(semaphore, handleType, fd)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_semaphore_win32 */
typedef void (APIENTRY* PFNANYGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC)(GLuint semaphore, GLenum handleType, void *handle);
typedef void (APIENTRY* PFNANYGLIMPORTSEMAPHOREWIN32NAMEEXTPROC)(GLuint semaphore, GLenum handleType, const void *name);

ANYGL_EXPORT extern PFNANYGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC AnyGL_glImportSemaphoreWin32HandleEXT;
ANYGL_EXPORT extern PFNANYGLIMPORTSEMAPHOREWIN32NAMEEXTPROC AnyGL_glImportSemaphoreWin32NameEXT;

#ifndef ANYGL_NO_DEFINES
#define glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle) ANYGL_CALL(AnyGL_glImportSemaphoreWin32HandleEXT)(semaphore, handleType, handle)
#define glImportSemaphoreWin32NameEXT(semaphore, handleType, name) ANYGL_CALL(AnyGL_glImportSemaphoreWin32NameEXT)(semaphore, handleType, name)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_separate_shader_objects */
typedef void (APIENTRY* PFNANYGLUSESHADERPROGRAMEXTPROC)(GLenum type, GLuint program);
typedef void (APIENTRY* PFNANYGLACTIVEPROGRAMEXTPROC)(GLuint program);
typedef GLuint (APIENTRY* PFNANYGLCREATESHADERPROGRAMEXTPROC)(GLenum type, const GLchar *string);
typedef void (APIENTRY* PFNANYGLACTIVESHADERPROGRAMEXTPROC)(GLuint pipeline, GLuint program);
typedef void (APIENTRY* PFNANYGLBINDPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
typedef GLuint (APIENTRY* PFNANYGLCREATESHADERPROGRAMVEXTPROC)(GLenum type, GLsizei count, const GLchar **strings);
typedef void (APIENTRY* PFNANYGLDELETEPROGRAMPIPELINESEXTPROC)(GLsizei n, const GLuint *pipelines);
typedef void (APIENTRY* PFNANYGLGENPROGRAMPIPELINESEXTPROC)(GLsizei n, GLuint *pipelines);
typedef void (APIENTRY* PFNANYGLGETPROGRAMPIPELINEINFOLOGEXTPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRY* PFNANYGLGETPROGRAMPIPELINEIVEXTPROC)(GLuint pipeline, GLenum pname, GLint *params);
typedef GLboolean (APIENTRY* PFNANYGLISPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
typedef void (APIENTRY* PFNANYGLUSEPROGRAMSTAGESEXTPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (APIENTRY* PFNANYGLVALIDATEPROGRAMPIPELINEEXTPROC)(GLuint pipeline);

ANYGL_EXPORT extern PFNANYGLUSESHADERPROGRAMEXTPROC AnyGL_glUseShaderProgramEXT;
ANYGL_EXPORT extern PFNANYGLACTIVEPROGRAMEXTPROC AnyGL_glActiveProgramEXT;
ANYGL_EXPORT extern PFNANYGLCREATESHADERPROGRAMEXTPROC AnyGL_glCreateShaderProgramEXT;
ANYGL_EXPORT extern PFNANYGLACTIVESHADERPROGRAMEXTPROC AnyGL_glActiveShaderProgramEXT;
ANYGL_EXPORT extern PFNANYGLBINDPROGRAMPIPELINEEXTPROC AnyGL_glBindProgramPipelineEXT;
ANYGL_EXPORT extern PFNANYGLCREATESHADERPROGRAMVEXTPROC AnyGL_glCreateShaderProgramvEXT;
ANYGL_EXPORT extern PFNANYGLDELETEPROGRAMPIPELINESEXTPROC AnyGL_glDeleteProgramPipelinesEXT;
ANYGL_EXPORT extern PFNANYGLGENPROGRAMPIPELINESEXTPROC AnyGL_glGenProgramPipelinesEXT;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMPIPELINEINFOLOGEXTPROC AnyGL_glGetProgramPipelineInfoLogEXT;
ANYGL_EXPORT extern PFNANYGLGETPROGRAMPIPELINEIVEXTPROC AnyGL_glGetProgramPipelineivEXT;
ANYGL_EXPORT extern PFNANYGLISPROGRAMPIPELINEEXTPROC AnyGL_glIsProgramPipelineEXT;
ANYGL_EXPORT extern PFNANYGLUSEPROGRAMSTAGESEXTPROC AnyGL_glUseProgramStagesEXT;
ANYGL_EXPORT extern PFNANYGLVALIDATEPROGRAMPIPELINEEXTPROC AnyGL_glValidateProgramPipelineEXT;

#ifndef ANYGL_NO_DEFINES
#define glUseShaderProgramEXT(type, program) ANYGL_CALL(AnyGL_glUseShaderProgramEXT)(type, program)
#define glActiveProgramEXT(program) ANYGL_CALL(AnyGL_glActiveProgramEXT)(program)
#define glCreateShaderProgramEXT(type, string) ANYGL_CALL(AnyGL_glCreateShaderProgramEXT)(type, string)
#define glActiveShaderProgramEXT(pipeline, program) ANYGL_CALL(AnyGL_glActiveShaderProgramEXT)(pipeline, program)
#define glBindProgramPipelineEXT(pipeline) ANYGL_CALL(AnyGL_glBindProgramPipelineEXT)(pipeline)
#define glCreateShaderProgramvEXT(type, count, strings) ANYGL_CALL(AnyGL_glCreateShaderProgramvEXT)(type, count, strings)
#define glDeleteProgramPipelinesEXT(n, pipelines) ANYGL_CALL(AnyGL_glDeleteProgramPipelinesEXT)(n, pipelines)
#define glGenProgramPipelinesEXT(n, pipelines) ANYGL_CALL(AnyGL_glGenProgramPipelinesEXT)(n, pipelines)
#define glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog) ANYGL_CALL(AnyGL_glGetProgramPipelineInfoLogEXT)(pipeline, bufSize, length, infoLog)
#define glGetProgramPipelineivEXT(pipeline, pname, params) ANYGL_CALL(AnyGL_glGetProgramPipelineivEXT)(pipeline, pname, params)
#define glIsProgramPipelineEXT(pipeline) ANYGL_CALL(AnyGL_glIsProgramPipelineEXT)(pipeline)
#define glUseProgramStagesEXT(pipeline, stages, program) ANYGL_CALL(AnyGL_glUseProgramStagesEXT)(pipeline, stages, program)
#define glValidateProgramPipelineEXT(pipeline) ANYGL_CALL(AnyGL_glValidateProgramPipelineEXT)(pipeline)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_separate_specular_color */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_framebuffer_fetch */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_framebuffer_fetch_non_coherent */
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERFETCHBARRIEREXTPROC)();

ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERFETCHBARRIEREXTPROC AnyGL_glFramebufferFetchBarrierEXT;

#ifndef ANYGL_NO_DEFINES
#define glFramebufferFetchBarrierEXT() ANYGL_CALL(AnyGL_glFramebufferFetchBarrierEXT)()
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_group_vote */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_image_load_formatted */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_image_load_store */


#ifndef ANYGL_NO_DEFINES
#define glBindImageTextureEXT(index, texture, level, layered, layer, access, format) ANYGL_CALL(AnyGL_glBindImageTexture)(index, texture, level, layered, layer, access, format)
#define glMemoryBarrierEXT(barriers) ANYGL_CALL(AnyGL_glMemoryBarrier)(barriers)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_implicit_conversions */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_integer_mix */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_io_blocks */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_non_constant_global_initializers */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_pixel_local_storage */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_pixel_local_storage2 */
typedef void (APIENTRY* PFNANYGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC)(GLuint target, GLsizei size);
typedef GLsizei (APIENTRY* PFNANYGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC)(GLuint target);
typedef void (APIENTRY* PFNANYGLCLEARPIXELLOCALSTORAGEUIEXTPROC)(GLsizei offset, GLsizei n, const GLuint *values);

ANYGL_EXPORT extern PFNANYGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC AnyGL_glFramebufferPixelLocalStorageSizeEXT;
ANYGL_EXPORT extern PFNANYGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC AnyGL_glGetFramebufferPixelLocalStorageSizeEXT;
ANYGL_EXPORT extern PFNANYGLCLEARPIXELLOCALSTORAGEUIEXTPROC AnyGL_glClearPixelLocalStorageuiEXT;

#ifndef ANYGL_NO_DEFINES
#define glFramebufferPixelLocalStorageSizeEXT(target, size) ANYGL_CALL(AnyGL_glFramebufferPixelLocalStorageSizeEXT)(target, size)
#define glGetFramebufferPixelLocalStorageSizeEXT(target) ANYGL_CALL(AnyGL_glGetFramebufferPixelLocalStorageSizeEXT)(target)
#define glClearPixelLocalStorageuiEXT(offset, n, values) ANYGL_CALL(AnyGL_glClearPixelLocalStorageuiEXT)(offset, n, values)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shader_texture_lod */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shadow_funcs */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shadow_samplers */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_shared_texture_palette */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_sparse_texture */


#ifndef ANYGL_NO_DEFINES
#define glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) ANYGL_CALL(AnyGL_glTexPageCommitmentARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_sparse_texture2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_stencil_clear_tag */
typedef void (APIENTRY* PFNANYGLSTENCILCLEARTAGEXTPROC)(GLsizei stencilTagBits, GLuint stencilClearTag);

ANYGL_EXPORT extern PFNANYGLSTENCILCLEARTAGEXTPROC AnyGL_glStencilClearTagEXT;

#ifndef ANYGL_NO_DEFINES
#define glStencilClearTagEXT(stencilTagBits, stencilClearTag) ANYGL_CALL(AnyGL_glStencilClearTagEXT)(stencilTagBits, stencilClearTag)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_stencil_two_side */
typedef void (APIENTRY* PFNANYGLACTIVESTENCILFACEEXTPROC)(GLenum face);

ANYGL_EXPORT extern PFNANYGLACTIVESTENCILFACEEXTPROC AnyGL_glActiveStencilFaceEXT;

#ifndef ANYGL_NO_DEFINES
#define glActiveStencilFaceEXT(face) ANYGL_CALL(AnyGL_glActiveStencilFaceEXT)(face)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_stencil_wrap */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_subtexture */


#ifndef ANYGL_NO_DEFINES
#define glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels) ANYGL_CALL(AnyGL_glTexSubImage1D)(target, level, xoffset, width, format, type, pixels)
#define glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels) ANYGL_CALL(AnyGL_glTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_tessellation_point_size */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_tessellation_shader */


#ifndef ANYGL_NO_DEFINES
#define glPatchParameteriEXT(pname, value) ANYGL_CALL(AnyGL_glPatchParameteri)(pname, value)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture3D */


#ifndef ANYGL_NO_DEFINES
#define glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels) ANYGL_CALL(AnyGL_glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels)
#define glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ANYGL_CALL(AnyGL_glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_array */


#ifndef ANYGL_NO_DEFINES
#define glFramebufferTextureLayerEXT(target, attachment, texture, level, layer) ANYGL_CALL(AnyGL_glFramebufferTextureLayer)(target, attachment, texture, level, layer)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_border_clamp */


#ifndef ANYGL_NO_DEFINES
#define glTexParameterIivEXT(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterIiv)(target, pname, params)
#define glTexParameterIuivEXT(target, pname, params) ANYGL_CALL(AnyGL_glTexParameterIuiv)(target, pname, params)
#define glGetTexParameterIivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterIiv)(target, pname, params)
#define glGetTexParameterIuivEXT(target, pname, params) ANYGL_CALL(AnyGL_glGetTexParameterIuiv)(target, pname, params)
#define glSamplerParameterIivEXT(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterIiv)(sampler, pname, param)
#define glSamplerParameterIuivEXT(sampler, pname, param) ANYGL_CALL(AnyGL_glSamplerParameterIuiv)(sampler, pname, param)
#define glGetSamplerParameterIivEXT(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameterIiv)(sampler, pname, params)
#define glGetSamplerParameterIuivEXT(sampler, pname, params) ANYGL_CALL(AnyGL_glGetSamplerParameterIuiv)(sampler, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_buffer */


#ifndef ANYGL_NO_DEFINES
#define glTexBufferEXT(target, internalformat, buffer) ANYGL_CALL(AnyGL_glTexBuffer)(target, internalformat, buffer)
#define glTexBufferRangeEXT(target, internalformat, buffer, offset, size) ANYGL_CALL(AnyGL_glTexBufferRange)(target, internalformat, buffer, offset, size)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_buffer_object */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_compression_astc_decode_mode */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_compression_bptc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_compression_dxt1 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_compression_latc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_compression_rgtc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_compression_s3tc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_compression_s3tc_srgb */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_cube_map */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_cube_map_array */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_env_add */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_env_combine */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_env_dot3 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_filter_anisotropic */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_filter_minmax */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_format_BGRA8888 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_format_sRGB_override */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_integer */
typedef void (APIENTRY* PFNANYGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (APIENTRY* PFNANYGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);

ANYGL_EXPORT extern PFNANYGLCLEARCOLORIIEXTPROC AnyGL_glClearColorIiEXT;
ANYGL_EXPORT extern PFNANYGLCLEARCOLORIUIEXTPROC AnyGL_glClearColorIuiEXT;

#ifndef ANYGL_NO_DEFINES
#define glClearColorIiEXT(red, green, blue, alpha) ANYGL_CALL(AnyGL_glClearColorIiEXT)(red, green, blue, alpha)
#define glClearColorIuiEXT(red, green, blue, alpha) ANYGL_CALL(AnyGL_glClearColorIuiEXT)(red, green, blue, alpha)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_lod_bias */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_mirror_clamp */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_mirror_clamp_to_edge */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_norm16 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_object */
typedef GLboolean (APIENTRY* PFNANYGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint *textures, GLboolean *residences);

ANYGL_EXPORT extern PFNANYGLARETEXTURESRESIDENTEXTPROC AnyGL_glAreTexturesResidentEXT;

#ifndef ANYGL_NO_DEFINES
#define glAreTexturesResidentEXT(n, textures, residences) ANYGL_CALL(AnyGL_glAreTexturesResidentEXT)(n, textures, residences)
#define glBindTextureEXT(target, texture) ANYGL_CALL(AnyGL_glBindTexture)(target, texture)
#define glDeleteTexturesEXT(n, textures) ANYGL_CALL(AnyGL_glDeleteTextures)(n, textures)
#define glGenTexturesEXT(n, textures) ANYGL_CALL(AnyGL_glGenTextures)(n, textures)
#define glIsTextureEXT(texture) ANYGL_CALL(AnyGL_glIsTexture)(texture)
#define glPrioritizeTexturesEXT(n, textures, priorities) ANYGL_CALL(AnyGL_glPrioritizeTextures)(n, textures, priorities)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_perturb_normal */
typedef void (APIENTRY* PFNANYGLTEXTURENORMALEXTPROC)(GLenum mode);

ANYGL_EXPORT extern PFNANYGLTEXTURENORMALEXTPROC AnyGL_glTextureNormalEXT;

#ifndef ANYGL_NO_DEFINES
#define glTextureNormalEXT(mode) ANYGL_CALL(AnyGL_glTextureNormalEXT)(mode)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_query_lod */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_rg */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_sRGB */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_sRGB_R8 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_sRGB_RG8 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_sRGB_decode */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_shadow_lod */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_shared_exponent */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_snorm */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_storage */


#ifndef ANYGL_NO_DEFINES
#define glTexStorage1DEXT(target, levels, internalformat, width) ANYGL_CALL(AnyGL_glTexStorage1D)(target, levels, internalformat, width)
#define glTexStorage2DEXT(target, levels, internalformat, width, height) ANYGL_CALL(AnyGL_glTexStorage2D)(target, levels, internalformat, width, height)
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) ANYGL_CALL(AnyGL_glTexStorage3D)(target, levels, internalformat, width, height, depth)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_swizzle */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_type_2_10_10_10_REV */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_texture_view */


#ifndef ANYGL_NO_DEFINES
#define glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) ANYGL_CALL(AnyGL_glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_timer_query */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_transform_feedback */
typedef void (APIENTRY* PFNANYGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);

ANYGL_EXPORT extern PFNANYGLBINDBUFFEROFFSETEXTPROC AnyGL_glBindBufferOffsetEXT;

#ifndef ANYGL_NO_DEFINES
#define glBeginTransformFeedbackEXT(primitiveMode) ANYGL_CALL(AnyGL_glBeginTransformFeedback)(primitiveMode)
#define glEndTransformFeedbackEXT() ANYGL_CALL(AnyGL_glEndTransformFeedback)()
#define glBindBufferRangeEXT(target, index, buffer, offset, size) ANYGL_CALL(AnyGL_glBindBufferRange)(target, index, buffer, offset, size)
#define glBindBufferOffsetEXT(target, index, buffer, offset) ANYGL_CALL(AnyGL_glBindBufferOffsetEXT)(target, index, buffer, offset)
#define glBindBufferBaseEXT(target, index, buffer) ANYGL_CALL(AnyGL_glBindBufferBase)(target, index, buffer)
#define glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) ANYGL_CALL(AnyGL_glTransformFeedbackVaryings)(program, count, varyings, bufferMode)
#define glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name) ANYGL_CALL(AnyGL_glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_unpack_subimage */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_vertex_array */
typedef void (APIENTRY* PFNANYGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (APIENTRY* PFNANYGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean *pointer);
typedef void (APIENTRY* PFNANYGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (APIENTRY* PFNANYGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (APIENTRY* PFNANYGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (APIENTRY* PFNANYGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);

ANYGL_EXPORT extern PFNANYGLCOLORPOINTEREXTPROC AnyGL_glColorPointerEXT;
ANYGL_EXPORT extern PFNANYGLEDGEFLAGPOINTEREXTPROC AnyGL_glEdgeFlagPointerEXT;
ANYGL_EXPORT extern PFNANYGLINDEXPOINTEREXTPROC AnyGL_glIndexPointerEXT;
ANYGL_EXPORT extern PFNANYGLNORMALPOINTEREXTPROC AnyGL_glNormalPointerEXT;
ANYGL_EXPORT extern PFNANYGLTEXCOORDPOINTEREXTPROC AnyGL_glTexCoordPointerEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXPOINTEREXTPROC AnyGL_glVertexPointerEXT;

#ifndef ANYGL_NO_DEFINES
#define glArrayElementEXT(i) ANYGL_CALL(AnyGL_glArrayElement)(i)
#define glColorPointerEXT(size, type, stride, count, pointer) ANYGL_CALL(AnyGL_glColorPointerEXT)(size, type, stride, count, pointer)
#define glDrawArraysEXT(mode, first, count) ANYGL_CALL(AnyGL_glDrawArrays)(mode, first, count)
#define glEdgeFlagPointerEXT(stride, count, pointer) ANYGL_CALL(AnyGL_glEdgeFlagPointerEXT)(stride, count, pointer)
#define glGetPointervEXT(pname, params) ANYGL_CALL(AnyGL_glGetPointerv)(pname, params)
#define glIndexPointerEXT(type, stride, count, pointer) ANYGL_CALL(AnyGL_glIndexPointerEXT)(type, stride, count, pointer)
#define glNormalPointerEXT(type, stride, count, pointer) ANYGL_CALL(AnyGL_glNormalPointerEXT)(type, stride, count, pointer)
#define glTexCoordPointerEXT(size, type, stride, count, pointer) ANYGL_CALL(AnyGL_glTexCoordPointerEXT)(size, type, stride, count, pointer)
#define glVertexPointerEXT(size, type, stride, count, pointer) ANYGL_CALL(AnyGL_glVertexPointerEXT)(size, type, stride, count, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_vertex_array_bgra */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_vertex_attrib_64bit */


#ifndef ANYGL_NO_DEFINES
#define glVertexAttribL1dEXT(index, x) ANYGL_CALL(AnyGL_glVertexAttribL1d)(index, x)
#define glVertexAttribL2dEXT(index, x, y) ANYGL_CALL(AnyGL_glVertexAttribL2d)(index, x, y)
#define glVertexAttribL3dEXT(index, x, y, z) ANYGL_CALL(AnyGL_glVertexAttribL3d)(index, x, y, z)
#define glVertexAttribL4dEXT(index, x, y, z, w) ANYGL_CALL(AnyGL_glVertexAttribL4d)(index, x, y, z, w)
#define glVertexAttribL1dvEXT(index, v) ANYGL_CALL(AnyGL_glVertexAttribL1dv)(index, v)
#define glVertexAttribL2dvEXT(index, v) ANYGL_CALL(AnyGL_glVertexAttribL2dv)(index, v)
#define glVertexAttribL3dvEXT(index, v) ANYGL_CALL(AnyGL_glVertexAttribL3dv)(index, v)
#define glVertexAttribL4dvEXT(index, v) ANYGL_CALL(AnyGL_glVertexAttribL4dv)(index, v)
#define glVertexAttribLPointerEXT(index, size, type, stride, pointer) ANYGL_CALL(AnyGL_glVertexAttribLPointer)(index, size, type, stride, pointer)
#define glGetVertexAttribLdvEXT(index, pname, params) ANYGL_CALL(AnyGL_glGetVertexAttribLdv)(index, pname, params)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_vertex_shader */
typedef void (APIENTRY* PFNANYGLBEGINVERTEXSHADEREXTPROC)();
typedef void (APIENTRY* PFNANYGLENDVERTEXSHADEREXTPROC)();
typedef void (APIENTRY* PFNANYGLBINDVERTEXSHADEREXTPROC)(GLuint id);
typedef GLuint (APIENTRY* PFNANYGLGENVERTEXSHADERSEXTPROC)(GLuint range);
typedef void (APIENTRY* PFNANYGLDELETEVERTEXSHADEREXTPROC)(GLuint id);
typedef void (APIENTRY* PFNANYGLSHADEROP1EXTPROC)(GLenum op, GLuint res, GLuint arg1);
typedef void (APIENTRY* PFNANYGLSHADEROP2EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void (APIENTRY* PFNANYGLSHADEROP3EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void (APIENTRY* PFNANYGLSWIZZLEEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (APIENTRY* PFNANYGLWRITEMASKEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (APIENTRY* PFNANYGLINSERTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
typedef void (APIENTRY* PFNANYGLEXTRACTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
typedef GLuint (APIENTRY* PFNANYGLGENSYMBOLSEXTPROC)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef void (APIENTRY* PFNANYGLSETINVARIANTEXTPROC)(GLuint id, GLenum type, const void *addr);
typedef void (APIENTRY* PFNANYGLSETLOCALCONSTANTEXTPROC)(GLuint id, GLenum type, const void *addr);
typedef void (APIENTRY* PFNANYGLVARIANTBVEXTPROC)(GLuint id, const GLbyte *addr);
typedef void (APIENTRY* PFNANYGLVARIANTSVEXTPROC)(GLuint id, const GLshort *addr);
typedef void (APIENTRY* PFNANYGLVARIANTIVEXTPROC)(GLuint id, const GLint *addr);
typedef void (APIENTRY* PFNANYGLVARIANTFVEXTPROC)(GLuint id, const GLfloat *addr);
typedef void (APIENTRY* PFNANYGLVARIANTDVEXTPROC)(GLuint id, const GLdouble *addr);
typedef void (APIENTRY* PFNANYGLVARIANTUBVEXTPROC)(GLuint id, const GLubyte *addr);
typedef void (APIENTRY* PFNANYGLVARIANTUSVEXTPROC)(GLuint id, const GLushort *addr);
typedef void (APIENTRY* PFNANYGLVARIANTUIVEXTPROC)(GLuint id, const GLuint *addr);
typedef void (APIENTRY* PFNANYGLVARIANTPOINTEREXTPROC)(GLuint id, GLenum type, GLuint stride, const void *addr);
typedef void (APIENTRY* PFNANYGLENABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
typedef void (APIENTRY* PFNANYGLDISABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
typedef GLuint (APIENTRY* PFNANYGLBINDLIGHTPARAMETEREXTPROC)(GLenum light, GLenum value);
typedef GLuint (APIENTRY* PFNANYGLBINDMATERIALPARAMETEREXTPROC)(GLenum face, GLenum value);
typedef GLuint (APIENTRY* PFNANYGLBINDTEXGENPARAMETEREXTPROC)(GLenum unit, GLenum coord, GLenum value);
typedef GLuint (APIENTRY* PFNANYGLBINDTEXTUREUNITPARAMETEREXTPROC)(GLenum unit, GLenum value);
typedef GLuint (APIENTRY* PFNANYGLBINDPARAMETEREXTPROC)(GLenum value);
typedef GLboolean (APIENTRY* PFNANYGLISVARIANTENABLEDEXTPROC)(GLuint id, GLenum cap);
typedef void (APIENTRY* PFNANYGLGETVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean *data);
typedef void (APIENTRY* PFNANYGLGETVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint *data);
typedef void (APIENTRY* PFNANYGLGETVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat *data);
typedef void (APIENTRY* PFNANYGLGETVARIANTPOINTERVEXTPROC)(GLuint id, GLenum value, void **data);
typedef void (APIENTRY* PFNANYGLGETINVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean *data);
typedef void (APIENTRY* PFNANYGLGETINVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint *data);
typedef void (APIENTRY* PFNANYGLGETINVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat *data);
typedef void (APIENTRY* PFNANYGLGETLOCALCONSTANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean *data);
typedef void (APIENTRY* PFNANYGLGETLOCALCONSTANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint *data);
typedef void (APIENTRY* PFNANYGLGETLOCALCONSTANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat *data);

ANYGL_EXPORT extern PFNANYGLBEGINVERTEXSHADEREXTPROC AnyGL_glBeginVertexShaderEXT;
ANYGL_EXPORT extern PFNANYGLENDVERTEXSHADEREXTPROC AnyGL_glEndVertexShaderEXT;
ANYGL_EXPORT extern PFNANYGLBINDVERTEXSHADEREXTPROC AnyGL_glBindVertexShaderEXT;
ANYGL_EXPORT extern PFNANYGLGENVERTEXSHADERSEXTPROC AnyGL_glGenVertexShadersEXT;
ANYGL_EXPORT extern PFNANYGLDELETEVERTEXSHADEREXTPROC AnyGL_glDeleteVertexShaderEXT;
ANYGL_EXPORT extern PFNANYGLSHADEROP1EXTPROC AnyGL_glShaderOp1EXT;
ANYGL_EXPORT extern PFNANYGLSHADEROP2EXTPROC AnyGL_glShaderOp2EXT;
ANYGL_EXPORT extern PFNANYGLSHADEROP3EXTPROC AnyGL_glShaderOp3EXT;
ANYGL_EXPORT extern PFNANYGLSWIZZLEEXTPROC AnyGL_glSwizzleEXT;
ANYGL_EXPORT extern PFNANYGLWRITEMASKEXTPROC AnyGL_glWriteMaskEXT;
ANYGL_EXPORT extern PFNANYGLINSERTCOMPONENTEXTPROC AnyGL_glInsertComponentEXT;
ANYGL_EXPORT extern PFNANYGLEXTRACTCOMPONENTEXTPROC AnyGL_glExtractComponentEXT;
ANYGL_EXPORT extern PFNANYGLGENSYMBOLSEXTPROC AnyGL_glGenSymbolsEXT;
ANYGL_EXPORT extern PFNANYGLSETINVARIANTEXTPROC AnyGL_glSetInvariantEXT;
ANYGL_EXPORT extern PFNANYGLSETLOCALCONSTANTEXTPROC AnyGL_glSetLocalConstantEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTBVEXTPROC AnyGL_glVariantbvEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTSVEXTPROC AnyGL_glVariantsvEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTIVEXTPROC AnyGL_glVariantivEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTFVEXTPROC AnyGL_glVariantfvEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTDVEXTPROC AnyGL_glVariantdvEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTUBVEXTPROC AnyGL_glVariantubvEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTUSVEXTPROC AnyGL_glVariantusvEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTUIVEXTPROC AnyGL_glVariantuivEXT;
ANYGL_EXPORT extern PFNANYGLVARIANTPOINTEREXTPROC AnyGL_glVariantPointerEXT;
ANYGL_EXPORT extern PFNANYGLENABLEVARIANTCLIENTSTATEEXTPROC AnyGL_glEnableVariantClientStateEXT;
ANYGL_EXPORT extern PFNANYGLDISABLEVARIANTCLIENTSTATEEXTPROC AnyGL_glDisableVariantClientStateEXT;
ANYGL_EXPORT extern PFNANYGLBINDLIGHTPARAMETEREXTPROC AnyGL_glBindLightParameterEXT;
ANYGL_EXPORT extern PFNANYGLBINDMATERIALPARAMETEREXTPROC AnyGL_glBindMaterialParameterEXT;
ANYGL_EXPORT extern PFNANYGLBINDTEXGENPARAMETEREXTPROC AnyGL_glBindTexGenParameterEXT;
ANYGL_EXPORT extern PFNANYGLBINDTEXTUREUNITPARAMETEREXTPROC AnyGL_glBindTextureUnitParameterEXT;
ANYGL_EXPORT extern PFNANYGLBINDPARAMETEREXTPROC AnyGL_glBindParameterEXT;
ANYGL_EXPORT extern PFNANYGLISVARIANTENABLEDEXTPROC AnyGL_glIsVariantEnabledEXT;
ANYGL_EXPORT extern PFNANYGLGETVARIANTBOOLEANVEXTPROC AnyGL_glGetVariantBooleanvEXT;
ANYGL_EXPORT extern PFNANYGLGETVARIANTINTEGERVEXTPROC AnyGL_glGetVariantIntegervEXT;
ANYGL_EXPORT extern PFNANYGLGETVARIANTFLOATVEXTPROC AnyGL_glGetVariantFloatvEXT;
ANYGL_EXPORT extern PFNANYGLGETVARIANTPOINTERVEXTPROC AnyGL_glGetVariantPointervEXT;
ANYGL_EXPORT extern PFNANYGLGETINVARIANTBOOLEANVEXTPROC AnyGL_glGetInvariantBooleanvEXT;
ANYGL_EXPORT extern PFNANYGLGETINVARIANTINTEGERVEXTPROC AnyGL_glGetInvariantIntegervEXT;
ANYGL_EXPORT extern PFNANYGLGETINVARIANTFLOATVEXTPROC AnyGL_glGetInvariantFloatvEXT;
ANYGL_EXPORT extern PFNANYGLGETLOCALCONSTANTBOOLEANVEXTPROC AnyGL_glGetLocalConstantBooleanvEXT;
ANYGL_EXPORT extern PFNANYGLGETLOCALCONSTANTINTEGERVEXTPROC AnyGL_glGetLocalConstantIntegervEXT;
ANYGL_EXPORT extern PFNANYGLGETLOCALCONSTANTFLOATVEXTPROC AnyGL_glGetLocalConstantFloatvEXT;

#ifndef ANYGL_NO_DEFINES
#define glBeginVertexShaderEXT() ANYGL_CALL(AnyGL_glBeginVertexShaderEXT)()
#define glEndVertexShaderEXT() ANYGL_CALL(AnyGL_glEndVertexShaderEXT)()
#define glBindVertexShaderEXT(id) ANYGL_CALL(AnyGL_glBindVertexShaderEXT)(id)
#define glGenVertexShadersEXT(range) ANYGL_CALL(AnyGL_glGenVertexShadersEXT)(range)
#define glDeleteVertexShaderEXT(id) ANYGL_CALL(AnyGL_glDeleteVertexShaderEXT)(id)
#define glShaderOp1EXT(op, res, arg1) ANYGL_CALL(AnyGL_glShaderOp1EXT)(op, res, arg1)
#define glShaderOp2EXT(op, res, arg1, arg2) ANYGL_CALL(AnyGL_glShaderOp2EXT)(op, res, arg1, arg2)
#define glShaderOp3EXT(op, res, arg1, arg2, arg3) ANYGL_CALL(AnyGL_glShaderOp3EXT)(op, res, arg1, arg2, arg3)
#define glSwizzleEXT(res, in, outX, outY, outZ, outW) ANYGL_CALL(AnyGL_glSwizzleEXT)(res, in, outX, outY, outZ, outW)
#define glWriteMaskEXT(res, in, outX, outY, outZ, outW) ANYGL_CALL(AnyGL_glWriteMaskEXT)(res, in, outX, outY, outZ, outW)
#define glInsertComponentEXT(res, src, num) ANYGL_CALL(AnyGL_glInsertComponentEXT)(res, src, num)
#define glExtractComponentEXT(res, src, num) ANYGL_CALL(AnyGL_glExtractComponentEXT)(res, src, num)
#define glGenSymbolsEXT(datatype, storagetype, range, components) ANYGL_CALL(AnyGL_glGenSymbolsEXT)(datatype, storagetype, range, components)
#define glSetInvariantEXT(id, type, addr) ANYGL_CALL(AnyGL_glSetInvariantEXT)(id, type, addr)
#define glSetLocalConstantEXT(id, type, addr) ANYGL_CALL(AnyGL_glSetLocalConstantEXT)(id, type, addr)
#define glVariantbvEXT(id, addr) ANYGL_CALL(AnyGL_glVariantbvEXT)(id, addr)
#define glVariantsvEXT(id, addr) ANYGL_CALL(AnyGL_glVariantsvEXT)(id, addr)
#define glVariantivEXT(id, addr) ANYGL_CALL(AnyGL_glVariantivEXT)(id, addr)
#define glVariantfvEXT(id, addr) ANYGL_CALL(AnyGL_glVariantfvEXT)(id, addr)
#define glVariantdvEXT(id, addr) ANYGL_CALL(AnyGL_glVariantdvEXT)(id, addr)
#define glVariantubvEXT(id, addr) ANYGL_CALL(AnyGL_glVariantubvEXT)(id, addr)
#define glVariantusvEXT(id, addr) ANYGL_CALL(AnyGL_glVariantusvEXT)(id, addr)
#define glVariantuivEXT(id, addr) ANYGL_CALL(AnyGL_glVariantuivEXT)(id, addr)
#define glVariantPointerEXT(id, type, stride, addr) ANYGL_CALL(AnyGL_glVariantPointerEXT)(id, type, stride, addr)
#define glEnableVariantClientStateEXT(id) ANYGL_CALL(AnyGL_glEnableVariantClientStateEXT)(id)
#define glDisableVariantClientStateEXT(id) ANYGL_CALL(AnyGL_glDisableVariantClientStateEXT)(id)
#define glBindLightParameterEXT(light, value) ANYGL_CALL(AnyGL_glBindLightParameterEXT)(light, value)
#define glBindMaterialParameterEXT(face, value) ANYGL_CALL(AnyGL_glBindMaterialParameterEXT)(face, value)
#define glBindTexGenParameterEXT(unit, coord, value) ANYGL_CALL(AnyGL_glBindTexGenParameterEXT)(unit, coord, value)
#define glBindTextureUnitParameterEXT(unit, value) ANYGL_CALL(AnyGL_glBindTextureUnitParameterEXT)(unit, value)
#define glBindParameterEXT(value) ANYGL_CALL(AnyGL_glBindParameterEXT)(value)
#define glIsVariantEnabledEXT(id, cap) ANYGL_CALL(AnyGL_glIsVariantEnabledEXT)(id, cap)
#define glGetVariantBooleanvEXT(id, value, data) ANYGL_CALL(AnyGL_glGetVariantBooleanvEXT)(id, value, data)
#define glGetVariantIntegervEXT(id, value, data) ANYGL_CALL(AnyGL_glGetVariantIntegervEXT)(id, value, data)
#define glGetVariantFloatvEXT(id, value, data) ANYGL_CALL(AnyGL_glGetVariantFloatvEXT)(id, value, data)
#define glGetVariantPointervEXT(id, value, data) ANYGL_CALL(AnyGL_glGetVariantPointervEXT)(id, value, data)
#define glGetInvariantBooleanvEXT(id, value, data) ANYGL_CALL(AnyGL_glGetInvariantBooleanvEXT)(id, value, data)
#define glGetInvariantIntegervEXT(id, value, data) ANYGL_CALL(AnyGL_glGetInvariantIntegervEXT)(id, value, data)
#define glGetInvariantFloatvEXT(id, value, data) ANYGL_CALL(AnyGL_glGetInvariantFloatvEXT)(id, value, data)
#define glGetLocalConstantBooleanvEXT(id, value, data) ANYGL_CALL(AnyGL_glGetLocalConstantBooleanvEXT)(id, value, data)
#define glGetLocalConstantIntegervEXT(id, value, data) ANYGL_CALL(AnyGL_glGetLocalConstantIntegervEXT)(id, value, data)
#define glGetLocalConstantFloatvEXT(id, value, data) ANYGL_CALL(AnyGL_glGetLocalConstantFloatvEXT)(id, value, data)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_vertex_weighting */
typedef void (APIENTRY* PFNANYGLVERTEXWEIGHTFEXTPROC)(GLfloat weight);
typedef void (APIENTRY* PFNANYGLVERTEXWEIGHTFVEXTPROC)(const GLfloat *weight);
typedef void (APIENTRY* PFNANYGLVERTEXWEIGHTPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);

ANYGL_EXPORT extern PFNANYGLVERTEXWEIGHTFEXTPROC AnyGL_glVertexWeightfEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXWEIGHTFVEXTPROC AnyGL_glVertexWeightfvEXT;
ANYGL_EXPORT extern PFNANYGLVERTEXWEIGHTPOINTEREXTPROC AnyGL_glVertexWeightPointerEXT;

#ifndef ANYGL_NO_DEFINES
#define glVertexWeightfEXT(weight) ANYGL_CALL(AnyGL_glVertexWeightfEXT)(weight)
#define glVertexWeightfvEXT(weight) ANYGL_CALL(AnyGL_glVertexWeightfvEXT)(weight)
#define glVertexWeightPointerEXT(size, type, stride, pointer) ANYGL_CALL(AnyGL_glVertexWeightPointerEXT)(size, type, stride, pointer)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_win32_keyed_mutex */
typedef GLboolean (APIENTRY* PFNANYGLACQUIREKEYEDMUTEXWIN32EXTPROC)(GLuint memory, GLuint64 key, GLuint timeout);
typedef GLboolean (APIENTRY* PFNANYGLRELEASEKEYEDMUTEXWIN32EXTPROC)(GLuint memory, GLuint64 key);

ANYGL_EXPORT extern PFNANYGLACQUIREKEYEDMUTEXWIN32EXTPROC AnyGL_glAcquireKeyedMutexWin32EXT;
ANYGL_EXPORT extern PFNANYGLRELEASEKEYEDMUTEXWIN32EXTPROC AnyGL_glReleaseKeyedMutexWin32EXT;

#ifndef ANYGL_NO_DEFINES
#define glAcquireKeyedMutexWin32EXT(memory, key, timeout) ANYGL_CALL(AnyGL_glAcquireKeyedMutexWin32EXT)(memory, key, timeout)
#define glReleaseKeyedMutexWin32EXT(memory, key) ANYGL_CALL(AnyGL_glReleaseKeyedMutexWin32EXT)(memory, key)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_window_rectangles */
typedef void (APIENTRY* PFNANYGLWINDOWRECTANGLESEXTPROC)(GLenum mode, GLsizei count, const GLint *box);

ANYGL_EXPORT extern PFNANYGLWINDOWRECTANGLESEXTPROC AnyGL_glWindowRectanglesEXT;

#ifndef ANYGL_NO_DEFINES
#define glWindowRectanglesEXT(mode, count, box) ANYGL_CALL(AnyGL_glWindowRectanglesEXT)(mode, count, box)
#endif /* ANYGL_NO_DEFINES */

/* GL_EXT_x11_sync_object */
typedef GLsync (APIENTRY* PFNANYGLIMPORTSYNCEXTPROC)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);

ANYGL_EXPORT extern PFNANYGLIMPORTSYNCEXTPROC AnyGL_glImportSyncEXT;

#ifndef ANYGL_NO_DEFINES
#define glImportSyncEXT(external_sync_type, external_sync, flags) ANYGL_CALL(AnyGL_glImportSyncEXT)(external_sync_type, external_sync, flags)
#endif /* ANYGL_NO_DEFINES */

/* GL_IMG_texture_compression_pvrtc */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

/* GL_IMG_texture_compression_pvrtc2 */


#ifndef ANYGL_NO_DEFINES
#endif /* ANYGL_NO_DEFINES */

#if defined(__clang__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#ifdef __cplusplus
}
#endif

#endif
