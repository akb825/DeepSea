#pragma once
#ifndef __AnyGL_glx_h_
#define __AnyGL_glx_h_ 1

#include "AnyGLConfig.h"
#include "gl.h"

#if ANYGL_HAS_GLX
#include <X11/Xlib.h>
#include <X11/Xutil.h>

/* Generated by AnyGL. */

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLX_EXTENSION_NAME
#define GLX_VERSION_1_0 1
#define ANYGLX_VERSION_1_0 1

typedef struct __GLXcontextRec *GLXContext;
typedef XID GLXDrawable;
typedef XID GLXPixmap;

#endif /* GLX_VERSION_1_0 */
#ifndef ANYGL_NO_DEFINES
#define GLX_EXTENSION_NAME                "GLX"
#define GLX_PbufferClobber                0
#define GLX_BufferSwapComplete            1
#define __GLX_NUMBER_EVENTS               17
#define GLX_BAD_SCREEN                    1
#define GLX_BAD_ATTRIBUTE                 2
#define GLX_NO_EXTENSION                  3
#define GLX_BAD_VISUAL                    4
#define GLX_BAD_CONTEXT                   5
#define GLX_BAD_VALUE                     6
#define GLX_BAD_ENUM                      7
#define GLX_USE_GL                        1
#define GLX_BUFFER_SIZE                   2
#define GLX_LEVEL                         3
#define GLX_RGBA                          4
#define GLX_DOUBLEBUFFER                  5
#define GLX_STEREO                        6
#define GLX_AUX_BUFFERS                   7
#define GLX_RED_SIZE                      8
#define GLX_GREEN_SIZE                    9
#define GLX_BLUE_SIZE                     10
#define GLX_ALPHA_SIZE                    11
#define GLX_DEPTH_SIZE                    12
#define GLX_STENCIL_SIZE                  13
#define GLX_ACCUM_RED_SIZE                14
#define GLX_ACCUM_GREEN_SIZE              15
#define GLX_ACCUM_BLUE_SIZE               16
#define GLX_ACCUM_ALPHA_SIZE              17
#endif /* ANYGL_NO_DEFINES */

typedef XVisualInfo *(APIENTRY* PFNANYGLXCHOOSEVISUALPROC)(Display *dpy, int screen, int *attribList);
typedef GLXContext (APIENTRY* PFNANYGLXCREATECONTEXTPROC)(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct);
typedef void (APIENTRY* PFNANYGLXDESTROYCONTEXTPROC)(Display *dpy, GLXContext ctx);
typedef Bool (APIENTRY* PFNANYGLXMAKECURRENTPROC)(Display *dpy, GLXDrawable drawable, GLXContext ctx);
typedef void (APIENTRY* PFNANYGLXCOPYCONTEXTPROC)(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask);
typedef void (APIENTRY* PFNANYGLXSWAPBUFFERSPROC)(Display *dpy, GLXDrawable drawable);
typedef GLXPixmap (APIENTRY* PFNANYGLXCREATEGLXPIXMAPPROC)(Display *dpy, XVisualInfo *visual, Pixmap pixmap);
typedef void (APIENTRY* PFNANYGLXDESTROYGLXPIXMAPPROC)(Display *dpy, GLXPixmap pixmap);
typedef Bool (APIENTRY* PFNANYGLXQUERYEXTENSIONPROC)(Display *dpy, int *errorb, int *event);
typedef Bool (APIENTRY* PFNANYGLXQUERYVERSIONPROC)(Display *dpy, int *maj, int *min);
typedef Bool (APIENTRY* PFNANYGLXISDIRECTPROC)(Display *dpy, GLXContext ctx);
typedef int (APIENTRY* PFNANYGLXGETCONFIGPROC)(Display *dpy, XVisualInfo *visual, int attrib, int *value);
typedef GLXContext (APIENTRY* PFNANYGLXGETCURRENTCONTEXTPROC)();
typedef GLXDrawable (APIENTRY* PFNANYGLXGETCURRENTDRAWABLEPROC)();
typedef void (APIENTRY* PFNANYGLXWAITGLPROC)();
typedef void (APIENTRY* PFNANYGLXWAITXPROC)();
typedef void (APIENTRY* PFNANYGLXUSEXFONTPROC)(Font font, int first, int count, int list);

ANYGL_EXPORT extern PFNANYGLXCHOOSEVISUALPROC AnyGL_glXChooseVisual;
ANYGL_EXPORT extern PFNANYGLXCREATECONTEXTPROC AnyGL_glXCreateContext;
ANYGL_EXPORT extern PFNANYGLXDESTROYCONTEXTPROC AnyGL_glXDestroyContext;
ANYGL_EXPORT extern PFNANYGLXMAKECURRENTPROC AnyGL_glXMakeCurrent;
ANYGL_EXPORT extern PFNANYGLXCOPYCONTEXTPROC AnyGL_glXCopyContext;
ANYGL_EXPORT extern PFNANYGLXSWAPBUFFERSPROC AnyGL_glXSwapBuffers;
ANYGL_EXPORT extern PFNANYGLXCREATEGLXPIXMAPPROC AnyGL_glXCreateGLXPixmap;
ANYGL_EXPORT extern PFNANYGLXDESTROYGLXPIXMAPPROC AnyGL_glXDestroyGLXPixmap;
ANYGL_EXPORT extern PFNANYGLXQUERYEXTENSIONPROC AnyGL_glXQueryExtension;
ANYGL_EXPORT extern PFNANYGLXQUERYVERSIONPROC AnyGL_glXQueryVersion;
ANYGL_EXPORT extern PFNANYGLXISDIRECTPROC AnyGL_glXIsDirect;
ANYGL_EXPORT extern PFNANYGLXGETCONFIGPROC AnyGL_glXGetConfig;
ANYGL_EXPORT extern PFNANYGLXGETCURRENTCONTEXTPROC AnyGL_glXGetCurrentContext;
ANYGL_EXPORT extern PFNANYGLXGETCURRENTDRAWABLEPROC AnyGL_glXGetCurrentDrawable;
ANYGL_EXPORT extern PFNANYGLXWAITGLPROC AnyGL_glXWaitGL;
ANYGL_EXPORT extern PFNANYGLXWAITXPROC AnyGL_glXWaitX;
ANYGL_EXPORT extern PFNANYGLXUSEXFONTPROC AnyGL_glXUseXFont;

#ifndef ANYGL_NO_DEFINES
#define glXChooseVisual(dpy, screen, attribList) AnyGL_glXChooseVisual(dpy, screen, attribList)
#define glXCreateContext(dpy, vis, shareList, direct) AnyGL_glXCreateContext(dpy, vis, shareList, direct)
#define glXDestroyContext(dpy, ctx) AnyGL_glXDestroyContext(dpy, ctx)
#define glXMakeCurrent(dpy, drawable, ctx) AnyGL_glXMakeCurrent(dpy, drawable, ctx)
#define glXCopyContext(dpy, src, dst, mask) AnyGL_glXCopyContext(dpy, src, dst, mask)
#define glXSwapBuffers(dpy, drawable) AnyGL_glXSwapBuffers(dpy, drawable)
#define glXCreateGLXPixmap(dpy, visual, pixmap) AnyGL_glXCreateGLXPixmap(dpy, visual, pixmap)
#define glXDestroyGLXPixmap(dpy, pixmap) AnyGL_glXDestroyGLXPixmap(dpy, pixmap)
#define glXQueryExtension(dpy, errorb, event) AnyGL_glXQueryExtension(dpy, errorb, event)
#define glXQueryVersion(dpy, maj, min) AnyGL_glXQueryVersion(dpy, maj, min)
#define glXIsDirect(dpy, ctx) AnyGL_glXIsDirect(dpy, ctx)
#define glXGetConfig(dpy, visual, attrib, value) AnyGL_glXGetConfig(dpy, visual, attrib, value)
#define glXGetCurrentContext() AnyGL_glXGetCurrentContext()
#define glXGetCurrentDrawable() AnyGL_glXGetCurrentDrawable()
#define glXWaitGL() AnyGL_glXWaitGL()
#define glXWaitX() AnyGL_glXWaitX()
#define glXUseXFont(font, first, count, list) AnyGL_glXUseXFont(font, first, count, list)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_VERSION_1_1
#define GLX_VERSION_1_1 1
#define ANYGLX_VERSION_1_1 1


#endif /* GLX_VERSION_1_1 */
#ifndef ANYGL_NO_DEFINES
#define GLX_VENDOR                        0x1
#define GLX_VERSION                       0x2
#define GLX_EXTENSIONS                    0x3
#endif /* ANYGL_NO_DEFINES */

typedef const char *(APIENTRY* PFNANYGLXQUERYEXTENSIONSSTRINGPROC)(Display *dpy, int screen);
typedef const char *(APIENTRY* PFNANYGLXQUERYSERVERSTRINGPROC)(Display *dpy, int screen, int name);
typedef const char *(APIENTRY* PFNANYGLXGETCLIENTSTRINGPROC)(Display *dpy, int name);

ANYGL_EXPORT extern PFNANYGLXQUERYEXTENSIONSSTRINGPROC AnyGL_glXQueryExtensionsString;
ANYGL_EXPORT extern PFNANYGLXQUERYSERVERSTRINGPROC AnyGL_glXQueryServerString;
ANYGL_EXPORT extern PFNANYGLXGETCLIENTSTRINGPROC AnyGL_glXGetClientString;

#ifndef ANYGL_NO_DEFINES
#define glXQueryExtensionsString(dpy, screen) AnyGL_glXQueryExtensionsString(dpy, screen)
#define glXQueryServerString(dpy, screen, name) AnyGL_glXQueryServerString(dpy, screen, name)
#define glXGetClientString(dpy, name) AnyGL_glXGetClientString(dpy, name)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_VERSION_1_2
#define GLX_VERSION_1_2 1
#define ANYGLX_VERSION_1_2 1


#endif /* GLX_VERSION_1_2 */
typedef Display *(APIENTRY* PFNANYGLXGETCURRENTDISPLAYPROC)();

ANYGL_EXPORT extern PFNANYGLXGETCURRENTDISPLAYPROC AnyGL_glXGetCurrentDisplay;

#ifndef ANYGL_NO_DEFINES
#define glXGetCurrentDisplay() AnyGL_glXGetCurrentDisplay()
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_VERSION_1_3
#define GLX_VERSION_1_3 1
#define ANYGLX_VERSION_1_3 1

typedef XID GLXContextID;
typedef struct __GLXFBConfigRec *GLXFBConfig;
typedef XID GLXWindow;
typedef XID GLXPbuffer;

#endif /* GLX_VERSION_1_3 */
#ifndef ANYGL_NO_DEFINES
#define GLX_WINDOW_BIT                    0x00000001
#define GLX_PIXMAP_BIT                    0x00000002
#define GLX_PBUFFER_BIT                   0x00000004
#define GLX_RGBA_BIT                      0x00000001
#define GLX_COLOR_INDEX_BIT               0x00000002
#define GLX_PBUFFER_CLOBBER_MASK          0x08000000
#define GLX_FRONT_LEFT_BUFFER_BIT         0x00000001
#define GLX_FRONT_RIGHT_BUFFER_BIT        0x00000002
#define GLX_BACK_LEFT_BUFFER_BIT          0x00000004
#define GLX_BACK_RIGHT_BUFFER_BIT         0x00000008
#define GLX_AUX_BUFFERS_BIT               0x00000010
#define GLX_DEPTH_BUFFER_BIT              0x00000020
#define GLX_STENCIL_BUFFER_BIT            0x00000040
#define GLX_ACCUM_BUFFER_BIT              0x00000080
#define GLX_CONFIG_CAVEAT                 0x20
#define GLX_X_VISUAL_TYPE                 0x22
#define GLX_TRANSPARENT_TYPE              0x23
#define GLX_TRANSPARENT_INDEX_VALUE       0x24
#define GLX_TRANSPARENT_RED_VALUE         0x25
#define GLX_TRANSPARENT_GREEN_VALUE       0x26
#define GLX_TRANSPARENT_BLUE_VALUE        0x27
#define GLX_TRANSPARENT_ALPHA_VALUE       0x28
#define GLX_DONT_CARE                     0xFFFFFFFF
#define GLX_NONE                          0x8000
#define GLX_SLOW_CONFIG                   0x8001
#define GLX_TRUE_COLOR                    0x8002
#define GLX_DIRECT_COLOR                  0x8003
#define GLX_PSEUDO_COLOR                  0x8004
#define GLX_STATIC_COLOR                  0x8005
#define GLX_GRAY_SCALE                    0x8006
#define GLX_STATIC_GRAY                   0x8007
#define GLX_TRANSPARENT_RGB               0x8008
#define GLX_TRANSPARENT_INDEX             0x8009
#define GLX_VISUAL_ID                     0x800B
#define GLX_SCREEN                        0x800C
#define GLX_NON_CONFORMANT_CONFIG         0x800D
#define GLX_DRAWABLE_TYPE                 0x8010
#define GLX_RENDER_TYPE                   0x8011
#define GLX_X_RENDERABLE                  0x8012
#define GLX_FBCONFIG_ID                   0x8013
#define GLX_RGBA_TYPE                     0x8014
#define GLX_COLOR_INDEX_TYPE              0x8015
#define GLX_MAX_PBUFFER_WIDTH             0x8016
#define GLX_MAX_PBUFFER_HEIGHT            0x8017
#define GLX_MAX_PBUFFER_PIXELS            0x8018
#define GLX_PRESERVED_CONTENTS            0x801B
#define GLX_LARGEST_PBUFFER               0x801C
#define GLX_WIDTH                         0x801D
#define GLX_HEIGHT                        0x801E
#define GLX_EVENT_MASK                    0x801F
#define GLX_DAMAGED                       0x8020
#define GLX_SAVED                         0x8021
#define GLX_WINDOW                        0x8022
#define GLX_PBUFFER                       0x8023
#define GLX_PBUFFER_HEIGHT                0x8040
#define GLX_PBUFFER_WIDTH                 0x8041
#endif /* ANYGL_NO_DEFINES */

typedef GLXFBConfig *(APIENTRY* PFNANYGLXGETFBCONFIGSPROC)(Display *dpy, int screen, int *nelements);
typedef GLXFBConfig *(APIENTRY* PFNANYGLXCHOOSEFBCONFIGPROC)(Display *dpy, int screen, const int *attrib_list, int *nelements);
typedef int (APIENTRY* PFNANYGLXGETFBCONFIGATTRIBPROC)(Display *dpy, GLXFBConfig config, int attribute, int *value);
typedef XVisualInfo *(APIENTRY* PFNANYGLXGETVISUALFROMFBCONFIGPROC)(Display *dpy, GLXFBConfig config);
typedef GLXWindow (APIENTRY* PFNANYGLXCREATEWINDOWPROC)(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
typedef void (APIENTRY* PFNANYGLXDESTROYWINDOWPROC)(Display *dpy, GLXWindow win);
typedef GLXPixmap (APIENTRY* PFNANYGLXCREATEPIXMAPPROC)(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
typedef void (APIENTRY* PFNANYGLXDESTROYPIXMAPPROC)(Display *dpy, GLXPixmap pixmap);
typedef GLXPbuffer (APIENTRY* PFNANYGLXCREATEPBUFFERPROC)(Display *dpy, GLXFBConfig config, const int *attrib_list);
typedef void (APIENTRY* PFNANYGLXDESTROYPBUFFERPROC)(Display *dpy, GLXPbuffer pbuf);
typedef void (APIENTRY* PFNANYGLXQUERYDRAWABLEPROC)(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
typedef GLXContext (APIENTRY* PFNANYGLXCREATENEWCONTEXTPROC)(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef Bool (APIENTRY* PFNANYGLXMAKECONTEXTCURRENTPROC)(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef GLXDrawable (APIENTRY* PFNANYGLXGETCURRENTREADDRAWABLEPROC)();
typedef int (APIENTRY* PFNANYGLXQUERYCONTEXTPROC)(Display *dpy, GLXContext ctx, int attribute, int *value);
typedef void (APIENTRY* PFNANYGLXSELECTEVENTPROC)(Display *dpy, GLXDrawable draw, unsigned long event_mask);
typedef void (APIENTRY* PFNANYGLXGETSELECTEDEVENTPROC)(Display *dpy, GLXDrawable draw, unsigned long *event_mask);

ANYGL_EXPORT extern PFNANYGLXGETFBCONFIGSPROC AnyGL_glXGetFBConfigs;
ANYGL_EXPORT extern PFNANYGLXCHOOSEFBCONFIGPROC AnyGL_glXChooseFBConfig;
ANYGL_EXPORT extern PFNANYGLXGETFBCONFIGATTRIBPROC AnyGL_glXGetFBConfigAttrib;
ANYGL_EXPORT extern PFNANYGLXGETVISUALFROMFBCONFIGPROC AnyGL_glXGetVisualFromFBConfig;
ANYGL_EXPORT extern PFNANYGLXCREATEWINDOWPROC AnyGL_glXCreateWindow;
ANYGL_EXPORT extern PFNANYGLXDESTROYWINDOWPROC AnyGL_glXDestroyWindow;
ANYGL_EXPORT extern PFNANYGLXCREATEPIXMAPPROC AnyGL_glXCreatePixmap;
ANYGL_EXPORT extern PFNANYGLXDESTROYPIXMAPPROC AnyGL_glXDestroyPixmap;
ANYGL_EXPORT extern PFNANYGLXCREATEPBUFFERPROC AnyGL_glXCreatePbuffer;
ANYGL_EXPORT extern PFNANYGLXDESTROYPBUFFERPROC AnyGL_glXDestroyPbuffer;
ANYGL_EXPORT extern PFNANYGLXQUERYDRAWABLEPROC AnyGL_glXQueryDrawable;
ANYGL_EXPORT extern PFNANYGLXCREATENEWCONTEXTPROC AnyGL_glXCreateNewContext;
ANYGL_EXPORT extern PFNANYGLXMAKECONTEXTCURRENTPROC AnyGL_glXMakeContextCurrent;
ANYGL_EXPORT extern PFNANYGLXGETCURRENTREADDRAWABLEPROC AnyGL_glXGetCurrentReadDrawable;
ANYGL_EXPORT extern PFNANYGLXQUERYCONTEXTPROC AnyGL_glXQueryContext;
ANYGL_EXPORT extern PFNANYGLXSELECTEVENTPROC AnyGL_glXSelectEvent;
ANYGL_EXPORT extern PFNANYGLXGETSELECTEDEVENTPROC AnyGL_glXGetSelectedEvent;

#ifndef ANYGL_NO_DEFINES
#define glXGetFBConfigs(dpy, screen, nelements) AnyGL_glXGetFBConfigs(dpy, screen, nelements)
#define glXChooseFBConfig(dpy, screen, attrib_list, nelements) AnyGL_glXChooseFBConfig(dpy, screen, attrib_list, nelements)
#define glXGetFBConfigAttrib(dpy, config, attribute, value) AnyGL_glXGetFBConfigAttrib(dpy, config, attribute, value)
#define glXGetVisualFromFBConfig(dpy, config) AnyGL_glXGetVisualFromFBConfig(dpy, config)
#define glXCreateWindow(dpy, config, win, attrib_list) AnyGL_glXCreateWindow(dpy, config, win, attrib_list)
#define glXDestroyWindow(dpy, win) AnyGL_glXDestroyWindow(dpy, win)
#define glXCreatePixmap(dpy, config, pixmap, attrib_list) AnyGL_glXCreatePixmap(dpy, config, pixmap, attrib_list)
#define glXDestroyPixmap(dpy, pixmap) AnyGL_glXDestroyPixmap(dpy, pixmap)
#define glXCreatePbuffer(dpy, config, attrib_list) AnyGL_glXCreatePbuffer(dpy, config, attrib_list)
#define glXDestroyPbuffer(dpy, pbuf) AnyGL_glXDestroyPbuffer(dpy, pbuf)
#define glXQueryDrawable(dpy, draw, attribute, value) AnyGL_glXQueryDrawable(dpy, draw, attribute, value)
#define glXCreateNewContext(dpy, config, render_type, share_list, direct) AnyGL_glXCreateNewContext(dpy, config, render_type, share_list, direct)
#define glXMakeContextCurrent(dpy, draw, read, ctx) AnyGL_glXMakeContextCurrent(dpy, draw, read, ctx)
#define glXGetCurrentReadDrawable() AnyGL_glXGetCurrentReadDrawable()
#define glXQueryContext(dpy, ctx, attribute, value) AnyGL_glXQueryContext(dpy, ctx, attribute, value)
#define glXSelectEvent(dpy, draw, event_mask) AnyGL_glXSelectEvent(dpy, draw, event_mask)
#define glXGetSelectedEvent(dpy, draw, event_mask) AnyGL_glXGetSelectedEvent(dpy, draw, event_mask)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_VERSION_1_4
#define GLX_VERSION_1_4 1
#define ANYGLX_VERSION_1_4 1

typedef void (APIENTRY *__GLXextFuncPtr)(void);

#endif /* GLX_VERSION_1_4 */
#ifndef ANYGL_NO_DEFINES
#define GLX_SAMPLE_BUFFERS                100000
#define GLX_SAMPLES                       100001
#endif /* ANYGL_NO_DEFINES */

typedef __GLXextFuncPtr (APIENTRY* PFNANYGLXGETPROCADDRESSPROC)(const GLubyte *procName);

ANYGL_EXPORT extern PFNANYGLXGETPROCADDRESSPROC AnyGL_glXGetProcAddress;

#ifndef ANYGL_NO_DEFINES
#define glXGetProcAddress(procName) AnyGL_glXGetProcAddress(procName)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_context_flush_control
#define GLX_ARB_context_flush_control 1
#define ANYGLX_ARB_context_flush_control 1


#endif /* GLX_ARB_context_flush_control */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_RELEASE_BEHAVIOR_ARB  0x2097
#define GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB 0
#define GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB 0x2098
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_create_context
#define GLX_ARB_create_context 1
#define ANYGLX_ARB_create_context 1


#endif /* GLX_ARB_create_context */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_DEBUG_BIT_ARB         0x00000001
#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
#define GLX_CONTEXT_MAJOR_VERSION_ARB     0x2091
#define GLX_CONTEXT_MINOR_VERSION_ARB     0x2092
#define GLX_CONTEXT_FLAGS_ARB             0x2094
#endif /* ANYGL_NO_DEFINES */

typedef GLXContext (APIENTRY* PFNANYGLXCREATECONTEXTATTRIBSARBPROC)(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);

ANYGL_EXPORT extern PFNANYGLXCREATECONTEXTATTRIBSARBPROC AnyGL_glXCreateContextAttribsARB;

#ifndef ANYGL_NO_DEFINES
#define glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list) AnyGL_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_create_context_no_error
#define GLX_ARB_create_context_no_error 1
#define ANYGLX_ARB_create_context_no_error 1


#endif /* GLX_ARB_create_context_no_error */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_OPENGL_NO_ERROR_ARB   0x31B3
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_create_context_profile
#define GLX_ARB_create_context_profile 1
#define ANYGLX_ARB_create_context_profile 1


#endif /* GLX_ARB_create_context_profile */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB  0x00000001
#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define GLX_CONTEXT_PROFILE_MASK_ARB      0x9126
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_create_context_robustness
#define GLX_ARB_create_context_robustness 1
#define ANYGLX_ARB_create_context_robustness 1


#endif /* GLX_ARB_create_context_robustness */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GLX_LOSE_CONTEXT_ON_RESET_ARB     0x8252
#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GLX_NO_RESET_NOTIFICATION_ARB     0x8261
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_fbconfig_float
#define GLX_ARB_fbconfig_float 1
#define ANYGLX_ARB_fbconfig_float 1


#endif /* GLX_ARB_fbconfig_float */
#ifndef ANYGL_NO_DEFINES
#define GLX_RGBA_FLOAT_TYPE_ARB           0x20B9
#define GLX_RGBA_FLOAT_BIT_ARB            0x00000004
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_framebuffer_sRGB
#define GLX_ARB_framebuffer_sRGB 1
#define ANYGLX_ARB_framebuffer_sRGB 1


#endif /* GLX_ARB_framebuffer_sRGB */
#ifndef ANYGL_NO_DEFINES
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB  0x20B2
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_multisample
#define GLX_ARB_multisample 1
#define ANYGLX_ARB_multisample 1


#endif /* GLX_ARB_multisample */
#ifndef ANYGL_NO_DEFINES
#define GLX_SAMPLE_BUFFERS_ARB            100000
#define GLX_SAMPLES_ARB                   100001
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_robustness_application_isolation
#define GLX_ARB_robustness_application_isolation 1
#define ANYGLX_ARB_robustness_application_isolation 1


#endif /* GLX_ARB_robustness_application_isolation */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_ARB_robustness_share_group_isolation
#define GLX_ARB_robustness_share_group_isolation 1
#define ANYGLX_ARB_robustness_share_group_isolation 1


#endif /* GLX_ARB_robustness_share_group_isolation */

#ifndef GLX_ARB_vertex_buffer_object
#define GLX_ARB_vertex_buffer_object 1
#define ANYGLX_ARB_vertex_buffer_object 1


#endif /* GLX_ARB_vertex_buffer_object */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB 0x2095
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_3DFX_multisample
#define GLX_3DFX_multisample 1
#define ANYGLX_3DFX_multisample 1


#endif /* GLX_3DFX_multisample */
#ifndef ANYGL_NO_DEFINES
#define GLX_SAMPLE_BUFFERS_3DFX           0x8050
#define GLX_SAMPLES_3DFX                  0x8051
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_AMD_gpu_association
#define GLX_AMD_gpu_association 1
#define ANYGLX_AMD_gpu_association 1


#endif /* GLX_AMD_gpu_association */
#ifndef ANYGL_NO_DEFINES
#define GLX_GPU_VENDOR_AMD                0x1F00
#define GLX_GPU_RENDERER_STRING_AMD       0x1F01
#define GLX_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
#define GLX_GPU_FASTEST_TARGET_GPUS_AMD   0x21A2
#define GLX_GPU_RAM_AMD                   0x21A3
#define GLX_GPU_CLOCK_AMD                 0x21A4
#define GLX_GPU_NUM_PIPES_AMD             0x21A5
#define GLX_GPU_NUM_SIMD_AMD              0x21A6
#define GLX_GPU_NUM_RB_AMD                0x21A7
#define GLX_GPU_NUM_SPI_AMD               0x21A8
#endif /* ANYGL_NO_DEFINES */

typedef unsigned int (APIENTRY* PFNANYGLXGETGPUIDSAMDPROC)(unsigned int maxCount, unsigned int *ids);
typedef int (APIENTRY* PFNANYGLXGETGPUINFOAMDPROC)(unsigned int id, int property, GLenum dataType, unsigned int size, void *data);
typedef unsigned int (APIENTRY* PFNANYGLXGETCONTEXTGPUIDAMDPROC)(GLXContext ctx);
typedef GLXContext (APIENTRY* PFNANYGLXCREATEASSOCIATEDCONTEXTAMDPROC)(unsigned int id, GLXContext share_list);
typedef GLXContext (APIENTRY* PFNANYGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(unsigned int id, GLXContext share_context, const int *attribList);
typedef Bool (APIENTRY* PFNANYGLXDELETEASSOCIATEDCONTEXTAMDPROC)(GLXContext ctx);
typedef Bool (APIENTRY* PFNANYGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(GLXContext ctx);
typedef GLXContext (APIENTRY* PFNANYGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC)();
typedef void (APIENTRY* PFNANYGLXBLITCONTEXTFRAMEBUFFERAMDPROC)(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);

ANYGL_EXPORT extern PFNANYGLXGETGPUIDSAMDPROC AnyGL_glXGetGPUIDsAMD;
ANYGL_EXPORT extern PFNANYGLXGETGPUINFOAMDPROC AnyGL_glXGetGPUInfoAMD;
ANYGL_EXPORT extern PFNANYGLXGETCONTEXTGPUIDAMDPROC AnyGL_glXGetContextGPUIDAMD;
ANYGL_EXPORT extern PFNANYGLXCREATEASSOCIATEDCONTEXTAMDPROC AnyGL_glXCreateAssociatedContextAMD;
ANYGL_EXPORT extern PFNANYGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC AnyGL_glXCreateAssociatedContextAttribsAMD;
ANYGL_EXPORT extern PFNANYGLXDELETEASSOCIATEDCONTEXTAMDPROC AnyGL_glXDeleteAssociatedContextAMD;
ANYGL_EXPORT extern PFNANYGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC AnyGL_glXMakeAssociatedContextCurrentAMD;
ANYGL_EXPORT extern PFNANYGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC AnyGL_glXGetCurrentAssociatedContextAMD;
ANYGL_EXPORT extern PFNANYGLXBLITCONTEXTFRAMEBUFFERAMDPROC AnyGL_glXBlitContextFramebufferAMD;

#ifndef ANYGL_NO_DEFINES
#define glXGetGPUIDsAMD(maxCount, ids) AnyGL_glXGetGPUIDsAMD(maxCount, ids)
#define glXGetGPUInfoAMD(id, property, dataType, size, data) AnyGL_glXGetGPUInfoAMD(id, property, dataType, size, data)
#define glXGetContextGPUIDAMD(ctx) AnyGL_glXGetContextGPUIDAMD(ctx)
#define glXCreateAssociatedContextAMD(id, share_list) AnyGL_glXCreateAssociatedContextAMD(id, share_list)
#define glXCreateAssociatedContextAttribsAMD(id, share_context, attribList) AnyGL_glXCreateAssociatedContextAttribsAMD(id, share_context, attribList)
#define glXDeleteAssociatedContextAMD(ctx) AnyGL_glXDeleteAssociatedContextAMD(ctx)
#define glXMakeAssociatedContextCurrentAMD(ctx) AnyGL_glXMakeAssociatedContextCurrentAMD(ctx)
#define glXGetCurrentAssociatedContextAMD() AnyGL_glXGetCurrentAssociatedContextAMD()
#define glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) AnyGL_glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_buffer_age
#define GLX_EXT_buffer_age 1
#define ANYGLX_EXT_buffer_age 1


#endif /* GLX_EXT_buffer_age */
#ifndef ANYGL_NO_DEFINES
#define GLX_BACK_BUFFER_AGE_EXT           0x20F4
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_context_priority
#define GLX_EXT_context_priority 1
#define ANYGLX_EXT_context_priority 1


#endif /* GLX_EXT_context_priority */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_PRIORITY_LEVEL_EXT    0x3100
#define GLX_CONTEXT_PRIORITY_HIGH_EXT     0x3101
#define GLX_CONTEXT_PRIORITY_MEDIUM_EXT   0x3102
#define GLX_CONTEXT_PRIORITY_LOW_EXT      0x3103
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_create_context_es2_profile
#define GLX_EXT_create_context_es2_profile 1
#define ANYGLX_EXT_create_context_es2_profile 1


#endif /* GLX_EXT_create_context_es2_profile */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT   0x00000004
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_create_context_es_profile
#define GLX_EXT_create_context_es_profile 1
#define ANYGLX_EXT_create_context_es_profile 1


#endif /* GLX_EXT_create_context_es_profile */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_ES_PROFILE_BIT_EXT    0x00000004
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_fbconfig_packed_float
#define GLX_EXT_fbconfig_packed_float 1
#define ANYGLX_EXT_fbconfig_packed_float 1


#endif /* GLX_EXT_fbconfig_packed_float */
#ifndef ANYGL_NO_DEFINES
#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT  0x20B1
#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT   0x00000008
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_framebuffer_sRGB
#define GLX_EXT_framebuffer_sRGB 1
#define ANYGLX_EXT_framebuffer_sRGB 1


#endif /* GLX_EXT_framebuffer_sRGB */
#ifndef ANYGL_NO_DEFINES
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT  0x20B2
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_get_drawable_type
#define GLX_EXT_get_drawable_type 1
#define ANYGLX_EXT_get_drawable_type 1


#endif /* GLX_EXT_get_drawable_type */

#ifndef GLX_EXT_import_context
#define GLX_EXT_import_context 1
#define ANYGLX_EXT_import_context 1


#endif /* GLX_EXT_import_context */
#ifndef ANYGL_NO_DEFINES
#define GLX_SHARE_CONTEXT_EXT             0x800A
#define GLX_VISUAL_ID_EXT                 0x800B
#define GLX_SCREEN_EXT                    0x800C
#endif /* ANYGL_NO_DEFINES */

typedef Display *(APIENTRY* PFNANYGLXGETCURRENTDISPLAYEXTPROC)();
typedef int (APIENTRY* PFNANYGLXQUERYCONTEXTINFOEXTPROC)(Display *dpy, GLXContext context, int attribute, int *value);
typedef GLXContextID (APIENTRY* PFNANYGLXGETCONTEXTIDEXTPROC)(const GLXContext context);
typedef GLXContext (APIENTRY* PFNANYGLXIMPORTCONTEXTEXTPROC)(Display *dpy, GLXContextID contextID);
typedef void (APIENTRY* PFNANYGLXFREECONTEXTEXTPROC)(Display *dpy, GLXContext context);

ANYGL_EXPORT extern PFNANYGLXGETCURRENTDISPLAYEXTPROC AnyGL_glXGetCurrentDisplayEXT;
ANYGL_EXPORT extern PFNANYGLXQUERYCONTEXTINFOEXTPROC AnyGL_glXQueryContextInfoEXT;
ANYGL_EXPORT extern PFNANYGLXGETCONTEXTIDEXTPROC AnyGL_glXGetContextIDEXT;
ANYGL_EXPORT extern PFNANYGLXIMPORTCONTEXTEXTPROC AnyGL_glXImportContextEXT;
ANYGL_EXPORT extern PFNANYGLXFREECONTEXTEXTPROC AnyGL_glXFreeContextEXT;

#ifndef ANYGL_NO_DEFINES
#define glXGetCurrentDisplayEXT() AnyGL_glXGetCurrentDisplayEXT()
#define glXQueryContextInfoEXT(dpy, context, attribute, value) AnyGL_glXQueryContextInfoEXT(dpy, context, attribute, value)
#define glXGetContextIDEXT(context) AnyGL_glXGetContextIDEXT(context)
#define glXImportContextEXT(dpy, contextID) AnyGL_glXImportContextEXT(dpy, contextID)
#define glXFreeContextEXT(dpy, context) AnyGL_glXFreeContextEXT(dpy, context)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_libglvnd
#define GLX_EXT_libglvnd 1
#define ANYGLX_EXT_libglvnd 1


#endif /* GLX_EXT_libglvnd */
#ifndef ANYGL_NO_DEFINES
#define GLX_VENDOR_NAMES_EXT              0x20F6
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_no_config_context
#define GLX_EXT_no_config_context 1
#define ANYGLX_EXT_no_config_context 1


#endif /* GLX_EXT_no_config_context */

#ifndef GLX_EXT_stereo_tree
#define GLX_EXT_stereo_tree 1
#define ANYGLX_EXT_stereo_tree 1

typedef struct {
    int type;
    unsigned long serial;
    Bool send_event;
    Display *display;
    int extension;
    int evtype;
    GLXDrawable window;
    Bool stereo_tree;
} GLXStereoNotifyEventEXT;

#endif /* GLX_EXT_stereo_tree */
#ifndef ANYGL_NO_DEFINES
#define GLX_STEREO_TREE_EXT               0x20F5
#define GLX_STEREO_NOTIFY_MASK_EXT        0x00000001
#define GLX_STEREO_NOTIFY_EXT             0x00000000
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_swap_control
#define GLX_EXT_swap_control 1
#define ANYGLX_EXT_swap_control 1


#endif /* GLX_EXT_swap_control */
#ifndef ANYGL_NO_DEFINES
#define GLX_SWAP_INTERVAL_EXT             0x20F1
#define GLX_MAX_SWAP_INTERVAL_EXT         0x20F2
#endif /* ANYGL_NO_DEFINES */

typedef void (APIENTRY* PFNANYGLXSWAPINTERVALEXTPROC)(Display *dpy, GLXDrawable drawable, int interval);

ANYGL_EXPORT extern PFNANYGLXSWAPINTERVALEXTPROC AnyGL_glXSwapIntervalEXT;

#ifndef ANYGL_NO_DEFINES
#define glXSwapIntervalEXT(dpy, drawable, interval) AnyGL_glXSwapIntervalEXT(dpy, drawable, interval)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_swap_control_tear
#define GLX_EXT_swap_control_tear 1
#define ANYGLX_EXT_swap_control_tear 1


#endif /* GLX_EXT_swap_control_tear */
#ifndef ANYGL_NO_DEFINES
#define GLX_LATE_SWAPS_TEAR_EXT           0x20F3
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_texture_from_pixmap
#define GLX_EXT_texture_from_pixmap 1
#define ANYGLX_EXT_texture_from_pixmap 1


#endif /* GLX_EXT_texture_from_pixmap */
#ifndef ANYGL_NO_DEFINES
#define GLX_TEXTURE_1D_BIT_EXT            0x00000001
#define GLX_TEXTURE_2D_BIT_EXT            0x00000002
#define GLX_TEXTURE_RECTANGLE_BIT_EXT     0x00000004
#define GLX_BIND_TO_TEXTURE_RGB_EXT       0x20D0
#define GLX_BIND_TO_TEXTURE_RGBA_EXT      0x20D1
#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT    0x20D2
#define GLX_BIND_TO_TEXTURE_TARGETS_EXT   0x20D3
#define GLX_Y_INVERTED_EXT                0x20D4
#define GLX_TEXTURE_FORMAT_EXT            0x20D5
#define GLX_TEXTURE_TARGET_EXT            0x20D6
#define GLX_MIPMAP_TEXTURE_EXT            0x20D7
#define GLX_TEXTURE_FORMAT_NONE_EXT       0x20D8
#define GLX_TEXTURE_FORMAT_RGB_EXT        0x20D9
#define GLX_TEXTURE_FORMAT_RGBA_EXT       0x20DA
#define GLX_TEXTURE_1D_EXT                0x20DB
#define GLX_TEXTURE_2D_EXT                0x20DC
#define GLX_TEXTURE_RECTANGLE_EXT         0x20DD
#define GLX_FRONT_LEFT_EXT                0x20DE
#define GLX_FRONT_RIGHT_EXT               0x20DF
#define GLX_BACK_LEFT_EXT                 0x20E0
#define GLX_BACK_RIGHT_EXT                0x20E1
#define GLX_FRONT_EXT                     0x20DE
#define GLX_BACK_EXT                      0x20E0
#define GLX_AUX0_EXT                      0x20E2
#define GLX_AUX1_EXT                      0x20E3
#define GLX_AUX2_EXT                      0x20E4
#define GLX_AUX3_EXT                      0x20E5
#define GLX_AUX4_EXT                      0x20E6
#define GLX_AUX5_EXT                      0x20E7
#define GLX_AUX6_EXT                      0x20E8
#define GLX_AUX7_EXT                      0x20E9
#define GLX_AUX8_EXT                      0x20EA
#define GLX_AUX9_EXT                      0x20EB
#endif /* ANYGL_NO_DEFINES */

typedef void (APIENTRY* PFNANYGLXBINDTEXIMAGEEXTPROC)(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list);
typedef void (APIENTRY* PFNANYGLXRELEASETEXIMAGEEXTPROC)(Display *dpy, GLXDrawable drawable, int buffer);

ANYGL_EXPORT extern PFNANYGLXBINDTEXIMAGEEXTPROC AnyGL_glXBindTexImageEXT;
ANYGL_EXPORT extern PFNANYGLXRELEASETEXIMAGEEXTPROC AnyGL_glXReleaseTexImageEXT;

#ifndef ANYGL_NO_DEFINES
#define glXBindTexImageEXT(dpy, drawable, buffer, attrib_list) AnyGL_glXBindTexImageEXT(dpy, drawable, buffer, attrib_list)
#define glXReleaseTexImageEXT(dpy, drawable, buffer) AnyGL_glXReleaseTexImageEXT(dpy, drawable, buffer)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_visual_info
#define GLX_EXT_visual_info 1
#define ANYGLX_EXT_visual_info 1


#endif /* GLX_EXT_visual_info */
#ifndef ANYGL_NO_DEFINES
#define GLX_X_VISUAL_TYPE_EXT             0x22
#define GLX_TRANSPARENT_TYPE_EXT          0x23
#define GLX_TRANSPARENT_INDEX_VALUE_EXT   0x24
#define GLX_TRANSPARENT_RED_VALUE_EXT     0x25
#define GLX_TRANSPARENT_GREEN_VALUE_EXT   0x26
#define GLX_TRANSPARENT_BLUE_VALUE_EXT    0x27
#define GLX_TRANSPARENT_ALPHA_VALUE_EXT   0x28
#define GLX_NONE_EXT                      0x8000
#define GLX_TRUE_COLOR_EXT                0x8002
#define GLX_DIRECT_COLOR_EXT              0x8003
#define GLX_PSEUDO_COLOR_EXT              0x8004
#define GLX_STATIC_COLOR_EXT              0x8005
#define GLX_GRAY_SCALE_EXT                0x8006
#define GLX_STATIC_GRAY_EXT               0x8007
#define GLX_TRANSPARENT_RGB_EXT           0x8008
#define GLX_TRANSPARENT_INDEX_EXT         0x8009
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_EXT_visual_rating
#define GLX_EXT_visual_rating 1
#define ANYGLX_EXT_visual_rating 1


#endif /* GLX_EXT_visual_rating */
#ifndef ANYGL_NO_DEFINES
#define GLX_VISUAL_CAVEAT_EXT             0x20
#define GLX_SLOW_VISUAL_EXT               0x8001
#define GLX_NON_CONFORMANT_VISUAL_EXT     0x800D
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_INTEL_swap_event
#define GLX_INTEL_swap_event 1
#define ANYGLX_INTEL_swap_event 1


#endif /* GLX_INTEL_swap_event */
#ifndef ANYGL_NO_DEFINES
#define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK 0x04000000
#define GLX_EXCHANGE_COMPLETE_INTEL       0x8180
#define GLX_COPY_COMPLETE_INTEL           0x8181
#define GLX_FLIP_COMPLETE_INTEL           0x8182
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_MESA_agp_offset
#define GLX_MESA_agp_offset 1
#define ANYGLX_MESA_agp_offset 1


#endif /* GLX_MESA_agp_offset */
typedef unsigned int (APIENTRY* PFNANYGLXGETAGPOFFSETMESAPROC)(const void *pointer);

ANYGL_EXPORT extern PFNANYGLXGETAGPOFFSETMESAPROC AnyGL_glXGetAGPOffsetMESA;

#ifndef ANYGL_NO_DEFINES
#define glXGetAGPOffsetMESA(pointer) AnyGL_glXGetAGPOffsetMESA(pointer)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_MESA_copy_sub_buffer
#define GLX_MESA_copy_sub_buffer 1
#define ANYGLX_MESA_copy_sub_buffer 1


#endif /* GLX_MESA_copy_sub_buffer */
typedef void (APIENTRY* PFNANYGLXCOPYSUBBUFFERMESAPROC)(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height);

ANYGL_EXPORT extern PFNANYGLXCOPYSUBBUFFERMESAPROC AnyGL_glXCopySubBufferMESA;

#ifndef ANYGL_NO_DEFINES
#define glXCopySubBufferMESA(dpy, drawable, x, y, width, height) AnyGL_glXCopySubBufferMESA(dpy, drawable, x, y, width, height)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_MESA_pixmap_colormap
#define GLX_MESA_pixmap_colormap 1
#define ANYGLX_MESA_pixmap_colormap 1


#endif /* GLX_MESA_pixmap_colormap */
typedef GLXPixmap (APIENTRY* PFNANYGLXCREATEGLXPIXMAPMESAPROC)(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);

ANYGL_EXPORT extern PFNANYGLXCREATEGLXPIXMAPMESAPROC AnyGL_glXCreateGLXPixmapMESA;

#ifndef ANYGL_NO_DEFINES
#define glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap) AnyGL_glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_MESA_query_renderer
#define GLX_MESA_query_renderer 1
#define ANYGLX_MESA_query_renderer 1


#endif /* GLX_MESA_query_renderer */
#ifndef ANYGL_NO_DEFINES
#define GLX_RENDERER_VENDOR_ID_MESA       0x8183
#define GLX_RENDERER_DEVICE_ID_MESA       0x8184
#define GLX_RENDERER_VERSION_MESA         0x8185
#define GLX_RENDERER_ACCELERATED_MESA     0x8186
#define GLX_RENDERER_VIDEO_MEMORY_MESA    0x8187
#define GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA 0x8188
#define GLX_RENDERER_PREFERRED_PROFILE_MESA 0x8189
#define GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA 0x818A
#define GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA 0x818B
#define GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA 0x818C
#define GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA 0x818D
#endif /* ANYGL_NO_DEFINES */

typedef Bool (APIENTRY* PFNANYGLXQUERYCURRENTRENDERERINTEGERMESAPROC)(int attribute, unsigned int *value);
typedef const char *(APIENTRY* PFNANYGLXQUERYCURRENTRENDERERSTRINGMESAPROC)(int attribute);
typedef Bool (APIENTRY* PFNANYGLXQUERYRENDERERINTEGERMESAPROC)(Display *dpy, int screen, int renderer, int attribute, unsigned int *value);
typedef const char *(APIENTRY* PFNANYGLXQUERYRENDERERSTRINGMESAPROC)(Display *dpy, int screen, int renderer, int attribute);

ANYGL_EXPORT extern PFNANYGLXQUERYCURRENTRENDERERINTEGERMESAPROC AnyGL_glXQueryCurrentRendererIntegerMESA;
ANYGL_EXPORT extern PFNANYGLXQUERYCURRENTRENDERERSTRINGMESAPROC AnyGL_glXQueryCurrentRendererStringMESA;
ANYGL_EXPORT extern PFNANYGLXQUERYRENDERERINTEGERMESAPROC AnyGL_glXQueryRendererIntegerMESA;
ANYGL_EXPORT extern PFNANYGLXQUERYRENDERERSTRINGMESAPROC AnyGL_glXQueryRendererStringMESA;

#ifndef ANYGL_NO_DEFINES
#define glXQueryCurrentRendererIntegerMESA(attribute, value) AnyGL_glXQueryCurrentRendererIntegerMESA(attribute, value)
#define glXQueryCurrentRendererStringMESA(attribute) AnyGL_glXQueryCurrentRendererStringMESA(attribute)
#define glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value) AnyGL_glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value)
#define glXQueryRendererStringMESA(dpy, screen, renderer, attribute) AnyGL_glXQueryRendererStringMESA(dpy, screen, renderer, attribute)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_MESA_release_buffers
#define GLX_MESA_release_buffers 1
#define ANYGLX_MESA_release_buffers 1


#endif /* GLX_MESA_release_buffers */
typedef Bool (APIENTRY* PFNANYGLXRELEASEBUFFERSMESAPROC)(Display *dpy, GLXDrawable drawable);

ANYGL_EXPORT extern PFNANYGLXRELEASEBUFFERSMESAPROC AnyGL_glXReleaseBuffersMESA;

#ifndef ANYGL_NO_DEFINES
#define glXReleaseBuffersMESA(dpy, drawable) AnyGL_glXReleaseBuffersMESA(dpy, drawable)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_MESA_set_3dfx_mode
#define GLX_MESA_set_3dfx_mode 1
#define ANYGLX_MESA_set_3dfx_mode 1


#endif /* GLX_MESA_set_3dfx_mode */
#ifndef ANYGL_NO_DEFINES
#define GLX_3DFX_WINDOW_MODE_MESA         0x1
#define GLX_3DFX_FULLSCREEN_MODE_MESA     0x2
#endif /* ANYGL_NO_DEFINES */

typedef GLboolean (APIENTRY* PFNANYGLXSET3DFXMODEMESAPROC)(GLint mode);

ANYGL_EXPORT extern PFNANYGLXSET3DFXMODEMESAPROC AnyGL_glXSet3DfxModeMESA;

#ifndef ANYGL_NO_DEFINES
#define glXSet3DfxModeMESA(mode) AnyGL_glXSet3DfxModeMESA(mode)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_MESA_swap_control
#define GLX_MESA_swap_control 1
#define ANYGLX_MESA_swap_control 1


#endif /* GLX_MESA_swap_control */
typedef int (APIENTRY* PFNANYGLXGETSWAPINTERVALMESAPROC)();
typedef int (APIENTRY* PFNANYGLXSWAPINTERVALMESAPROC)(unsigned int interval);

ANYGL_EXPORT extern PFNANYGLXGETSWAPINTERVALMESAPROC AnyGL_glXGetSwapIntervalMESA;
ANYGL_EXPORT extern PFNANYGLXSWAPINTERVALMESAPROC AnyGL_glXSwapIntervalMESA;

#ifndef ANYGL_NO_DEFINES
#define glXGetSwapIntervalMESA() AnyGL_glXGetSwapIntervalMESA()
#define glXSwapIntervalMESA(interval) AnyGL_glXSwapIntervalMESA(interval)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_copy_buffer
#define GLX_NV_copy_buffer 1
#define ANYGLX_NV_copy_buffer 1


#endif /* GLX_NV_copy_buffer */
typedef void (APIENTRY* PFNANYGLXCOPYBUFFERSUBDATANVPROC)(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRY* PFNANYGLXNAMEDCOPYBUFFERSUBDATANVPROC)(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);

ANYGL_EXPORT extern PFNANYGLXCOPYBUFFERSUBDATANVPROC AnyGL_glXCopyBufferSubDataNV;
ANYGL_EXPORT extern PFNANYGLXNAMEDCOPYBUFFERSUBDATANVPROC AnyGL_glXNamedCopyBufferSubDataNV;

#ifndef ANYGL_NO_DEFINES
#define glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size) AnyGL_glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size)
#define glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size) AnyGL_glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_copy_image
#define GLX_NV_copy_image 1
#define ANYGLX_NV_copy_image 1


#endif /* GLX_NV_copy_image */
typedef void (APIENTRY* PFNANYGLXCOPYIMAGESUBDATANVPROC)(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);

ANYGL_EXPORT extern PFNANYGLXCOPYIMAGESUBDATANVPROC AnyGL_glXCopyImageSubDataNV;

#ifndef ANYGL_NO_DEFINES
#define glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) AnyGL_glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_delay_before_swap
#define GLX_NV_delay_before_swap 1
#define ANYGLX_NV_delay_before_swap 1


#endif /* GLX_NV_delay_before_swap */
typedef Bool (APIENTRY* PFNANYGLXDELAYBEFORESWAPNVPROC)(Display *dpy, GLXDrawable drawable, GLfloat seconds);

ANYGL_EXPORT extern PFNANYGLXDELAYBEFORESWAPNVPROC AnyGL_glXDelayBeforeSwapNV;

#ifndef ANYGL_NO_DEFINES
#define glXDelayBeforeSwapNV(dpy, drawable, seconds) AnyGL_glXDelayBeforeSwapNV(dpy, drawable, seconds)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_float_buffer
#define GLX_NV_float_buffer 1
#define ANYGLX_NV_float_buffer 1


#endif /* GLX_NV_float_buffer */
#ifndef ANYGL_NO_DEFINES
#define GLX_FLOAT_COMPONENTS_NV           0x20B0
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_multigpu_context
#define GLX_NV_multigpu_context 1
#define ANYGLX_NV_multigpu_context 1


#endif /* GLX_NV_multigpu_context */
#ifndef ANYGL_NO_DEFINES
#define GLX_CONTEXT_MULTIGPU_ATTRIB_NV    0x20AA
#define GLX_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV 0x20AB
#define GLX_CONTEXT_MULTIGPU_ATTRIB_AFR_NV 0x20AC
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV 0x20AD
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV 0x20AE
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_multisample_coverage
#define GLX_NV_multisample_coverage 1
#define ANYGLX_NV_multisample_coverage 1


#endif /* GLX_NV_multisample_coverage */
#ifndef ANYGL_NO_DEFINES
#define GLX_COVERAGE_SAMPLES_NV           100001
#define GLX_COLOR_SAMPLES_NV              0x20B3
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_present_video
#define GLX_NV_present_video 1
#define ANYGLX_NV_present_video 1


#endif /* GLX_NV_present_video */
#ifndef ANYGL_NO_DEFINES
#define GLX_NUM_VIDEO_SLOTS_NV            0x20F0
#endif /* ANYGL_NO_DEFINES */

typedef unsigned int *(APIENTRY* PFNANYGLXENUMERATEVIDEODEVICESNVPROC)(Display *dpy, int screen, int *nelements);
typedef int (APIENTRY* PFNANYGLXBINDVIDEODEVICENVPROC)(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);

ANYGL_EXPORT extern PFNANYGLXENUMERATEVIDEODEVICESNVPROC AnyGL_glXEnumerateVideoDevicesNV;
ANYGL_EXPORT extern PFNANYGLXBINDVIDEODEVICENVPROC AnyGL_glXBindVideoDeviceNV;

#ifndef ANYGL_NO_DEFINES
#define glXEnumerateVideoDevicesNV(dpy, screen, nelements) AnyGL_glXEnumerateVideoDevicesNV(dpy, screen, nelements)
#define glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list) AnyGL_glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_robustness_video_memory_purge
#define GLX_NV_robustness_video_memory_purge 1
#define ANYGLX_NV_robustness_video_memory_purge 1


#endif /* GLX_NV_robustness_video_memory_purge */
#ifndef ANYGL_NO_DEFINES
#define GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x20F7
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_swap_group
#define GLX_NV_swap_group 1
#define ANYGLX_NV_swap_group 1


#endif /* GLX_NV_swap_group */
typedef Bool (APIENTRY* PFNANYGLXJOINSWAPGROUPNVPROC)(Display *dpy, GLXDrawable drawable, GLuint group);
typedef Bool (APIENTRY* PFNANYGLXBINDSWAPBARRIERNVPROC)(Display *dpy, GLuint group, GLuint barrier);
typedef Bool (APIENTRY* PFNANYGLXQUERYSWAPGROUPNVPROC)(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
typedef Bool (APIENTRY* PFNANYGLXQUERYMAXSWAPGROUPSNVPROC)(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
typedef Bool (APIENTRY* PFNANYGLXQUERYFRAMECOUNTNVPROC)(Display *dpy, int screen, GLuint *count);
typedef Bool (APIENTRY* PFNANYGLXRESETFRAMECOUNTNVPROC)(Display *dpy, int screen);

ANYGL_EXPORT extern PFNANYGLXJOINSWAPGROUPNVPROC AnyGL_glXJoinSwapGroupNV;
ANYGL_EXPORT extern PFNANYGLXBINDSWAPBARRIERNVPROC AnyGL_glXBindSwapBarrierNV;
ANYGL_EXPORT extern PFNANYGLXQUERYSWAPGROUPNVPROC AnyGL_glXQuerySwapGroupNV;
ANYGL_EXPORT extern PFNANYGLXQUERYMAXSWAPGROUPSNVPROC AnyGL_glXQueryMaxSwapGroupsNV;
ANYGL_EXPORT extern PFNANYGLXQUERYFRAMECOUNTNVPROC AnyGL_glXQueryFrameCountNV;
ANYGL_EXPORT extern PFNANYGLXRESETFRAMECOUNTNVPROC AnyGL_glXResetFrameCountNV;

#ifndef ANYGL_NO_DEFINES
#define glXJoinSwapGroupNV(dpy, drawable, group) AnyGL_glXJoinSwapGroupNV(dpy, drawable, group)
#define glXBindSwapBarrierNV(dpy, group, barrier) AnyGL_glXBindSwapBarrierNV(dpy, group, barrier)
#define glXQuerySwapGroupNV(dpy, drawable, group, barrier) AnyGL_glXQuerySwapGroupNV(dpy, drawable, group, barrier)
#define glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers) AnyGL_glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers)
#define glXQueryFrameCountNV(dpy, screen, count) AnyGL_glXQueryFrameCountNV(dpy, screen, count)
#define glXResetFrameCountNV(dpy, screen) AnyGL_glXResetFrameCountNV(dpy, screen)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_video_capture
#define GLX_NV_video_capture 1
#define ANYGLX_NV_video_capture 1

typedef XID GLXVideoCaptureDeviceNV;

#endif /* GLX_NV_video_capture */
#ifndef ANYGL_NO_DEFINES
#define GLX_DEVICE_ID_NV                  0x20CD
#define GLX_UNIQUE_ID_NV                  0x20CE
#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV    0x20CF
#endif /* ANYGL_NO_DEFINES */

typedef int (APIENTRY* PFNANYGLXBINDVIDEOCAPTUREDEVICENVPROC)(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef GLXVideoCaptureDeviceNV *(APIENTRY* PFNANYGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC)(Display *dpy, int screen, int *nelements);
typedef void (APIENTRY* PFNANYGLXLOCKVIDEOCAPTUREDEVICENVPROC)(Display *dpy, GLXVideoCaptureDeviceNV device);
typedef int (APIENTRY* PFNANYGLXQUERYVIDEOCAPTUREDEVICENVPROC)(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
typedef void (APIENTRY* PFNANYGLXRELEASEVIDEOCAPTUREDEVICENVPROC)(Display *dpy, GLXVideoCaptureDeviceNV device);

ANYGL_EXPORT extern PFNANYGLXBINDVIDEOCAPTUREDEVICENVPROC AnyGL_glXBindVideoCaptureDeviceNV;
ANYGL_EXPORT extern PFNANYGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC AnyGL_glXEnumerateVideoCaptureDevicesNV;
ANYGL_EXPORT extern PFNANYGLXLOCKVIDEOCAPTUREDEVICENVPROC AnyGL_glXLockVideoCaptureDeviceNV;
ANYGL_EXPORT extern PFNANYGLXQUERYVIDEOCAPTUREDEVICENVPROC AnyGL_glXQueryVideoCaptureDeviceNV;
ANYGL_EXPORT extern PFNANYGLXRELEASEVIDEOCAPTUREDEVICENVPROC AnyGL_glXReleaseVideoCaptureDeviceNV;

#ifndef ANYGL_NO_DEFINES
#define glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device) AnyGL_glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device)
#define glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements) AnyGL_glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements)
#define glXLockVideoCaptureDeviceNV(dpy, device) AnyGL_glXLockVideoCaptureDeviceNV(dpy, device)
#define glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value) AnyGL_glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value)
#define glXReleaseVideoCaptureDeviceNV(dpy, device) AnyGL_glXReleaseVideoCaptureDeviceNV(dpy, device)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_NV_video_out
#define GLX_NV_video_out 1
#define ANYGLX_NV_video_out 1

typedef unsigned int GLXVideoDeviceNV;

#endif /* GLX_NV_video_out */
#ifndef ANYGL_NO_DEFINES
#define GLX_VIDEO_OUT_COLOR_NV            0x20C3
#define GLX_VIDEO_OUT_ALPHA_NV            0x20C4
#define GLX_VIDEO_OUT_DEPTH_NV            0x20C5
#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV  0x20C6
#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV  0x20C7
#define GLX_VIDEO_OUT_FRAME_NV            0x20C8
#define GLX_VIDEO_OUT_FIELD_1_NV          0x20C9
#define GLX_VIDEO_OUT_FIELD_2_NV          0x20CA
#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV 0x20CB
#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV 0x20CC
#endif /* ANYGL_NO_DEFINES */

typedef int (APIENTRY* PFNANYGLXGETVIDEODEVICENVPROC)(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
typedef int (APIENTRY* PFNANYGLXRELEASEVIDEODEVICENVPROC)(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef int (APIENTRY* PFNANYGLXBINDVIDEOIMAGENVPROC)(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef int (APIENTRY* PFNANYGLXRELEASEVIDEOIMAGENVPROC)(Display *dpy, GLXPbuffer pbuf);
typedef int (APIENTRY* PFNANYGLXSENDPBUFFERTOVIDEONVPROC)(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);
typedef int (APIENTRY* PFNANYGLXGETVIDEOINFONVPROC)(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);

ANYGL_EXPORT extern PFNANYGLXGETVIDEODEVICENVPROC AnyGL_glXGetVideoDeviceNV;
ANYGL_EXPORT extern PFNANYGLXRELEASEVIDEODEVICENVPROC AnyGL_glXReleaseVideoDeviceNV;
ANYGL_EXPORT extern PFNANYGLXBINDVIDEOIMAGENVPROC AnyGL_glXBindVideoImageNV;
ANYGL_EXPORT extern PFNANYGLXRELEASEVIDEOIMAGENVPROC AnyGL_glXReleaseVideoImageNV;
ANYGL_EXPORT extern PFNANYGLXSENDPBUFFERTOVIDEONVPROC AnyGL_glXSendPbufferToVideoNV;
ANYGL_EXPORT extern PFNANYGLXGETVIDEOINFONVPROC AnyGL_glXGetVideoInfoNV;

#ifndef ANYGL_NO_DEFINES
#define glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice) AnyGL_glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice)
#define glXReleaseVideoDeviceNV(dpy, screen, VideoDevice) AnyGL_glXReleaseVideoDeviceNV(dpy, screen, VideoDevice)
#define glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer) AnyGL_glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer)
#define glXReleaseVideoImageNV(dpy, pbuf) AnyGL_glXReleaseVideoImageNV(dpy, pbuf)
#define glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) AnyGL_glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock)
#define glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) AnyGL_glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_OML_swap_method
#define GLX_OML_swap_method 1
#define ANYGLX_OML_swap_method 1


#endif /* GLX_OML_swap_method */
#ifndef ANYGL_NO_DEFINES
#define GLX_SWAP_METHOD_OML               0x8060
#define GLX_SWAP_EXCHANGE_OML             0x8061
#define GLX_SWAP_COPY_OML                 0x8062
#define GLX_SWAP_UNDEFINED_OML            0x8063
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_OML_sync_control
#define GLX_OML_sync_control 1
#define ANYGLX_OML_sync_control 1

#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GLX_OML_sync_control extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif

#endif /* GLX_OML_sync_control */
typedef Bool (APIENTRY* PFNANYGLXGETSYNCVALUESOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef Bool (APIENTRY* PFNANYGLXGETMSCRATEOMLPROC)(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator);
typedef int64_t (APIENTRY* PFNANYGLXSWAPBUFFERSMSCOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef Bool (APIENTRY* PFNANYGLXWAITFORMSCOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef Bool (APIENTRY* PFNANYGLXWAITFORSBCOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);

ANYGL_EXPORT extern PFNANYGLXGETSYNCVALUESOMLPROC AnyGL_glXGetSyncValuesOML;
ANYGL_EXPORT extern PFNANYGLXGETMSCRATEOMLPROC AnyGL_glXGetMscRateOML;
ANYGL_EXPORT extern PFNANYGLXSWAPBUFFERSMSCOMLPROC AnyGL_glXSwapBuffersMscOML;
ANYGL_EXPORT extern PFNANYGLXWAITFORMSCOMLPROC AnyGL_glXWaitForMscOML;
ANYGL_EXPORT extern PFNANYGLXWAITFORSBCOMLPROC AnyGL_glXWaitForSbcOML;

#ifndef ANYGL_NO_DEFINES
#define glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc) AnyGL_glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc)
#define glXGetMscRateOML(dpy, drawable, numerator, denominator) AnyGL_glXGetMscRateOML(dpy, drawable, numerator, denominator)
#define glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder) AnyGL_glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder)
#define glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc) AnyGL_glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc)
#define glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc) AnyGL_glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc)
#endif /* ANYGL_NO_DEFINES */

#ifndef GLX_SUN_get_transparent_index
#define GLX_SUN_get_transparent_index 1
#define ANYGLX_SUN_get_transparent_index 1


#endif /* GLX_SUN_get_transparent_index */
typedef Status (APIENTRY* PFNANYGLXGETTRANSPARENTINDEXSUNPROC)(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex);

ANYGL_EXPORT extern PFNANYGLXGETTRANSPARENTINDEXSUNPROC AnyGL_glXGetTransparentIndexSUN;

#ifndef ANYGL_NO_DEFINES
#define glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex) AnyGL_glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex)
#endif /* ANYGL_NO_DEFINES */


#ifdef __cplusplus
}
#endif

#endif /* ANYGL_LOAD */

#endif
