/*
 * Copyright 2021 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

/**
 * @file
 * @brief Function to compute a standard 2D shadow map value.
 *
 * This is typically used for non-cascaded directional shadows and spot lights.
 *
 * This expects DS_SHADOW_FILTER to be defined for the shadow filter function. This typically means
 * including an appropriate shadow filter header (e.g. ShadowPCF2x2.mslh) before including this
 * file.
 */

#if !HAS_SHADOW_SAMPLERS
#error Shadows require support for shadow samplers
#endif

#ifndef DS_SHADOW_FILTER
#error DS_SHADOW_FILTER must be defined to provide the shadow filter function.
#endif

/**
 * @brief Performs a shadow map lookup.
 * @param shadowMap The shadow map to look up in.
 * @param viewPos The view position.
 * @param shadowPos The projected shadow position.
 * @param fadeStart The distance from the view point to start fading shadows.
 * @param fadeEnd The distance from the view point to stop fading shadows.
 * @return A value of 0 to 1, where 0 is fully shadowed and 1 is fully lit.
 */
[[fragment]]
float dsShadowMap(sampler2DShadow shadowMap, vec3 viewPos, vec3 shadowPos, float fadeStart,
	float fadeEnd)
{
	if (viewPos.z >= fadeEnd)
		return 1.0;

	float fadeRange = fadeEnd - fadeStart;
	float fadeAmount = 0.0;
	if (fadeRange > 0.1)
		fadeAmount = max(viewPos.z - fadeStart, 0.0)/fadeRange;

	shadowPos.xy = shadowPos.xy*vec2(0.5) + vec2(0.5);
	if (DS_CLIP_HALF_DEPTH == 0)
		shadowPos.z = shadowPos.z*0.5 + 0.5;
	float shadowVal = DS_SHADOW_FILTER(shadowMap, shadowPos);
	return mix(shadowVal, 1.0, fadeAmount);
}
