// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VECTORRESOURCES_DEEPSEAVECTORDRAW_H_
#define FLATBUFFERS_GENERATED_VECTORRESOURCES_DEEPSEAVECTORDRAW_H_

#include "flatbuffers/flatbuffers.h"

namespace DeepSeaVectorDraw {

struct Resource;

struct FaceGroup;

struct Font;

struct ResourceSet;

enum class FontQuality : uint8_t {
  Low = 0,
  Medium = 1,
  High = 2,
  VeryHigh = 3,
  MIN = Low,
  MAX = VeryHigh
};

inline const FontQuality (&EnumValuesFontQuality())[4] {
  static const FontQuality values[] = {
    FontQuality::Low,
    FontQuality::Medium,
    FontQuality::High,
    FontQuality::VeryHigh
  };
  return values;
}

inline const char * const *EnumNamesFontQuality() {
  static const char * const names[] = {
    "Low",
    "Medium",
    "High",
    "VeryHigh",
    nullptr
  };
  return names;
}

inline const char *EnumNameFontQuality(FontQuality e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesFontQuality()[index];
}

enum class FontCacheSize : uint8_t {
  Small = 0,
  Large = 1,
  MIN = Small,
  MAX = Large
};

inline const FontCacheSize (&EnumValuesFontCacheSize())[2] {
  static const FontCacheSize values[] = {
    FontCacheSize::Small,
    FontCacheSize::Large
  };
  return values;
}

inline const char * const *EnumNamesFontCacheSize() {
  static const char * const names[] = {
    "Small",
    "Large",
    nullptr
  };
  return names;
}

inline const char *EnumNameFontCacheSize(FontCacheSize e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesFontCacheSize()[index];
}

struct Resource FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_PATH = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffsetRequired(verifier, VT_PATH) &&
           verifier.Verify(path()) &&
           verifier.EndTable();
  }
};

struct ResourceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Resource::VT_NAME, name);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Resource::VT_PATH, path);
  }
  explicit ResourceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResourceBuilder &operator=(const ResourceBuilder &);
  flatbuffers::Offset<Resource> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Resource>(end);
    fbb_.Required(o, Resource::VT_NAME);
    fbb_.Required(o, Resource::VT_PATH);
    return o;
  }
};

inline flatbuffers::Offset<Resource> CreateResource(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  ResourceBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Resource> CreateResourceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *path = nullptr) {
  return DeepSeaVectorDraw::CreateResource(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      path ? _fbb.CreateString(path) : 0);
}

struct FaceGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_FACES = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Resource>> *faces() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Resource>> *>(VT_FACES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffsetRequired(verifier, VT_FACES) &&
           verifier.Verify(faces()) &&
           verifier.VerifyVectorOfTables(faces()) &&
           verifier.EndTable();
  }
};

struct FaceGroupBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FaceGroup::VT_NAME, name);
  }
  void add_faces(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Resource>>> faces) {
    fbb_.AddOffset(FaceGroup::VT_FACES, faces);
  }
  explicit FaceGroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FaceGroupBuilder &operator=(const FaceGroupBuilder &);
  flatbuffers::Offset<FaceGroup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FaceGroup>(end);
    fbb_.Required(o, FaceGroup::VT_NAME);
    fbb_.Required(o, FaceGroup::VT_FACES);
    return o;
  }
};

inline flatbuffers::Offset<FaceGroup> CreateFaceGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Resource>>> faces = 0) {
  FaceGroupBuilder builder_(_fbb);
  builder_.add_faces(faces);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<FaceGroup> CreateFaceGroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<Resource>> *faces = nullptr) {
  return DeepSeaVectorDraw::CreateFaceGroup(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      faces ? _fbb.CreateVector<flatbuffers::Offset<Resource>>(*faces) : 0);
}

struct Font FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_FACEGROUP = 6,
    VT_FACES = 8,
    VT_QUALITY = 10,
    VT_CACHESIZE = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *faceGroup() const {
    return GetPointer<const flatbuffers::String *>(VT_FACEGROUP);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *faces() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_FACES);
  }
  FontQuality quality() const {
    return static_cast<FontQuality>(GetField<uint8_t>(VT_QUALITY, 0));
  }
  FontCacheSize cacheSize() const {
    return static_cast<FontCacheSize>(GetField<uint8_t>(VT_CACHESIZE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffsetRequired(verifier, VT_FACEGROUP) &&
           verifier.Verify(faceGroup()) &&
           VerifyOffsetRequired(verifier, VT_FACES) &&
           verifier.Verify(faces()) &&
           verifier.VerifyVectorOfStrings(faces()) &&
           VerifyField<uint8_t>(verifier, VT_QUALITY) &&
           VerifyField<uint8_t>(verifier, VT_CACHESIZE) &&
           verifier.EndTable();
  }
};

struct FontBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Font::VT_NAME, name);
  }
  void add_faceGroup(flatbuffers::Offset<flatbuffers::String> faceGroup) {
    fbb_.AddOffset(Font::VT_FACEGROUP, faceGroup);
  }
  void add_faces(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> faces) {
    fbb_.AddOffset(Font::VT_FACES, faces);
  }
  void add_quality(FontQuality quality) {
    fbb_.AddElement<uint8_t>(Font::VT_QUALITY, static_cast<uint8_t>(quality), 0);
  }
  void add_cacheSize(FontCacheSize cacheSize) {
    fbb_.AddElement<uint8_t>(Font::VT_CACHESIZE, static_cast<uint8_t>(cacheSize), 0);
  }
  explicit FontBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FontBuilder &operator=(const FontBuilder &);
  flatbuffers::Offset<Font> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Font>(end);
    fbb_.Required(o, Font::VT_NAME);
    fbb_.Required(o, Font::VT_FACEGROUP);
    fbb_.Required(o, Font::VT_FACES);
    return o;
  }
};

inline flatbuffers::Offset<Font> CreateFont(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> faceGroup = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> faces = 0,
    FontQuality quality = FontQuality::Low,
    FontCacheSize cacheSize = FontCacheSize::Small) {
  FontBuilder builder_(_fbb);
  builder_.add_faces(faces);
  builder_.add_faceGroup(faceGroup);
  builder_.add_name(name);
  builder_.add_cacheSize(cacheSize);
  builder_.add_quality(quality);
  return builder_.Finish();
}

inline flatbuffers::Offset<Font> CreateFontDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *faceGroup = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *faces = nullptr,
    FontQuality quality = FontQuality::Low,
    FontCacheSize cacheSize = FontCacheSize::Small) {
  return DeepSeaVectorDraw::CreateFont(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      faceGroup ? _fbb.CreateString(faceGroup) : 0,
      faces ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*faces) : 0,
      quality,
      cacheSize);
}

struct ResourceSet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEXTURES = 4,
    VT_FACEGROUPS = 6,
    VT_FONTS = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<Resource>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Resource>> *>(VT_TEXTURES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FaceGroup>> *faceGroups() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FaceGroup>> *>(VT_FACEGROUPS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Font>> *fonts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Font>> *>(VT_FONTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.Verify(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           VerifyOffset(verifier, VT_FACEGROUPS) &&
           verifier.Verify(faceGroups()) &&
           verifier.VerifyVectorOfTables(faceGroups()) &&
           VerifyOffset(verifier, VT_FONTS) &&
           verifier.Verify(fonts()) &&
           verifier.VerifyVectorOfTables(fonts()) &&
           verifier.EndTable();
  }
};

struct ResourceSetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Resource>>> textures) {
    fbb_.AddOffset(ResourceSet::VT_TEXTURES, textures);
  }
  void add_faceGroups(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FaceGroup>>> faceGroups) {
    fbb_.AddOffset(ResourceSet::VT_FACEGROUPS, faceGroups);
  }
  void add_fonts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Font>>> fonts) {
    fbb_.AddOffset(ResourceSet::VT_FONTS, fonts);
  }
  explicit ResourceSetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResourceSetBuilder &operator=(const ResourceSetBuilder &);
  flatbuffers::Offset<ResourceSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResourceSet>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResourceSet> CreateResourceSet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Resource>>> textures = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FaceGroup>>> faceGroups = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Font>>> fonts = 0) {
  ResourceSetBuilder builder_(_fbb);
  builder_.add_fonts(fonts);
  builder_.add_faceGroups(faceGroups);
  builder_.add_textures(textures);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResourceSet> CreateResourceSetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Resource>> *textures = nullptr,
    const std::vector<flatbuffers::Offset<FaceGroup>> *faceGroups = nullptr,
    const std::vector<flatbuffers::Offset<Font>> *fonts = nullptr) {
  return DeepSeaVectorDraw::CreateResourceSet(
      _fbb,
      textures ? _fbb.CreateVector<flatbuffers::Offset<Resource>>(*textures) : 0,
      faceGroups ? _fbb.CreateVector<flatbuffers::Offset<FaceGroup>>(*faceGroups) : 0,
      fonts ? _fbb.CreateVector<flatbuffers::Offset<Font>>(*fonts) : 0);
}

inline const DeepSeaVectorDraw::ResourceSet *GetResourceSet(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaVectorDraw::ResourceSet>(buf);
}

inline const DeepSeaVectorDraw::ResourceSet *GetSizePrefixedResourceSet(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaVectorDraw::ResourceSet>(buf);
}

inline bool VerifyResourceSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaVectorDraw::ResourceSet>(nullptr);
}

inline bool VerifySizePrefixedResourceSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaVectorDraw::ResourceSet>(nullptr);
}

inline void FinishResourceSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaVectorDraw::ResourceSet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResourceSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaVectorDraw::ResourceSet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaVectorDraw

#endif  // FLATBUFFERS_GENERATED_VECTORRESOURCES_DEEPSEAVECTORDRAW_H_
