/*
 * Copyright 2018-2021 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <DeepSea/Render/Shaders/Color.mslh>
#include <DeepSea/Render/Shaders/VertexAttributes.mslh>
#include <DeepSea/VectorDraw/Shaders/VectorShared.mslh>
#include <DeepSea/VectorDraw/Shaders/VectorMaterial.mslh>

/**
 * @file
 * @brief Shader implementation for vector fill elements.
 *
 * These provide the vertex elements, uniforms, and basic vertex and pixel inputs/outputs.
 * You may write your own functions to incorperate them plus additional functionality, or simply
 * use the defaults.
 *
 * Shaders must provide a pipelines of the name dsVectorFillColor, dsVectorFillLinearGradient, and
 * dsVectorFillRadialGradient. For example, the following pipelines definition will provide the
 * default implementation:
 *
 * ```
 * pipeline dsVectorFillColor
 * {
 *     vertex = dsVectorElementFill_defaultVertexColor;
 *     fragment = dsVectorElementFill_defaultFragmentColor;
 *     DS_DEFAULT_VECTOR_ELEMENT_FILL_RENDER_STATES;
 * }
 *
 * pipeline dsVectorFillLinearGradient
 * {
 *     vertex = dsVectorElementFill_defaultVertex;
 *     fragment = dsVectorElementFill_defaultFragmentLinearGradient;
 *     DS_DEFAULT_VECTOR_ELEMENT_FILL_RENDER_STATES;
 * }
 *
 * pipeline dsVectorFillRadialGradient
 * {
 *     vertex = dsVectorElementFill_defaultVertex;
 *     fragment = dsVectorElementFill_defaultFragmentRadialGradient;
 *     DS_DEFAULT_VECTOR_ELEMENT_FILL_RENDER_STATES;
 * }
 * ```
 *
 * dsVectorElementFill_defaultFragmentColorSRGB (with linear and radial gradient versions) are
 * provided to convert the final color to sRGB space. However, in some situations it's still
 * preferable to leave the color in linear space when doing sRGB-correct rendering:
 * - When writing to an sRGB framebuffer, where the hardware will do the conversion.
 * - When blending with linear framebuffers. It is recommended that high-precision (> 8 bits per
 *   channel) is used in this case to avoid precision loss.
 */

/**
 * @brief The position of the vertex.
 */
[[vertex]] layout(location = DS_POSITION) in vec2 viPosition;

/**
 * @brief The indices within the material and shape.
 */
#if SPIRV_VERSION
// Must be an integer type for Vulkan.
[[vertex]] layout(location = DS_TEXCOORD0) in ivec2 viMaterialIndex;
#else
// Some drivers have issues with integer vertex inputs.
[[vertex]] layout(location = DS_TEXCOORD0) in vec2 viMaterialIndex;
#endif

varying(vertex, fragment)
{
	/**
	 * @brief The original and image position of the vertex.
	 */
	vec4 vfPosition;

	/**
	 * @brief Opacity and material index.
	 */
	vec2 vfOpacityMaterialIndex;

	/**
	 * @brief The bounds of the shape.
	 */
	vec4 vfShapeBounds;

	/**
	 * @brief The first material info vector.
	 */
	vec4 vfMatInfo0;

	/**
	 * @brief The second material info vector.
	 */
	vec4 vfMatInfo1;

	/**
	 * @brief The third material info vector.
	 */
	vec4 vfMatInfo2;

	/**
	 * @brief The fourth material info vector.
	 */
	vec4 vfMatInfo3;
}

/**
 * @brief The final output color of the shader.
 */
[[fragment]] out vec4 foColor;

/**
 * @brief Default render states for vector shape elements.
 */
#define DS_DEFAULT_VECTOR_ELEMENT_FILL_RENDER_STATES \
	cull_mode = back; \
	blend_enable = true; \
	src_color_blend_factor = src_alpha; \
	src_alpha_blend_factor = one; \
	dst_blend_factor = one_minus_src_alpha; \
	blend_op = add

/**
 * @brief Creates the vertex output.
 * @return The output position in clip space.
 */
[[vertex]]
vec4 dsVectorElementFill_processVertex()
{
	vec4 elementInfo[4];
	dsVectorShared_getElementInfo(elementInfo, int(viMaterialIndex.x));
	mat3 transform = dsVectorShared_getElementTransform(elementInfo);

	vfPosition.xy = viPosition;
	vfOpacityMaterialIndex = vec2(elementInfo[2].z, viMaterialIndex.y);
	vfShapeBounds = dsVectorShared_getElementBounds(elementInfo);
	return dsVectorShared_transform(vfPosition.zw, viPosition, transform);
}

/**
 * @brief Default vertex shader entry point function.
 */
[[vertex]]
void dsVectorElementFill_defaultVertex()
{
	gl_Position = dsVectorElementFill_processVertex();
	dsVectorMaterial_getInfo(vfMatInfo0, vfMatInfo1, vfMatInfo2, vfMatInfo3,
		int(viMaterialIndex.y));
	gl_Position = DS_ADJUST_CLIP(gl_Position);
}

/**
 * @brief Default vertex shader entry point function for solid colors.
 */
[[vertex]]
void dsVectorElementFill_defaultVertexColor()
{
	gl_Position = dsVectorElementFill_processVertex();
	gl_Position = DS_ADJUST_CLIP(gl_Position);
}

/**
 * @brief Gets the material color of the fill as a solid color.
 * @return The material color.
 */
[[fragment]]
vec4 dsVectorElementFill_getSolidColor()
{
	dsVectorShared_clip(vfPosition.zw);

	lowp vec4 color = dsVectorMaterial_getSolidColor(int(vfOpacityMaterialIndex.y));
	return color*vec4(1.0, 1.0, 1.0, vfOpacityMaterialIndex.x);
}

/**
 * @brief Gets the material color of the fill as a linear gradient.
 * @return The material color.
 */
[[fragment]]
vec4 dsVectorElementFill_getLinearGradientColor()
{
	dsVectorShared_clip(vfPosition.zw);

	lowp vec4 color = dsVectorMaterial_getLinearGradientColor(vfMatInfo0, vfMatInfo1, vfMatInfo2,
		vfMatInfo3, vfPosition.xy, vfShapeBounds, vfOpacityMaterialIndex.y);
	return color*vec4(1.0, 1.0, 1.0, vfOpacityMaterialIndex.x);
}

/**
 * @brief Gets the material color of the fill as a radial gradient.
 * @return The material color.
 */
[[fragment]]
vec4 dsVectorElementFill_getRadialGradientColor()
{
	dsVectorShared_clip(vfPosition.zw);

	lowp vec4 color = dsVectorMaterial_getRadialGradientColor(vfMatInfo0, vfMatInfo1, vfMatInfo2,
		vfMatInfo3, vfPosition.xy, vfShapeBounds, vfOpacityMaterialIndex.y);
	return color*vec4(1.0, 1.0, 1.0, vfOpacityMaterialIndex.x);
}

/**
 * @brief Default fragment shader entry point function for solid colors.
 */
[[fragment]]
void dsVectorElementFill_defaultFragmentColor()
{
	foColor = dsVectorElementFill_getSolidColor();
}

/**
 * @brief Default fragment shader entry point function for linear gradients.
 */
[[fragment]]
void dsVectorElementFill_defaultFragmentLinearGradient()
{
	foColor = dsVectorElementFill_getLinearGradientColor();
}

/**
 * @brief Default fragment shader entry point function for radial gradients.
 */
[[fragment]]
void dsVectorElementFill_defaultFragmentRadialGradient()
{
	foColor = dsVectorElementFill_getRadialGradientColor();
}

/**
 * @brief Default fragment shader entry point function for solid colors that converts to sRGB.
 */
[[fragment]]
void dsVectorElementFill_defaultFragmentColorSRGB()
{
	foColor = dsVectorElementFill_getSolidColor();
	foColor.rgb = dsSRGBFromLinear(foColor.rgb);
}

/**
 * @brief Default fragment shader entry point function for linear gradients that converts to sRGB.
 */
[[fragment]]
void dsVectorElementFill_defaultFragmentLinearGradientSRGB()
{
	foColor = dsVectorElementFill_getLinearGradientColor();
	foColor.rgb = dsSRGBFromLinear(foColor.rgb);
}

/**
 * @brief Default fragment shader entry point function for radial gradients that converts to sRGB.
 */
[[fragment]]
void dsVectorElementFill_defaultFragmentRadialGradientSRGB()
{
	foColor = dsVectorElementFill_getRadialGradientColor();
	foColor.rgb = dsSRGBFromLinear(foColor.rgb);
}
