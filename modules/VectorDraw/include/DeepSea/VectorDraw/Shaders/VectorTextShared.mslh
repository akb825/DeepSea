/*
 * Copyright 2018-2019 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <DeepSea/VectorDraw/Shaders/VectorShared.mslh>

/**
 * @file
 * @brief Shared code between all types of text.
 */

/**
 * @brief Constant for no material associated with a fill or outline.
 */
#define DS_NO_VECTOR_MATERIAL -32768

/**
 * @brief Texture holding general information about the text outline material.
 */
uniform sampler2D dsVectorTextOutlineMaterialInfoTex;
sampler_state dsVectorTextOutlineMaterialInfoTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
	mip_filter = none;
}

/**
 * @brief Texture holding color information about the text outline material.
 */
uniform sampler2D dsVectorTextOutlineMaterialColorTex;
sampler_state dsVectorTextOutlineMaterialColorTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = none;
}

/**
 * @brief Texture holding the glyphs for the font.
 */
uniform sampler2D dsVectorOtherTex;
sampler_state dsVectorOtherTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = nearest;
}

/**
 * @brief Gets the final position for a text vertex.
 * @param position THe position of the glyph.
 * @param offset The offset for the glyph bounds.
 * @param slant The amount to slant the glyph.
 */
vec2 dsVectorTextShared_finalPosition(vec2 position, vec2 offset, lowp float slant)
{
	return position + offset - vec2(offset.y*slant, 0.0);
}

#ifdef DS_TESS_TEXT

/**
 * @brief The position of the glyph.
 */
[[vertex]] layout(location = DS_POSITION0) in vec2 viPosition;

/**
 * @brief The geometry for the text glyph.
 */
[[vertex]] layout(location = DS_POSITION1) in vec4 viGeometry;

/**
 * @brief The texture coordinates for the text glyph.
 */
[[vertex]] layout(location = DS_TEXCOORD0) in vec4 viTexCoords;

/**
 * @brief Indices for the vector text.
 *
 * - x: mip level
 * - y: info index
 * - z: fill material index
 * - w: outline material index
 */
#if SPIRV_VERSION
// Must be an integer type for Vulkan.
[[vertex]] layout(location = DS_TEXCOORD1) in ivec4 viIndices;
#else
// Some drivers have issues with integer vertex inputs.
[[vertex]] layout(location = DS_TEXCOORD1) in vec4 viIndices;
#endif

/**
 * @brief Tessellation parameters.
 */
[[tessellation_control]] layout(vertices = 4) out;
[[tessellation_evaluation]] layout(quads) in;

varying(vertex, tessellation_control)
{
	/**
	 * @brief Geometry of the glyph.
	 */
	vec4 vtcGeometry;

	/**
	 * @brief The texture coordinates of the glyph.
	 */
	vec4 vtcTexCoords;

	/**
	 * @brief Indices for the vector text.
	 */
	vec4 vtcIndices;
}

varying(tessellation_control, tessellation_evaluation)
{
	/**
	 * @brief Geometry of the glyph.
	 */
	patch vec4 tceGeometry;

	/**
	 * @brief The texture coordinates of the glyph.
	 */
	patch vec4 tceTexCoords;

	/**
	 * @brief Indices for the vector text.
	 */
	patch vec4 tceIndices;
}

varying(tessellation_evaluation, fragment)
{
	/**
	 * @brief The original and image position of the vertex.
	 */
	vec4 vfPosition;

	/**
	 * @brief The texture coordinates of the vertex and embolden factor.
	 */
	vec4 vfTexCoordEmbolden;

	/**
	 * @brief The outline thickness, and anti-alias.
	 */
	lowp vec2 vfOutlineAntiAlias;

	/**
	 * @brief The opacities of the fill and outline material, outline thickness, and anti-alias.
	 */
	vec4 vfMaterialIndicesOpacities;

	/**
	 * @brief The bounds of the text.
	 */
	vec4 vfShapeBounds;
}

/**
 * @brief Default render states for vector text elements.
 */
#ifdef SPIRV_VERSION
#define DS_DEFAULT_VECTOR_ELEMENT_TEXT_RENDER_STATES \
	patch_control_points = 1; \
	cull_mode = back; \
	/* Pre-multiply alpha. */ \
	blend_enable = true; \
	src_blend_factor = one; \
	dst_blend_factor = one_minus_src_alpha; \
	alpha_blend_op = add
#else
// Need to flip winding due to flipping the Y coordinate.
#define DS_DEFAULT_VECTOR_ELEMENT_TEXT_RENDER_STATES \
	patch_control_points = 1; \
	cull_mode = front; \
	/* Pre-multiply alpha. */ \
	blend_enable = true; \
	src_blend_factor = one; \
	dst_blend_factor = one_minus_src_alpha; \
	alpha_blend_op = add
#endif

/**
 * @brief Creates the vertex output.
 * @param[out] outPosition The output position in clip space.
 */
[[vertex]]
void dsVectorElementText_processVertex(out vec4 outPosition)
{
	outPosition = vec4(viPosition, 0.0, 1.0);

	vtcGeometry = viGeometry;
	vtcTexCoords = viTexCoords;
	vtcIndices = viIndices;
}

/**
 * @brief Creates the final vertex output.
 * @param[out] outPosition The output position in clip space.
 * @return The vertex output.
 */
[[tessellation_evaluation]]
void dsVectorElementText_processTessellatedVertex(out vec4 outPosition)
{
	vec4 elementInfo[4];
	dsVectorShared_getElementLineInfo(elementInfo, int(tceIndices.y));
	mat3 transform = dsVectorShared_getElementTransform(elementInfo);

	vec2 offset = mix(tceGeometry.xy, tceGeometry.zw, gl_TessCoord.xy);
	vec2 texCoords = mix(tceTexCoords.xy, tceTexCoords.zw, gl_TessCoord.xy);

	vfPosition.xy = dsVectorTextShared_finalPosition(gl_in[0].gl_Position.xy, offset,
		elementInfo[3].y);
	outPosition = dsVectorShared_transform(vfPosition.zw, vfPosition.xy, transform);
	vfTexCoordEmbolden = vec4(texCoords, tceIndices.x, elementInfo[3].x);
	vfOutlineAntiAlias = elementInfo[3].zw;
	vfMaterialIndicesOpacities = vec4(tceIndices.zw, elementInfo[2].zw);
	vfShapeBounds = dsVectorShared_getElementBounds(elementInfo);
}

#else // DS_TESS_TEXT

/**
 * @brief The position and offset for the current position.
 */
[[vertex]] layout(location = DS_POSITION) in vec4 viPositionOffset;

/**
 * @brief The texture coordinates for the text glyph.
 */
[[vertex]] layout(location = DS_TEXCOORD0) in vec2 viTexCoords;

/**
 * @brief Indices for the vector text.
 *
 * - x: mip level
 * - y: info index
 * - z: fill material index
 * - w: outline material index
 */
#if SPIRV_VERSION
// Must be an integer type for Vulkan.
[[vertex]] layout(location = DS_TEXCOORD1) in ivec4 viIndices;
#else
// Some drivers have issues with integer vertex inputs.
[[vertex]] layout(location = DS_TEXCOORD1) in vec4 viIndices;
#endif

varying(vertex, fragment)
{
	/**
	 * @brief The original and image position of the vertex.
	 */
	vec4 vfPosition;

	/**
	 * @brief The texture coordinates of the vertex and embolden factor.
	 */
	vec4 vfTexCoordEmbolden;

	/**
	 * @brief The outline thickness, and anti-alias.
	 */
	lowp vec2 vfOutlineAntiAlias;

	/**
	 * @brief The opacities of the fill and outline material, outline thickness, and anti-alias.
	 */
	vec4 vfMaterialIndicesOpacities;

	/**
	 * @brief The bounds of the text.
	 */
	vec4 vfShapeBounds;
}

/**
 * @brief Default render states for vector text elements.
 */
#define DS_DEFAULT_VECTOR_ELEMENT_TEXT_RENDER_STATES \
	cull_mode = back; \
	/* Pre-multiply alpha. */ \
	blend_enable = true; \
	src_blend_factor = one; \
	dst_blend_factor = one_minus_src_alpha; \
	alpha_blend_op = add

/**
 * @brief Creates the vertex output.
 * @param[out] outPosition The output position in clip space.
 */
[[vertex]]
void dsVectorElementText_processVertex(out vec4 outPosition)
{
	vec4 elementInfo[4];
	dsVectorShared_getElementLineInfo(elementInfo, int(viIndices.y));
	mat3 transform = dsVectorShared_getElementTransform(elementInfo);

	vfPosition.xy = dsVectorTextShared_finalPosition(viPositionOffset.xy,
		viPositionOffset.zw, elementInfo[3].y);
	outPosition = dsVectorShared_transform(vfPosition.zw, vfPosition.xy, transform);
	vfTexCoordEmbolden = vec4(viTexCoords, viIndices.x, elementInfo[3].x);
	vfOutlineAntiAlias = elementInfo[3].zw;
	vfMaterialIndicesOpacities = vec4(viIndices.zw, elementInfo[2].zw);
	vfShapeBounds = dsVectorShared_getElementBounds(elementInfo);
}
#endif
