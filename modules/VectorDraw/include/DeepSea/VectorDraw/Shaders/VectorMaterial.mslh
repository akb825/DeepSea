/*
 * Copyright 2018 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <DeepSea/VectorDraw/Shaders/VectorShared.mslh>

/**
 * @file
 * @brief Uniforms and functions for getting the vector material color.
 */

/**
 * @brief Texture holding general information about the vector material.
 */
uniform sampler2D dsVectorMaterialInfoTex;
sampler_state dsVectorMaterialInfoTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
	mip_filter = none;
}

/**
 * @brief Texture holding color information about the vector material.
 */
uniform sampler2D dsVectorMaterialColorTex;
sampler_state dsVectorMaterialColorTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = none;
}

/**
 * @brief Struct containing the raw information for materials.
 */
struct dsVectorMaterialInfo
{
	vec4 info0;
	vec4 info1;
	vec4 info2;
	vec4 info3;
};

/**
 * @brief Constant for the width of the material color texture.
 */
#define DS_MATERIAL_COLOR_WIDTH 256.0

dsVectorMaterialInfo dsVectorMaterial_getInfoImpl(float index, sampler2D infoTex, float height)
{
	float materialCoord = (float(index) + 0.5)/height;
	dsVectorMaterialInfo info;
	info.info0 = texture(infoTex, vec2(0.125f, materialCoord));
	if (info.info0.x == 0.0)
	{
		// Solid color, no extra info needed.
		info.info1 = vec4(0.0);
		info.info2 = vec4(0.0);
		info.info3 = vec4(0.0);
	}
	else
	{
		info.info1 = texture(infoTex, vec2(0.375f, materialCoord));
		info.info2 = texture(infoTex, vec2(0.625f, materialCoord));
		info.info3 = texture(infoTex, vec2(0.875f, materialCoord));
	}
	return info;
}

/**
 * @brief Gets the info for a material.
 * @param index The index of the material.
 * @return The material info.
 */
dsVectorMaterialInfo dsVectorMaterial_getInfo(float index)
{
	return dsVectorMaterial_getInfoImpl(index, dsVectorMaterialInfoTex,
		uniforms.dsVectorTextureSizes.y);
}

/**
 * @brief Creates an invalid material info.
 * @return An invalid info.
 */
dsVectorMaterialInfo dsVectorMaterial_invalidInfo()
{
	dsVectorMaterialInfo info;
	info.info0 = vec4(-1.0, vec3(0.0));
	info.info1 = vec4(0.0);
	info.info2 = vec4(0.0);
	info.info3 = vec4(0.0);
	return info;
}

[[fragment]]
vec4 dsVectorMaterial_getSolidColorImpl(float index, sampler2D materialTex, float height)
{
	float colorCoord = 0.5/DS_MATERIAL_COLOR_WIDTH;
	float materialCoord = (index + 0.5)/height;
	return texture(materialTex, vec2(colorCoord, materialCoord));
}

/**
 * @brief Gets the solid color for a shape.
 * @param index The index of the material.
 * @return The material color.
 */
[[fragment]]
vec4 dsVectorMaterial_getSolidColor(float index)
{
	return dsVectorMaterial_getSolidColorImpl(index, dsVectorMaterialColorTex,
		uniforms.dsVectorTextureSizes.y);
}

[[fragment]]
vec4 dsVectorMaterial_getLinearGradientColorImpl(dsVectorMaterialInfo info, vec2 origPosition,
    vec4 bounds, float index, sampler2D materialTex, float height)
{
	vec2 gradientPos;
	if (info.info0.z == 1.0)
		gradientPos = (origPosition - bounds.xy)/(bounds.zw - bounds.xy);
	else
		gradientPos = origPosition;

	// Apply the gradient in the coordinate space of the gradient. This matrix was inverted
	// before setting on the shader.
	mat3 transform = mat3(vec3(info.info2.xy, 0.0), vec3(info.info2.zw, 0.0),
		vec3(info.info3.xy, 1.0));
	gradientPos = (transform*vec3(gradientPos, 1.0)).xy;

	vec2 dir = info.info1.zw - info.info1.xy;
	float invDirLen = 1.0/length(dir);
	vec2 dirNorm = dir*vec2(invDirLen);
	float gradientT = dot(dirNorm, gradientPos - info.info1.xy)*invDirLen;

	float colorCoord;
	if (info.info0.y == 1.0)
	{
		// Repeat
		colorCoord = fract(gradientT);
	}
	else if (info.info0.y == 2.0)
	{
		// Mirror
		colorCoord = fract(gradientT);
		float evenVal = floor(gradientT)/2.0;
		if (evenVal != floor(evenVal))
			colorCoord = 1.0 - colorCoord;
	}
	else
	{
		// Clamp
		colorCoord = gradientT;
	}

	float materialCoord = (index + 0.5)/height;
	return texture(materialTex, vec2(colorCoord, materialCoord));
}

/**
 * @brief Gets the linear gradient for a shape.
 * @param info The info gathered from dsVectorMaterial_getInfo().
 * @param origPosition The original position of the current pixel.
 * @param bounds The bounds of the shape.
 * @param imagePosition The position in the image of the current pixel.
 * @param index The index of the material.
 * @return The material color.
 */
[[fragment]]
vec4 dsVectorMaterial_getLinearGradientColor(dsVectorMaterialInfo info, vec2 origPosition,
    vec4 bounds, float index)
{
	return dsVectorMaterial_getLinearGradientColorImpl(info, origPosition, bounds, index,
		dsVectorMaterialColorTex, uniforms.dsVectorTextureSizes.y);
}

[[fragment]]
vec4 dsVectorMaterial_getRadialGradientColorImpl(dsVectorMaterialInfo info, vec2 origPosition,
    vec4 bounds, float index, sampler2D materialTex, float height)
{
	vec2 gradientPos;
	if (info.info0.z == 1.0)
		gradientPos = (origPosition - bounds.xy)/(bounds.zw - bounds.xy);
	else
		gradientPos = origPosition;

	// Apply the gradient in the coordinate space of the gradient. This matrix was inverted
	// before setting on the shader.
	mat3 transform = mat3(vec3(info.info2.xy, 0.0), vec3(info.info2.zw, 0.0),
		vec3(info.info3.xy, 1.0));
	gradientPos = (transform*vec3(gradientPos, 1.0)).xy;

	float focusRadius = info.info3.w;
	vec2 center = info.info1.xy;
	float radius = info.info3.z;
	float invRadius = 1.0/radius;
	vec2 focusPos = info.info1.zw - center;
	vec2 circlePos = gradientPos - center;
	float gradientT;
	if (dot(focusPos, focusPos) < 0.001)
		gradientT = clamp((length(circlePos) - focusRadius)*invRadius, 0.0, 1.0);
	else
	{
		vec2 focusDir = circlePos - focusPos;
		float focusDist2 = dot(focusDir, focusDir);
		if (focusDist2 <= focusRadius*focusRadius + 0.001)
			gradientT = 0.0;
		else
		{
			// Find the distance from the focal point to the edge of the circle, passing
			// through the current position.
			// Intersect the line between the focus position and current position with the
			// circle. http://mathworld.wolfram.com/Circle-LineIntersection.html
			float determinant = focusPos.x*circlePos.y - focusPos.y*circlePos.x;
			float signY = focusDir.y < 0.0 ? -1.0 : 1.0;

			vec2 intersectCenter = vec2(focusDir.y, -focusDir.x)*vec2(determinant);
			vec2 intersectOffset = vec2(signY*focusDir.x, abs(focusDir.y))*
				vec2(sqrt(radius*radius*focusDist2 - determinant*determinant));
			float invFocusDist2 = 1.0/focusDist2;
			if (dot(intersectOffset, focusDir) < 0.0)
				intersectOffset = -intersectOffset;
			vec2 circleIntersect = (intersectCenter + intersectOffset)*
				vec2(invFocusDist2);

			float invGradiantDist = 1.0/(length(circleIntersect - focusPos) - focusRadius);
			gradientT = (sqrt(focusDist2) - focusRadius)*invGradiantDist;
		}
	}

	float colorCoord;
	if (info.info0.y == 1.0)
	{
		// Repeat
		colorCoord = fract(gradientT);
	}
	else if (info.info0.y == 2.0)
	{
		// Mirror
		colorCoord = fract(gradientT);
		float evenVal = floor(gradientT)/2.0;
		if (evenVal != floor(evenVal))
			colorCoord = 1.0 - colorCoord;
	}
	else
	{
		// Clamp
		colorCoord = gradientT;
	}

	float materialCoord = (index + 0.5)/height;
	return texture(materialTex, vec2(colorCoord, materialCoord));
}

/**
 * @brief Gets the radial gradient for a shape.
 * @param info The info gathered from dsVectorMaterial_getInfo().
 * @param origPosition The original position of the current pixel.
 * @param bounds The bounds of the shape.
 * @param imagePosition The position in the image of the current pixel.
 * @param index The index of the material.
 * @return The material color.
 */
[[fragment]]
vec4 dsVectorMaterial_getRadialGradientColor(dsVectorMaterialInfo info, vec2 origPosition,
    vec4 bounds, float index)
{
	return dsVectorMaterial_getRadialGradientColorImpl(info, origPosition, bounds, index,
		dsVectorMaterialColorTex, uniforms.dsVectorTextureSizes.y);
}

[[fragment]]
vec4 dsVectorMaterial_getColorImpl(dsVectorMaterialInfo info, vec2 origPosition, vec4 bounds,
	float index, sampler2D materialTex, float height)
{
	float colorCoord;

	if (info.info0.x == 0.0)
	{
		// Solid color
		colorCoord = 0.5/DS_MATERIAL_COLOR_WIDTH;
	}
	else if (info.info0.x == 1.0 || info.info0.x == 2.0)
	{
		// Gradient
		vec2 gradientPos;
		if (info.info0.z == 1.0)
			gradientPos = (origPosition - bounds.xy)/(bounds.zw - bounds.xy);
		else
			gradientPos = origPosition;

		// Apply the gradient in the coordinate space of the gradient. This matrix was inverted
		// before setting on the shader.
		mat3 transform = mat3(vec3(info.info2.xy, 0.0), vec3(info.info2.zw, 0.0),
			vec3(info.info3.xy, 1.0));
		gradientPos = (transform*vec3(gradientPos, 1.0)).xy;

		float gradientT;
		if (info.info0.x == 1.0)
		{
			// Linear gradient
			vec2 dir = info.info1.zw - info.info1.xy;
			float invDirLen = 1.0/length(dir);
			vec2 dirNorm = dir*vec2(invDirLen);
			gradientT = dot(dirNorm, gradientPos - info.info1.xy)*invDirLen;
		}
		else
		{
			// Radial gradient
			float focusRadius = info.info3.w;
			vec2 center = info.info1.xy;
			float radius = info.info3.z;
			float invRadius = 1.0/radius;
			vec2 focusPos = info.info1.zw - center;
			vec2 circlePos = gradientPos - center;
			if (dot(focusPos, focusPos) < 0.001)
				gradientT = clamp((length(circlePos) - focusRadius)*invRadius, 0.0, 1.0);
			else
			{
				vec2 focusDir = circlePos - focusPos;
				float focusDist2 = dot(focusDir, focusDir);
				if (focusDist2 <= focusRadius*focusRadius + 0.001)
					gradientT = 0.0;
				else
				{
					// Find the distance from the focal point to the edge of the circle, passing
					// through the current position.
					// Intersect the line between the focus position and current position with the
					// circle. http://mathworld.wolfram.com/Circle-LineIntersection.html
					float determinant = focusPos.x*circlePos.y - focusPos.y*circlePos.x;
					float signY = focusDir.y < 0.0 ? -1.0 : 1.0;

					vec2 intersectCenter = vec2(focusDir.y, -focusDir.x)*vec2(determinant);
					vec2 intersectOffset = vec2(signY*focusDir.x, abs(focusDir.y))*
						vec2(sqrt(radius*radius*focusDist2 - determinant*determinant));
					float invFocusDist2 = 1.0/focusDist2;
					if (dot(intersectOffset, focusDir) < 0.0)
						intersectOffset = -intersectOffset;
					vec2 circleIntersect = (intersectCenter + intersectOffset)*
						vec2(invFocusDist2);

					float invGradiantDist = 1.0/(length(circleIntersect - focusPos) - focusRadius);
					gradientT = (sqrt(focusDist2) - focusRadius)*invGradiantDist;
				}
			}
		}

		if (info.info0.y == 1.0)
		{
			// Repeat
			colorCoord = fract(gradientT);
		}
		else if (info.info0.y == 2.0)
		{
			// Mirror
			colorCoord = fract(gradientT);
			float evenVal = floor(gradientT)/2.0;
			if (evenVal != floor(evenVal))
				colorCoord = 1.0 - colorCoord;
		}
		else
		{
			// Clamp
			colorCoord = gradientT;
		}
	}
	else
	{
		// If out of range, was explicitly set to no matirial.
		return vec4(0.0);
	}

	float materialCoord = (index + 0.5)/height;
	return texture(materialTex, vec2(colorCoord, materialCoord));
}

/**
 * @brief Gets the material color for a shape.
 * @param info The info gathered from dsVectorMaterial_getInfo().
 * @param origPosition The original position of the current pixel.
 * @param bounds The bounds of the shape.
 * @param imagePosition The position in the image of the current pixel.
 * @param index The index of the material.
 * @return The material color.
 */
[[fragment]]
vec4 dsVectorMaterial_getColor(dsVectorMaterialInfo info, vec2 origPosition, vec4 bounds,
	float index)
{
	return dsVectorMaterial_getColorImpl(info, origPosition, bounds, index,
		dsVectorMaterialColorTex, uniforms.dsVectorTextureSizes.y);
}
