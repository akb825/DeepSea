/*
 * Copyright 2020-2021 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

/**
 * @file
 * @brief Functions for computing lighting.
 */


/**
 * @brief Constant for an unset light.
 */
#define DS_UNSET_LIGHT 0

/**
 * @brief Constant for a directional light.
 */
#define DS_DIRECTIONAL_LIGHT 1

/**
 * @brief Constant for a point light.
 */
#define DS_POINT_LIGHT 2

/**
 * @brief Constant for a spot light.
 */
#define DS_SPOT_LIGHT 3

/**
 * @brief Computes the diffuse lighting factor of a directional light.
 * @param lightDirection The direction to the light.
 * @param normal The normal of the surface.
 * @return The diffuse lighting factor.
 */
lowp float dsDirectionalDiffuseLight(lowp vec3 lightDirection, lowp vec3 normal)
{
	return max(dot(lightDirection, normal), 0);
}

/**
 * @brief Computes the diffuse lighting factor of a point light.
 * @param[out] falloff The falloff factor for the light. This should be used to multiply the final
 *     lighting value.
 * @param[out] surfaceDirection The direction of the surface to the light. This can be used if the
 *     specular factor is computed afterward.
 * @param lightPosition The position of the light.
 * @param surfacePosition The position of the surface.
 * @param normal The normal of the surface.
 * @param linearFalloff The linear falloff factor.
 * @param quadraticFalloff The quadratic falloff factor.
 * @return The diffuse lighting factor.
 */
lowp float dsPointDiffuseLight(out lowp float falloff, out lowp vec3 surfaceDirection,
	vec3 lightPosition, vec3 surfacePosition, lowp vec3 normal, lowp float linearFalloff,
	lowp float quadraticFalloff)
{
	vec3 surfaceToLight = lightPosition - surfacePosition;
	float distToLight2 = dot(surfaceToLight, surfaceToLight);
	float distToLight = sqrt(distToLight2);
	surfaceDirection = surfaceToLight*(1/distToLight);
	falloff = 1/(1 + distToLight*linearFalloff + distToLight2*quadraticFalloff);
	return max(dot(surfaceDirection, normal), 0);
}

/**
 * @brief Computes the diffuse lighting factor of a spot light.
 * @param[out] falloff The falloff factor for the light. This should be used to multiply the final
 *     lighting value.
 * @param[out] surfaceDirection The direction of the surface to the light. This can be used if the
 *     specular factor is computed afterward.
 * @param lightPosition The position of the light.
 * @param lightDirection The direction to the light.
 * @param surfacePosition The position of the surface.
 * @param normal The normal of the surface.
 * @param linearFalloff The linear falloff factor.
 * @param quadraticFalloff The quadratic falloff factor.
 * @param innerSpotCosAngle The cosine of the inner angle of the spot light.
 * @param outerSpotCosAngle The cosine of the outer angle of the spot light.
 * @return The diffuse lighting factor.
 */
lowp float dsSpotDiffuseLight(out lowp float falloff, out lowp vec3 surfaceDirection,
	vec3 lightPosition, lowp vec3 lightDirection, vec3 surfacePosition, lowp vec3 normal,
	lowp float linearFalloff, lowp float quadraticFalloff, lowp float innerSpotCosAngle,
	lowp float outerSpotCosAngle)
{
	vec3 surfaceToLight = lightPosition - surfacePosition;
	float distToLight2 = dot(surfaceToLight, surfaceToLight);
	float distToLight = sqrt(distToLight2);
	surfaceDirection = surfaceToLight*(1/distToLight);
	falloff = 1/(1 + distToLight*linearFalloff + distToLight2*quadraticFalloff);

	lowp float cosAngle = dot(surfaceDirection, lightDirection);
	lowp float angleFactor = clamp(cosAngle, outerSpotCosAngle, innerSpotCosAngle) -
		outerSpotCosAngle;
	lowp float angleDenom = innerSpotCosAngle == outerSpotCosAngle ?
		1 : 1/(innerSpotCosAngle - outerSpotCosAngle);
	falloff *= angleFactor*angleDenom;
	return max(dot(surfaceDirection, normal), 0);
}

/**
 * @brief Computes the diffuse lighting factor of a directional, point, or spot light.
 *
 * This is optimized to avoid any branching, which can completely murder performance on some CPUs.
 * This will be slower than calling the type-specific function, but much faster than choosing which
 * one to call based on an if block.
 *
 * @param[out] falloff The falloff factor for the light. This should be used to multiply the final
 *     lighting value.
 * @param[out] surfaceDirection The direction of the surface to the light. This can be used if the
 *     specular factor is computed afterward.
 * @param lightType The type of the light.
 * @param lightPosition The position of the light.
 * @param lightDirection The direction to the light.
 * @param surfacePosition The position of the surface.
 * @param normal The normal of the surface.
 * @param linearFalloff The linear falloff factor.
 * @param quadraticFalloff The quadratic falloff factor.
 * @param innerSpotCosAngle The cosine of the inner angle of a spot light.
 * @param outerSpotCosAngle The cosine of the outer angle of a spot light.
 * @return The diffuse lighting factor.
 */
lowp float dsDiffuseLight(out lowp float falloff, out lowp vec3 surfaceDirection, int lightType,
	vec3 lightPosition, lowp vec3 lightDirection, vec3 surfacePosition, lowp vec3 normal,
	lowp float linearFalloff, lowp float quadraticFalloff, lowp float innerSpotCosAngle,
	lowp float outerSpotCosAngle)
{
	bool directional = lightType == DS_DIRECTIONAL_LIGHT;
	bool spot = lightType == DS_SPOT_LIGHT;
	bool validLight = lightType != DS_UNSET_LIGHT;

	vec3 surfaceToLight = directional ? vec3(0.0) : lightPosition - surfacePosition;
	float distToLight2 = dot(surfaceToLight, surfaceToLight);
	float distToLight = sqrt(distToLight2);
	float invDistToLight = 1/max(distToLight, 1e-3);
	surfaceDirection = directional ? lightDirection : surfaceToLight*invDistToLight;
	falloff = 1/(1 + distToLight*linearFalloff + distToLight2*quadraticFalloff);

	lowp float cosAngle = dot(surfaceDirection, lightDirection);
	lowp float angleFactor = clamp(cosAngle, outerSpotCosAngle, innerSpotCosAngle) -
		outerSpotCosAngle;
	lowp float angleDenom = innerSpotCosAngle == outerSpotCosAngle ?
		1 : 1/(innerSpotCosAngle - outerSpotCosAngle);
	falloff = spot ? falloff*angleFactor*angleDenom : falloff;
	return max(dot(surfaceDirection, normal), 0)*float(validLight);
}

/**
 * @brief Computes the specular lighting factor.
 * @param lightDirection The direction to the light.
 * @param normal The normal of the surface.
 * @param viewDirection The direction to the view.
 * @param shininess The shininess of the specular.
 * @return The specular lighting factor.
 */
float dsSpecularLight(lowp vec3 lightDirection, lowp vec3 normal,
	lowp vec3 viewDirection, mediump float shininess)
{
	vec3 halfDirection = lightDirection + viewDirection;
	// NOTE: For some reason doing the normalize on the same line causes artifacts on Snapdragon.
	halfDirection = normalize(halfDirection);
	float specular = max(dot(halfDirection, normal), 0);
	return pow(specular, shininess);
}
