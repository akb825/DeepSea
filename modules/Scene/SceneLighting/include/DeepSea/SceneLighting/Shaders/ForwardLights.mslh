/*
 * Copyright 2020 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <DeepSea/SceneLighting/Shaders/Lighting.mslh>

/**
 * @file
 * @brief Uniforms for forward lighting.
 */

/**
 * @brief The number of forward lights.
 *
 * This can be defined before including this file to control the number of lights, otherwise it
 * defaults to 4.
 */
#ifndef DS_FORWARD_LIGHT_COUNT
#define DS_FORWARD_LIGHT_COUNT 4
#endif

/**
 * @brief Constant for an unset light.
 */
#define DS_UNSET_LIGHT 0

/**
 * @brief Constant for a directional light.
 */
#define DS_DIRECTIONAL_LIGHT 1

/**
 * @brief Constant for a point light.
 */
#define DS_POINT_LIGHT 2

/**
 * @brief Constant for a spot light.
 */
#define DS_SPOT_LIGHT 3

uniform InstanceForwardLightData
{
	/**
	 * @brief Light view space position on xyz and type on w.
	 */
	vec4 positionAndType[DS_FORWARD_LIGHT_COUNT];

	/**
	 * @brief Direction to the light in view space on xyz and linear falloff factor on w.
	 *
	 * The direction is guaranteed to be normalized.
	 */
	lowp vec4 directionAndLinearFalloff[DS_FORWARD_LIGHT_COUNT];

	/**
	 * @brief Light color on rgb and quadratic falloff factor on w.
	 */
	vec4 colorAndQuadraticFalloff[DS_FORWARD_LIGHT_COUNT];

	/**
	 * @brief Cosine of the spot angles for spot lights.
	 */
	lowp vec2 spotCosAngles[DS_FORWARD_LIGHT_COUNT];

	/**
	 * @brief The ambient light color.
	 */
	vec3 ambientColor;
} dsForwardLights;

/**
 * @brief Computes forward lighting.
 * @param[out] outDiffuseColor The lit result for diffuse.
 * @param[out] outSpecularColor The lit result for specular.
 * @param position The position on the surface.
 * @param normal The normal on the surface.
 * @param diffuseColor The diffuse color of the material.
 * @param specularColor The specular color of the material. If 0, specular will be skipped.
 * @param shininess The shininess value for computing specular lighting. Set to 0 to not compute
 *     specular.
 * @param viewDirection The direction to the view.
 */
void dsComputeForwardLighting(out vec3 outDiffuseColor, out vec3 outSpecularColor, vec3 position,
	lowp vec3 normal, mediump float shininess, lowp vec3 viewDirection)
{
	outDiffuseColor = INSTANCE(dsForwardLights).ambientColor;
	outSpecularColor = vec3(0, 0, 0);
	if (shininess == 0)
	{
		for (int i = 0; i < DS_FORWARD_LIGHT_COUNT; ++i)
		{
			vec3 lightPosition = INSTANCE(dsForwardLights).positionAndType[i].xyz;
			float type = INSTANCE(dsForwardLights).positionAndType[i].w;
			lowp vec3 lightDirection = INSTANCE(dsForwardLights).directionAndLinearFalloff[i].xyz;
			lowp float linearFalloff = INSTANCE(dsForwardLights).directionAndLinearFalloff[i].w;
			vec3 lightColor = INSTANCE(dsForwardLights).colorAndQuadraticFalloff[i].xyz;
			lowp float quadraticFalloff = INSTANCE(dsForwardLights).colorAndQuadraticFalloff[i].w;
			lowp vec2 spotCosAngles = INSTANCE(dsForwardLights).spotCosAngles[i];
			if (type == DS_DIRECTIONAL_LIGHT)
				outDiffuseColor += lightColor*dsDirectionalDiffuseLight(lightDirection, normal);
			else if (type == DS_POINT_LIGHT)
			{
				lowp float falloff;
				lowp vec3 surfaceDirection;
				float diffuse = dsPointDiffuseLight(falloff, surfaceDirection, lightPosition,
					position, normal, linearFalloff, quadraticFalloff);
				outDiffuseColor += lightColor*diffuse*falloff;
			}
			else if (type == DS_SPOT_LIGHT)
			{
				lowp float falloff;
				lowp vec3 surfaceDirection;
				float diffuse = dsSpotDiffuseLight(falloff, surfaceDirection, lightPosition,
					lightDirection, position, normal, linearFalloff, quadraticFalloff,
					spotCosAngles.x, spotCosAngles.y);
				outDiffuseColor += lightColor*diffuse*falloff;
			}
			else
				break;
		}
	}
	else
	{
		for (int i = 0; i < DS_FORWARD_LIGHT_COUNT; ++i)
		{
			vec3 lightPosition = INSTANCE(dsForwardLights).positionAndType[i].xyz;
			float type = INSTANCE(dsForwardLights).positionAndType[i].w;
			lowp vec3 lightDirection = INSTANCE(dsForwardLights).directionAndLinearFalloff[i].xyz;
			lowp float linearFalloff = INSTANCE(dsForwardLights).directionAndLinearFalloff[i].w;
			vec3 lightColor = INSTANCE(dsForwardLights).colorAndQuadraticFalloff[i].xyz;
			lowp float quadraticFalloff = INSTANCE(dsForwardLights).colorAndQuadraticFalloff[i].w;
			lowp vec2 spotCosAngles = INSTANCE(dsForwardLights).spotCosAngles[i];
			if (type == DS_DIRECTIONAL_LIGHT)
			{
				outDiffuseColor += lightColor*dsDirectionalDiffuseLight(lightDirection, normal);
				outSpecularColor += lightColor*dsDirectionalSpecularLight(lightDirection, normal,
					viewDirection, shininess);
			}
			else if (type == DS_POINT_LIGHT)
			{
				lowp float falloff;
				lowp vec3 surfaceDirection;
				float diffuse = dsPointDiffuseLight(falloff, surfaceDirection, lightPosition,
					position, normal, linearFalloff, quadraticFalloff);
				outDiffuseColor += lightColor*diffuse*falloff;
				outSpecularColor += lightColor*dsGeneralSpecularLight(surfaceDirection, normal,
					viewDirection, shininess)*falloff;
			}
			else if (type == DS_SPOT_LIGHT)
			{
				lowp float falloff;
				lowp vec3 surfaceDirection;
				float diffuse = dsSpotDiffuseLight(falloff, surfaceDirection, lightPosition,
					lightDirection, position, normal, linearFalloff, quadraticFalloff,
					spotCosAngles.x, spotCosAngles.y);
				outDiffuseColor += lightColor*diffuse*falloff;
				outSpecularColor += lightColor*dsGeneralSpecularLight(lightDirection, normal,
					viewDirection, shininess)*falloff;
			}
			else
				break;
		}
	}
}
