// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LIGHTNODE_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_LIGHTNODE_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

#include "SceneLight_generated.h"

namespace DeepSeaSceneLighting {

struct LightNode;
struct LightNodeBuilder;

struct LightNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LightNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEMPLATELIGHT_TYPE = 4,
    VT_TEMPLATELIGHT = 6,
    VT_LIGHTBASENAME = 8,
    VT_SINGLEINSTANCE = 10,
    VT_ITEMLISTS = 12
  };
  DeepSeaSceneLighting::LightUnion templateLight_type() const {
    return static_cast<DeepSeaSceneLighting::LightUnion>(GetField<uint8_t>(VT_TEMPLATELIGHT_TYPE, 0));
  }
  const void *templateLight() const {
    return GetPointer<const void *>(VT_TEMPLATELIGHT);
  }
  template<typename T> const T *templateLight_as() const;
  const DeepSeaSceneLighting::DirectionalLight *templateLight_as_DirectionalLight() const {
    return templateLight_type() == DeepSeaSceneLighting::LightUnion::DirectionalLight ? static_cast<const DeepSeaSceneLighting::DirectionalLight *>(templateLight()) : nullptr;
  }
  const DeepSeaSceneLighting::PointLight *templateLight_as_PointLight() const {
    return templateLight_type() == DeepSeaSceneLighting::LightUnion::PointLight ? static_cast<const DeepSeaSceneLighting::PointLight *>(templateLight()) : nullptr;
  }
  const DeepSeaSceneLighting::SpotLight *templateLight_as_SpotLight() const {
    return templateLight_type() == DeepSeaSceneLighting::LightUnion::SpotLight ? static_cast<const DeepSeaSceneLighting::SpotLight *>(templateLight()) : nullptr;
  }
  const flatbuffers::String *lightBaseName() const {
    return GetPointer<const flatbuffers::String *>(VT_LIGHTBASENAME);
  }
  bool singleInstance() const {
    return GetField<uint8_t>(VT_SINGLEINSTANCE, 0) != 0;
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *itemLists() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ITEMLISTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TEMPLATELIGHT_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_TEMPLATELIGHT) &&
           VerifyLightUnion(verifier, templateLight(), templateLight_type()) &&
           VerifyOffsetRequired(verifier, VT_LIGHTBASENAME) &&
           verifier.VerifyString(lightBaseName()) &&
           VerifyField<uint8_t>(verifier, VT_SINGLEINSTANCE, 1) &&
           VerifyOffset(verifier, VT_ITEMLISTS) &&
           verifier.VerifyVector(itemLists()) &&
           verifier.VerifyVectorOfStrings(itemLists()) &&
           verifier.EndTable();
  }
};

template<> inline const DeepSeaSceneLighting::DirectionalLight *LightNode::templateLight_as<DeepSeaSceneLighting::DirectionalLight>() const {
  return templateLight_as_DirectionalLight();
}

template<> inline const DeepSeaSceneLighting::PointLight *LightNode::templateLight_as<DeepSeaSceneLighting::PointLight>() const {
  return templateLight_as_PointLight();
}

template<> inline const DeepSeaSceneLighting::SpotLight *LightNode::templateLight_as<DeepSeaSceneLighting::SpotLight>() const {
  return templateLight_as_SpotLight();
}

struct LightNodeBuilder {
  typedef LightNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_templateLight_type(DeepSeaSceneLighting::LightUnion templateLight_type) {
    fbb_.AddElement<uint8_t>(LightNode::VT_TEMPLATELIGHT_TYPE, static_cast<uint8_t>(templateLight_type), 0);
  }
  void add_templateLight(flatbuffers::Offset<void> templateLight) {
    fbb_.AddOffset(LightNode::VT_TEMPLATELIGHT, templateLight);
  }
  void add_lightBaseName(flatbuffers::Offset<flatbuffers::String> lightBaseName) {
    fbb_.AddOffset(LightNode::VT_LIGHTBASENAME, lightBaseName);
  }
  void add_singleInstance(bool singleInstance) {
    fbb_.AddElement<uint8_t>(LightNode::VT_SINGLEINSTANCE, static_cast<uint8_t>(singleInstance), 0);
  }
  void add_itemLists(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> itemLists) {
    fbb_.AddOffset(LightNode::VT_ITEMLISTS, itemLists);
  }
  explicit LightNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LightNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LightNode>(end);
    fbb_.Required(o, LightNode::VT_TEMPLATELIGHT);
    fbb_.Required(o, LightNode::VT_LIGHTBASENAME);
    return o;
  }
};

inline flatbuffers::Offset<LightNode> CreateLightNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    DeepSeaSceneLighting::LightUnion templateLight_type = DeepSeaSceneLighting::LightUnion::NONE,
    flatbuffers::Offset<void> templateLight = 0,
    flatbuffers::Offset<flatbuffers::String> lightBaseName = 0,
    bool singleInstance = false,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> itemLists = 0) {
  LightNodeBuilder builder_(_fbb);
  builder_.add_itemLists(itemLists);
  builder_.add_lightBaseName(lightBaseName);
  builder_.add_templateLight(templateLight);
  builder_.add_singleInstance(singleInstance);
  builder_.add_templateLight_type(templateLight_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<LightNode> CreateLightNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    DeepSeaSceneLighting::LightUnion templateLight_type = DeepSeaSceneLighting::LightUnion::NONE,
    flatbuffers::Offset<void> templateLight = 0,
    const char *lightBaseName = nullptr,
    bool singleInstance = false,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *itemLists = nullptr) {
  auto lightBaseName__ = lightBaseName ? _fbb.CreateString(lightBaseName) : 0;
  auto itemLists__ = itemLists ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*itemLists) : 0;
  return DeepSeaSceneLighting::CreateLightNode(
      _fbb,
      templateLight_type,
      templateLight,
      lightBaseName__,
      singleInstance,
      itemLists__);
}

inline const DeepSeaSceneLighting::LightNode *GetLightNode(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaSceneLighting::LightNode>(buf);
}

inline const DeepSeaSceneLighting::LightNode *GetSizePrefixedLightNode(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaSceneLighting::LightNode>(buf);
}

inline bool VerifyLightNodeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneLighting::LightNode>(nullptr);
}

inline bool VerifySizePrefixedLightNodeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneLighting::LightNode>(nullptr);
}

inline void FinishLightNodeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::LightNode> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLightNodeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::LightNode> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_LIGHTNODE_DEEPSEASCENELIGHTING_H_
