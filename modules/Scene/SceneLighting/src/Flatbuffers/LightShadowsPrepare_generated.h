// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LIGHTSHADOWSPREPARE_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_LIGHTSHADOWSPREPARE_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

namespace DeepSeaSceneLighting {

struct LightShadowsPrepare;
struct LightShadowsPrepareBuilder;

struct LightShadowsPrepare FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LightShadowsPrepareBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIGHTSHADOWS = 4,
    VT_TRANSFORMGROUP = 6
  };
  const flatbuffers::String *lightShadows() const {
    return GetPointer<const flatbuffers::String *>(VT_LIGHTSHADOWS);
  }
  const flatbuffers::String *transformGroup() const {
    return GetPointer<const flatbuffers::String *>(VT_TRANSFORMGROUP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LIGHTSHADOWS) &&
           verifier.VerifyString(lightShadows()) &&
           VerifyOffset(verifier, VT_TRANSFORMGROUP) &&
           verifier.VerifyString(transformGroup()) &&
           verifier.EndTable();
  }
};

struct LightShadowsPrepareBuilder {
  typedef LightShadowsPrepare Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lightShadows(flatbuffers::Offset<flatbuffers::String> lightShadows) {
    fbb_.AddOffset(LightShadowsPrepare::VT_LIGHTSHADOWS, lightShadows);
  }
  void add_transformGroup(flatbuffers::Offset<flatbuffers::String> transformGroup) {
    fbb_.AddOffset(LightShadowsPrepare::VT_TRANSFORMGROUP, transformGroup);
  }
  explicit LightShadowsPrepareBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LightShadowsPrepare> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LightShadowsPrepare>(end);
    fbb_.Required(o, LightShadowsPrepare::VT_LIGHTSHADOWS);
    return o;
  }
};

inline flatbuffers::Offset<LightShadowsPrepare> CreateLightShadowsPrepare(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> lightShadows = 0,
    flatbuffers::Offset<flatbuffers::String> transformGroup = 0) {
  LightShadowsPrepareBuilder builder_(_fbb);
  builder_.add_transformGroup(transformGroup);
  builder_.add_lightShadows(lightShadows);
  return builder_.Finish();
}

inline flatbuffers::Offset<LightShadowsPrepare> CreateLightShadowsPrepareDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *lightShadows = nullptr,
    const char *transformGroup = nullptr) {
  auto lightShadows__ = lightShadows ? _fbb.CreateString(lightShadows) : 0;
  auto transformGroup__ = transformGroup ? _fbb.CreateString(transformGroup) : 0;
  return DeepSeaSceneLighting::CreateLightShadowsPrepare(
      _fbb,
      lightShadows__,
      transformGroup__);
}

inline const DeepSeaSceneLighting::LightShadowsPrepare *GetLightShadowsPrepare(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaSceneLighting::LightShadowsPrepare>(buf);
}

inline const DeepSeaSceneLighting::LightShadowsPrepare *GetSizePrefixedLightShadowsPrepare(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaSceneLighting::LightShadowsPrepare>(buf);
}

inline bool VerifyLightShadowsPrepareBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneLighting::LightShadowsPrepare>(nullptr);
}

inline bool VerifySizePrefixedLightShadowsPrepareBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneLighting::LightShadowsPrepare>(nullptr);
}

inline void FinishLightShadowsPrepareBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::LightShadowsPrepare> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLightShadowsPrepareBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::LightShadowsPrepare> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_LIGHTSHADOWSPREPARE_DEEPSEASCENELIGHTING_H_
