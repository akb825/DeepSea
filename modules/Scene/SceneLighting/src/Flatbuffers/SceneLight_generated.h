// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENELIGHT_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_SCENELIGHT_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "DeepSea/Scene/Flatbuffers/SceneCommon_generated.h"

namespace DeepSeaSceneLighting {

struct DirectionalLight;
struct DirectionalLightBuilder;

struct PointLight;
struct PointLightBuilder;

struct SpotLight;
struct SpotLightBuilder;

enum class LightUnion : uint8_t {
  NONE = 0,
  DirectionalLight = 1,
  PointLight = 2,
  SpotLight = 3,
  MIN = NONE,
  MAX = SpotLight
};

inline const LightUnion (&EnumValuesLightUnion())[4] {
  static const LightUnion values[] = {
    LightUnion::NONE,
    LightUnion::DirectionalLight,
    LightUnion::PointLight,
    LightUnion::SpotLight
  };
  return values;
}

inline const char * const *EnumNamesLightUnion() {
  static const char * const names[5] = {
    "NONE",
    "DirectionalLight",
    "PointLight",
    "SpotLight",
    nullptr
  };
  return names;
}

inline const char *EnumNameLightUnion(LightUnion e) {
  if (flatbuffers::IsOutRange(e, LightUnion::NONE, LightUnion::SpotLight)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLightUnion()[index];
}

template<typename T> struct LightUnionTraits {
  static const LightUnion enum_value = LightUnion::NONE;
};

template<> struct LightUnionTraits<DeepSeaSceneLighting::DirectionalLight> {
  static const LightUnion enum_value = LightUnion::DirectionalLight;
};

template<> struct LightUnionTraits<DeepSeaSceneLighting::PointLight> {
  static const LightUnion enum_value = LightUnion::PointLight;
};

template<> struct LightUnionTraits<DeepSeaSceneLighting::SpotLight> {
  static const LightUnion enum_value = LightUnion::SpotLight;
};

bool VerifyLightUnion(flatbuffers::Verifier &verifier, const void *obj, LightUnion type);
bool VerifyLightUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<LightUnion> *types);

struct DirectionalLight FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DirectionalLightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIRECTION = 4,
    VT_COLOR = 6,
    VT_INTENSITY = 8
  };
  const DeepSeaScene::Vector3f *direction() const {
    return GetStruct<const DeepSeaScene::Vector3f *>(VT_DIRECTION);
  }
  const DeepSeaScene::Color3f *color() const {
    return GetStruct<const DeepSeaScene::Color3f *>(VT_COLOR);
  }
  float intensity() const {
    return GetField<float>(VT_INTENSITY, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<DeepSeaScene::Vector3f>(verifier, VT_DIRECTION, 4) &&
           VerifyFieldRequired<DeepSeaScene::Color3f>(verifier, VT_COLOR, 4) &&
           VerifyField<float>(verifier, VT_INTENSITY, 4) &&
           verifier.EndTable();
  }
};

struct DirectionalLightBuilder {
  typedef DirectionalLight Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_direction(const DeepSeaScene::Vector3f *direction) {
    fbb_.AddStruct(DirectionalLight::VT_DIRECTION, direction);
  }
  void add_color(const DeepSeaScene::Color3f *color) {
    fbb_.AddStruct(DirectionalLight::VT_COLOR, color);
  }
  void add_intensity(float intensity) {
    fbb_.AddElement<float>(DirectionalLight::VT_INTENSITY, intensity, 0.0f);
  }
  explicit DirectionalLightBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DirectionalLight> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DirectionalLight>(end);
    fbb_.Required(o, DirectionalLight::VT_DIRECTION);
    fbb_.Required(o, DirectionalLight::VT_COLOR);
    return o;
  }
};

inline flatbuffers::Offset<DirectionalLight> CreateDirectionalLight(
    flatbuffers::FlatBufferBuilder &_fbb,
    const DeepSeaScene::Vector3f *direction = nullptr,
    const DeepSeaScene::Color3f *color = nullptr,
    float intensity = 0.0f) {
  DirectionalLightBuilder builder_(_fbb);
  builder_.add_intensity(intensity);
  builder_.add_color(color);
  builder_.add_direction(direction);
  return builder_.Finish();
}

struct PointLight FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PointLightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_COLOR = 6,
    VT_INTENSITY = 8,
    VT_LINEARFALLOFF = 10,
    VT_QUADRATICFALLOFF = 12
  };
  const DeepSeaScene::Vector3f *position() const {
    return GetStruct<const DeepSeaScene::Vector3f *>(VT_POSITION);
  }
  const DeepSeaScene::Color3f *color() const {
    return GetStruct<const DeepSeaScene::Color3f *>(VT_COLOR);
  }
  float intensity() const {
    return GetField<float>(VT_INTENSITY, 0.0f);
  }
  float linearFalloff() const {
    return GetField<float>(VT_LINEARFALLOFF, 0.0f);
  }
  float quadraticFalloff() const {
    return GetField<float>(VT_QUADRATICFALLOFF, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<DeepSeaScene::Vector3f>(verifier, VT_POSITION, 4) &&
           VerifyFieldRequired<DeepSeaScene::Color3f>(verifier, VT_COLOR, 4) &&
           VerifyField<float>(verifier, VT_INTENSITY, 4) &&
           VerifyField<float>(verifier, VT_LINEARFALLOFF, 4) &&
           VerifyField<float>(verifier, VT_QUADRATICFALLOFF, 4) &&
           verifier.EndTable();
  }
};

struct PointLightBuilder {
  typedef PointLight Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const DeepSeaScene::Vector3f *position) {
    fbb_.AddStruct(PointLight::VT_POSITION, position);
  }
  void add_color(const DeepSeaScene::Color3f *color) {
    fbb_.AddStruct(PointLight::VT_COLOR, color);
  }
  void add_intensity(float intensity) {
    fbb_.AddElement<float>(PointLight::VT_INTENSITY, intensity, 0.0f);
  }
  void add_linearFalloff(float linearFalloff) {
    fbb_.AddElement<float>(PointLight::VT_LINEARFALLOFF, linearFalloff, 0.0f);
  }
  void add_quadraticFalloff(float quadraticFalloff) {
    fbb_.AddElement<float>(PointLight::VT_QUADRATICFALLOFF, quadraticFalloff, 0.0f);
  }
  explicit PointLightBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PointLight> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PointLight>(end);
    fbb_.Required(o, PointLight::VT_POSITION);
    fbb_.Required(o, PointLight::VT_COLOR);
    return o;
  }
};

inline flatbuffers::Offset<PointLight> CreatePointLight(
    flatbuffers::FlatBufferBuilder &_fbb,
    const DeepSeaScene::Vector3f *position = nullptr,
    const DeepSeaScene::Color3f *color = nullptr,
    float intensity = 0.0f,
    float linearFalloff = 0.0f,
    float quadraticFalloff = 0.0f) {
  PointLightBuilder builder_(_fbb);
  builder_.add_quadraticFalloff(quadraticFalloff);
  builder_.add_linearFalloff(linearFalloff);
  builder_.add_intensity(intensity);
  builder_.add_color(color);
  builder_.add_position(position);
  return builder_.Finish();
}

struct SpotLight FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SpotLightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_DIRECTION = 6,
    VT_COLOR = 8,
    VT_INTENSITY = 10,
    VT_LINEARFALLOFF = 12,
    VT_QUADRATICFALLOFF = 14,
    VT_INNERSPOTANGLE = 16,
    VT_OUTERSPOTANGLE = 18
  };
  const DeepSeaScene::Vector3f *position() const {
    return GetStruct<const DeepSeaScene::Vector3f *>(VT_POSITION);
  }
  const DeepSeaScene::Vector3f *direction() const {
    return GetStruct<const DeepSeaScene::Vector3f *>(VT_DIRECTION);
  }
  const DeepSeaScene::Color3f *color() const {
    return GetStruct<const DeepSeaScene::Color3f *>(VT_COLOR);
  }
  float intensity() const {
    return GetField<float>(VT_INTENSITY, 0.0f);
  }
  float linearFalloff() const {
    return GetField<float>(VT_LINEARFALLOFF, 0.0f);
  }
  float quadraticFalloff() const {
    return GetField<float>(VT_QUADRATICFALLOFF, 0.0f);
  }
  float innerSpotAngle() const {
    return GetField<float>(VT_INNERSPOTANGLE, 0.0f);
  }
  float outerSpotAngle() const {
    return GetField<float>(VT_OUTERSPOTANGLE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<DeepSeaScene::Vector3f>(verifier, VT_POSITION, 4) &&
           VerifyFieldRequired<DeepSeaScene::Vector3f>(verifier, VT_DIRECTION, 4) &&
           VerifyFieldRequired<DeepSeaScene::Color3f>(verifier, VT_COLOR, 4) &&
           VerifyField<float>(verifier, VT_INTENSITY, 4) &&
           VerifyField<float>(verifier, VT_LINEARFALLOFF, 4) &&
           VerifyField<float>(verifier, VT_QUADRATICFALLOFF, 4) &&
           VerifyField<float>(verifier, VT_INNERSPOTANGLE, 4) &&
           VerifyField<float>(verifier, VT_OUTERSPOTANGLE, 4) &&
           verifier.EndTable();
  }
};

struct SpotLightBuilder {
  typedef SpotLight Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const DeepSeaScene::Vector3f *position) {
    fbb_.AddStruct(SpotLight::VT_POSITION, position);
  }
  void add_direction(const DeepSeaScene::Vector3f *direction) {
    fbb_.AddStruct(SpotLight::VT_DIRECTION, direction);
  }
  void add_color(const DeepSeaScene::Color3f *color) {
    fbb_.AddStruct(SpotLight::VT_COLOR, color);
  }
  void add_intensity(float intensity) {
    fbb_.AddElement<float>(SpotLight::VT_INTENSITY, intensity, 0.0f);
  }
  void add_linearFalloff(float linearFalloff) {
    fbb_.AddElement<float>(SpotLight::VT_LINEARFALLOFF, linearFalloff, 0.0f);
  }
  void add_quadraticFalloff(float quadraticFalloff) {
    fbb_.AddElement<float>(SpotLight::VT_QUADRATICFALLOFF, quadraticFalloff, 0.0f);
  }
  void add_innerSpotAngle(float innerSpotAngle) {
    fbb_.AddElement<float>(SpotLight::VT_INNERSPOTANGLE, innerSpotAngle, 0.0f);
  }
  void add_outerSpotAngle(float outerSpotAngle) {
    fbb_.AddElement<float>(SpotLight::VT_OUTERSPOTANGLE, outerSpotAngle, 0.0f);
  }
  explicit SpotLightBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SpotLight> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SpotLight>(end);
    fbb_.Required(o, SpotLight::VT_POSITION);
    fbb_.Required(o, SpotLight::VT_DIRECTION);
    fbb_.Required(o, SpotLight::VT_COLOR);
    return o;
  }
};

inline flatbuffers::Offset<SpotLight> CreateSpotLight(
    flatbuffers::FlatBufferBuilder &_fbb,
    const DeepSeaScene::Vector3f *position = nullptr,
    const DeepSeaScene::Vector3f *direction = nullptr,
    const DeepSeaScene::Color3f *color = nullptr,
    float intensity = 0.0f,
    float linearFalloff = 0.0f,
    float quadraticFalloff = 0.0f,
    float innerSpotAngle = 0.0f,
    float outerSpotAngle = 0.0f) {
  SpotLightBuilder builder_(_fbb);
  builder_.add_outerSpotAngle(outerSpotAngle);
  builder_.add_innerSpotAngle(innerSpotAngle);
  builder_.add_quadraticFalloff(quadraticFalloff);
  builder_.add_linearFalloff(linearFalloff);
  builder_.add_intensity(intensity);
  builder_.add_color(color);
  builder_.add_direction(direction);
  builder_.add_position(position);
  return builder_.Finish();
}

inline bool VerifyLightUnion(flatbuffers::Verifier &verifier, const void *obj, LightUnion type) {
  switch (type) {
    case LightUnion::NONE: {
      return true;
    }
    case LightUnion::DirectionalLight: {
      auto ptr = reinterpret_cast<const DeepSeaSceneLighting::DirectionalLight *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LightUnion::PointLight: {
      auto ptr = reinterpret_cast<const DeepSeaSceneLighting::PointLight *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LightUnion::SpotLight: {
      auto ptr = reinterpret_cast<const DeepSeaSceneLighting::SpotLight *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyLightUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<LightUnion> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyLightUnion(
        verifier,  values->Get(i), types->GetEnum<LightUnion>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_SCENELIGHT_DEEPSEASCENELIGHTING_H_
