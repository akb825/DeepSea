// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENESHADOWMANAGER_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_SCENESHADOWMANAGER_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "DeepSea/Scene/Flatbuffers/SceneCommon_generated.h"

namespace DeepSeaSceneLighting {

struct SceneLightShadows;
struct SceneLightShadowsBuilder;

struct SceneShadowManager;
struct SceneShadowManagerBuilder;

enum class LightType : uint8_t {
  Directional = 0,
  Point = 1,
  Spot = 2,
  MIN = Directional,
  MAX = Spot
};

inline const LightType (&EnumValuesLightType())[3] {
  static const LightType values[] = {
    LightType::Directional,
    LightType::Point,
    LightType::Spot
  };
  return values;
}

inline const char * const *EnumNamesLightType() {
  static const char * const names[4] = {
    "Directional",
    "Point",
    "Spot",
    nullptr
  };
  return names;
}

inline const char *EnumNameLightType(LightType e) {
  if (::flatbuffers::IsOutRange(e, LightType::Directional, LightType::Spot)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLightType()[index];
}

struct SceneLightShadows FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneLightShadowsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_LIGHTSET = 6,
    VT_LIGHTTYPE = 8,
    VT_LIGHT = 10,
    VT_TRANSFORMGROUPDESC = 12,
    VT_TRANSFORMGROUPNAME = 14,
    VT_MAXCASCADES = 16,
    VT_MAXFIRSTSPLITDISTANCE = 18,
    VT_CASCADEEXPFACTOR = 20,
    VT_MINDEPTHRANGES = 22,
    VT_FADESTARTDISTANCE = 24,
    VT_MAXDISTANCE = 26
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *lightSet() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LIGHTSET);
  }
  DeepSeaSceneLighting::LightType lightType() const {
    return static_cast<DeepSeaSceneLighting::LightType>(GetField<uint8_t>(VT_LIGHTTYPE, 0));
  }
  const ::flatbuffers::String *light() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LIGHT);
  }
  const ::flatbuffers::String *transformGroupDesc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSFORMGROUPDESC);
  }
  const ::flatbuffers::String *transformGroupName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSFORMGROUPNAME);
  }
  uint32_t maxCascades() const {
    return GetField<uint32_t>(VT_MAXCASCADES, 0);
  }
  float maxFirstSplitDistance() const {
    return GetField<float>(VT_MAXFIRSTSPLITDISTANCE, 0.0f);
  }
  float cascadeExpFactor() const {
    return GetField<float>(VT_CASCADEEXPFACTOR, 0.0f);
  }
  const ::flatbuffers::Vector<float> *minDepthRanges() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_MINDEPTHRANGES);
  }
  float fadeStartDistance() const {
    return GetField<float>(VT_FADESTARTDISTANCE, 0.0f);
  }
  float maxDistance() const {
    return GetField<float>(VT_MAXDISTANCE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_LIGHTSET) &&
           verifier.VerifyString(lightSet()) &&
           VerifyField<uint8_t>(verifier, VT_LIGHTTYPE, 1) &&
           VerifyOffset(verifier, VT_LIGHT) &&
           verifier.VerifyString(light()) &&
           VerifyOffsetRequired(verifier, VT_TRANSFORMGROUPDESC) &&
           verifier.VerifyString(transformGroupDesc()) &&
           VerifyOffset(verifier, VT_TRANSFORMGROUPNAME) &&
           verifier.VerifyString(transformGroupName()) &&
           VerifyField<uint32_t>(verifier, VT_MAXCASCADES, 4) &&
           VerifyField<float>(verifier, VT_MAXFIRSTSPLITDISTANCE, 4) &&
           VerifyField<float>(verifier, VT_CASCADEEXPFACTOR, 4) &&
           VerifyOffset(verifier, VT_MINDEPTHRANGES) &&
           verifier.VerifyVector(minDepthRanges()) &&
           VerifyField<float>(verifier, VT_FADESTARTDISTANCE, 4) &&
           VerifyField<float>(verifier, VT_MAXDISTANCE, 4) &&
           verifier.EndTable();
  }
};

struct SceneLightShadowsBuilder {
  typedef SceneLightShadows Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SceneLightShadows::VT_NAME, name);
  }
  void add_lightSet(::flatbuffers::Offset<::flatbuffers::String> lightSet) {
    fbb_.AddOffset(SceneLightShadows::VT_LIGHTSET, lightSet);
  }
  void add_lightType(DeepSeaSceneLighting::LightType lightType) {
    fbb_.AddElement<uint8_t>(SceneLightShadows::VT_LIGHTTYPE, static_cast<uint8_t>(lightType), 0);
  }
  void add_light(::flatbuffers::Offset<::flatbuffers::String> light) {
    fbb_.AddOffset(SceneLightShadows::VT_LIGHT, light);
  }
  void add_transformGroupDesc(::flatbuffers::Offset<::flatbuffers::String> transformGroupDesc) {
    fbb_.AddOffset(SceneLightShadows::VT_TRANSFORMGROUPDESC, transformGroupDesc);
  }
  void add_transformGroupName(::flatbuffers::Offset<::flatbuffers::String> transformGroupName) {
    fbb_.AddOffset(SceneLightShadows::VT_TRANSFORMGROUPNAME, transformGroupName);
  }
  void add_maxCascades(uint32_t maxCascades) {
    fbb_.AddElement<uint32_t>(SceneLightShadows::VT_MAXCASCADES, maxCascades, 0);
  }
  void add_maxFirstSplitDistance(float maxFirstSplitDistance) {
    fbb_.AddElement<float>(SceneLightShadows::VT_MAXFIRSTSPLITDISTANCE, maxFirstSplitDistance, 0.0f);
  }
  void add_cascadeExpFactor(float cascadeExpFactor) {
    fbb_.AddElement<float>(SceneLightShadows::VT_CASCADEEXPFACTOR, cascadeExpFactor, 0.0f);
  }
  void add_minDepthRanges(::flatbuffers::Offset<::flatbuffers::Vector<float>> minDepthRanges) {
    fbb_.AddOffset(SceneLightShadows::VT_MINDEPTHRANGES, minDepthRanges);
  }
  void add_fadeStartDistance(float fadeStartDistance) {
    fbb_.AddElement<float>(SceneLightShadows::VT_FADESTARTDISTANCE, fadeStartDistance, 0.0f);
  }
  void add_maxDistance(float maxDistance) {
    fbb_.AddElement<float>(SceneLightShadows::VT_MAXDISTANCE, maxDistance, 0.0f);
  }
  explicit SceneLightShadowsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneLightShadows> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneLightShadows>(end);
    fbb_.Required(o, SceneLightShadows::VT_NAME);
    fbb_.Required(o, SceneLightShadows::VT_LIGHTSET);
    fbb_.Required(o, SceneLightShadows::VT_TRANSFORMGROUPDESC);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneLightShadows> CreateSceneLightShadows(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lightSet = 0,
    DeepSeaSceneLighting::LightType lightType = DeepSeaSceneLighting::LightType::Directional,
    ::flatbuffers::Offset<::flatbuffers::String> light = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transformGroupDesc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transformGroupName = 0,
    uint32_t maxCascades = 0,
    float maxFirstSplitDistance = 0.0f,
    float cascadeExpFactor = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> minDepthRanges = 0,
    float fadeStartDistance = 0.0f,
    float maxDistance = 0.0f) {
  SceneLightShadowsBuilder builder_(_fbb);
  builder_.add_maxDistance(maxDistance);
  builder_.add_fadeStartDistance(fadeStartDistance);
  builder_.add_minDepthRanges(minDepthRanges);
  builder_.add_cascadeExpFactor(cascadeExpFactor);
  builder_.add_maxFirstSplitDistance(maxFirstSplitDistance);
  builder_.add_maxCascades(maxCascades);
  builder_.add_transformGroupName(transformGroupName);
  builder_.add_transformGroupDesc(transformGroupDesc);
  builder_.add_light(light);
  builder_.add_lightSet(lightSet);
  builder_.add_name(name);
  builder_.add_lightType(lightType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SceneLightShadows> CreateSceneLightShadowsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *lightSet = nullptr,
    DeepSeaSceneLighting::LightType lightType = DeepSeaSceneLighting::LightType::Directional,
    const char *light = nullptr,
    const char *transformGroupDesc = nullptr,
    const char *transformGroupName = nullptr,
    uint32_t maxCascades = 0,
    float maxFirstSplitDistance = 0.0f,
    float cascadeExpFactor = 0.0f,
    const std::vector<float> *minDepthRanges = nullptr,
    float fadeStartDistance = 0.0f,
    float maxDistance = 0.0f) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto lightSet__ = lightSet ? _fbb.CreateString(lightSet) : 0;
  auto light__ = light ? _fbb.CreateString(light) : 0;
  auto transformGroupDesc__ = transformGroupDesc ? _fbb.CreateString(transformGroupDesc) : 0;
  auto transformGroupName__ = transformGroupName ? _fbb.CreateString(transformGroupName) : 0;
  auto minDepthRanges__ = minDepthRanges ? _fbb.CreateVector<float>(*minDepthRanges) : 0;
  return DeepSeaSceneLighting::CreateSceneLightShadows(
      _fbb,
      name__,
      lightSet__,
      lightType,
      light__,
      transformGroupDesc__,
      transformGroupName__,
      maxCascades,
      maxFirstSplitDistance,
      cascadeExpFactor,
      minDepthRanges__,
      fadeStartDistance,
      maxDistance);
}

struct SceneShadowManager FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneShadowManagerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHADOWS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightShadows>> *shadows() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightShadows>> *>(VT_SHADOWS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SHADOWS) &&
           verifier.VerifyVector(shadows()) &&
           verifier.VerifyVectorOfTables(shadows()) &&
           verifier.EndTable();
  }
};

struct SceneShadowManagerBuilder {
  typedef SceneShadowManager Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shadows(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightShadows>>> shadows) {
    fbb_.AddOffset(SceneShadowManager::VT_SHADOWS, shadows);
  }
  explicit SceneShadowManagerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneShadowManager> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneShadowManager>(end);
    fbb_.Required(o, SceneShadowManager::VT_SHADOWS);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneShadowManager> CreateSceneShadowManager(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightShadows>>> shadows = 0) {
  SceneShadowManagerBuilder builder_(_fbb);
  builder_.add_shadows(shadows);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SceneShadowManager> CreateSceneShadowManagerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightShadows>> *shadows = nullptr) {
  auto shadows__ = shadows ? _fbb.CreateVector<::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightShadows>>(*shadows) : 0;
  return DeepSeaSceneLighting::CreateSceneShadowManager(
      _fbb,
      shadows__);
}

inline const DeepSeaSceneLighting::SceneShadowManager *GetSceneShadowManager(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaSceneLighting::SceneShadowManager>(buf);
}

inline const DeepSeaSceneLighting::SceneShadowManager *GetSizePrefixedSceneShadowManager(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaSceneLighting::SceneShadowManager>(buf);
}

inline bool VerifySceneShadowManagerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneLighting::SceneShadowManager>(nullptr);
}

inline bool VerifySizePrefixedSceneShadowManagerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneLighting::SceneShadowManager>(nullptr);
}

inline void FinishSceneShadowManagerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaSceneLighting::SceneShadowManager> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneShadowManagerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaSceneLighting::SceneShadowManager> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_SCENESHADOWMANAGER_DEEPSEASCENELIGHTING_H_
