// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHADOWCULLLIST_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_SHADOWCULLLIST_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

namespace DeepSeaSceneLighting {

struct ShadowCullList;
struct ShadowCullListBuilder;

struct ShadowCullList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShadowCullListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIGHTSHADOWS = 4,
    VT_SURFACE = 6
  };
  const flatbuffers::String *lightShadows() const {
    return GetPointer<const flatbuffers::String *>(VT_LIGHTSHADOWS);
  }
  uint8_t surface() const {
    return GetField<uint8_t>(VT_SURFACE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LIGHTSHADOWS) &&
           verifier.VerifyString(lightShadows()) &&
           VerifyField<uint8_t>(verifier, VT_SURFACE) &&
           verifier.EndTable();
  }
};

struct ShadowCullListBuilder {
  typedef ShadowCullList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lightShadows(flatbuffers::Offset<flatbuffers::String> lightShadows) {
    fbb_.AddOffset(ShadowCullList::VT_LIGHTSHADOWS, lightShadows);
  }
  void add_surface(uint8_t surface) {
    fbb_.AddElement<uint8_t>(ShadowCullList::VT_SURFACE, surface, 0);
  }
  explicit ShadowCullListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ShadowCullList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShadowCullList>(end);
    fbb_.Required(o, ShadowCullList::VT_LIGHTSHADOWS);
    return o;
  }
};

inline flatbuffers::Offset<ShadowCullList> CreateShadowCullList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> lightShadows = 0,
    uint8_t surface = 0) {
  ShadowCullListBuilder builder_(_fbb);
  builder_.add_lightShadows(lightShadows);
  builder_.add_surface(surface);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShadowCullList> CreateShadowCullListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *lightShadows = nullptr,
    uint8_t surface = 0) {
  auto lightShadows__ = lightShadows ? _fbb.CreateString(lightShadows) : 0;
  return DeepSeaSceneLighting::CreateShadowCullList(
      _fbb,
      lightShadows__,
      surface);
}

inline const DeepSeaSceneLighting::ShadowCullList *GetShadowCullList(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaSceneLighting::ShadowCullList>(buf);
}

inline const DeepSeaSceneLighting::ShadowCullList *GetSizePrefixedShadowCullList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaSceneLighting::ShadowCullList>(buf);
}

inline bool VerifyShadowCullListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneLighting::ShadowCullList>(nullptr);
}

inline bool VerifySizePrefixedShadowCullListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneLighting::ShadowCullList>(nullptr);
}

inline void FinishShadowCullListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::ShadowCullList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedShadowCullListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::ShadowCullList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_SHADOWCULLLIST_DEEPSEASCENELIGHTING_H_
