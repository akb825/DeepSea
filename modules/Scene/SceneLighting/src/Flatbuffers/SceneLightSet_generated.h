// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENELIGHTSET_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_SCENELIGHTSET_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "DeepSea/Scene/Flatbuffers/SceneCommon_generated.h"
#include "SceneLight_generated.h"

namespace DeepSeaSceneLighting {

struct Light;
struct LightBuilder;

struct SceneLightSet;
struct SceneLightSetBuilder;

struct Light FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LightBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_LIGHT_TYPE = 6,
    VT_LIGHT = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  DeepSeaSceneLighting::LightUnion light_type() const {
    return static_cast<DeepSeaSceneLighting::LightUnion>(GetField<uint8_t>(VT_LIGHT_TYPE, 0));
  }
  const void *light() const {
    return GetPointer<const void *>(VT_LIGHT);
  }
  template<typename T> const T *light_as() const;
  const DeepSeaSceneLighting::DirectionalLight *light_as_DirectionalLight() const {
    return light_type() == DeepSeaSceneLighting::LightUnion::DirectionalLight ? static_cast<const DeepSeaSceneLighting::DirectionalLight *>(light()) : nullptr;
  }
  const DeepSeaSceneLighting::PointLight *light_as_PointLight() const {
    return light_type() == DeepSeaSceneLighting::LightUnion::PointLight ? static_cast<const DeepSeaSceneLighting::PointLight *>(light()) : nullptr;
  }
  const DeepSeaSceneLighting::SpotLight *light_as_SpotLight() const {
    return light_type() == DeepSeaSceneLighting::LightUnion::SpotLight ? static_cast<const DeepSeaSceneLighting::SpotLight *>(light()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_LIGHT_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_LIGHT) &&
           VerifyLightUnion(verifier, light(), light_type()) &&
           verifier.EndTable();
  }
};

template<> inline const DeepSeaSceneLighting::DirectionalLight *Light::light_as<DeepSeaSceneLighting::DirectionalLight>() const {
  return light_as_DirectionalLight();
}

template<> inline const DeepSeaSceneLighting::PointLight *Light::light_as<DeepSeaSceneLighting::PointLight>() const {
  return light_as_PointLight();
}

template<> inline const DeepSeaSceneLighting::SpotLight *Light::light_as<DeepSeaSceneLighting::SpotLight>() const {
  return light_as_SpotLight();
}

struct LightBuilder {
  typedef Light Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Light::VT_NAME, name);
  }
  void add_light_type(DeepSeaSceneLighting::LightUnion light_type) {
    fbb_.AddElement<uint8_t>(Light::VT_LIGHT_TYPE, static_cast<uint8_t>(light_type), 0);
  }
  void add_light(::flatbuffers::Offset<void> light) {
    fbb_.AddOffset(Light::VT_LIGHT, light);
  }
  explicit LightBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Light> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Light>(end);
    fbb_.Required(o, Light::VT_NAME);
    fbb_.Required(o, Light::VT_LIGHT);
    return o;
  }
};

inline ::flatbuffers::Offset<Light> CreateLight(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    DeepSeaSceneLighting::LightUnion light_type = DeepSeaSceneLighting::LightUnion::NONE,
    ::flatbuffers::Offset<void> light = 0) {
  LightBuilder builder_(_fbb);
  builder_.add_light(light);
  builder_.add_name(name);
  builder_.add_light_type(light_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Light> CreateLightDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    DeepSeaSceneLighting::LightUnion light_type = DeepSeaSceneLighting::LightUnion::NONE,
    ::flatbuffers::Offset<void> light = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return DeepSeaSceneLighting::CreateLight(
      _fbb,
      name__,
      light_type,
      light);
}

struct SceneLightSet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneLightSetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIGHTS = 4,
    VT_MAXLIGHTS = 6,
    VT_AMBIENTCOLOR = 8,
    VT_AMBIENTINTENSITY = 10,
    VT_MAINLIGHT = 12
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::Light>> *lights() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::Light>> *>(VT_LIGHTS);
  }
  uint32_t maxLights() const {
    return GetField<uint32_t>(VT_MAXLIGHTS, 0);
  }
  const DeepSeaScene::Color3f *ambientColor() const {
    return GetStruct<const DeepSeaScene::Color3f *>(VT_AMBIENTCOLOR);
  }
  float ambientIntensity() const {
    return GetField<float>(VT_AMBIENTINTENSITY, 0.0f);
  }
  const ::flatbuffers::String *mainLight() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MAINLIGHT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIGHTS) &&
           verifier.VerifyVector(lights()) &&
           verifier.VerifyVectorOfTables(lights()) &&
           VerifyField<uint32_t>(verifier, VT_MAXLIGHTS, 4) &&
           VerifyField<DeepSeaScene::Color3f>(verifier, VT_AMBIENTCOLOR, 4) &&
           VerifyField<float>(verifier, VT_AMBIENTINTENSITY, 4) &&
           VerifyOffset(verifier, VT_MAINLIGHT) &&
           verifier.VerifyString(mainLight()) &&
           verifier.EndTable();
  }
};

struct SceneLightSetBuilder {
  typedef SceneLightSet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lights(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::Light>>> lights) {
    fbb_.AddOffset(SceneLightSet::VT_LIGHTS, lights);
  }
  void add_maxLights(uint32_t maxLights) {
    fbb_.AddElement<uint32_t>(SceneLightSet::VT_MAXLIGHTS, maxLights, 0);
  }
  void add_ambientColor(const DeepSeaScene::Color3f *ambientColor) {
    fbb_.AddStruct(SceneLightSet::VT_AMBIENTCOLOR, ambientColor);
  }
  void add_ambientIntensity(float ambientIntensity) {
    fbb_.AddElement<float>(SceneLightSet::VT_AMBIENTINTENSITY, ambientIntensity, 0.0f);
  }
  void add_mainLight(::flatbuffers::Offset<::flatbuffers::String> mainLight) {
    fbb_.AddOffset(SceneLightSet::VT_MAINLIGHT, mainLight);
  }
  explicit SceneLightSetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneLightSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneLightSet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneLightSet> CreateSceneLightSet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaSceneLighting::Light>>> lights = 0,
    uint32_t maxLights = 0,
    const DeepSeaScene::Color3f *ambientColor = nullptr,
    float ambientIntensity = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> mainLight = 0) {
  SceneLightSetBuilder builder_(_fbb);
  builder_.add_mainLight(mainLight);
  builder_.add_ambientIntensity(ambientIntensity);
  builder_.add_ambientColor(ambientColor);
  builder_.add_maxLights(maxLights);
  builder_.add_lights(lights);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SceneLightSet> CreateSceneLightSetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<DeepSeaSceneLighting::Light>> *lights = nullptr,
    uint32_t maxLights = 0,
    const DeepSeaScene::Color3f *ambientColor = nullptr,
    float ambientIntensity = 0.0f,
    const char *mainLight = nullptr) {
  auto lights__ = lights ? _fbb.CreateVector<::flatbuffers::Offset<DeepSeaSceneLighting::Light>>(*lights) : 0;
  auto mainLight__ = mainLight ? _fbb.CreateString(mainLight) : 0;
  return DeepSeaSceneLighting::CreateSceneLightSet(
      _fbb,
      lights__,
      maxLights,
      ambientColor,
      ambientIntensity,
      mainLight__);
}

inline const DeepSeaSceneLighting::SceneLightSet *GetSceneLightSet(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaSceneLighting::SceneLightSet>(buf);
}

inline const DeepSeaSceneLighting::SceneLightSet *GetSizePrefixedSceneLightSet(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaSceneLighting::SceneLightSet>(buf);
}

inline bool VerifySceneLightSetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneLighting::SceneLightSet>(nullptr);
}

inline bool VerifySizePrefixedSceneLightSetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneLighting::SceneLightSet>(nullptr);
}

inline void FinishSceneLightSetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightSet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneLightSetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaSceneLighting::SceneLightSet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_SCENELIGHTSET_DEEPSEASCENELIGHTING_H_
