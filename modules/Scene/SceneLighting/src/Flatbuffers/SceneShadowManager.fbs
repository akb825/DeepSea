/*
 * Copyright 2021-2024 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include "DeepSea/Scene/Flatbuffers/SceneCommon.fbs";

namespace DeepSeaSceneLighting;

// Enum for the type of light.
enum LightType : ubyte
{
	Directional,
	Point,
	Spot
}

// Struct defining a set of lights for a scene.
table SceneLightShadows
{
	// The name of the light shadows.
	name : string (required);

	// The light set to retrieve the light from.
	lightSet : string (required);

	// The type of light to shadow.
	lightType : LightType;

	// The name of the light to use. This may be unset to specify later.
	light : string;

	// The name of the shader variable group for the shadow transform.
	transformGroupDesc : string (required);

	// The name of the transform group when set on the view's global variables. This may be unset
	// when when only set as an instance variable
	transformGroupName : string;

	// The maximum number of cascades. When using a directional light, this must be set to a value
	// in the range [1, 4].
	maxCascades : uint;

	// The maximum distance for the first split for cascaded shadows.
	maxFirstSplitDistance : float;

	// Exponential factor for cascaded shadows in the range [0, 1], where 0 uses linear distances
	// between the splits and 1 is fully exponential.
	cascadeExpFactor : float;

	// The min depth ranges for each cascade, or the minimum distance between the near and far
	// planes for the shadow map. Each element corresponds to a cascade. Point and spot shadows only
	// use the first value.
	minDepthRanges : [float];

	// The distance to start fading out shadows.
	fadeStartDistance : float;

	// The maximum to display shadows.
	maxDistance : float;
}

// Struct defining a shadow manager for a scene.
table SceneShadowManager
{
	// The shadows within the shadow manager.
	shadows : [SceneLightShadows] (required);
}

root_type SceneShadowManager;
