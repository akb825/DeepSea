// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENESHADOWINSTANCEDATA_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_SCENESHADOWINSTANCEDATA_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

namespace DeepSeaSceneLighting {

struct SceneShadowInstanceData;
struct SceneShadowInstanceDataBuilder;

struct SceneShadowInstanceData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SceneShadowInstanceDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHADOWMANAGER = 4,
    VT_SHADOWS = 6,
    VT_TRANSFORMGROUPNAME = 8
  };
  const flatbuffers::String *shadowManager() const {
    return GetPointer<const flatbuffers::String *>(VT_SHADOWMANAGER);
  }
  const flatbuffers::String *shadows() const {
    return GetPointer<const flatbuffers::String *>(VT_SHADOWS);
  }
  const flatbuffers::String *transformGroupName() const {
    return GetPointer<const flatbuffers::String *>(VT_TRANSFORMGROUPNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SHADOWMANAGER) &&
           verifier.VerifyString(shadowManager()) &&
           VerifyOffsetRequired(verifier, VT_SHADOWS) &&
           verifier.VerifyString(shadows()) &&
           VerifyOffsetRequired(verifier, VT_TRANSFORMGROUPNAME) &&
           verifier.VerifyString(transformGroupName()) &&
           verifier.EndTable();
  }
};

struct SceneShadowInstanceDataBuilder {
  typedef SceneShadowInstanceData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shadowManager(flatbuffers::Offset<flatbuffers::String> shadowManager) {
    fbb_.AddOffset(SceneShadowInstanceData::VT_SHADOWMANAGER, shadowManager);
  }
  void add_shadows(flatbuffers::Offset<flatbuffers::String> shadows) {
    fbb_.AddOffset(SceneShadowInstanceData::VT_SHADOWS, shadows);
  }
  void add_transformGroupName(flatbuffers::Offset<flatbuffers::String> transformGroupName) {
    fbb_.AddOffset(SceneShadowInstanceData::VT_TRANSFORMGROUPNAME, transformGroupName);
  }
  explicit SceneShadowInstanceDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SceneShadowInstanceData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SceneShadowInstanceData>(end);
    fbb_.Required(o, SceneShadowInstanceData::VT_SHADOWMANAGER);
    fbb_.Required(o, SceneShadowInstanceData::VT_SHADOWS);
    fbb_.Required(o, SceneShadowInstanceData::VT_TRANSFORMGROUPNAME);
    return o;
  }
};

inline flatbuffers::Offset<SceneShadowInstanceData> CreateSceneShadowInstanceData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> shadowManager = 0,
    flatbuffers::Offset<flatbuffers::String> shadows = 0,
    flatbuffers::Offset<flatbuffers::String> transformGroupName = 0) {
  SceneShadowInstanceDataBuilder builder_(_fbb);
  builder_.add_transformGroupName(transformGroupName);
  builder_.add_shadows(shadows);
  builder_.add_shadowManager(shadowManager);
  return builder_.Finish();
}

inline flatbuffers::Offset<SceneShadowInstanceData> CreateSceneShadowInstanceDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *shadowManager = nullptr,
    const char *shadows = nullptr,
    const char *transformGroupName = nullptr) {
  auto shadowManager__ = shadowManager ? _fbb.CreateString(shadowManager) : 0;
  auto shadows__ = shadows ? _fbb.CreateString(shadows) : 0;
  auto transformGroupName__ = transformGroupName ? _fbb.CreateString(transformGroupName) : 0;
  return DeepSeaSceneLighting::CreateSceneShadowInstanceData(
      _fbb,
      shadowManager__,
      shadows__,
      transformGroupName__);
}

inline const DeepSeaSceneLighting::SceneShadowInstanceData *GetSceneShadowInstanceData(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaSceneLighting::SceneShadowInstanceData>(buf);
}

inline const DeepSeaSceneLighting::SceneShadowInstanceData *GetSizePrefixedSceneShadowInstanceData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaSceneLighting::SceneShadowInstanceData>(buf);
}

inline bool VerifySceneShadowInstanceDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneLighting::SceneShadowInstanceData>(nullptr);
}

inline bool VerifySizePrefixedSceneShadowInstanceDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneLighting::SceneShadowInstanceData>(nullptr);
}

inline void FinishSceneShadowInstanceDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::SceneShadowInstanceData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneShadowInstanceDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::SceneShadowInstanceData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_SCENESHADOWINSTANCEDATA_DEEPSEASCENELIGHTING_H_
