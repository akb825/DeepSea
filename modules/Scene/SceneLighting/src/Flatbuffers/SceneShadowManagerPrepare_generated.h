// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENESHADOWMANAGERPREPARE_DEEPSEASCENELIGHTING_H_
#define FLATBUFFERS_GENERATED_SCENESHADOWMANAGERPREPARE_DEEPSEASCENELIGHTING_H_

#include "flatbuffers/flatbuffers.h"

namespace DeepSeaSceneLighting {

struct SceneShadowManagerPrepare;
struct SceneShadowManagerPrepareBuilder;

struct SceneShadowManagerPrepare FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SceneShadowManagerPrepareBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHADOWMANAGER = 4
  };
  const flatbuffers::String *shadowManager() const {
    return GetPointer<const flatbuffers::String *>(VT_SHADOWMANAGER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SHADOWMANAGER) &&
           verifier.VerifyString(shadowManager()) &&
           verifier.EndTable();
  }
};

struct SceneShadowManagerPrepareBuilder {
  typedef SceneShadowManagerPrepare Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shadowManager(flatbuffers::Offset<flatbuffers::String> shadowManager) {
    fbb_.AddOffset(SceneShadowManagerPrepare::VT_SHADOWMANAGER, shadowManager);
  }
  explicit SceneShadowManagerPrepareBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SceneShadowManagerPrepare> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SceneShadowManagerPrepare>(end);
    fbb_.Required(o, SceneShadowManagerPrepare::VT_SHADOWMANAGER);
    return o;
  }
};

inline flatbuffers::Offset<SceneShadowManagerPrepare> CreateSceneShadowManagerPrepare(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> shadowManager = 0) {
  SceneShadowManagerPrepareBuilder builder_(_fbb);
  builder_.add_shadowManager(shadowManager);
  return builder_.Finish();
}

inline flatbuffers::Offset<SceneShadowManagerPrepare> CreateSceneShadowManagerPrepareDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *shadowManager = nullptr) {
  auto shadowManager__ = shadowManager ? _fbb.CreateString(shadowManager) : 0;
  return DeepSeaSceneLighting::CreateSceneShadowManagerPrepare(
      _fbb,
      shadowManager__);
}

inline const DeepSeaSceneLighting::SceneShadowManagerPrepare *GetSceneShadowManagerPrepare(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaSceneLighting::SceneShadowManagerPrepare>(buf);
}

inline const DeepSeaSceneLighting::SceneShadowManagerPrepare *GetSizePrefixedSceneShadowManagerPrepare(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaSceneLighting::SceneShadowManagerPrepare>(buf);
}

inline bool VerifySceneShadowManagerPrepareBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneLighting::SceneShadowManagerPrepare>(nullptr);
}

inline bool VerifySizePrefixedSceneShadowManagerPrepareBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneLighting::SceneShadowManagerPrepare>(nullptr);
}

inline void FinishSceneShadowManagerPrepareBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::SceneShadowManagerPrepare> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneShadowManagerPrepareBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneLighting::SceneShadowManagerPrepare> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneLighting

#endif  // FLATBUFFERS_GENERATED_SCENESHADOWMANAGERPREPARE_DEEPSEASCENELIGHTING_H_
