/*
 * Copyright 2019-2021 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

/**
 * @file
 * @brief Uniforms for view transform matrices.
 */

uniform ViewTransformData
{
	/**
	 * @brief The view matrix.
	 */
	mat4 view;

	/**
	 * @brief The camera matrix, or inverse of the view matrix.
	 */
	mat4 camera;

	/**
	 * @brief The projection matrix.
	 */
	mat4 projection;

	/**
	 * @brief The view projection matrix.
	 */
	mat4 viewProjection;

	/**
	 * @brief The inverse of the projection matrix.
	 */
	mat4 projectionInv;

	/**
	 * @brief The rotation of the screen to apply for client rotations.
	 *
	 * This is a mat22 packed into a vec4 to avoid extra padding.
	 */
	vec4 screenRotation;

	/**
	 * @brief The size of the screen in pixels.
	 */
	ivec2 screenSize;
} dsViewTransform;

/**
 * @brief Rotates the screen position.
 *
 * This handles the rotation for render surfaces with client rotations enabled.
 *
 * @param pos The xy position of the screen in normalized [-1, 1] coordinates.
 * @return The rotated position.
 */
vec2 dsRotateScreenPosition(vec2 pos)
{
	return mat2(INSTANCE(dsViewTransform).screenRotation.xy,
		INSTANCE(dsViewTransform).screenRotation.zw)*pos;
}

/**
 * @brief Gets the screen clip position for the current pixel.
 * @return The screen clip position.
 */
[[fragment]]
vec2 dsGetScreenClipPosition()
{
	vec2 screenPos = gl_FragCoord.xy/vec2(INSTANCE(dsViewTransform).screenSize);
	screenPos = screenPos*vec2(2.0) - vec2(1.0);
	return vec2(screenPos.x, -screenPos.y);
}

/**
 * @brief Gets the view position from the clip position.
 * @param clipPos The clip position in the range [-1, 1] for XY and [0, 1] for Z.
 */
vec3 dsGetViewPositionFromClip(vec3 clipPos)
{
	if (DS_CLIP_HALF_DEPTH == 0)
		clipPos.z = clipPos.z*2.0 - 1.0;
	clipPos.y = -clipPos.y;
	vec4 unprojectedPos = INSTANCE(dsViewTransform).projectionInv*vec4(clipPos, 1.0);
	return unprojectedPos.xyz/unprojectedPos.w;
}

/**
 * @brief Gets the view position from the screen position.
 * @param depth The depth value.
 */
[[fragment]]
vec3 dsGetViewPositionFromScreen(float depth)
{
	return dsGetViewPositionFromClip(vec3(dsGetScreenClipPosition(), depth));
}
