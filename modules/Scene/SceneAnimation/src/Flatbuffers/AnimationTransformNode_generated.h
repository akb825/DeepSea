// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANIMATIONTRANSFORMNODE_DEEPSEASCENEANIMATION_H_
#define FLATBUFFERS_GENERATED_ANIMATIONTRANSFORMNODE_DEEPSEASCENEANIMATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "DeepSea/Scene/Flatbuffers/SceneCommon_generated.h"

namespace DeepSeaSceneAnimation {

struct AnimationTransformNode;
struct AnimationTransformNodeBuilder;

struct AnimationTransformNode FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AnimationTransformNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANIMATIONNODE = 4,
    VT_CHILDREN = 6,
    VT_ITEMLISTS = 8
  };
  const ::flatbuffers::String *animationNode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ANIMATIONNODE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaScene::ObjectData>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaScene::ObjectData>> *>(VT_CHILDREN);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *itemLists() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ITEMLISTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ANIMATIONNODE) &&
           verifier.VerifyString(animationNode()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           VerifyOffset(verifier, VT_ITEMLISTS) &&
           verifier.VerifyVector(itemLists()) &&
           verifier.VerifyVectorOfStrings(itemLists()) &&
           verifier.EndTable();
  }
};

struct AnimationTransformNodeBuilder {
  typedef AnimationTransformNode Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_animationNode(::flatbuffers::Offset<::flatbuffers::String> animationNode) {
    fbb_.AddOffset(AnimationTransformNode::VT_ANIMATIONNODE, animationNode);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaScene::ObjectData>>> children) {
    fbb_.AddOffset(AnimationTransformNode::VT_CHILDREN, children);
  }
  void add_itemLists(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> itemLists) {
    fbb_.AddOffset(AnimationTransformNode::VT_ITEMLISTS, itemLists);
  }
  explicit AnimationTransformNodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AnimationTransformNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AnimationTransformNode>(end);
    fbb_.Required(o, AnimationTransformNode::VT_ANIMATIONNODE);
    return o;
  }
};

inline ::flatbuffers::Offset<AnimationTransformNode> CreateAnimationTransformNode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> animationNode = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaScene::ObjectData>>> children = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> itemLists = 0) {
  AnimationTransformNodeBuilder builder_(_fbb);
  builder_.add_itemLists(itemLists);
  builder_.add_children(children);
  builder_.add_animationNode(animationNode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AnimationTransformNode> CreateAnimationTransformNodeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *animationNode = nullptr,
    const std::vector<::flatbuffers::Offset<DeepSeaScene::ObjectData>> *children = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *itemLists = nullptr) {
  auto animationNode__ = animationNode ? _fbb.CreateString(animationNode) : 0;
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<DeepSeaScene::ObjectData>>(*children) : 0;
  auto itemLists__ = itemLists ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*itemLists) : 0;
  return DeepSeaSceneAnimation::CreateAnimationTransformNode(
      _fbb,
      animationNode__,
      children__,
      itemLists__);
}

inline const DeepSeaSceneAnimation::AnimationTransformNode *GetAnimationTransformNode(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaSceneAnimation::AnimationTransformNode>(buf);
}

inline const DeepSeaSceneAnimation::AnimationTransformNode *GetSizePrefixedAnimationTransformNode(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaSceneAnimation::AnimationTransformNode>(buf);
}

inline bool VerifyAnimationTransformNodeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneAnimation::AnimationTransformNode>(nullptr);
}

inline bool VerifySizePrefixedAnimationTransformNodeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneAnimation::AnimationTransformNode>(nullptr);
}

inline void FinishAnimationTransformNodeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaSceneAnimation::AnimationTransformNode> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAnimationTransformNodeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaSceneAnimation::AnimationTransformNode> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneAnimation

#endif  // FLATBUFFERS_GENERATED_ANIMATIONTRANSFORMNODE_DEEPSEASCENEANIMATION_H_
