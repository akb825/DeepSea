// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENERIGIDBODYNODE_DEEPSEASCENEPHYSICS_H_
#define FLATBUFFERS_GENERATED_SCENERIGIDBODYNODE_DEEPSEASCENEPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace DeepSeaScenePhysics {

struct RigidBodyNode;
struct RigidBodyNodeBuilder;

struct RigidBodyNode FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RigidBodyNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RIGIDBODY = 4,
    VT_ITEMLISTS = 6
  };
  const ::flatbuffers::String *rigidBody() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RIGIDBODY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *itemLists() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ITEMLISTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_RIGIDBODY) &&
           verifier.VerifyString(rigidBody()) &&
           VerifyOffset(verifier, VT_ITEMLISTS) &&
           verifier.VerifyVector(itemLists()) &&
           verifier.VerifyVectorOfStrings(itemLists()) &&
           verifier.EndTable();
  }
};

struct RigidBodyNodeBuilder {
  typedef RigidBodyNode Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_rigidBody(::flatbuffers::Offset<::flatbuffers::String> rigidBody) {
    fbb_.AddOffset(RigidBodyNode::VT_RIGIDBODY, rigidBody);
  }
  void add_itemLists(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> itemLists) {
    fbb_.AddOffset(RigidBodyNode::VT_ITEMLISTS, itemLists);
  }
  explicit RigidBodyNodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RigidBodyNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RigidBodyNode>(end);
    fbb_.Required(o, RigidBodyNode::VT_RIGIDBODY);
    return o;
  }
};

inline ::flatbuffers::Offset<RigidBodyNode> CreateRigidBodyNode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> rigidBody = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> itemLists = 0) {
  RigidBodyNodeBuilder builder_(_fbb);
  builder_.add_itemLists(itemLists);
  builder_.add_rigidBody(rigidBody);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RigidBodyNode> CreateRigidBodyNodeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *rigidBody = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *itemLists = nullptr) {
  auto rigidBody__ = rigidBody ? _fbb.CreateString(rigidBody) : 0;
  auto itemLists__ = itemLists ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*itemLists) : 0;
  return DeepSeaScenePhysics::CreateRigidBodyNode(
      _fbb,
      rigidBody__,
      itemLists__);
}

inline const DeepSeaScenePhysics::RigidBodyNode *GetRigidBodyNode(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaScenePhysics::RigidBodyNode>(buf);
}

inline const DeepSeaScenePhysics::RigidBodyNode *GetSizePrefixedRigidBodyNode(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaScenePhysics::RigidBodyNode>(buf);
}

inline bool VerifyRigidBodyNodeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaScenePhysics::RigidBodyNode>(nullptr);
}

inline bool VerifySizePrefixedRigidBodyNodeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaScenePhysics::RigidBodyNode>(nullptr);
}

inline void FinishRigidBodyNodeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaScenePhysics::RigidBodyNode> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRigidBodyNodeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaScenePhysics::RigidBodyNode> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaScenePhysics

#endif  // FLATBUFFERS_GENERATED_SCENERIGIDBODYNODE_DEEPSEASCENEPHYSICS_H_
