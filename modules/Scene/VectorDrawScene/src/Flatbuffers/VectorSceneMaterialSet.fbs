/*
 * Copyright 2020 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include "DeepSea/Scene/Flatbuffers/SceneCommon.fbs";

namespace DeepSeaVectorDrawScene;

// Struct describing a color.
table Color
{
	red : uint8;
	green : uint8;
	blue : uint8;
	alpha : uint8;
}

// Enum for what to do beyond the edge of a gradient.
enum GradientEdge : uint8
{
	Clamp,  // Clamp to the edge.
	Repeat, // Repeat the gradient beyond the edge.
	Mirror  // Mirror the gradient beyond the edge.
}

// Enum for what coordinate space to use.
enum MaterialSpace : uint8
{
	Local, // Local coordinate space of the object.
	Bounds // Space determined by the bounding box of the element.
}

// Struct describing a stop within a gradient.
table GradientStop
{
	// The position of the float.
	position : float;

	// The color of the stop.
	color : Color (required);
}

// Struct describing a linear gradient.
table LinearGradient
{
	// The start position of the gradient.
	start : DeepSeaScene.Vector2f;

	// The end position of the gradient.
	end : DeepSeaScene.Vector2f;

	// How to handle the gradient along the edge.
	edge : GradientEdge;

	// The coordinate space for the gradient.
	coordinateSpace : MaterialSpace;

	// The transform for the gradient.
	transform : DeepSeaScene.Matrix33f;

	// The stops for the gradient.
	stops : [GradientStop] (required);
}

// Struct describing a radial gradient.
table RadialGradient
{
	// The center position of the gradient.
	center : DeepSeaScene.Vector2f;

	// The radius of the gradient.
	radius : float;

	// The focus position of the gradient.
	focus : DeepSeaScene.Vector2f;

	// The radius of the focus.
	focusRadius : float;

	// How to handle the gradient along the edge.
	edge : GradientEdge;

	// The coordinate space for the gradient.
	coordinateSpace : MaterialSpace;

	// The transform for the gradient.
	transform : DeepSeaScene.Matrix33f;

	// The stops for the gradient.
	stops : [GradientStop] (required);
}

// Union for a material value.
union MaterialValue
{
	Color,
	LinearGradient,
	RadialGradient
}

// Material within the material set.
table Material
{
	// The name of the material.
	name : string (required);

	// The value for the material.
	value : MaterialValue (required);
}

// Struct describing a reference to a vector material set.
table VectorMaterialSet
{
	// The materials within the set.
	materials : [Material] (required);

	// Whether or not to convert from sRGB colors to linear colors.
	srgb : bool;
}

root_type VectorMaterialSet;
