// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENERESOURCES_DEEPSEASCENE_H_
#define FLATBUFFERS_GENERATED_SCENERESOURCES_DEEPSEASCENE_H_

#include "flatbuffers/flatbuffers.h"

#include "DeepSea/Scene/Flatbuffers/SceneCommon_generated.h"

namespace DeepSeaScene {

struct Buffer;

struct TextureInfo;

struct Texture;

struct VariableElement;

struct ShaderVariableGroupDesc;

struct VariableData;

struct MaterialElement;

struct MaterialDesc;

struct ShaderData;

struct ShaderModule;

struct Shader;

struct VertexAttribute;

struct VertexFormat;

struct VertexBuffer;

struct IndexBuffer;

struct DrawGeometry;

struct SceneResources;

enum class MaterialBinding : uint8_t {
  Material = 0,
  Global = 1,
  Instance = 2,
  MIN = Material,
  MAX = Instance
};

inline const MaterialBinding (&EnumValuesMaterialBinding())[3] {
  static const MaterialBinding values[] = {
    MaterialBinding::Material,
    MaterialBinding::Global,
    MaterialBinding::Instance
  };
  return values;
}

inline const char * const *EnumNamesMaterialBinding() {
  static const char * const names[] = {
    "Material",
    "Global",
    "Instance",
    nullptr
  };
  return names;
}

inline const char *EnumNameMaterialBinding(MaterialBinding e) {
  if (e < MaterialBinding::Material || e > MaterialBinding::Instance) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMaterialBinding()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) VertexAttribute FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t format_;
  uint8_t decoration_;

 public:
  VertexAttribute() {
    memset(static_cast<void *>(this), 0, sizeof(VertexAttribute));
  }
  VertexAttribute(VertexElementFormat _format, FormatDecoration _decoration)
      : format_(flatbuffers::EndianScalar(static_cast<uint8_t>(_format))),
        decoration_(flatbuffers::EndianScalar(static_cast<uint8_t>(_decoration))) {
  }
  VertexElementFormat format() const {
    return static_cast<VertexElementFormat>(flatbuffers::EndianScalar(format_));
  }
  FormatDecoration decoration() const {
    return static_cast<FormatDecoration>(flatbuffers::EndianScalar(decoration_));
  }
};
FLATBUFFERS_STRUCT_END(VertexAttribute, 2);

struct Buffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_USAGE = 6,
    VT_MEMORYHINTS = 8,
    VT_SIZE = 10,
    VT_DATA = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t usage() const {
    return GetField<uint32_t>(VT_USAGE, 0);
  }
  uint32_t memoryHints() const {
    return GetField<uint32_t>(VT_MEMORYHINTS, 0);
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_USAGE) &&
           VerifyField<uint32_t>(verifier, VT_MEMORYHINTS) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct BufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Buffer::VT_NAME, name);
  }
  void add_usage(uint32_t usage) {
    fbb_.AddElement<uint32_t>(Buffer::VT_USAGE, usage, 0);
  }
  void add_memoryHints(uint32_t memoryHints) {
    fbb_.AddElement<uint32_t>(Buffer::VT_MEMORYHINTS, memoryHints, 0);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Buffer::VT_SIZE, size, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Buffer::VT_DATA, data);
  }
  explicit BufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BufferBuilder &operator=(const BufferBuilder &);
  flatbuffers::Offset<Buffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Buffer>(end);
    fbb_.Required(o, Buffer::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Buffer> CreateBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t usage = 0,
    uint32_t memoryHints = 0,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  BufferBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_size(size);
  builder_.add_memoryHints(memoryHints);
  builder_.add_usage(usage);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Buffer> CreateBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t usage = 0,
    uint32_t memoryHints = 0,
    uint32_t size = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return DeepSeaScene::CreateBuffer(
      _fbb,
      name__,
      usage,
      memoryHints,
      size,
      data__);
}

struct TextureInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORMAT = 4,
    VT_DECORATION = 6,
    VT_DIMENSION = 8,
    VT_WIDTH = 10,
    VT_HEIGHT = 12,
    VT_DEPTH = 14,
    VT_MIPLEVELS = 16
  };
  TextureFormat format() const {
    return static_cast<TextureFormat>(GetField<uint8_t>(VT_FORMAT, 0));
  }
  FormatDecoration decoration() const {
    return static_cast<FormatDecoration>(GetField<uint8_t>(VT_DECORATION, 0));
  }
  TextureDim dimension() const {
    return static_cast<TextureDim>(GetField<uint8_t>(VT_DIMENSION, 0));
  }
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  uint32_t depth() const {
    return GetField<uint32_t>(VT_DEPTH, 0);
  }
  uint8_t mipLevels() const {
    return GetField<uint8_t>(VT_MIPLEVELS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FORMAT) &&
           VerifyField<uint8_t>(verifier, VT_DECORATION) &&
           VerifyField<uint8_t>(verifier, VT_DIMENSION) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyField<uint32_t>(verifier, VT_DEPTH) &&
           VerifyField<uint8_t>(verifier, VT_MIPLEVELS) &&
           verifier.EndTable();
  }
};

struct TextureInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_format(TextureFormat format) {
    fbb_.AddElement<uint8_t>(TextureInfo::VT_FORMAT, static_cast<uint8_t>(format), 0);
  }
  void add_decoration(FormatDecoration decoration) {
    fbb_.AddElement<uint8_t>(TextureInfo::VT_DECORATION, static_cast<uint8_t>(decoration), 0);
  }
  void add_dimension(TextureDim dimension) {
    fbb_.AddElement<uint8_t>(TextureInfo::VT_DIMENSION, static_cast<uint8_t>(dimension), 0);
  }
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(TextureInfo::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(TextureInfo::VT_HEIGHT, height, 0);
  }
  void add_depth(uint32_t depth) {
    fbb_.AddElement<uint32_t>(TextureInfo::VT_DEPTH, depth, 0);
  }
  void add_mipLevels(uint8_t mipLevels) {
    fbb_.AddElement<uint8_t>(TextureInfo::VT_MIPLEVELS, mipLevels, 0);
  }
  explicit TextureInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextureInfoBuilder &operator=(const TextureInfoBuilder &);
  flatbuffers::Offset<TextureInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TextureInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<TextureInfo> CreateTextureInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    TextureFormat format = TextureFormat::R4G4,
    FormatDecoration decoration = FormatDecoration::UNorm,
    TextureDim dimension = TextureDim::Dim1D,
    uint32_t width = 0,
    uint32_t height = 0,
    uint32_t depth = 0,
    uint8_t mipLevels = 0) {
  TextureInfoBuilder builder_(_fbb);
  builder_.add_depth(depth);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_mipLevels(mipLevels);
  builder_.add_dimension(dimension);
  builder_.add_decoration(decoration);
  builder_.add_format(format);
  return builder_.Finish();
}

struct Texture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_USAGE = 6,
    VT_MEMORYHINTS = 8,
    VT_PATH = 10,
    VT_TEXTUREINFO = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t usage() const {
    return GetField<uint32_t>(VT_USAGE, 0);
  }
  uint32_t memoryHints() const {
    return GetField<uint32_t>(VT_MEMORYHINTS, 0);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  const TextureInfo *textureInfo() const {
    return GetPointer<const TextureInfo *>(VT_TEXTUREINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_USAGE) &&
           VerifyField<uint32_t>(verifier, VT_MEMORYHINTS) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyOffset(verifier, VT_TEXTUREINFO) &&
           verifier.VerifyTable(textureInfo()) &&
           verifier.EndTable();
  }
};

struct TextureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Texture::VT_NAME, name);
  }
  void add_usage(uint32_t usage) {
    fbb_.AddElement<uint32_t>(Texture::VT_USAGE, usage, 0);
  }
  void add_memoryHints(uint32_t memoryHints) {
    fbb_.AddElement<uint32_t>(Texture::VT_MEMORYHINTS, memoryHints, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Texture::VT_PATH, path);
  }
  void add_textureInfo(flatbuffers::Offset<TextureInfo> textureInfo) {
    fbb_.AddOffset(Texture::VT_TEXTUREINFO, textureInfo);
  }
  explicit TextureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextureBuilder &operator=(const TextureBuilder &);
  flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Texture>(end);
    fbb_.Required(o, Texture::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Texture> CreateTexture(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t usage = 0,
    uint32_t memoryHints = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    flatbuffers::Offset<TextureInfo> textureInfo = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_textureInfo(textureInfo);
  builder_.add_path(path);
  builder_.add_memoryHints(memoryHints);
  builder_.add_usage(usage);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Texture> CreateTextureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t usage = 0,
    uint32_t memoryHints = 0,
    const char *path = nullptr,
    flatbuffers::Offset<TextureInfo> textureInfo = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return DeepSeaScene::CreateTexture(
      _fbb,
      name__,
      usage,
      memoryHints,
      path__,
      textureInfo);
}

struct VariableElement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_COUNT = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  MaterialType type() const {
    return static_cast<MaterialType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint32_t count() const {
    return GetField<uint32_t>(VT_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_COUNT) &&
           verifier.EndTable();
  }
};

struct VariableElementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(VariableElement::VT_NAME, name);
  }
  void add_type(MaterialType type) {
    fbb_.AddElement<uint8_t>(VariableElement::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_count(uint32_t count) {
    fbb_.AddElement<uint32_t>(VariableElement::VT_COUNT, count, 0);
  }
  explicit VariableElementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VariableElementBuilder &operator=(const VariableElementBuilder &);
  flatbuffers::Offset<VariableElement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VariableElement>(end);
    fbb_.Required(o, VariableElement::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<VariableElement> CreateVariableElement(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    MaterialType type = MaterialType::Float,
    uint32_t count = 0) {
  VariableElementBuilder builder_(_fbb);
  builder_.add_count(count);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<VariableElement> CreateVariableElementDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    MaterialType type = MaterialType::Float,
    uint32_t count = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return DeepSeaScene::CreateVariableElement(
      _fbb,
      name__,
      type,
      count);
}

struct ShaderVariableGroupDesc FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ELEMENTS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<VariableElement>> *elements() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VariableElement>> *>(VT_ELEMENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_ELEMENTS) &&
           verifier.VerifyVector(elements()) &&
           verifier.VerifyVectorOfTables(elements()) &&
           verifier.EndTable();
  }
};

struct ShaderVariableGroupDescBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ShaderVariableGroupDesc::VT_NAME, name);
  }
  void add_elements(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VariableElement>>> elements) {
    fbb_.AddOffset(ShaderVariableGroupDesc::VT_ELEMENTS, elements);
  }
  explicit ShaderVariableGroupDescBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderVariableGroupDescBuilder &operator=(const ShaderVariableGroupDescBuilder &);
  flatbuffers::Offset<ShaderVariableGroupDesc> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderVariableGroupDesc>(end);
    fbb_.Required(o, ShaderVariableGroupDesc::VT_NAME);
    fbb_.Required(o, ShaderVariableGroupDesc::VT_ELEMENTS);
    return o;
  }
};

inline flatbuffers::Offset<ShaderVariableGroupDesc> CreateShaderVariableGroupDesc(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VariableElement>>> elements = 0) {
  ShaderVariableGroupDescBuilder builder_(_fbb);
  builder_.add_elements(elements);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShaderVariableGroupDesc> CreateShaderVariableGroupDescDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<VariableElement>> *elements = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto elements__ = elements ? _fbb.CreateVector<flatbuffers::Offset<VariableElement>>(*elements) : 0;
  return DeepSeaScene::CreateShaderVariableGroupDesc(
      _fbb,
      name__,
      elements__);
}

struct VariableData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_FIRST = 8,
    VT_COUNT = 10,
    VT_DATA = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  MaterialType type() const {
    return static_cast<MaterialType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint32_t first() const {
    return GetField<uint32_t>(VT_FIRST, 0);
  }
  uint32_t count() const {
    return GetField<uint32_t>(VT_COUNT, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_FIRST) &&
           VerifyField<uint32_t>(verifier, VT_COUNT) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct VariableDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(VariableData::VT_NAME, name);
  }
  void add_type(MaterialType type) {
    fbb_.AddElement<uint8_t>(VariableData::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_first(uint32_t first) {
    fbb_.AddElement<uint32_t>(VariableData::VT_FIRST, first, 0);
  }
  void add_count(uint32_t count) {
    fbb_.AddElement<uint32_t>(VariableData::VT_COUNT, count, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(VariableData::VT_DATA, data);
  }
  explicit VariableDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VariableDataBuilder &operator=(const VariableDataBuilder &);
  flatbuffers::Offset<VariableData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VariableData>(end);
    fbb_.Required(o, VariableData::VT_NAME);
    fbb_.Required(o, VariableData::VT_DATA);
    return o;
  }
};

inline flatbuffers::Offset<VariableData> CreateVariableData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    MaterialType type = MaterialType::Float,
    uint32_t first = 0,
    uint32_t count = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  VariableDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_count(count);
  builder_.add_first(first);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<VariableData> CreateVariableDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    MaterialType type = MaterialType::Float,
    uint32_t first = 0,
    uint32_t count = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return DeepSeaScene::CreateVariableData(
      _fbb,
      name__,
      type,
      first,
      count,
      data__);
}

struct MaterialElement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_COUNT = 8,
    VT_BINDING = 10,
    VT_SHADERVARIABLEGROUPDESC = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  MaterialType type() const {
    return static_cast<MaterialType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint32_t count() const {
    return GetField<uint32_t>(VT_COUNT, 0);
  }
  MaterialBinding binding() const {
    return static_cast<MaterialBinding>(GetField<uint8_t>(VT_BINDING, 0));
  }
  const flatbuffers::String *shaderVariableGroupDesc() const {
    return GetPointer<const flatbuffers::String *>(VT_SHADERVARIABLEGROUPDESC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_COUNT) &&
           VerifyField<uint8_t>(verifier, VT_BINDING) &&
           VerifyOffset(verifier, VT_SHADERVARIABLEGROUPDESC) &&
           verifier.VerifyString(shaderVariableGroupDesc()) &&
           verifier.EndTable();
  }
};

struct MaterialElementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MaterialElement::VT_NAME, name);
  }
  void add_type(MaterialType type) {
    fbb_.AddElement<uint8_t>(MaterialElement::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_count(uint32_t count) {
    fbb_.AddElement<uint32_t>(MaterialElement::VT_COUNT, count, 0);
  }
  void add_binding(MaterialBinding binding) {
    fbb_.AddElement<uint8_t>(MaterialElement::VT_BINDING, static_cast<uint8_t>(binding), 0);
  }
  void add_shaderVariableGroupDesc(flatbuffers::Offset<flatbuffers::String> shaderVariableGroupDesc) {
    fbb_.AddOffset(MaterialElement::VT_SHADERVARIABLEGROUPDESC, shaderVariableGroupDesc);
  }
  explicit MaterialElementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialElementBuilder &operator=(const MaterialElementBuilder &);
  flatbuffers::Offset<MaterialElement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialElement>(end);
    fbb_.Required(o, MaterialElement::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<MaterialElement> CreateMaterialElement(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    MaterialType type = MaterialType::Float,
    uint32_t count = 0,
    MaterialBinding binding = MaterialBinding::Material,
    flatbuffers::Offset<flatbuffers::String> shaderVariableGroupDesc = 0) {
  MaterialElementBuilder builder_(_fbb);
  builder_.add_shaderVariableGroupDesc(shaderVariableGroupDesc);
  builder_.add_count(count);
  builder_.add_name(name);
  builder_.add_binding(binding);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<MaterialElement> CreateMaterialElementDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    MaterialType type = MaterialType::Float,
    uint32_t count = 0,
    MaterialBinding binding = MaterialBinding::Material,
    const char *shaderVariableGroupDesc = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto shaderVariableGroupDesc__ = shaderVariableGroupDesc ? _fbb.CreateString(shaderVariableGroupDesc) : 0;
  return DeepSeaScene::CreateMaterialElement(
      _fbb,
      name__,
      type,
      count,
      binding,
      shaderVariableGroupDesc__);
}

struct MaterialDesc FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ELEMENTS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MaterialElement>> *elements() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MaterialElement>> *>(VT_ELEMENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_ELEMENTS) &&
           verifier.VerifyVector(elements()) &&
           verifier.VerifyVectorOfTables(elements()) &&
           verifier.EndTable();
  }
};

struct MaterialDescBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MaterialDesc::VT_NAME, name);
  }
  void add_elements(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MaterialElement>>> elements) {
    fbb_.AddOffset(MaterialDesc::VT_ELEMENTS, elements);
  }
  explicit MaterialDescBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MaterialDescBuilder &operator=(const MaterialDescBuilder &);
  flatbuffers::Offset<MaterialDesc> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialDesc>(end);
    fbb_.Required(o, MaterialDesc::VT_NAME);
    fbb_.Required(o, MaterialDesc::VT_ELEMENTS);
    return o;
  }
};

inline flatbuffers::Offset<MaterialDesc> CreateMaterialDesc(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MaterialElement>>> elements = 0) {
  MaterialDescBuilder builder_(_fbb);
  builder_.add_elements(elements);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<MaterialDesc> CreateMaterialDescDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<MaterialElement>> *elements = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto elements__ = elements ? _fbb.CreateVector<flatbuffers::Offset<MaterialElement>>(*elements) : 0;
  return DeepSeaScene::CreateMaterialDesc(
      _fbb,
      name__,
      elements__);
}

struct ShaderData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DESCRIPTION = 6,
    VT_DATA = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<VariableData>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VariableData>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct ShaderDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ShaderData::VT_NAME, name);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(ShaderData::VT_DESCRIPTION, description);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VariableData>>> data) {
    fbb_.AddOffset(ShaderData::VT_DATA, data);
  }
  explicit ShaderDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderDataBuilder &operator=(const ShaderDataBuilder &);
  flatbuffers::Offset<ShaderData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderData>(end);
    fbb_.Required(o, ShaderData::VT_NAME);
    fbb_.Required(o, ShaderData::VT_DESCRIPTION);
    return o;
  }
};

inline flatbuffers::Offset<ShaderData> CreateShaderData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VariableData>>> data = 0) {
  ShaderDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_description(description);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShaderData> CreateShaderDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *description = nullptr,
    const std::vector<flatbuffers::Offset<VariableData>> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<VariableData>>(*data) : 0;
  return DeepSeaScene::CreateShaderData(
      _fbb,
      name__,
      description__,
      data__);
}

struct ShaderModule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PATH = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct ShaderModuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ShaderModule::VT_NAME, name);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(ShaderModule::VT_PATH, path);
  }
  explicit ShaderModuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderModuleBuilder &operator=(const ShaderModuleBuilder &);
  flatbuffers::Offset<ShaderModule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderModule>(end);
    fbb_.Required(o, ShaderModule::VT_NAME);
    fbb_.Required(o, ShaderModule::VT_PATH);
    return o;
  }
};

inline flatbuffers::Offset<ShaderModule> CreateShaderModule(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  ShaderModuleBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ShaderModule> CreateShaderModuleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *path = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return DeepSeaScene::CreateShaderModule(
      _fbb,
      name__,
      path__);
}

struct Shader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SHADERMODULE = 6,
    VT_PIPELINENAME = 8,
    VT_MATERIALDESC = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *shaderModule() const {
    return GetPointer<const flatbuffers::String *>(VT_SHADERMODULE);
  }
  const flatbuffers::String *pipelineName() const {
    return GetPointer<const flatbuffers::String *>(VT_PIPELINENAME);
  }
  const flatbuffers::String *materialDesc() const {
    return GetPointer<const flatbuffers::String *>(VT_MATERIALDESC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_SHADERMODULE) &&
           verifier.VerifyString(shaderModule()) &&
           VerifyOffset(verifier, VT_PIPELINENAME) &&
           verifier.VerifyString(pipelineName()) &&
           VerifyOffsetRequired(verifier, VT_MATERIALDESC) &&
           verifier.VerifyString(materialDesc()) &&
           verifier.EndTable();
  }
};

struct ShaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Shader::VT_NAME, name);
  }
  void add_shaderModule(flatbuffers::Offset<flatbuffers::String> shaderModule) {
    fbb_.AddOffset(Shader::VT_SHADERMODULE, shaderModule);
  }
  void add_pipelineName(flatbuffers::Offset<flatbuffers::String> pipelineName) {
    fbb_.AddOffset(Shader::VT_PIPELINENAME, pipelineName);
  }
  void add_materialDesc(flatbuffers::Offset<flatbuffers::String> materialDesc) {
    fbb_.AddOffset(Shader::VT_MATERIALDESC, materialDesc);
  }
  explicit ShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderBuilder &operator=(const ShaderBuilder &);
  flatbuffers::Offset<Shader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Shader>(end);
    fbb_.Required(o, Shader::VT_NAME);
    fbb_.Required(o, Shader::VT_SHADERMODULE);
    fbb_.Required(o, Shader::VT_MATERIALDESC);
    return o;
  }
};

inline flatbuffers::Offset<Shader> CreateShader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> shaderModule = 0,
    flatbuffers::Offset<flatbuffers::String> pipelineName = 0,
    flatbuffers::Offset<flatbuffers::String> materialDesc = 0) {
  ShaderBuilder builder_(_fbb);
  builder_.add_materialDesc(materialDesc);
  builder_.add_pipelineName(pipelineName);
  builder_.add_shaderModule(shaderModule);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Shader> CreateShaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *shaderModule = nullptr,
    const char *pipelineName = nullptr,
    const char *materialDesc = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto shaderModule__ = shaderModule ? _fbb.CreateString(shaderModule) : 0;
  auto pipelineName__ = pipelineName ? _fbb.CreateString(pipelineName) : 0;
  auto materialDesc__ = materialDesc ? _fbb.CreateString(materialDesc) : 0;
  return DeepSeaScene::CreateShader(
      _fbb,
      name__,
      shaderModule__,
      pipelineName__,
      materialDesc__);
}

struct VertexFormat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTRIBUTES = 4,
    VT_INSTANCED = 6
  };
  const flatbuffers::Vector<const VertexAttribute *> *attributes() const {
    return GetPointer<const flatbuffers::Vector<const VertexAttribute *> *>(VT_ATTRIBUTES);
  }
  bool instanced() const {
    return GetField<uint8_t>(VT_INSTANCED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           VerifyField<uint8_t>(verifier, VT_INSTANCED) &&
           verifier.EndTable();
  }
};

struct VertexFormatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_attributes(flatbuffers::Offset<flatbuffers::Vector<const VertexAttribute *>> attributes) {
    fbb_.AddOffset(VertexFormat::VT_ATTRIBUTES, attributes);
  }
  void add_instanced(bool instanced) {
    fbb_.AddElement<uint8_t>(VertexFormat::VT_INSTANCED, static_cast<uint8_t>(instanced), 0);
  }
  explicit VertexFormatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VertexFormatBuilder &operator=(const VertexFormatBuilder &);
  flatbuffers::Offset<VertexFormat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VertexFormat>(end);
    fbb_.Required(o, VertexFormat::VT_ATTRIBUTES);
    return o;
  }
};

inline flatbuffers::Offset<VertexFormat> CreateVertexFormat(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const VertexAttribute *>> attributes = 0,
    bool instanced = false) {
  VertexFormatBuilder builder_(_fbb);
  builder_.add_attributes(attributes);
  builder_.add_instanced(instanced);
  return builder_.Finish();
}

inline flatbuffers::Offset<VertexFormat> CreateVertexFormatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<VertexAttribute> *attributes = nullptr,
    bool instanced = false) {
  auto attributes__ = attributes ? _fbb.CreateVectorOfStructs<VertexAttribute>(*attributes) : 0;
  return DeepSeaScene::CreateVertexFormat(
      _fbb,
      attributes__,
      instanced);
}

struct VertexBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_OFFSET = 6,
    VT_FORMAT = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t offset() const {
    return GetField<uint32_t>(VT_OFFSET, 0);
  }
  const VertexFormat *format() const {
    return GetPointer<const VertexFormat *>(VT_FORMAT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_OFFSET) &&
           VerifyOffsetRequired(verifier, VT_FORMAT) &&
           verifier.VerifyTable(format()) &&
           verifier.EndTable();
  }
};

struct VertexBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(VertexBuffer::VT_NAME, name);
  }
  void add_offset(uint32_t offset) {
    fbb_.AddElement<uint32_t>(VertexBuffer::VT_OFFSET, offset, 0);
  }
  void add_format(flatbuffers::Offset<VertexFormat> format) {
    fbb_.AddOffset(VertexBuffer::VT_FORMAT, format);
  }
  explicit VertexBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VertexBufferBuilder &operator=(const VertexBufferBuilder &);
  flatbuffers::Offset<VertexBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VertexBuffer>(end);
    fbb_.Required(o, VertexBuffer::VT_NAME);
    fbb_.Required(o, VertexBuffer::VT_FORMAT);
    return o;
  }
};

inline flatbuffers::Offset<VertexBuffer> CreateVertexBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t offset = 0,
    flatbuffers::Offset<VertexFormat> format = 0) {
  VertexBufferBuilder builder_(_fbb);
  builder_.add_format(format);
  builder_.add_offset(offset);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<VertexBuffer> CreateVertexBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t offset = 0,
    flatbuffers::Offset<VertexFormat> format = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return DeepSeaScene::CreateVertexBuffer(
      _fbb,
      name__,
      offset,
      format);
}

struct IndexBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_OFFSET = 6,
    VT_INDEXSIZE = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t offset() const {
    return GetField<uint32_t>(VT_OFFSET, 0);
  }
  uint8_t indexSize() const {
    return GetField<uint8_t>(VT_INDEXSIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_OFFSET) &&
           VerifyField<uint8_t>(verifier, VT_INDEXSIZE) &&
           verifier.EndTable();
  }
};

struct IndexBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(IndexBuffer::VT_NAME, name);
  }
  void add_offset(uint32_t offset) {
    fbb_.AddElement<uint32_t>(IndexBuffer::VT_OFFSET, offset, 0);
  }
  void add_indexSize(uint8_t indexSize) {
    fbb_.AddElement<uint8_t>(IndexBuffer::VT_INDEXSIZE, indexSize, 0);
  }
  explicit IndexBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IndexBufferBuilder &operator=(const IndexBufferBuilder &);
  flatbuffers::Offset<IndexBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IndexBuffer>(end);
    fbb_.Required(o, IndexBuffer::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<IndexBuffer> CreateIndexBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t offset = 0,
    uint8_t indexSize = 0) {
  IndexBufferBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_name(name);
  builder_.add_indexSize(indexSize);
  return builder_.Finish();
}

inline flatbuffers::Offset<IndexBuffer> CreateIndexBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t offset = 0,
    uint8_t indexSize = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return DeepSeaScene::CreateIndexBuffer(
      _fbb,
      name__,
      offset,
      indexSize);
}

struct DrawGeometry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VERTEXBUFFERS = 6,
    VT_INDEXBUFFER = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>> *vertexBuffers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>> *>(VT_VERTEXBUFFERS);
  }
  const IndexBuffer *indexBuffer() const {
    return GetPointer<const IndexBuffer *>(VT_INDEXBUFFER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_VERTEXBUFFERS) &&
           verifier.VerifyVector(vertexBuffers()) &&
           verifier.VerifyVectorOfTables(vertexBuffers()) &&
           VerifyOffset(verifier, VT_INDEXBUFFER) &&
           verifier.VerifyTable(indexBuffer()) &&
           verifier.EndTable();
  }
};

struct DrawGeometryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DrawGeometry::VT_NAME, name);
  }
  void add_vertexBuffers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>>> vertexBuffers) {
    fbb_.AddOffset(DrawGeometry::VT_VERTEXBUFFERS, vertexBuffers);
  }
  void add_indexBuffer(flatbuffers::Offset<IndexBuffer> indexBuffer) {
    fbb_.AddOffset(DrawGeometry::VT_INDEXBUFFER, indexBuffer);
  }
  explicit DrawGeometryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DrawGeometryBuilder &operator=(const DrawGeometryBuilder &);
  flatbuffers::Offset<DrawGeometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DrawGeometry>(end);
    fbb_.Required(o, DrawGeometry::VT_NAME);
    fbb_.Required(o, DrawGeometry::VT_VERTEXBUFFERS);
    return o;
  }
};

inline flatbuffers::Offset<DrawGeometry> CreateDrawGeometry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>>> vertexBuffers = 0,
    flatbuffers::Offset<IndexBuffer> indexBuffer = 0) {
  DrawGeometryBuilder builder_(_fbb);
  builder_.add_indexBuffer(indexBuffer);
  builder_.add_vertexBuffers(vertexBuffers);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<DrawGeometry> CreateDrawGeometryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<VertexBuffer>> *vertexBuffers = nullptr,
    flatbuffers::Offset<IndexBuffer> indexBuffer = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto vertexBuffers__ = vertexBuffers ? _fbb.CreateVector<flatbuffers::Offset<VertexBuffer>>(*vertexBuffers) : 0;
  return DeepSeaScene::CreateDrawGeometry(
      _fbb,
      name__,
      vertexBuffers__,
      indexBuffer);
}

struct SceneResources FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFFERS = 4,
    VT_TEXTURES = 6,
    VT_SHADERVARIABLEGROUPDESCS = 8,
    VT_SHADERVARIABLEGROUPS = 10,
    VT_MATERIALDESCS = 12,
    VT_MATERIALS = 14,
    VT_SHADERMODULES = 16,
    VT_SHADERS = 18,
    VT_DRAWGEOMETRIES = 20,
    VT_SCENENODES = 22
  };
  const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *buffers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *>(VT_BUFFERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Texture>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Texture>> *>(VT_TEXTURES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ShaderVariableGroupDesc>> *shaderVariableGroupDescs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ShaderVariableGroupDesc>> *>(VT_SHADERVARIABLEGROUPDESCS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ShaderData>> *shaderVariableGroups() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ShaderData>> *>(VT_SHADERVARIABLEGROUPS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MaterialDesc>> *materialDescs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MaterialDesc>> *>(VT_MATERIALDESCS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ShaderData>> *materials() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ShaderData>> *>(VT_MATERIALS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ShaderModule>> *shaderModules() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ShaderModule>> *>(VT_SHADERMODULES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Shader>> *shaders() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Shader>> *>(VT_SHADERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DrawGeometry>> *drawGeometries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DrawGeometry>> *>(VT_DRAWGEOMETRIES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SceneNode>> *sceneNodes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SceneNode>> *>(VT_SCENENODES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUFFERS) &&
           verifier.VerifyVector(buffers()) &&
           verifier.VerifyVectorOfTables(buffers()) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.VerifyVector(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           VerifyOffset(verifier, VT_SHADERVARIABLEGROUPDESCS) &&
           verifier.VerifyVector(shaderVariableGroupDescs()) &&
           verifier.VerifyVectorOfTables(shaderVariableGroupDescs()) &&
           VerifyOffset(verifier, VT_SHADERVARIABLEGROUPS) &&
           verifier.VerifyVector(shaderVariableGroups()) &&
           verifier.VerifyVectorOfTables(shaderVariableGroups()) &&
           VerifyOffset(verifier, VT_MATERIALDESCS) &&
           verifier.VerifyVector(materialDescs()) &&
           verifier.VerifyVectorOfTables(materialDescs()) &&
           VerifyOffset(verifier, VT_MATERIALS) &&
           verifier.VerifyVector(materials()) &&
           verifier.VerifyVectorOfTables(materials()) &&
           VerifyOffset(verifier, VT_SHADERMODULES) &&
           verifier.VerifyVector(shaderModules()) &&
           verifier.VerifyVectorOfTables(shaderModules()) &&
           VerifyOffset(verifier, VT_SHADERS) &&
           verifier.VerifyVector(shaders()) &&
           verifier.VerifyVectorOfTables(shaders()) &&
           VerifyOffset(verifier, VT_DRAWGEOMETRIES) &&
           verifier.VerifyVector(drawGeometries()) &&
           verifier.VerifyVectorOfTables(drawGeometries()) &&
           VerifyOffset(verifier, VT_SCENENODES) &&
           verifier.VerifyVector(sceneNodes()) &&
           verifier.VerifyVectorOfTables(sceneNodes()) &&
           verifier.EndTable();
  }
};

struct SceneResourcesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buffers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Buffer>>> buffers) {
    fbb_.AddOffset(SceneResources::VT_BUFFERS, buffers);
  }
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Texture>>> textures) {
    fbb_.AddOffset(SceneResources::VT_TEXTURES, textures);
  }
  void add_shaderVariableGroupDescs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderVariableGroupDesc>>> shaderVariableGroupDescs) {
    fbb_.AddOffset(SceneResources::VT_SHADERVARIABLEGROUPDESCS, shaderVariableGroupDescs);
  }
  void add_shaderVariableGroups(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderData>>> shaderVariableGroups) {
    fbb_.AddOffset(SceneResources::VT_SHADERVARIABLEGROUPS, shaderVariableGroups);
  }
  void add_materialDescs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MaterialDesc>>> materialDescs) {
    fbb_.AddOffset(SceneResources::VT_MATERIALDESCS, materialDescs);
  }
  void add_materials(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderData>>> materials) {
    fbb_.AddOffset(SceneResources::VT_MATERIALS, materials);
  }
  void add_shaderModules(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderModule>>> shaderModules) {
    fbb_.AddOffset(SceneResources::VT_SHADERMODULES, shaderModules);
  }
  void add_shaders(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Shader>>> shaders) {
    fbb_.AddOffset(SceneResources::VT_SHADERS, shaders);
  }
  void add_drawGeometries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DrawGeometry>>> drawGeometries) {
    fbb_.AddOffset(SceneResources::VT_DRAWGEOMETRIES, drawGeometries);
  }
  void add_sceneNodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SceneNode>>> sceneNodes) {
    fbb_.AddOffset(SceneResources::VT_SCENENODES, sceneNodes);
  }
  explicit SceneResourcesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SceneResourcesBuilder &operator=(const SceneResourcesBuilder &);
  flatbuffers::Offset<SceneResources> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SceneResources>(end);
    return o;
  }
};

inline flatbuffers::Offset<SceneResources> CreateSceneResources(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Buffer>>> buffers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Texture>>> textures = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderVariableGroupDesc>>> shaderVariableGroupDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderData>>> shaderVariableGroups = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MaterialDesc>>> materialDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderData>>> materials = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ShaderModule>>> shaderModules = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Shader>>> shaders = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DrawGeometry>>> drawGeometries = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SceneNode>>> sceneNodes = 0) {
  SceneResourcesBuilder builder_(_fbb);
  builder_.add_sceneNodes(sceneNodes);
  builder_.add_drawGeometries(drawGeometries);
  builder_.add_shaders(shaders);
  builder_.add_shaderModules(shaderModules);
  builder_.add_materials(materials);
  builder_.add_materialDescs(materialDescs);
  builder_.add_shaderVariableGroups(shaderVariableGroups);
  builder_.add_shaderVariableGroupDescs(shaderVariableGroupDescs);
  builder_.add_textures(textures);
  builder_.add_buffers(buffers);
  return builder_.Finish();
}

inline flatbuffers::Offset<SceneResources> CreateSceneResourcesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Buffer>> *buffers = nullptr,
    const std::vector<flatbuffers::Offset<Texture>> *textures = nullptr,
    const std::vector<flatbuffers::Offset<ShaderVariableGroupDesc>> *shaderVariableGroupDescs = nullptr,
    const std::vector<flatbuffers::Offset<ShaderData>> *shaderVariableGroups = nullptr,
    const std::vector<flatbuffers::Offset<MaterialDesc>> *materialDescs = nullptr,
    const std::vector<flatbuffers::Offset<ShaderData>> *materials = nullptr,
    const std::vector<flatbuffers::Offset<ShaderModule>> *shaderModules = nullptr,
    const std::vector<flatbuffers::Offset<Shader>> *shaders = nullptr,
    const std::vector<flatbuffers::Offset<DrawGeometry>> *drawGeometries = nullptr,
    const std::vector<flatbuffers::Offset<SceneNode>> *sceneNodes = nullptr) {
  auto buffers__ = buffers ? _fbb.CreateVector<flatbuffers::Offset<Buffer>>(*buffers) : 0;
  auto textures__ = textures ? _fbb.CreateVector<flatbuffers::Offset<Texture>>(*textures) : 0;
  auto shaderVariableGroupDescs__ = shaderVariableGroupDescs ? _fbb.CreateVector<flatbuffers::Offset<ShaderVariableGroupDesc>>(*shaderVariableGroupDescs) : 0;
  auto shaderVariableGroups__ = shaderVariableGroups ? _fbb.CreateVector<flatbuffers::Offset<ShaderData>>(*shaderVariableGroups) : 0;
  auto materialDescs__ = materialDescs ? _fbb.CreateVector<flatbuffers::Offset<MaterialDesc>>(*materialDescs) : 0;
  auto materials__ = materials ? _fbb.CreateVector<flatbuffers::Offset<ShaderData>>(*materials) : 0;
  auto shaderModules__ = shaderModules ? _fbb.CreateVector<flatbuffers::Offset<ShaderModule>>(*shaderModules) : 0;
  auto shaders__ = shaders ? _fbb.CreateVector<flatbuffers::Offset<Shader>>(*shaders) : 0;
  auto drawGeometries__ = drawGeometries ? _fbb.CreateVector<flatbuffers::Offset<DrawGeometry>>(*drawGeometries) : 0;
  auto sceneNodes__ = sceneNodes ? _fbb.CreateVector<flatbuffers::Offset<SceneNode>>(*sceneNodes) : 0;
  return DeepSeaScene::CreateSceneResources(
      _fbb,
      buffers__,
      textures__,
      shaderVariableGroupDescs__,
      shaderVariableGroups__,
      materialDescs__,
      materials__,
      shaderModules__,
      shaders__,
      drawGeometries__,
      sceneNodes__);
}

inline const DeepSeaScene::SceneResources *GetSceneResources(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaScene::SceneResources>(buf);
}

inline const DeepSeaScene::SceneResources *GetSizePrefixedSceneResources(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaScene::SceneResources>(buf);
}

inline bool VerifySceneResourcesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaScene::SceneResources>(nullptr);
}

inline bool VerifySizePrefixedSceneResourcesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaScene::SceneResources>(nullptr);
}

inline void FinishSceneResourcesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaScene::SceneResources> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneResourcesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaScene::SceneResources> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaScene

#endif  // FLATBUFFERS_GENERATED_SCENERESOURCES_DEEPSEASCENE_H_
