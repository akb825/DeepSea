/*
 * Copyright 2019 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace DeepSeaScene;

// Emum for the type of file resource type to load.
enum FileResourceType : ubyte
{
	Embedded,  // Resource embedded with the application package.
	Installed, // Resource installed with the application.
	Dynamic,   // Resource created locally.
	External   // Resource external to the application.
}

// Enum for a texture format for textures that aren't loaded from file.
enum TextureFormat : ubyte
{
	R4G4,
	R4G4B4A4,
	B4G4R4A4,
	A4R4G4B4,
	R5G6B5,
	B5G6R5,
	R5G5B5A1,
	B5G5R5A1,
	A1R5G5B5,
	R8,
	R8G8,
	R8G8B8,
	B8G8R8,
	R8G8B8A8,
	B8G8R8A8,
	A8B8G8R8,
	A2R10G10B10,
	A2B10G10R10,
	R16,
	R16G16,
	R16G16B16,
	R16G16B16A16,
	R32,
	R32G32,
	R32G32B32,
	R32G32B32A32,
	R64,
	R64G64,
	R64G64B64,
	R64G64B64A64,
	B10G11R11_UFloat,
	E5B9G9R9_UFloat,
	D16,
	X8D24,
	D32_Float,
	S8,
	D16S8,
	D24S8,
	D32S8_Float,
	BC1_RGB,
	BC1_RGBA,
	BC2,
	BC3,
	BC4,
	BC5,
	BC6H,
	BC7,
	ETC1,
	ETC2_R8G8B8,
	ETC2_R8G8B8A1,
	ETC2_R8G8B8A8,
	EAC_R11,
	EAC_R11G11,
	ASTC_4x4,
	ASTC_5x4,
	ASTC_5x5,
	ASTC_6x5,
	ASTC_6x6,
	ASTC_8x5,
	ASTC_8x6,
	ASTC_8x8,
	ASTC_10x5,
	ASTC_10x6,
	ASTC_10x8,
	ASTC_10x10,
	ASTC_12x10,
	ASTC_12x12,
	PVRTC1_RGB_2BPP,
	PVRTC1_RGBA_2BPP,
	PVRTC1_RGB_4BPP,
	PVRTC1_RGBA_4BPP,
	PVRTC2_RGBA_2BPP,
	PVRTC2_RGBA_4BPP
}

// Enum for the dimension of a texture.
enum TextureDim : ubyte
{
	Dim1D,
	Dim2D,
	Dim3D,
	DimCube,
}

// Enum for the face of a cube map.
enum CubeFace : ubyte
{
	PosX,
	NegX,
	PosY,
	NegY,
	PosZ,
	NegZ
}

// Enum for the type of a material.
enum MaterialType : ubyte
{
	Float,
	Vec2,
	Vec3,
	Vec4,
	Double,
	DVec2,
	DVec3,
	DVec4,
	Int,
	IVec2,
	IVec3,
	IVec4,
	UInt,
	UVec2,
	UVec3,
	UVec4,
	Bool,
	BVec2,
	BVec3,
	BVec4,
	Mat2,
	Mat3,
	Mat4,
	Mat2x3,
	Mat2x4,
	Mat3x2,
	Mat3x4,
	Mat4x2,
	Mat4x3,
	DMat2,
	DMat3,
	DMat4,
	DMat2x3,
	DMat2x4,
	DMat3x2,
	DMat3x4,
	DMat4x2,
	DMat4x3,
	Texture,
	Image,
	SubpassInput,
	TextureBuffer,
	ImageBuffer,
	VariableGroup,
	UniformBlock,
	UniformBuffer
}

// Enum for the format of a vertex element
enum VertexElementFormat : ubyte
{
	Unset,
	X8,
	X8Y8,
	X8Y8Z8,
	X8Y8Z8W8,
	W2X10Y10Z10,
	W2Z10Y10X10,
	X16,
	X16Y16,
	X16Y16Z16,
	X16Y16Z16W16,
	X32,
	X32Y32,
	X32Y32Z32,
	X32Y32Z32W32,
	X64,
	X64Y64,
	X64Y64Z64,
	X64Y64Z64W64
}

// Enum for the decoration for a format.
enum FormatDecoration : ubyte
{
	UNorm,
	SNorm,
	UScaled,
	SScaled,
	UInt,
	SInt,
	Float,
	UFloat,
	SRGB
}

// Structure describing object data.
table ObjectData
{
	// The type name of the object.
	type : string (required);

	// The data for the object.
	data : [ubyte] (required);
}

// Struct describing a 2-dimensional vector.
struct Vector2f
{
	x : float;
	y : float;
}

// Struct describing a 3-dimensional vector.
struct Vector3f
{
	x : float;
	y : float;
	z : float;
}

// Struct describing a 4-dimensional vector.
struct Vector4f
{
	x : float;
	y : float;
	z : float;
	w : float;
}

// Struct describing a floating-point color.
struct Color4f
{
	red : float;
	green : float;
	blue : float;
	alpha : float;
}

// Struct describing a 3-dimensional aligned box.
struct AlignedBox3f
{
	// The minimum values for the box.
	min : Vector3f;

	// The maximum values for the box.
	max : Vector3f;
}

// Struct describing a 3x3 transform matrix.
struct Matrix33f
{
	column0 : Vector3f;
	column1 : Vector3f;
	column2 : Vector3f;
}

// Struct describing a 4x4 transform matrix.
struct Matrix44f
{
	column0 : Vector4f;
	column1 : Vector4f;
	column2 : Vector4f;
	column3 : Vector4f;
}

// Struct describing a 3-dimensional oriented box.
struct OrientedBox3f
{
	// The orientation of the box. This must contain only a rotation. This transforms from local
	// aligned box space to world space.
	orientation : Matrix33f;

	// The center of the box.
	center : Vector3f;

	// The half width, height, and depth of the box.
	halfExtents : Vector3f;
}

// Struct describing a reference to a file.
table FileReference
{
	// The type of file resource the path describes.
	type : FileResourceType;

	// The path to the file.
	path : string (required);
}

// Structure describing raw data.
table RawData
{
	// The raw data.
	data : [ubyte] (required);
}

// Union for either a file reference or embedded data.
union FileOrData
{
	FileReference,
	RawData
}
