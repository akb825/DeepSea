// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PARTICLEDRAWLIST_DEEPSEASCENEPARTICLE_H_
#define FLATBUFFERS_GENERATED_PARTICLEDRAWLIST_DEEPSEASCENEPARTICLE_H_

#include "flatbuffers/flatbuffers.h"

#include "DeepSea/Scene/Flatbuffers/SceneCommon_generated.h"

namespace DeepSeaSceneParticle {

struct ParticleDrawList;
struct ParticleDrawListBuilder;

struct ParticleDrawList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ParticleDrawListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTANCEDATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DeepSeaScene::ObjectData>> *instanceData() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DeepSeaScene::ObjectData>> *>(VT_INSTANCEDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTANCEDATA) &&
           verifier.VerifyVector(instanceData()) &&
           verifier.VerifyVectorOfTables(instanceData()) &&
           verifier.EndTable();
  }
};

struct ParticleDrawListBuilder {
  typedef ParticleDrawList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_instanceData(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DeepSeaScene::ObjectData>>> instanceData) {
    fbb_.AddOffset(ParticleDrawList::VT_INSTANCEDATA, instanceData);
  }
  explicit ParticleDrawListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ParticleDrawList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ParticleDrawList>(end);
    return o;
  }
};

inline flatbuffers::Offset<ParticleDrawList> CreateParticleDrawList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DeepSeaScene::ObjectData>>> instanceData = 0) {
  ParticleDrawListBuilder builder_(_fbb);
  builder_.add_instanceData(instanceData);
  return builder_.Finish();
}

inline flatbuffers::Offset<ParticleDrawList> CreateParticleDrawListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<DeepSeaScene::ObjectData>> *instanceData = nullptr) {
  auto instanceData__ = instanceData ? _fbb.CreateVector<flatbuffers::Offset<DeepSeaScene::ObjectData>>(*instanceData) : 0;
  return DeepSeaSceneParticle::CreateParticleDrawList(
      _fbb,
      instanceData__);
}

inline const DeepSeaSceneParticle::ParticleDrawList *GetParticleDrawList(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaSceneParticle::ParticleDrawList>(buf);
}

inline const DeepSeaSceneParticle::ParticleDrawList *GetSizePrefixedParticleDrawList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaSceneParticle::ParticleDrawList>(buf);
}

inline bool VerifyParticleDrawListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaSceneParticle::ParticleDrawList>(nullptr);
}

inline bool VerifySizePrefixedParticleDrawListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaSceneParticle::ParticleDrawList>(nullptr);
}

inline void FinishParticleDrawListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneParticle::ParticleDrawList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedParticleDrawListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaSceneParticle::ParticleDrawList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaSceneParticle

#endif  // FLATBUFFERS_GENERATED_PARTICLEDRAWLIST_DEEPSEASCENEPARTICLE_H_
