// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENENODEREF_DEEPSEASCENE_H_
#define FLATBUFFERS_GENERATED_SCENENODEREF_DEEPSEASCENE_H_

#include "flatbuffers/flatbuffers.h"

namespace DeepSeaScene {

struct SceneNodeRef;

struct SceneNodeRef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFERENCE = 4
  };
  const flatbuffers::String *reference() const {
    return GetPointer<const flatbuffers::String *>(VT_REFERENCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_REFERENCE) &&
           verifier.VerifyString(reference()) &&
           verifier.EndTable();
  }
};

struct SceneNodeRefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reference(flatbuffers::Offset<flatbuffers::String> reference) {
    fbb_.AddOffset(SceneNodeRef::VT_REFERENCE, reference);
  }
  explicit SceneNodeRefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SceneNodeRefBuilder &operator=(const SceneNodeRefBuilder &);
  flatbuffers::Offset<SceneNodeRef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SceneNodeRef>(end);
    fbb_.Required(o, SceneNodeRef::VT_REFERENCE);
    return o;
  }
};

inline flatbuffers::Offset<SceneNodeRef> CreateSceneNodeRef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> reference = 0) {
  SceneNodeRefBuilder builder_(_fbb);
  builder_.add_reference(reference);
  return builder_.Finish();
}

inline flatbuffers::Offset<SceneNodeRef> CreateSceneNodeRefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *reference = nullptr) {
  auto reference__ = reference ? _fbb.CreateString(reference) : 0;
  return DeepSeaScene::CreateSceneNodeRef(
      _fbb,
      reference__);
}

inline const DeepSeaScene::SceneNodeRef *GetSceneNodeRef(const void *buf) {
  return flatbuffers::GetRoot<DeepSeaScene::SceneNodeRef>(buf);
}

inline const DeepSeaScene::SceneNodeRef *GetSizePrefixedSceneNodeRef(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DeepSeaScene::SceneNodeRef>(buf);
}

inline bool VerifySceneNodeRefBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaScene::SceneNodeRef>(nullptr);
}

inline bool VerifySizePrefixedSceneNodeRefBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaScene::SceneNodeRef>(nullptr);
}

inline void FinishSceneNodeRefBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaScene::SceneNodeRef> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneNodeRefBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DeepSeaScene::SceneNodeRef> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaScene

#endif  // FLATBUFFERS_GENERATED_SCENENODEREF_DEEPSEASCENE_H_
