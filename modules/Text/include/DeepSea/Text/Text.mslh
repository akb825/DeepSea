/*
 * Copyright 2017 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

/**
 * @brief Computes the signed distance from a texture.
 * @param fontTex The sampler for the font texture.
 * @param texCoords The texture coordinates for the current position. The z value is the mip level.
 * @param mipLevel The mip level that the glyph is stored in.
 * @return The signed distance represented in the range [0, 1].
 */
float dsComputeTextDistance(sampler2D fontTex, vec3 texCoords)
{
	return textureLod(fontTex, texCoords.xy, texCoords.z).r;
}

/**
 * @brief Computes the text color based on a signed distance field.
 * @param distance The signed distance represented in the range [0, 1], typically cpmputed from
 *     dsComputeTextDistance().
 * @param embolden The amount to embolden the text.
 * @param antiAlias The amount to anti-alias the text.
 * @param textColor The color of the text.
 * @return The text color. This uses pre-multiplied alpha.
 */
vec4 dsComputeTextColor(float distance, float embolden, float antiAlias, vec4 textColor)
{
	textColor *= textColor.a;
	float insideThreshold = -embolden*0.5 + 0.5;
	float inside = smoothstep(insideThreshold - antiAlias, insideThreshold + antiAlias, distance);
	return textColor*inside;
}

/**
 * @brief Computes the text color based on a signed distance field.
 * @param distance The signed distance represented in the range [0, 1], typically cpmputed from
 *     dsComputeTextDistance().
 * @param embolden The amount to embolden the text.
 * @param antiAlias The amount to anti-alias the text.
 * @param outlinePosition The position of the outline in the range [0, 1], where 1 is further from
 *     the center.
 * @param outlineThickness The thickness of the outline in the range [0, 1]..
 * @param textColor The color of the text.
 * @param outlineColor The color of the text outline.
 * @return The text color. This uses pre-multiplied alpha.
 */
vec4 dsComputeTextColor(float distance, float embolden, float outlinePosition,
	float outlineThickness, float antiAlias, vec4 textColor, vec4 outlineColor)
{
	textColor.rgb *= textColor.a;
	float insideThreshold = -embolden*0.5 + 0.5;
	float inside = smoothstep(insideThreshold - antiAlias, insideThreshold + antiAlias, distance);
	vec4 color = textColor;

	if (outlineThickness > 0.0 && outlineColor.a > 0)
	{
		outlineColor.rgb *= outlineColor.a;
		float outlineMinThreshold = 1.0 - outlinePosition - outlineThickness*0.5;
		float outlineMaxThreshold = 1.0 - outlinePosition + outlineThickness*0.5;

		float insideMinOutline = smoothstep(outlineMinThreshold - antiAlias,
			outlineMinThreshold + antiAlias, distance);
		float insideMaxOutline = 1.0 - smoothstep(outlineMaxThreshold - antiAlias,
			outlineMaxThreshold + antiAlias, distance);
		float insideOutline = insideMinOutline*insideMaxOutline;
		color = mix(color, outlineColor, 1.0 - inside);
		color = mix(color, outlineColor, insideOutline);
		inside = mix(inside, 1.0, insideOutline);
	}

	return color*inside;
}
