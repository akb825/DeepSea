/*
 * Copyright 2024 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace DeepSeaPhysics;

// Struct describing a 3-dimensional vector.
struct Vector3f
{
	x : float;
	y : float;
	z : float;
}

// Struct describing a quaternion.
struct Quaternion4f
{
	i : float;
	j : float;
	k : float;
	r : float;
}

// Enum for the axis to align a physics shape to.
enum Axis : uint8
{
	X,
	Y,
	Z
}

// Struct defining the material to apply to an individual part of a shape, such as a triangle.
struct ShapePartMaterial
{
	// The coefficient of friction, with 0 meaning no friction and increasing values having higher
	// friction.
	friction : float;

	// The restitution value, where 0 is fully inelastic and 1 is fully elastic.
	restitution : float;

	// The hardness value, where 0 indicates to use this body's restitution on collision and 1
	// indicates to use the other body's restitution.
	hardness : float;
}

// Enum for how a physics actor does, or doesn't, move.
enum MotionType : uint8
{
	// Object that that won't be moved by the physics simulation. While static objects may be moved
	// manually, they may not properly interact with other objects.
	Static,
	// Object that may be moved directly, but won't be affected by forces. When moved, it will be
	// treated as an object with infinite mass and always move dynamic objects away.
	Kinematic,
	// Object that will be moved based on the physics simulation with the various forces applied.
	Dynamic
}

// Enum for a mask of degrees of freedom for physics actors.
enum DOFMask : uint8
{
	// Translation along the X axis.
	TransX = 0,
	// Translation along the Y axis.
	TransY = 1,
	// Translation along the Z axis.
	TransZ = 2,
	// Rotation along the X axis.
	RotX = 3,
	// Rotation along the Y axis.
	RotY = 4,
	// Rotation along the Z axis.
	RotZ = 5
}

// Enum describing a layer of physics objects.
enum PhysicsLayer : uint8
{
	// Static world collision that cannot collide with itself.
	StaticWorld,
	// Standard physics objects that can collide with anything.
	Objects,
	// Projectiles that can collide with everything but other projectiles.
	Projectiles
}

// Enum for flags to apply to rigid bodies.
enum RigidBodyFlags : uint32 (bit_flags)
{
	// Can change the motion type. This flag can't be changed after creation.
	MutableMotionType = 0,
	// Shapes may be added, removed, or transformed after creation. This flag can't be changed after
	// creation.
	MutableShape = 1,
	// Allow the body to be scaled. This flag can't be changed after creation.
	Scalable = 2,
	// Use linear collision to avoid fast-moving objects missing collisions.
	LinearCollision = 3,
	// Detect collisions but don't interact.
	Sensor = 4,
	// Allow detecting static objects as a sensor.
	SensorDetectStatic = 5,
	// Always consider the body to be active, not allowing it to go to sleep.
	AlwaysActive = 6,
	// Disable gravity for the body.
	DisableGravity = 7,
	// Apply gyroscopic forces to the body.
	GyroscopicForces = 8,
	// Avoid combining similar contact points from the same collision pair.
	AllContacts = 9,
	// Contact properties may be overridden.
	CustomContactProperties = 10,
	// Invoke callbacks on the physics scene when it comes into contact with other bodies.
	ContactCallbacks = 11
}

// Enum for the type of motor to apply to a physics constraint.
enum ConstraintMotorType : uint8
{
	// The motor is disabled and doesn't apply force.
	Disabled,
	// Forces are applied to reach a target position or orientation.
	Position,
	// Forces are applied to reach a target velocity.
	Velocity
}
