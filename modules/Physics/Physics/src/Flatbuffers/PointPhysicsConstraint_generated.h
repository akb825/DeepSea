// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINTPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_POINTPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct PointConstraint;
struct PointConstraintBuilder;

struct PointConstraint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointConstraintBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRSTACTOR = 4,
    VT_FIRSTPOSITION = 6,
    VT_SECONDACTOR = 8,
    VT_SECONDPOSITION = 10
  };
  const ::flatbuffers::String *firstActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTACTOR);
  }
  const DeepSeaPhysics::Vector3f *firstPosition() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_FIRSTPOSITION);
  }
  const ::flatbuffers::String *secondActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECONDACTOR);
  }
  const DeepSeaPhysics::Vector3f *secondPosition() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_SECONDPOSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_FIRSTACTOR) &&
           verifier.VerifyString(firstActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_FIRSTPOSITION, 4) &&
           VerifyOffsetRequired(verifier, VT_SECONDACTOR) &&
           verifier.VerifyString(secondActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_SECONDPOSITION, 4) &&
           verifier.EndTable();
  }
};

struct PointConstraintBuilder {
  typedef PointConstraint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_firstActor(::flatbuffers::Offset<::flatbuffers::String> firstActor) {
    fbb_.AddOffset(PointConstraint::VT_FIRSTACTOR, firstActor);
  }
  void add_firstPosition(const DeepSeaPhysics::Vector3f *firstPosition) {
    fbb_.AddStruct(PointConstraint::VT_FIRSTPOSITION, firstPosition);
  }
  void add_secondActor(::flatbuffers::Offset<::flatbuffers::String> secondActor) {
    fbb_.AddOffset(PointConstraint::VT_SECONDACTOR, secondActor);
  }
  void add_secondPosition(const DeepSeaPhysics::Vector3f *secondPosition) {
    fbb_.AddStruct(PointConstraint::VT_SECONDPOSITION, secondPosition);
  }
  explicit PointConstraintBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PointConstraint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PointConstraint>(end);
    fbb_.Required(o, PointConstraint::VT_FIRSTACTOR);
    fbb_.Required(o, PointConstraint::VT_FIRSTPOSITION);
    fbb_.Required(o, PointConstraint::VT_SECONDACTOR);
    fbb_.Required(o, PointConstraint::VT_SECONDPOSITION);
    return o;
  }
};

inline ::flatbuffers::Offset<PointConstraint> CreatePointConstraint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> firstActor = 0,
    const DeepSeaPhysics::Vector3f *firstPosition = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> secondActor = 0,
    const DeepSeaPhysics::Vector3f *secondPosition = nullptr) {
  PointConstraintBuilder builder_(_fbb);
  builder_.add_secondPosition(secondPosition);
  builder_.add_secondActor(secondActor);
  builder_.add_firstPosition(firstPosition);
  builder_.add_firstActor(firstActor);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PointConstraint> CreatePointConstraintDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *firstActor = nullptr,
    const DeepSeaPhysics::Vector3f *firstPosition = nullptr,
    const char *secondActor = nullptr,
    const DeepSeaPhysics::Vector3f *secondPosition = nullptr) {
  auto firstActor__ = firstActor ? _fbb.CreateString(firstActor) : 0;
  auto secondActor__ = secondActor ? _fbb.CreateString(secondActor) : 0;
  return DeepSeaPhysics::CreatePointConstraint(
      _fbb,
      firstActor__,
      firstPosition,
      secondActor__,
      secondPosition);
}

inline const DeepSeaPhysics::PointConstraint *GetPointConstraint(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaPhysics::PointConstraint>(buf);
}

inline const DeepSeaPhysics::PointConstraint *GetSizePrefixedPointConstraint(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaPhysics::PointConstraint>(buf);
}

inline bool VerifyPointConstraintBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaPhysics::PointConstraint>(nullptr);
}

inline bool VerifySizePrefixedPointConstraintBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaPhysics::PointConstraint>(nullptr);
}

inline void FinishPointConstraintBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::PointConstraint> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPointConstraintBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::PointConstraint> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_POINTPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
