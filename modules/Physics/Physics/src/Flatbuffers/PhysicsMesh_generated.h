// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHYSICSMESH_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_PHYSICSMESH_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct Mesh;
struct MeshBuilder;

enum class IndexType : uint8_t {
  UInt16 = 0,
  UInt32 = 1,
  MIN = UInt16,
  MAX = UInt32
};

inline const IndexType (&EnumValuesIndexType())[2] {
  static const IndexType values[] = {
    IndexType::UInt16,
    IndexType::UInt32
  };
  return values;
}

inline const char * const *EnumNamesIndexType() {
  static const char * const names[3] = {
    "UInt16",
    "UInt32",
    nullptr
  };
  return names;
}

inline const char *EnumNameIndexType(IndexType e) {
  if (::flatbuffers::IsOutRange(e, IndexType::UInt16, IndexType::UInt32)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesIndexType()[index];
}

struct Mesh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES = 6,
    VT_INDEXTYPE = 8,
    VT_TRIANGLECOUNT = 10,
    VT_TRIANGLEMATERIALS = 12,
    VT_MATERIALINDICES = 14,
    VT_MATERIALINDEXTYPE = 16,
    VT_CONVEXRADIUS = 18,
    VT_CACHENAME = 20
  };
  const ::flatbuffers::Vector<uint8_t> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<uint8_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_INDICES);
  }
  DeepSeaPhysics::IndexType indexType() const {
    return static_cast<DeepSeaPhysics::IndexType>(GetField<uint8_t>(VT_INDEXTYPE, 0));
  }
  uint32_t triangleCount() const {
    return GetField<uint32_t>(VT_TRIANGLECOUNT, 0);
  }
  const ::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *> *triangleMaterials() const {
    return GetPointer<const ::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *> *>(VT_TRIANGLEMATERIALS);
  }
  const ::flatbuffers::Vector<uint8_t> *materialIndices() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MATERIALINDICES);
  }
  DeepSeaPhysics::IndexType materialIndexType() const {
    return static_cast<DeepSeaPhysics::IndexType>(GetField<uint8_t>(VT_MATERIALINDEXTYPE, 0));
  }
  float convexRadius() const {
    return GetField<float>(VT_CONVEXRADIUS, -1.0f);
  }
  const ::flatbuffers::String *cacheName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CACHENAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffsetRequired(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyField<uint8_t>(verifier, VT_INDEXTYPE, 1) &&
           VerifyField<uint32_t>(verifier, VT_TRIANGLECOUNT, 4) &&
           VerifyOffset(verifier, VT_TRIANGLEMATERIALS) &&
           verifier.VerifyVector(triangleMaterials()) &&
           VerifyOffset(verifier, VT_MATERIALINDICES) &&
           verifier.VerifyVector(materialIndices()) &&
           VerifyField<uint8_t>(verifier, VT_MATERIALINDEXTYPE, 1) &&
           VerifyField<float>(verifier, VT_CONVEXRADIUS, 4) &&
           VerifyOffset(verifier, VT_CACHENAME) &&
           verifier.VerifyString(cacheName()) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  typedef Mesh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> vertices) {
    fbb_.AddOffset(Mesh::VT_VERTICES, vertices);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> indices) {
    fbb_.AddOffset(Mesh::VT_INDICES, indices);
  }
  void add_indexType(DeepSeaPhysics::IndexType indexType) {
    fbb_.AddElement<uint8_t>(Mesh::VT_INDEXTYPE, static_cast<uint8_t>(indexType), 0);
  }
  void add_triangleCount(uint32_t triangleCount) {
    fbb_.AddElement<uint32_t>(Mesh::VT_TRIANGLECOUNT, triangleCount, 0);
  }
  void add_triangleMaterials(::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *>> triangleMaterials) {
    fbb_.AddOffset(Mesh::VT_TRIANGLEMATERIALS, triangleMaterials);
  }
  void add_materialIndices(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> materialIndices) {
    fbb_.AddOffset(Mesh::VT_MATERIALINDICES, materialIndices);
  }
  void add_materialIndexType(DeepSeaPhysics::IndexType materialIndexType) {
    fbb_.AddElement<uint8_t>(Mesh::VT_MATERIALINDEXTYPE, static_cast<uint8_t>(materialIndexType), 0);
  }
  void add_convexRadius(float convexRadius) {
    fbb_.AddElement<float>(Mesh::VT_CONVEXRADIUS, convexRadius, -1.0f);
  }
  void add_cacheName(::flatbuffers::Offset<::flatbuffers::String> cacheName) {
    fbb_.AddOffset(Mesh::VT_CACHENAME, cacheName);
  }
  explicit MeshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mesh>(end);
    fbb_.Required(o, Mesh::VT_VERTICES);
    fbb_.Required(o, Mesh::VT_INDICES);
    return o;
  }
};

inline ::flatbuffers::Offset<Mesh> CreateMesh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> indices = 0,
    DeepSeaPhysics::IndexType indexType = DeepSeaPhysics::IndexType::UInt16,
    uint32_t triangleCount = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *>> triangleMaterials = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> materialIndices = 0,
    DeepSeaPhysics::IndexType materialIndexType = DeepSeaPhysics::IndexType::UInt16,
    float convexRadius = -1.0f,
    ::flatbuffers::Offset<::flatbuffers::String> cacheName = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_cacheName(cacheName);
  builder_.add_convexRadius(convexRadius);
  builder_.add_materialIndices(materialIndices);
  builder_.add_triangleMaterials(triangleMaterials);
  builder_.add_triangleCount(triangleCount);
  builder_.add_indices(indices);
  builder_.add_vertices(vertices);
  builder_.add_materialIndexType(materialIndexType);
  builder_.add_indexType(indexType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Mesh> CreateMeshDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *vertices = nullptr,
    const std::vector<uint8_t> *indices = nullptr,
    DeepSeaPhysics::IndexType indexType = DeepSeaPhysics::IndexType::UInt16,
    uint32_t triangleCount = 0,
    const std::vector<DeepSeaPhysics::ShapePartMaterial> *triangleMaterials = nullptr,
    const std::vector<uint8_t> *materialIndices = nullptr,
    DeepSeaPhysics::IndexType materialIndexType = DeepSeaPhysics::IndexType::UInt16,
    float convexRadius = -1.0f,
    const char *cacheName = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<uint8_t>(*vertices) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint8_t>(*indices) : 0;
  auto triangleMaterials__ = triangleMaterials ? _fbb.CreateVectorOfStructs<DeepSeaPhysics::ShapePartMaterial>(*triangleMaterials) : 0;
  auto materialIndices__ = materialIndices ? _fbb.CreateVector<uint8_t>(*materialIndices) : 0;
  auto cacheName__ = cacheName ? _fbb.CreateString(cacheName) : 0;
  return DeepSeaPhysics::CreateMesh(
      _fbb,
      vertices__,
      indices__,
      indexType,
      triangleCount,
      triangleMaterials__,
      materialIndices__,
      materialIndexType,
      convexRadius,
      cacheName__);
}

inline const DeepSeaPhysics::Mesh *GetMesh(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaPhysics::Mesh>(buf);
}

inline const DeepSeaPhysics::Mesh *GetSizePrefixedMesh(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaPhysics::Mesh>(buf);
}

inline bool VerifyMeshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaPhysics::Mesh>(nullptr);
}

inline bool VerifySizePrefixedMeshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaPhysics::Mesh>(nullptr);
}

inline void FinishMeshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::Mesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMeshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::Mesh> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_PHYSICSMESH_DEEPSEAPHYSICS_H_
