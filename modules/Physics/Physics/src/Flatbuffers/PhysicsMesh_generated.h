// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHYSICSMESH_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_PHYSICSMESH_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct Mesh;
struct MeshBuilder;

struct Mesh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES16 = 6,
    VT_INDICES32 = 8,
    VT_TRIANGLECOUNT = 10,
    VT_TRIANGLEMATERIALS = 12,
    VT_MATERIALINDICES16 = 14,
    VT_MATERIALINDICES32 = 16,
    VT_CACHENAME = 18
  };
  const ::flatbuffers::Vector<float> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<uint16_t> *indices16() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_INDICES16);
  }
  const ::flatbuffers::Vector<uint32_t> *indices32() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES32);
  }
  uint32_t triangleCount() const {
    return GetField<uint32_t>(VT_TRIANGLECOUNT, 0);
  }
  const ::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *> *triangleMaterials() const {
    return GetPointer<const ::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *> *>(VT_TRIANGLEMATERIALS);
  }
  const ::flatbuffers::Vector<uint16_t> *materialIndices16() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_MATERIALINDICES16);
  }
  const ::flatbuffers::Vector<uint32_t> *materialIndices32() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_MATERIALINDICES32);
  }
  const ::flatbuffers::String *cacheName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CACHENAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffset(verifier, VT_INDICES16) &&
           verifier.VerifyVector(indices16()) &&
           VerifyOffset(verifier, VT_INDICES32) &&
           verifier.VerifyVector(indices32()) &&
           VerifyField<uint32_t>(verifier, VT_TRIANGLECOUNT, 4) &&
           VerifyOffset(verifier, VT_TRIANGLEMATERIALS) &&
           verifier.VerifyVector(triangleMaterials()) &&
           VerifyOffset(verifier, VT_MATERIALINDICES16) &&
           verifier.VerifyVector(materialIndices16()) &&
           VerifyOffset(verifier, VT_MATERIALINDICES32) &&
           verifier.VerifyVector(materialIndices32()) &&
           VerifyOffset(verifier, VT_CACHENAME) &&
           verifier.VerifyString(cacheName()) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  typedef Mesh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<float>> vertices) {
    fbb_.AddOffset(Mesh::VT_VERTICES, vertices);
  }
  void add_indices16(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> indices16) {
    fbb_.AddOffset(Mesh::VT_INDICES16, indices16);
  }
  void add_indices32(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices32) {
    fbb_.AddOffset(Mesh::VT_INDICES32, indices32);
  }
  void add_triangleCount(uint32_t triangleCount) {
    fbb_.AddElement<uint32_t>(Mesh::VT_TRIANGLECOUNT, triangleCount, 0);
  }
  void add_triangleMaterials(::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *>> triangleMaterials) {
    fbb_.AddOffset(Mesh::VT_TRIANGLEMATERIALS, triangleMaterials);
  }
  void add_materialIndices16(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> materialIndices16) {
    fbb_.AddOffset(Mesh::VT_MATERIALINDICES16, materialIndices16);
  }
  void add_materialIndices32(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> materialIndices32) {
    fbb_.AddOffset(Mesh::VT_MATERIALINDICES32, materialIndices32);
  }
  void add_cacheName(::flatbuffers::Offset<::flatbuffers::String> cacheName) {
    fbb_.AddOffset(Mesh::VT_CACHENAME, cacheName);
  }
  explicit MeshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mesh>(end);
    fbb_.Required(o, Mesh::VT_VERTICES);
    return o;
  }
};

inline ::flatbuffers::Offset<Mesh> CreateMesh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> indices16 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices32 = 0,
    uint32_t triangleCount = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::ShapePartMaterial *>> triangleMaterials = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> materialIndices16 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> materialIndices32 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cacheName = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_cacheName(cacheName);
  builder_.add_materialIndices32(materialIndices32);
  builder_.add_materialIndices16(materialIndices16);
  builder_.add_triangleMaterials(triangleMaterials);
  builder_.add_triangleCount(triangleCount);
  builder_.add_indices32(indices32);
  builder_.add_indices16(indices16);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Mesh> CreateMeshDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *vertices = nullptr,
    const std::vector<uint16_t> *indices16 = nullptr,
    const std::vector<uint32_t> *indices32 = nullptr,
    uint32_t triangleCount = 0,
    const std::vector<DeepSeaPhysics::ShapePartMaterial> *triangleMaterials = nullptr,
    const std::vector<uint16_t> *materialIndices16 = nullptr,
    const std::vector<uint32_t> *materialIndices32 = nullptr,
    const char *cacheName = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<float>(*vertices) : 0;
  auto indices16__ = indices16 ? _fbb.CreateVector<uint16_t>(*indices16) : 0;
  auto indices32__ = indices32 ? _fbb.CreateVector<uint32_t>(*indices32) : 0;
  auto triangleMaterials__ = triangleMaterials ? _fbb.CreateVectorOfStructs<DeepSeaPhysics::ShapePartMaterial>(*triangleMaterials) : 0;
  auto materialIndices16__ = materialIndices16 ? _fbb.CreateVector<uint16_t>(*materialIndices16) : 0;
  auto materialIndices32__ = materialIndices32 ? _fbb.CreateVector<uint32_t>(*materialIndices32) : 0;
  auto cacheName__ = cacheName ? _fbb.CreateString(cacheName) : 0;
  return DeepSeaPhysics::CreateMesh(
      _fbb,
      vertices__,
      indices16__,
      indices32__,
      triangleCount,
      triangleMaterials__,
      materialIndices16__,
      materialIndices32__,
      cacheName__);
}

inline const DeepSeaPhysics::Mesh *GetMesh(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaPhysics::Mesh>(buf);
}

inline const DeepSeaPhysics::Mesh *GetSizePrefixedMesh(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaPhysics::Mesh>(buf);
}

inline bool VerifyMeshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaPhysics::Mesh>(nullptr);
}

inline bool VerifySizePrefixedMeshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaPhysics::Mesh>(nullptr);
}

inline void FinishMeshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::Mesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMeshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::Mesh> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_PHYSICSMESH_DEEPSEAPHYSICS_H_
