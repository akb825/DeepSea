// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHYSICSBOX_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_PHYSICSBOX_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "DeepSea/Physics/Flatbuffers/PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct Box;
struct BoxBuilder;

struct Box FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoxBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HALFEXTENTS = 4,
    VT_CONVEXRADIUS = 6
  };
  const DeepSeaPhysics::Vector3f *halfExtents() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_HALFEXTENTS);
  }
  float convexRadius() const {
    return GetField<float>(VT_CONVEXRADIUS, -1.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_HALFEXTENTS, 4) &&
           VerifyField<float>(verifier, VT_CONVEXRADIUS, 4) &&
           verifier.EndTable();
  }
};

struct BoxBuilder {
  typedef Box Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_halfExtents(const DeepSeaPhysics::Vector3f *halfExtents) {
    fbb_.AddStruct(Box::VT_HALFEXTENTS, halfExtents);
  }
  void add_convexRadius(float convexRadius) {
    fbb_.AddElement<float>(Box::VT_CONVEXRADIUS, convexRadius, -1.0f);
  }
  explicit BoxBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Box> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Box>(end);
    fbb_.Required(o, Box::VT_HALFEXTENTS);
    return o;
  }
};

inline ::flatbuffers::Offset<Box> CreateBox(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const DeepSeaPhysics::Vector3f *halfExtents = nullptr,
    float convexRadius = -1.0f) {
  BoxBuilder builder_(_fbb);
  builder_.add_convexRadius(convexRadius);
  builder_.add_halfExtents(halfExtents);
  return builder_.Finish();
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_PHYSICSBOX_DEEPSEAPHYSICS_H_
