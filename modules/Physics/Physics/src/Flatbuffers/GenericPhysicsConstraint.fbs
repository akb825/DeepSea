/*
 * Copyright 2024 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include "PhysicsCommon.fbs";

namespace DeepSeaPhysics;

// Enum for the type of a physics constraint limit.
enum ConstraintLimitType : uint8
{
	// The limit is fixed and unmoving.
	Fixed,
	// The limit is free and unchecked.
	Free,
	// The limit is checked within a range.
	Range
}

// Struct describing a limit for a single degree of freedom of a generic physics constraint.
struct GenericConstraintLimit
{
	// The type of the limit.
	limitType : ConstraintLimitType;

	// The minimum value of the limit.
	minValue : float;

	// The maximum value of the limit.
	maxValue : float;

	// The stiffness for the spring when the range is limited.
	stiffness : float;

	// The damping for the spring in the range [0, 1] when the range is limited.
	damping : float;
}

// Struct describing a motor for a single degree of freedom of a generic physics constraint.
struct GenericConstraintMotor
{
	// The type of the motor to apply to the degree of freedom.
	motorType : ConstraintMotorType;

	// The target of the motor, either as a position or a velocity.
	target : float;

	// The maximum force or torque of the motor. If the motor is disabled this is the maximum amount
	// of force to apply to stop motion.
	maxForce : float;
}

// Struct describing a distance physics constraint, which keeps two actors within a distance range
// of each-other.
table GenericConstraint
{
	// The name of the first actor used in the constraint.
	firstActor : string (required);

	// The position of the constraint relative to the first actor.
	firstPosition : Vector3f (required);

	// The rotation of the constraint relative to the first actor.
	firstRotation : Quaternion4f (required);

	// The name of the second actor used in the constraint.
	secondActor : string (required);

	// The position of the constraint relative to the second actor.
	secondPosition : Vector3f (required);

	// The rotation of the constraint relative to the second actor.
	secondRotation : Quaternion4f (required);

	// The limits for each degree of freedom for the constraint.
	limits : [GenericConstraintLimit];

	// The motors for each degree of freedom for the constraint.
	motors : [GenericConstraintMotor];

	// Whether the swing and twist motors are combined.
	combineSwingTwistMotors : bool;
}

root_type GenericConstraint;
