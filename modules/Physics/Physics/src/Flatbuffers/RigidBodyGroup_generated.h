// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RIGIDBODYGROUP_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_RIGIDBODYGROUP_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "DeepSea/Physics/Flatbuffers/PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct RigidBodyGroup;
struct RigidBodyGroupBuilder;

struct RigidBodyGroup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RigidBodyGroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MOTIONTYPE = 4
  };
  DeepSeaPhysics::MotionType motionType() const {
    return static_cast<DeepSeaPhysics::MotionType>(GetField<uint8_t>(VT_MOTIONTYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MOTIONTYPE, 1) &&
           verifier.EndTable();
  }
};

struct RigidBodyGroupBuilder {
  typedef RigidBodyGroup Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_motionType(DeepSeaPhysics::MotionType motionType) {
    fbb_.AddElement<uint8_t>(RigidBodyGroup::VT_MOTIONTYPE, static_cast<uint8_t>(motionType), 0);
  }
  explicit RigidBodyGroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RigidBodyGroup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RigidBodyGroup>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RigidBodyGroup> CreateRigidBodyGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    DeepSeaPhysics::MotionType motionType = DeepSeaPhysics::MotionType::Static) {
  RigidBodyGroupBuilder builder_(_fbb);
  builder_.add_motionType(motionType);
  return builder_.Finish();
}

inline const DeepSeaPhysics::RigidBodyGroup *GetRigidBodyGroup(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaPhysics::RigidBodyGroup>(buf);
}

inline const DeepSeaPhysics::RigidBodyGroup *GetSizePrefixedRigidBodyGroup(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaPhysics::RigidBodyGroup>(buf);
}

inline bool VerifyRigidBodyGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaPhysics::RigidBodyGroup>(nullptr);
}

inline bool VerifySizePrefixedRigidBodyGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaPhysics::RigidBodyGroup>(nullptr);
}

inline void FinishRigidBodyGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::RigidBodyGroup> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRigidBodyGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::RigidBodyGroup> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_RIGIDBODYGROUP_DEEPSEAPHYSICS_H_
