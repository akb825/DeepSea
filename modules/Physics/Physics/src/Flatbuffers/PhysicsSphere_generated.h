// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHYSICSSPHERE_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_PHYSICSSPHERE_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace DeepSeaPhysics {

struct Sphere;
struct SphereBuilder;

struct Sphere FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SphereBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RADIUS = 4
  };
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           verifier.EndTable();
  }
};

struct SphereBuilder {
  typedef Sphere Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_radius(float radius) {
    fbb_.AddElement<float>(Sphere::VT_RADIUS, radius, 0.0f);
  }
  explicit SphereBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sphere> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sphere>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sphere> CreateSphere(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float radius = 0.0f) {
  SphereBuilder builder_(_fbb);
  builder_.add_radius(radius);
  return builder_.Finish();
}

inline const DeepSeaPhysics::Sphere *GetSphere(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaPhysics::Sphere>(buf);
}

inline const DeepSeaPhysics::Sphere *GetSizePrefixedSphere(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaPhysics::Sphere>(buf);
}

inline bool VerifySphereBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaPhysics::Sphere>(nullptr);
}

inline bool VerifySizePrefixedSphereBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaPhysics::Sphere>(nullptr);
}

inline void FinishSphereBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::Sphere> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSphereBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::Sphere> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_PHYSICSSPHERE_DEEPSEAPHYSICS_H_
