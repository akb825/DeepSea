/*
 * Copyright 2024 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include "DeepSea/Physics/Flatbuffers/PhysicsCommon.fbs";

namespace DeepSeaPhysics;

// Struct describing a revolute physics constraint, or constraint that can rotate around an
// arbitrary axis.
table RevoluteConstraint
{
	// The name of the first actor used in the constraint.
	firstActor : string;

	// The position of the constraint relative to the first actor.
	firstPosition : Vector3f (required);

	// The orientation of the constraint relative to the first actor. The axis of the quaternion
	// represents the axis that will be rotated around, while the orientation will be used relative
	// to any orientation limits.
	firstOrientation : Quaternion4f (required);

	// The name of the second actor used in the constraint.
	secondActor : string;

	// The position of the constraint relative to the second actor.
	secondPosition : Vector3f (required);

	// The orientation of the constraint relative to the second actor. The axis of the quaternion
	// represents the axis that will be rotated around, while the orientation will be used relative
	// to any orientation limits.
	secondOrientation : Quaternion4f (required);

	// Whether the angle is enabled.
	limitEnabled : bool;

	// The minimum angle when the limit is enabled.
	minAngle : float;

	// The maximum angle when the limit is enabled.
	maxAngle : float;

	// The spring stiffness applied when limiting the angle.
	limitStiffness : float;

	// The spring damping applied when limiting the angle.
	limitDamping : float;

	// The type of motor to use for the constraint.
	motorType : ConstraintMotorType;

	// The target for the motor. This will be an angle if motorType is Position or an angular
	// velocity if motorType is Velocity.
	motorTarget : float;

	// The maximum torque for the motor. If the motor is disabled this is the maximum amount of
	// torque to apply to stop motion.
	maxMotorTorque : float;
}
