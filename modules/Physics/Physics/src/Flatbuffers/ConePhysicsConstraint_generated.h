// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONEPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_CONEPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct ConeConstraint;
struct ConeConstraintBuilder;

struct ConeConstraint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConeConstraintBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRSTACTOR = 4,
    VT_FIRSTPOSITION = 6,
    VT_FIRSTROTATION = 8,
    VT_SECONDACTOR = 10,
    VT_SECONDPOSITION = 12,
    VT_SECONDROTATION = 14,
    VT_MAXANGLE = 16
  };
  const ::flatbuffers::String *firstActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTACTOR);
  }
  const DeepSeaPhysics::Vector3f *firstPosition() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_FIRSTPOSITION);
  }
  const DeepSeaPhysics::Quaternion4f *firstRotation() const {
    return GetStruct<const DeepSeaPhysics::Quaternion4f *>(VT_FIRSTROTATION);
  }
  const ::flatbuffers::String *secondActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECONDACTOR);
  }
  const DeepSeaPhysics::Vector3f *secondPosition() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_SECONDPOSITION);
  }
  const DeepSeaPhysics::Quaternion4f *secondRotation() const {
    return GetStruct<const DeepSeaPhysics::Quaternion4f *>(VT_SECONDROTATION);
  }
  float maxAngle() const {
    return GetField<float>(VT_MAXANGLE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_FIRSTACTOR) &&
           verifier.VerifyString(firstActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_FIRSTPOSITION, 4) &&
           VerifyFieldRequired<DeepSeaPhysics::Quaternion4f>(verifier, VT_FIRSTROTATION, 4) &&
           VerifyOffsetRequired(verifier, VT_SECONDACTOR) &&
           verifier.VerifyString(secondActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_SECONDPOSITION, 4) &&
           VerifyFieldRequired<DeepSeaPhysics::Quaternion4f>(verifier, VT_SECONDROTATION, 4) &&
           VerifyField<float>(verifier, VT_MAXANGLE, 4) &&
           verifier.EndTable();
  }
};

struct ConeConstraintBuilder {
  typedef ConeConstraint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_firstActor(::flatbuffers::Offset<::flatbuffers::String> firstActor) {
    fbb_.AddOffset(ConeConstraint::VT_FIRSTACTOR, firstActor);
  }
  void add_firstPosition(const DeepSeaPhysics::Vector3f *firstPosition) {
    fbb_.AddStruct(ConeConstraint::VT_FIRSTPOSITION, firstPosition);
  }
  void add_firstRotation(const DeepSeaPhysics::Quaternion4f *firstRotation) {
    fbb_.AddStruct(ConeConstraint::VT_FIRSTROTATION, firstRotation);
  }
  void add_secondActor(::flatbuffers::Offset<::flatbuffers::String> secondActor) {
    fbb_.AddOffset(ConeConstraint::VT_SECONDACTOR, secondActor);
  }
  void add_secondPosition(const DeepSeaPhysics::Vector3f *secondPosition) {
    fbb_.AddStruct(ConeConstraint::VT_SECONDPOSITION, secondPosition);
  }
  void add_secondRotation(const DeepSeaPhysics::Quaternion4f *secondRotation) {
    fbb_.AddStruct(ConeConstraint::VT_SECONDROTATION, secondRotation);
  }
  void add_maxAngle(float maxAngle) {
    fbb_.AddElement<float>(ConeConstraint::VT_MAXANGLE, maxAngle, 0.0f);
  }
  explicit ConeConstraintBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConeConstraint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConeConstraint>(end);
    fbb_.Required(o, ConeConstraint::VT_FIRSTACTOR);
    fbb_.Required(o, ConeConstraint::VT_FIRSTPOSITION);
    fbb_.Required(o, ConeConstraint::VT_FIRSTROTATION);
    fbb_.Required(o, ConeConstraint::VT_SECONDACTOR);
    fbb_.Required(o, ConeConstraint::VT_SECONDPOSITION);
    fbb_.Required(o, ConeConstraint::VT_SECONDROTATION);
    return o;
  }
};

inline ::flatbuffers::Offset<ConeConstraint> CreateConeConstraint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> firstActor = 0,
    const DeepSeaPhysics::Vector3f *firstPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *firstRotation = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> secondActor = 0,
    const DeepSeaPhysics::Vector3f *secondPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *secondRotation = nullptr,
    float maxAngle = 0.0f) {
  ConeConstraintBuilder builder_(_fbb);
  builder_.add_maxAngle(maxAngle);
  builder_.add_secondRotation(secondRotation);
  builder_.add_secondPosition(secondPosition);
  builder_.add_secondActor(secondActor);
  builder_.add_firstRotation(firstRotation);
  builder_.add_firstPosition(firstPosition);
  builder_.add_firstActor(firstActor);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConeConstraint> CreateConeConstraintDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *firstActor = nullptr,
    const DeepSeaPhysics::Vector3f *firstPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *firstRotation = nullptr,
    const char *secondActor = nullptr,
    const DeepSeaPhysics::Vector3f *secondPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *secondRotation = nullptr,
    float maxAngle = 0.0f) {
  auto firstActor__ = firstActor ? _fbb.CreateString(firstActor) : 0;
  auto secondActor__ = secondActor ? _fbb.CreateString(secondActor) : 0;
  return DeepSeaPhysics::CreateConeConstraint(
      _fbb,
      firstActor__,
      firstPosition,
      firstRotation,
      secondActor__,
      secondPosition,
      secondRotation,
      maxAngle);
}

inline const DeepSeaPhysics::ConeConstraint *GetConeConstraint(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaPhysics::ConeConstraint>(buf);
}

inline const DeepSeaPhysics::ConeConstraint *GetSizePrefixedConeConstraint(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaPhysics::ConeConstraint>(buf);
}

inline bool VerifyConeConstraintBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaPhysics::ConeConstraint>(nullptr);
}

inline bool VerifySizePrefixedConeConstraintBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaPhysics::ConeConstraint>(nullptr);
}

inline void FinishConeConstraintBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::ConeConstraint> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConeConstraintBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaPhysics::ConeConstraint> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_CONEPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
