// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GEARPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_GEARPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct GearConstraint;
struct GearConstraintBuilder;

struct GearConstraint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GearConstraintBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRSTACTOR = 4,
    VT_FIRSTAXIS = 6,
    VT_FIRSTCONSTRAINT = 8,
    VT_SECONDACTOR = 10,
    VT_SECONDAXIS = 12,
    VT_SECONDCONSTRAINT = 14,
    VT_RATIO = 16
  };
  const ::flatbuffers::String *firstActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTACTOR);
  }
  const DeepSeaPhysics::Vector3f *firstAxis() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_FIRSTAXIS);
  }
  const ::flatbuffers::String *firstConstraint() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTCONSTRAINT);
  }
  const ::flatbuffers::String *secondActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECONDACTOR);
  }
  const DeepSeaPhysics::Vector3f *secondAxis() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_SECONDAXIS);
  }
  const ::flatbuffers::String *secondConstraint() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECONDCONSTRAINT);
  }
  float ratio() const {
    return GetField<float>(VT_RATIO, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FIRSTACTOR) &&
           verifier.VerifyString(firstActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_FIRSTAXIS, 4) &&
           VerifyOffset(verifier, VT_FIRSTCONSTRAINT) &&
           verifier.VerifyString(firstConstraint()) &&
           VerifyOffset(verifier, VT_SECONDACTOR) &&
           verifier.VerifyString(secondActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_SECONDAXIS, 4) &&
           VerifyOffset(verifier, VT_SECONDCONSTRAINT) &&
           verifier.VerifyString(secondConstraint()) &&
           VerifyField<float>(verifier, VT_RATIO, 4) &&
           verifier.EndTable();
  }
};

struct GearConstraintBuilder {
  typedef GearConstraint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_firstActor(::flatbuffers::Offset<::flatbuffers::String> firstActor) {
    fbb_.AddOffset(GearConstraint::VT_FIRSTACTOR, firstActor);
  }
  void add_firstAxis(const DeepSeaPhysics::Vector3f *firstAxis) {
    fbb_.AddStruct(GearConstraint::VT_FIRSTAXIS, firstAxis);
  }
  void add_firstConstraint(::flatbuffers::Offset<::flatbuffers::String> firstConstraint) {
    fbb_.AddOffset(GearConstraint::VT_FIRSTCONSTRAINT, firstConstraint);
  }
  void add_secondActor(::flatbuffers::Offset<::flatbuffers::String> secondActor) {
    fbb_.AddOffset(GearConstraint::VT_SECONDACTOR, secondActor);
  }
  void add_secondAxis(const DeepSeaPhysics::Vector3f *secondAxis) {
    fbb_.AddStruct(GearConstraint::VT_SECONDAXIS, secondAxis);
  }
  void add_secondConstraint(::flatbuffers::Offset<::flatbuffers::String> secondConstraint) {
    fbb_.AddOffset(GearConstraint::VT_SECONDCONSTRAINT, secondConstraint);
  }
  void add_ratio(float ratio) {
    fbb_.AddElement<float>(GearConstraint::VT_RATIO, ratio, 0.0f);
  }
  explicit GearConstraintBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GearConstraint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GearConstraint>(end);
    fbb_.Required(o, GearConstraint::VT_FIRSTAXIS);
    fbb_.Required(o, GearConstraint::VT_SECONDAXIS);
    return o;
  }
};

inline ::flatbuffers::Offset<GearConstraint> CreateGearConstraint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> firstActor = 0,
    const DeepSeaPhysics::Vector3f *firstAxis = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> firstConstraint = 0,
    ::flatbuffers::Offset<::flatbuffers::String> secondActor = 0,
    const DeepSeaPhysics::Vector3f *secondAxis = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> secondConstraint = 0,
    float ratio = 0.0f) {
  GearConstraintBuilder builder_(_fbb);
  builder_.add_ratio(ratio);
  builder_.add_secondConstraint(secondConstraint);
  builder_.add_secondAxis(secondAxis);
  builder_.add_secondActor(secondActor);
  builder_.add_firstConstraint(firstConstraint);
  builder_.add_firstAxis(firstAxis);
  builder_.add_firstActor(firstActor);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GearConstraint> CreateGearConstraintDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *firstActor = nullptr,
    const DeepSeaPhysics::Vector3f *firstAxis = nullptr,
    const char *firstConstraint = nullptr,
    const char *secondActor = nullptr,
    const DeepSeaPhysics::Vector3f *secondAxis = nullptr,
    const char *secondConstraint = nullptr,
    float ratio = 0.0f) {
  auto firstActor__ = firstActor ? _fbb.CreateString(firstActor) : 0;
  auto firstConstraint__ = firstConstraint ? _fbb.CreateString(firstConstraint) : 0;
  auto secondActor__ = secondActor ? _fbb.CreateString(secondActor) : 0;
  auto secondConstraint__ = secondConstraint ? _fbb.CreateString(secondConstraint) : 0;
  return DeepSeaPhysics::CreateGearConstraint(
      _fbb,
      firstActor__,
      firstAxis,
      firstConstraint__,
      secondActor__,
      secondAxis,
      secondConstraint__,
      ratio);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_GEARPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
