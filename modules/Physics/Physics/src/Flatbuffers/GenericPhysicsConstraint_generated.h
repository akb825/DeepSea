// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GENERICPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_GENERICPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "PhysicsCommon_generated.h"

namespace DeepSeaPhysics {

struct GenericConstraintLimit;

struct GenericConstraintMotor;

struct GenericConstraint;
struct GenericConstraintBuilder;

enum class ConstraintLimitType : uint8_t {
  Fixed = 0,
  Free = 1,
  Range = 2,
  MIN = Fixed,
  MAX = Range
};

inline const ConstraintLimitType (&EnumValuesConstraintLimitType())[3] {
  static const ConstraintLimitType values[] = {
    ConstraintLimitType::Fixed,
    ConstraintLimitType::Free,
    ConstraintLimitType::Range
  };
  return values;
}

inline const char * const *EnumNamesConstraintLimitType() {
  static const char * const names[4] = {
    "Fixed",
    "Free",
    "Range",
    nullptr
  };
  return names;
}

inline const char *EnumNameConstraintLimitType(ConstraintLimitType e) {
  if (::flatbuffers::IsOutRange(e, ConstraintLimitType::Fixed, ConstraintLimitType::Range)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesConstraintLimitType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GenericConstraintLimit FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t limitType_;
  int8_t padding0__;  int16_t padding1__;
  float minValue_;
  float maxValue_;
  float stiffness_;
  float damping_;

 public:
  GenericConstraintLimit()
      : limitType_(0),
        padding0__(0),
        padding1__(0),
        minValue_(0),
        maxValue_(0),
        stiffness_(0),
        damping_(0) {
    (void)padding0__;
    (void)padding1__;
  }
  GenericConstraintLimit(DeepSeaPhysics::ConstraintLimitType _limitType, float _minValue, float _maxValue, float _stiffness, float _damping)
      : limitType_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_limitType))),
        padding0__(0),
        padding1__(0),
        minValue_(::flatbuffers::EndianScalar(_minValue)),
        maxValue_(::flatbuffers::EndianScalar(_maxValue)),
        stiffness_(::flatbuffers::EndianScalar(_stiffness)),
        damping_(::flatbuffers::EndianScalar(_damping)) {
    (void)padding0__;
    (void)padding1__;
  }
  DeepSeaPhysics::ConstraintLimitType limitType() const {
    return static_cast<DeepSeaPhysics::ConstraintLimitType>(::flatbuffers::EndianScalar(limitType_));
  }
  float minValue() const {
    return ::flatbuffers::EndianScalar(minValue_);
  }
  float maxValue() const {
    return ::flatbuffers::EndianScalar(maxValue_);
  }
  float stiffness() const {
    return ::flatbuffers::EndianScalar(stiffness_);
  }
  float damping() const {
    return ::flatbuffers::EndianScalar(damping_);
  }
};
FLATBUFFERS_STRUCT_END(GenericConstraintLimit, 20);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GenericConstraintMotor FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t motorType_;
  int8_t padding0__;  int16_t padding1__;
  float target_;
  float maxForce_;

 public:
  GenericConstraintMotor()
      : motorType_(0),
        padding0__(0),
        padding1__(0),
        target_(0),
        maxForce_(0) {
    (void)padding0__;
    (void)padding1__;
  }
  GenericConstraintMotor(DeepSeaPhysics::ConstraintMotorType _motorType, float _target, float _maxForce)
      : motorType_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_motorType))),
        padding0__(0),
        padding1__(0),
        target_(::flatbuffers::EndianScalar(_target)),
        maxForce_(::flatbuffers::EndianScalar(_maxForce)) {
    (void)padding0__;
    (void)padding1__;
  }
  DeepSeaPhysics::ConstraintMotorType motorType() const {
    return static_cast<DeepSeaPhysics::ConstraintMotorType>(::flatbuffers::EndianScalar(motorType_));
  }
  float target() const {
    return ::flatbuffers::EndianScalar(target_);
  }
  float maxForce() const {
    return ::flatbuffers::EndianScalar(maxForce_);
  }
};
FLATBUFFERS_STRUCT_END(GenericConstraintMotor, 12);

struct GenericConstraint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenericConstraintBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRSTACTOR = 4,
    VT_FIRSTPOSITION = 6,
    VT_FIRSTROTATION = 8,
    VT_SECONDACTOR = 10,
    VT_SECONDPOSITION = 12,
    VT_SECONDROTATION = 14,
    VT_LIMITS = 16,
    VT_MOTORS = 18,
    VT_COMBINESWINGTWISTMOTORS = 20
  };
  const ::flatbuffers::String *firstActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTACTOR);
  }
  const DeepSeaPhysics::Vector3f *firstPosition() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_FIRSTPOSITION);
  }
  const DeepSeaPhysics::Quaternion4f *firstRotation() const {
    return GetStruct<const DeepSeaPhysics::Quaternion4f *>(VT_FIRSTROTATION);
  }
  const ::flatbuffers::String *secondActor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECONDACTOR);
  }
  const DeepSeaPhysics::Vector3f *secondPosition() const {
    return GetStruct<const DeepSeaPhysics::Vector3f *>(VT_SECONDPOSITION);
  }
  const DeepSeaPhysics::Quaternion4f *secondRotation() const {
    return GetStruct<const DeepSeaPhysics::Quaternion4f *>(VT_SECONDROTATION);
  }
  const ::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintLimit *> *limits() const {
    return GetPointer<const ::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintLimit *> *>(VT_LIMITS);
  }
  const ::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintMotor *> *motors() const {
    return GetPointer<const ::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintMotor *> *>(VT_MOTORS);
  }
  bool combineSwingTwistMotors() const {
    return GetField<uint8_t>(VT_COMBINESWINGTWISTMOTORS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_FIRSTACTOR) &&
           verifier.VerifyString(firstActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_FIRSTPOSITION, 4) &&
           VerifyFieldRequired<DeepSeaPhysics::Quaternion4f>(verifier, VT_FIRSTROTATION, 4) &&
           VerifyOffsetRequired(verifier, VT_SECONDACTOR) &&
           verifier.VerifyString(secondActor()) &&
           VerifyFieldRequired<DeepSeaPhysics::Vector3f>(verifier, VT_SECONDPOSITION, 4) &&
           VerifyFieldRequired<DeepSeaPhysics::Quaternion4f>(verifier, VT_SECONDROTATION, 4) &&
           VerifyOffset(verifier, VT_LIMITS) &&
           verifier.VerifyVector(limits()) &&
           VerifyOffset(verifier, VT_MOTORS) &&
           verifier.VerifyVector(motors()) &&
           VerifyField<uint8_t>(verifier, VT_COMBINESWINGTWISTMOTORS, 1) &&
           verifier.EndTable();
  }
};

struct GenericConstraintBuilder {
  typedef GenericConstraint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_firstActor(::flatbuffers::Offset<::flatbuffers::String> firstActor) {
    fbb_.AddOffset(GenericConstraint::VT_FIRSTACTOR, firstActor);
  }
  void add_firstPosition(const DeepSeaPhysics::Vector3f *firstPosition) {
    fbb_.AddStruct(GenericConstraint::VT_FIRSTPOSITION, firstPosition);
  }
  void add_firstRotation(const DeepSeaPhysics::Quaternion4f *firstRotation) {
    fbb_.AddStruct(GenericConstraint::VT_FIRSTROTATION, firstRotation);
  }
  void add_secondActor(::flatbuffers::Offset<::flatbuffers::String> secondActor) {
    fbb_.AddOffset(GenericConstraint::VT_SECONDACTOR, secondActor);
  }
  void add_secondPosition(const DeepSeaPhysics::Vector3f *secondPosition) {
    fbb_.AddStruct(GenericConstraint::VT_SECONDPOSITION, secondPosition);
  }
  void add_secondRotation(const DeepSeaPhysics::Quaternion4f *secondRotation) {
    fbb_.AddStruct(GenericConstraint::VT_SECONDROTATION, secondRotation);
  }
  void add_limits(::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintLimit *>> limits) {
    fbb_.AddOffset(GenericConstraint::VT_LIMITS, limits);
  }
  void add_motors(::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintMotor *>> motors) {
    fbb_.AddOffset(GenericConstraint::VT_MOTORS, motors);
  }
  void add_combineSwingTwistMotors(bool combineSwingTwistMotors) {
    fbb_.AddElement<uint8_t>(GenericConstraint::VT_COMBINESWINGTWISTMOTORS, static_cast<uint8_t>(combineSwingTwistMotors), 0);
  }
  explicit GenericConstraintBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenericConstraint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenericConstraint>(end);
    fbb_.Required(o, GenericConstraint::VT_FIRSTACTOR);
    fbb_.Required(o, GenericConstraint::VT_FIRSTPOSITION);
    fbb_.Required(o, GenericConstraint::VT_FIRSTROTATION);
    fbb_.Required(o, GenericConstraint::VT_SECONDACTOR);
    fbb_.Required(o, GenericConstraint::VT_SECONDPOSITION);
    fbb_.Required(o, GenericConstraint::VT_SECONDROTATION);
    return o;
  }
};

inline ::flatbuffers::Offset<GenericConstraint> CreateGenericConstraint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> firstActor = 0,
    const DeepSeaPhysics::Vector3f *firstPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *firstRotation = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> secondActor = 0,
    const DeepSeaPhysics::Vector3f *secondPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *secondRotation = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintLimit *>> limits = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const DeepSeaPhysics::GenericConstraintMotor *>> motors = 0,
    bool combineSwingTwistMotors = false) {
  GenericConstraintBuilder builder_(_fbb);
  builder_.add_motors(motors);
  builder_.add_limits(limits);
  builder_.add_secondRotation(secondRotation);
  builder_.add_secondPosition(secondPosition);
  builder_.add_secondActor(secondActor);
  builder_.add_firstRotation(firstRotation);
  builder_.add_firstPosition(firstPosition);
  builder_.add_firstActor(firstActor);
  builder_.add_combineSwingTwistMotors(combineSwingTwistMotors);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GenericConstraint> CreateGenericConstraintDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *firstActor = nullptr,
    const DeepSeaPhysics::Vector3f *firstPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *firstRotation = nullptr,
    const char *secondActor = nullptr,
    const DeepSeaPhysics::Vector3f *secondPosition = nullptr,
    const DeepSeaPhysics::Quaternion4f *secondRotation = nullptr,
    const std::vector<DeepSeaPhysics::GenericConstraintLimit> *limits = nullptr,
    const std::vector<DeepSeaPhysics::GenericConstraintMotor> *motors = nullptr,
    bool combineSwingTwistMotors = false) {
  auto firstActor__ = firstActor ? _fbb.CreateString(firstActor) : 0;
  auto secondActor__ = secondActor ? _fbb.CreateString(secondActor) : 0;
  auto limits__ = limits ? _fbb.CreateVectorOfStructs<DeepSeaPhysics::GenericConstraintLimit>(*limits) : 0;
  auto motors__ = motors ? _fbb.CreateVectorOfStructs<DeepSeaPhysics::GenericConstraintMotor>(*motors) : 0;
  return DeepSeaPhysics::CreateGenericConstraint(
      _fbb,
      firstActor__,
      firstPosition,
      firstRotation,
      secondActor__,
      secondPosition,
      secondRotation,
      limits__,
      motors__,
      combineSwingTwistMotors);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_GENERICPHYSICSCONSTRAINT_DEEPSEAPHYSICS_H_
