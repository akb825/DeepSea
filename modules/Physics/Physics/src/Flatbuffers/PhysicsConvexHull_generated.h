// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHYSICSCONVEXHULL_DEEPSEAPHYSICS_H_
#define FLATBUFFERS_GENERATED_PHYSICSCONVEXHULL_DEEPSEAPHYSICS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace DeepSeaPhysics {

struct ConvexHull;
struct ConvexHullBuilder;

struct ConvexHull FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConvexHullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_CONVEXRADIUS = 6,
    VT_CACHENAME = 8
  };
  const ::flatbuffers::Vector<float> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_VERTICES);
  }
  float convexRadius() const {
    return GetField<float>(VT_CONVEXRADIUS, -1.0f);
  }
  const ::flatbuffers::String *cacheName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CACHENAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyField<float>(verifier, VT_CONVEXRADIUS, 4) &&
           VerifyOffset(verifier, VT_CACHENAME) &&
           verifier.VerifyString(cacheName()) &&
           verifier.EndTable();
  }
};

struct ConvexHullBuilder {
  typedef ConvexHull Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<float>> vertices) {
    fbb_.AddOffset(ConvexHull::VT_VERTICES, vertices);
  }
  void add_convexRadius(float convexRadius) {
    fbb_.AddElement<float>(ConvexHull::VT_CONVEXRADIUS, convexRadius, -1.0f);
  }
  void add_cacheName(::flatbuffers::Offset<::flatbuffers::String> cacheName) {
    fbb_.AddOffset(ConvexHull::VT_CACHENAME, cacheName);
  }
  explicit ConvexHullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConvexHull> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConvexHull>(end);
    fbb_.Required(o, ConvexHull::VT_VERTICES);
    return o;
  }
};

inline ::flatbuffers::Offset<ConvexHull> CreateConvexHull(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> vertices = 0,
    float convexRadius = -1.0f,
    ::flatbuffers::Offset<::flatbuffers::String> cacheName = 0) {
  ConvexHullBuilder builder_(_fbb);
  builder_.add_cacheName(cacheName);
  builder_.add_convexRadius(convexRadius);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConvexHull> CreateConvexHullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *vertices = nullptr,
    float convexRadius = -1.0f,
    const char *cacheName = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<float>(*vertices) : 0;
  auto cacheName__ = cacheName ? _fbb.CreateString(cacheName) : 0;
  return DeepSeaPhysics::CreateConvexHull(
      _fbb,
      vertices__,
      convexRadius,
      cacheName__);
}

}  // namespace DeepSeaPhysics

#endif  // FLATBUFFERS_GENERATED_PHYSICSCONVEXHULL_DEEPSEAPHYSICS_H_
