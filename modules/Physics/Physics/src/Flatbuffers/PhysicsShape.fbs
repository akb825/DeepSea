/*
 * Copyright 2024 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include "PhysicsBox.fbs";
include "PhysicsCapsule.fbs";
include "PhysicsCommon.fbs";
include "PhysicsCone.fbs";
include "PhysicsConvexHull.fbs";
include "PhysicsCylinder.fbs";
include "PhysicsMesh.fbs";
include "PhysicsSphere.fbs";

namespace DeepSeaPhysics;

// Struct describing a reference to a shape.
table ShapeRef
{
	// The name of the referenced shape.
	name : string (required);
}

// Union of the different physics shapes or a reference to an external shape..
union Shape
{
	Box,
	Capsule,
	Cone,
	ConvexHull,
	Cylinder,
	Mesh,
	Sphere,
	ShapeRef
}

// Struct describing an instance of a shape with its transform information.
table ShapeInstance
{
	// The shape that is instanced.
	shape : Shape (required);

	// The density of the shape.
	density : float;

	// The translation for the shape or null if the shape will never be translated.
	translate : Vector3f;

	// The rotation for the shape or null if the shape will never be rotated.
	rotate : Quaternion4f;

	// The scale for the shape or null if the shape will never be scaled.
	scale : Vector3f;

	// The material to use for the shape or null to use the rigid body default.
	material : ShapePartMaterial;
}
