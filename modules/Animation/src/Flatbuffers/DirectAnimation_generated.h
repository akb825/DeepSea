// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DIRECTANIMATION_DEEPSEAANIMATION_H_
#define FLATBUFFERS_GENERATED_DIRECTANIMATION_DEEPSEAANIMATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "AnimationCommon_generated.h"

namespace DeepSeaAnimation {

struct DirectAnimationChannel;
struct DirectAnimationChannelBuilder;

struct DirectAnimation;
struct DirectAnimationBuilder;

struct DirectAnimationChannel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DirectAnimationChannelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODE = 4,
    VT_COMPONENT = 6,
    VT_VALUE = 8
  };
  const ::flatbuffers::String *node() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NODE);
  }
  DeepSeaAnimation::AnimationComponent component() const {
    return static_cast<DeepSeaAnimation::AnimationComponent>(GetField<uint8_t>(VT_COMPONENT, 0));
  }
  const DeepSeaAnimation::Vector4f *value() const {
    return GetStruct<const DeepSeaAnimation::Vector4f *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NODE) &&
           verifier.VerifyString(node()) &&
           VerifyField<uint8_t>(verifier, VT_COMPONENT, 1) &&
           VerifyFieldRequired<DeepSeaAnimation::Vector4f>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct DirectAnimationChannelBuilder {
  typedef DirectAnimationChannel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_node(::flatbuffers::Offset<::flatbuffers::String> node) {
    fbb_.AddOffset(DirectAnimationChannel::VT_NODE, node);
  }
  void add_component(DeepSeaAnimation::AnimationComponent component) {
    fbb_.AddElement<uint8_t>(DirectAnimationChannel::VT_COMPONENT, static_cast<uint8_t>(component), 0);
  }
  void add_value(const DeepSeaAnimation::Vector4f *value) {
    fbb_.AddStruct(DirectAnimationChannel::VT_VALUE, value);
  }
  explicit DirectAnimationChannelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DirectAnimationChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DirectAnimationChannel>(end);
    fbb_.Required(o, DirectAnimationChannel::VT_NODE);
    fbb_.Required(o, DirectAnimationChannel::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<DirectAnimationChannel> CreateDirectAnimationChannel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> node = 0,
    DeepSeaAnimation::AnimationComponent component = DeepSeaAnimation::AnimationComponent::Translation,
    const DeepSeaAnimation::Vector4f *value = nullptr) {
  DirectAnimationChannelBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_node(node);
  builder_.add_component(component);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DirectAnimationChannel> CreateDirectAnimationChannelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *node = nullptr,
    DeepSeaAnimation::AnimationComponent component = DeepSeaAnimation::AnimationComponent::Translation,
    const DeepSeaAnimation::Vector4f *value = nullptr) {
  auto node__ = node ? _fbb.CreateString(node) : 0;
  return DeepSeaAnimation::CreateDirectAnimationChannel(
      _fbb,
      node__,
      component,
      value);
}

struct DirectAnimation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DirectAnimationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNELS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaAnimation::DirectAnimationChannel>> *channels() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaAnimation::DirectAnimationChannel>> *>(VT_CHANNELS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CHANNELS) &&
           verifier.VerifyVector(channels()) &&
           verifier.VerifyVectorOfTables(channels()) &&
           verifier.EndTable();
  }
};

struct DirectAnimationBuilder {
  typedef DirectAnimation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_channels(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaAnimation::DirectAnimationChannel>>> channels) {
    fbb_.AddOffset(DirectAnimation::VT_CHANNELS, channels);
  }
  explicit DirectAnimationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DirectAnimation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DirectAnimation>(end);
    fbb_.Required(o, DirectAnimation::VT_CHANNELS);
    return o;
  }
};

inline ::flatbuffers::Offset<DirectAnimation> CreateDirectAnimation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeepSeaAnimation::DirectAnimationChannel>>> channels = 0) {
  DirectAnimationBuilder builder_(_fbb);
  builder_.add_channels(channels);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DirectAnimation> CreateDirectAnimationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<DeepSeaAnimation::DirectAnimationChannel>> *channels = nullptr) {
  auto channels__ = channels ? _fbb.CreateVector<::flatbuffers::Offset<DeepSeaAnimation::DirectAnimationChannel>>(*channels) : 0;
  return DeepSeaAnimation::CreateDirectAnimation(
      _fbb,
      channels__);
}

inline const DeepSeaAnimation::DirectAnimation *GetDirectAnimation(const void *buf) {
  return ::flatbuffers::GetRoot<DeepSeaAnimation::DirectAnimation>(buf);
}

inline const DeepSeaAnimation::DirectAnimation *GetSizePrefixedDirectAnimation(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DeepSeaAnimation::DirectAnimation>(buf);
}

inline bool VerifyDirectAnimationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DeepSeaAnimation::DirectAnimation>(nullptr);
}

inline bool VerifySizePrefixedDirectAnimationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DeepSeaAnimation::DirectAnimation>(nullptr);
}

inline void FinishDirectAnimationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaAnimation::DirectAnimation> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDirectAnimationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DeepSeaAnimation::DirectAnimation> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DeepSeaAnimation

#endif  // FLATBUFFERS_GENERATED_DIRECTANIMATION_DEEPSEAANIMATION_H_
