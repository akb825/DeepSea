/*
 * Copyright 2023 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

/**
 * @file
 * @brief Functions to perform skinning using a texture.
 */

/**
 * @brief Computes the skin transform from a texture.
 * @param bones The bone indices.
 * @param weights The transform weights.
 * @parma matrices The texture containing the matrices.
 * @return The skin transform.
 */
mat4 dsComputeSkinTransformTexture(vec4 bones, vec4 weights, sampler2D matrices)
{
	vec4 offset = vec4(INSTANCE(dsSkinningTextureInfo).instanceOffsetStep.x);
	vec4 step = vec4(INSTANCE(dsSkinningTextureInfo).instanceOffsetStep.y);

	vec4 indexOffsets = step*vec4(0.0, 1.0, 2.0, 3.0);
	// 4 texture elements per bone.
	vec4 boneOffsets = offset + bones*step*vec4(4.0);

	vec4 curOffsets = vec4(boneOffsets.x) + indexOffsets;
	vec4 curOffsetsX = frac(curOffsets);
	vec4 curOffsetsY = floor(curOffsets)*step;
	mat4 bone0Transform = mat4(
		texture(matrices, vec2(curOffsetsX.x, curOffsetsY.x)),
		texture(matrices, vec2(curOffsetsX.y, curOffsetsY.y)),
		texture(matrices, vec2(curOffsetsX.z, curOffsetsY.z)),
		texture(matrices, vec2(curOffsetsX.w, curOffsetsY.w)));

	curOffsets = vec4(boneOffsets.y) + indexOffsets;
	curOffsetsX = frac(curOffsets);
	curOffsetsY = floor(curOffsets)*step;
	mat4 bone1Transform = mat4(
		texture(matrices, vec2(curOffsetsX.x, curOffsetsY.x)),
		texture(matrices, vec2(curOffsetsX.y, curOffsetsY.y)),
		texture(matrices, vec2(curOffsetsX.z, curOffsetsY.z)),
		texture(matrices, vec2(curOffsetsX.w, curOffsetsY.w)));

	curOffsets = vec4(boneOffsets.z) + indexOffsets;
	curOffsetsX = frac(curOffsets);
	curOffsetsY = floor(curOffsets)*step;
	mat4 bone2Transform = mat4(
		texture(matrices, vec2(curOffsetsX.x, curOffsetsY.x)),
		texture(matrices, vec2(curOffsetsX.y, curOffsetsY.y)),
		texture(matrices, vec2(curOffsetsX.z, curOffsetsY.z)),
		texture(matrices, vec2(curOffsetsX.w, curOffsetsY.w)));

	curOffsets = vec4(boneOffsets.z) + indexOffsets;
	curOffsetsX = frac(curOffsets);
	curOffsetsY = floor(curOffsets)*step;
	mat4 bone3Transform = mat4(
		texture(matrices, vec2(curOffsetsX.x, curOffsetsY.x)),
		texture(matrices, vec2(curOffsetsX.y, curOffsetsY.y)),
		texture(matrices, vec2(curOffsetsX.z, curOffsetsY.z)),
		texture(matrices, vec2(curOffsetsX.w, curOffsetsY.w)));

	return weights.x*bone0Transform + weights.y*bone1Transform + weights.z*bone2Transform +
		weights.w*bone3Transform;
}
