/*
 * Copyright 2017-2019 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if HAS_TESSELLATION_STAGES

#include <DeepSea/Render/Shaders/VertexAttributes.mslh>
#include <DeepSea/Text/Text.mslh>

uniform sampler2D fontTex;
sampler_state fontTex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = nearest;
}

uniform SharedInfo
{
	ivec2 screenSize;
} sharedInfo;

uniform vec2 position;
uniform float yMult;

[[vertex]] layout(location = DS_POSITION0) in vec4 vertexPos;
[[vertex]] layout(location = DS_POSITION1) in vec4 geometry;
[[vertex]] layout(location = DS_COLOR0) in vec4 textColor;
[[vertex]] layout(location = DS_COLOR1) in vec4 outlineColor;
[[vertex]] layout(location = DS_TEXCOORD0) in vec4 texCoords;
[[vertex]] layout(location = DS_TEXCOORD1) in vec4 style;

varying(vertex, tessellation_control)
{
	vec4 vtcGeometry;
	vec4 vtcTextColor;
	vec4 vtcOutlineColor;
	vec4 vtcTexCoords;
	vec2 vtcMipAntiAlias;
	vec4 vtcStyle;
}

varying(tessellation_control, tessellation_evaluation)
{
	patch vec4 tceGeometry;
	patch vec4 tceTextColor;
	patch vec4 tceOutlineColor;
	patch vec4 tceTexCoords;
	patch vec2 tceMipAntiAlias;
	patch vec4 tceStyle;
}

varying(tessellation_evaluation, fragment)
{
	vec4 tefTextColor;
	vec4 tefOutlineColor;
	vec3 tefTexCoords;
	vec4 tefStyle;
}

[[tessellation_control]] layout(vertices = 4) out;
[[tessellation_evaluation]] layout(quads) in;
[[fragment]] out vec4 color;

[[vertex]]
void vertexShader()
{
	gl_Position = vec4(vertexPos.xy, 0.0, 1.0);
	vtcGeometry = geometry;
	vtcTextColor = textColor;
	vtcOutlineColor = outlineColor;
	vtcTexCoords = texCoords;
	vtcMipAntiAlias = vertexPos.zw;
	vtcStyle = style;
}

[[tessellation_control]]
void tessellationControl()
{
	gl_out[gl_InvocationID].gl_Position = gl_in[0].gl_Position;
	tceGeometry = vtcGeometry[0];
	tceTextColor = vtcTextColor[0];
	tceOutlineColor = vtcOutlineColor[0];
	tceTexCoords = vtcTexCoords[0];
	tceMipAntiAlias = vtcMipAntiAlias[0];
	tceStyle = vtcStyle[0];

	gl_TessLevelOuter[0] = 1.0;
	gl_TessLevelOuter[1] = 1.0;
	gl_TessLevelOuter[2] = 1.0;
	gl_TessLevelOuter[3] = 1.0;
	gl_TessLevelInner[0] = 1.0;
	gl_TessLevelInner[1] = 1.0;
}

[[tessellation_evaluation]]
void tessellationEvaluation()
{
	tefTextColor = tceTextColor;
	tefOutlineColor = tceOutlineColor;
	tefTexCoords.xy = mix(tceTexCoords.xy, tceTexCoords.zw, gl_TessCoord.xy);
	tefTexCoords.z = tceMipAntiAlias.x;
	tefStyle = vec4(tceStyle.yzw, tceMipAntiAlias.y);

	vec2 vertexPos = gl_in[0].gl_Position.xy;
	vertexPos += mix(tceGeometry.xy, tceGeometry.zw, gl_TessCoord.xy);
	vertexPos.x -= vertexPos.y*tceStyle.x;
	vec2 normalizedPos = (uniforms.position + vertexPos)/vec2(INSTANCE(sharedInfo).screenSize);
	gl_Position = DS_ADJUST_CLIP(vec4(normalizedPos*vec2(2.0) - vec2(1.0), 0.0, 1.0));
	gl_Position.y *= uniforms.yMult;
}

[[fragment]]
void fragmentShader()
{
	float distance = dsComputeTextDistance(fontTex, tefTexCoords);
	color = dsComputeTextColor(distance, tefStyle.x, tefStyle.y, tefStyle.z, tefStyle.w,
		tefTextColor, tefOutlineColor);
}

pipeline FontTess
{
	vertex = vertexShader;
	tessellation_control = tessellationControl;
	tessellation_evaluation = tessellationEvaluation;
	fragment = fragmentShader;

	patch_control_points = 1;
	blend_enable = true;
	// Pre-multiply alpha.
	src_blend_factor = one;
	dst_blend_factor = one_minus_src_alpha;
	alpha_blend_op = add;
#ifdef SPIRV_VERSION
	cull_mode = back;
#else
	// Y is inverted in most cases, so need to swap winding.
	cull_mode = front;
#endif
}

#endif
