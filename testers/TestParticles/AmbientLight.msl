/*
 * Copyright 2021 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <DeepSea/SceneLighting/Shaders/DeferredAmbientLight.mslh>

[[fragment]] uniform subpassInput(0) materialColor;
[[fragment]] out vec4 outputColor;

[[fragment]]
void fragmentShader()
{
	vec4 color = subpassLoad(materialColor);
	// Alpha of 0 means clear color.
	if (color.a == 0)
		outputColor = vec4(color.rgb, 1.0);
	else
		outputColor = vec4(color.rgb*dsDeferredAmbientLight_lightColor(), 1.0);
}

pipeline AmbientLight
{
	vertex = dsDeferredAmbientLight_defaultVertex;
	fragment = fragmentShader;
	DS_DEFERRED_AMBIENT_LIGHT_RENDER_STATES
}
