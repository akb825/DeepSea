// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LIGHTFLICKER_TESTPARTICLES_H_
#define FLATBUFFERS_GENERATED_LIGHTFLICKER_TESTPARTICLES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace TestParticles {

struct LightFlicker;
struct LightFlickerBuilder;

struct LightFlicker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LightFlickerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MINTIME = 4,
    VT_MAXTIME = 6,
    VT_MININTENSITY = 8,
    VT_MAXINTENSITY = 10
  };
  float minTime() const {
    return GetField<float>(VT_MINTIME, 0.0f);
  }
  float maxTime() const {
    return GetField<float>(VT_MAXTIME, 0.0f);
  }
  float minIntensity() const {
    return GetField<float>(VT_MININTENSITY, 0.0f);
  }
  float maxIntensity() const {
    return GetField<float>(VT_MAXINTENSITY, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_MINTIME, 4) &&
           VerifyField<float>(verifier, VT_MAXTIME, 4) &&
           VerifyField<float>(verifier, VT_MININTENSITY, 4) &&
           VerifyField<float>(verifier, VT_MAXINTENSITY, 4) &&
           verifier.EndTable();
  }
};

struct LightFlickerBuilder {
  typedef LightFlicker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_minTime(float minTime) {
    fbb_.AddElement<float>(LightFlicker::VT_MINTIME, minTime, 0.0f);
  }
  void add_maxTime(float maxTime) {
    fbb_.AddElement<float>(LightFlicker::VT_MAXTIME, maxTime, 0.0f);
  }
  void add_minIntensity(float minIntensity) {
    fbb_.AddElement<float>(LightFlicker::VT_MININTENSITY, minIntensity, 0.0f);
  }
  void add_maxIntensity(float maxIntensity) {
    fbb_.AddElement<float>(LightFlicker::VT_MAXINTENSITY, maxIntensity, 0.0f);
  }
  explicit LightFlickerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LightFlicker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LightFlicker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LightFlicker> CreateLightFlicker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float minTime = 0.0f,
    float maxTime = 0.0f,
    float minIntensity = 0.0f,
    float maxIntensity = 0.0f) {
  LightFlickerBuilder builder_(_fbb);
  builder_.add_maxIntensity(maxIntensity);
  builder_.add_minIntensity(minIntensity);
  builder_.add_maxTime(maxTime);
  builder_.add_minTime(minTime);
  return builder_.Finish();
}

inline const TestParticles::LightFlicker *GetLightFlicker(const void *buf) {
  return ::flatbuffers::GetRoot<TestParticles::LightFlicker>(buf);
}

inline const TestParticles::LightFlicker *GetSizePrefixedLightFlicker(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TestParticles::LightFlicker>(buf);
}

inline bool VerifyLightFlickerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestParticles::LightFlicker>(nullptr);
}

inline bool VerifySizePrefixedLightFlickerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestParticles::LightFlicker>(nullptr);
}

inline void FinishLightFlickerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestParticles::LightFlicker> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLightFlickerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestParticles::LightFlicker> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TestParticles

#endif  // FLATBUFFERS_GENERATED_LIGHTFLICKER_TESTPARTICLES_H_
