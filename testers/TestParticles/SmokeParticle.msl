/*
 * Copyright 2022 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <DeepSea/Particle/Shaders/ParticleVertexInputs.mslh>
#include <DeepSea/Render/Shaders/Color.mslh>
#include <DeepSea/Scene/Shaders/ViewTransform.mslh>
#include <DeepSea/SceneParticle/Shaders/ParticleTransform.mslh>

uniform sampler2DArray diffuseTexture;
sampler_state diffuseTexture
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = linear;
}

varying(vertex, fragment)
{
	vec4 vfColor;
	vec3 vfTexCoord;
}

[[fragment]] out vec4 particleColor;

[[vertex]]
void vertexShader()
{
	vfTexCoord = vec3(vec2(greaterThan(viOffset, vec2(0.0))), viIntensityTextureT.y);
	vec4 position = vec4(viPosition + dsCameraOrientedParticleOffset(viOffset, viRotation.x), 1.0);
	gl_Position = DS_ADJUST_CLIP(INSTANCE(dsParticleTransform).worldViewProj*position);
	gl_Position.xy = dsRotateScreenPosition(gl_Position.xy);

	vfColor.rgb = dsLinearFromSRGB(viColor.rgb)*viIntensityTextureT.x;
	// Fade particles in and out.
	float t = viIntensityTextureT.z;
	float alphaMul1 = (1.0 - max(t, 0.9))*10.0;
	float alphaMul2 = min(t, 0.25)*4.0;
	vfColor.a = viColor.a*alphaMul1*alphaMul2;
	// Pre-multiple alpha.
	vfColor.rgb *= vfColor.a;
}

[[fragment]]
void fragmentShader()
{
	particleColor = vfColor*texture(diffuseTexture, vfTexCoord);
}

pipeline Smoke
{
	vertex = vertexShader;
	fragment = fragmentShader;
	depth_test_enable = true;
	depth_write_enable = false;
	depth_compare_op = greater;
	early_fragment_tests = true;
	cull_mode = back;
	// Alpha is pre-multiplied.
	blend_enable = true;
	src_blend_factor = one;
	dst_blend_factor = one_minus_src_alpha;
}
