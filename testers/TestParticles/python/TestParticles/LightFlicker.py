# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TestParticles

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LightFlicker(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LightFlicker()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLightFlicker(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LightFlicker
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LightFlicker
    def MinTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LightFlicker
    def MaxTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LightFlicker
    def MinIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LightFlicker
    def MaxIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def LightFlickerStart(builder):
    builder.StartObject(4)

def Start(builder):
    LightFlickerStart(builder)

def LightFlickerAddMinTime(builder, minTime):
    builder.PrependFloat32Slot(0, minTime, 0.0)

def AddMinTime(builder, minTime):
    LightFlickerAddMinTime(builder, minTime)

def LightFlickerAddMaxTime(builder, maxTime):
    builder.PrependFloat32Slot(1, maxTime, 0.0)

def AddMaxTime(builder, maxTime):
    LightFlickerAddMaxTime(builder, maxTime)

def LightFlickerAddMinIntensity(builder, minIntensity):
    builder.PrependFloat32Slot(2, minIntensity, 0.0)

def AddMinIntensity(builder, minIntensity):
    LightFlickerAddMinIntensity(builder, minIntensity)

def LightFlickerAddMaxIntensity(builder, maxIntensity):
    builder.PrependFloat32Slot(3, maxIntensity, 0.0)

def AddMaxIntensity(builder, maxIntensity):
    LightFlickerAddMaxIntensity(builder, maxIntensity)

def LightFlickerEnd(builder):
    return builder.EndObject()

def End(builder):
    return LightFlickerEnd(builder)
