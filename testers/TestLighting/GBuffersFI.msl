/*
 * Copyright 2021-2022 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <DeepSea/Render/Shaders/VertexAttributes.mslh>
#include <DeepSea/Scene/Shaders/InstanceTransform.mslh>
#include <DeepSea/Scene/Shaders/ViewTransform.mslh>

uniform sampler2D diffuseTexture;
sampler_state diffuseTexture
{
	address_mode_u = repeat;
	address_mode_v = repeat;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = anisotropic;
}

uniform sampler2D normalTexture;
sampler_state normalTexture
{
	address_mode_u = repeat;
	address_mode_v = repeat;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = anisotropic;
}

uniform sampler2D specularTexture;
sampler_state specularTexture
{
	address_mode_u = repeat;
	address_mode_v = repeat;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = anisotropic;
}

uniform float shininess;

[[vertex]] layout(location = DS_POSITION) in vec3 position;
[[vertex]] layout(location = DS_NORMAL) in vec3 normal;
[[vertex]] layout(location = DS_TANGENT) in vec3 tangent;
[[vertex]] layout(location = DS_TEXCOORD0) in vec2 texCoord;

varying(vertex, fragment)
{
	vec4 vfNormalTexX;
	vec4 vfTangentTexY;
	vec3 vfBitangent;
}

[[fragment]] layout(location = 0) out vec4 materialColor;
[[fragment]] layout(location = 1) out vec4 normalSpecular;
[[fragment]] layout(location = 2) out float surfaceDepth;

[[vertex]]
void vertexShader()
{
	vec4 position4 = vec4(position, 1.0);
	gl_Position = DS_ADJUST_CLIP(INSTANCE(dsInstanceTransform).worldViewProj*position4);
	gl_Position.xy = dsRotateScreenPosition(gl_Position.xy);

	vec3 fixedNormal = normal*2.0 - vec3(1.0);
	vec3 fixedTangent = tangent*2.0 - vec3(1.0);
	vfNormalTexX.xyz = (INSTANCE(dsInstanceTransform).worldViewInvTrans*vec4(fixedNormal, 0.0)).xyz;
	vfNormalTexX.w = texCoord.x;
	vfTangentTexY.xyz =
		(INSTANCE(dsInstanceTransform).worldViewInvTrans*vec4(fixedTangent, 0.0)).xyz;
	vfTangentTexY.w = texCoord.y;
	vfBitangent = cross(vfNormalTexX.xyz, vfTangentTexY.xyz);
}

[[fragment]]
void fragmentShader()
{
	vec2 texCoord = vec2(vfNormalTexX.w, vfTangentTexY.w);
	vec3 diffuseColor = texture(diffuseTexture, texCoord).rgb;
	vec2 baseNormal = texture(normalTexture, texCoord).xy;
	vec3 specularColor = texture(specularTexture, texCoord).rgb;

	vec3 normal;
	normal.xy = baseNormal*2.0 - vec2(1.0);
	normal.z = sqrt(1.0 - min(dot(normal.xy, normal.xy), 1.0));
	// Normalize just the original normal as a trdeoff between performance and quality.
	normal = mat3(vfTangentTexY.xyz, vfBitangent, normalize(vfNormalTexX.xyz))*normal;

	materialColor = vec4(diffuseColor, 1.0);
	normalSpecular.xy = normal.xy*0.5 + vec2(0.5);
	// Assume grayscale specular.
	normalSpecular.z = specularColor.r;
	normalSpecular.w = uniforms.shininess/256.0;

	surfaceDepth = gl_FragCoord.z;
}

pipeline GBuffers
{
	vertex = vertexShader;
	fragment = fragmentShader;
	depth_test_enable = true;
#ifdef HAS_PREPASS
	depth_compare_op = equal;
	depth_write_enable = false;
#else
	depth_compare_op = greater;
#endif
	early_fragment_tests = true;
	cull_mode = back;
	fragment_group = 0;
}

