/*
 * Copyright 2020 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <DeepSea/Render/Shaders/VertexAttributes.mslh>
#include <DeepSea/SceneLighting/Shaders/ForwardLights.mslh>
#include <DeepSea/SceneLighting/Shaders/Lighting.mslh>
#include <DeepSea/Scene/Shaders/InstanceTransform.mslh>
#include <DeepSea/Scene/Shaders/ViewTransform.mslh>

uniform vec4 color;
uniform float shininess;

[[vertex]] layout(location = DS_POSITION) in vec3 position;
[[vertex]] layout(location = DS_NORMAL) in vec3 normal;

varying(vertex, fragment)
{
	vec3 vfViewPosition;
	vec3 vfNormal;
}

[[fragment]] out vec4 outputColor;

[[vertex]]
void vertexShader()
{
	vec4 position4 = vec4(position, 1.0);
	gl_Position = DS_ADJUST_CLIP(INSTANCE(dsInstanceTransform).worldViewProj*position4);
	gl_Position.xy = dsRotateScreenPosition(gl_Position.xy);

	vfViewPosition = (INSTANCE(dsInstanceTransform).worldView*position4).xyz;

	vec3 fixedNormal = normal*2.0 - vec3(1.0);
	vfNormal = (INSTANCE(dsInstanceTransform).worldViewInvTrans*vec4(fixedNormal, 0.0)).xyz;
}

[[fragment]]
void fragmentShader()
{
	vec3 viewDirection = -normalize(vfViewPosition);
	vec3 diffuseLight, specularLight;
	dsComputeForwardLighting(diffuseLight, specularLight, vfViewPosition, normalize(vfNormal),
		uniforms.shininess, viewDirection);

	// Poor-man's Fresnel based on view-space normal.
	float fresnelLikeAlpha = 1.0 - abs(vfNormal.z);
	fresnelLikeAlpha *= fresnelLikeAlpha;
	float alpha = min(uniforms.color.a + fresnelLikeAlpha, 1.0);
	outputColor = vec4(diffuseLight*uniforms.color.rgb*fresnelLikeAlpha + specularLight, alpha);
}

pipeline Glass
{
	vertex = vertexShader;
	fragment = fragmentShader;
	depth_test_enable = true;
	early_fragment_tests = true;
	blend_enable = true;
	// Alpha is pre-multiplied.
	src_blend_factor = one;
	dst_blend_factor = one_minus_src_alpha;
	alpha_blend_op = add;
	cull_mode = back;
}
