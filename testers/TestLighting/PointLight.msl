/*
 * Copyright 2021-2022 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define DS_REVERSE_Z

#include <DeepSea/Scene/Shaders/ViewTransform.mslh>
#include <DeepSea/SceneLighting/Shaders/DeferredPointLight.mslh>

#include <DeepSea/Render/Shaders/Shadows/ShadowPCF4x4.mslh>
#include <DeepSea/Render/Shaders/Shadows/PointShadowMap.mslh>

uniform sampler2DArrayShadow shadowMap;
sampler_state shadowMap
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	compare_op = greater_or_equal;
}

uniform ShadowTransform
{
	mat4 matrices[6];
	vec2 fadeDistances;
	vec3 lightPosition;
} dsShadowTransform;

[[fragment]] uniform subpassInput(0) materialColor;
[[fragment]] uniform subpassInput(1) normalSpecular;
[[fragment]] uniform subpassInput(2) surfaceDepth;
[[fragment]] out vec4 outputColor;

[[fragment]]
void fragmentShader()
{
	vec4 color = subpassLoad(materialColor);
	// Alpha of 0 means clear color.
	if (color.a == 0)
	{
		outputColor = vec4(0.0, 0.0, 0.0, 1.0);
		return;
	}

	vec4 normalSpecularVal = subpassLoad(normalSpecular);
	float depthVal = subpassLoad(surfaceDepth).x;

	vec3 normal;
	normal.xy = normalSpecularVal.xy*2.0 - vec2(1.0);
	normal.z = sqrt(1.0 - min(dot(normal.xy, normal.xy), 1.0));

	float specular = normalSpecularVal.z;
	float shininess = normalSpecularVal.w*256.0;

	vec3 viewPosition = dsGetViewPositionFromScreen(depthVal);
	vec3 viewDirection = -normalize(viewPosition);

	float shadowValue = dsPointShadowMap(shadowMap, INSTANCE(dsShadowTransform).matrices,
		viewPosition, INSTANCE(dsShadowTransform).lightPosition,
		INSTANCE(dsShadowTransform).fadeDistances,
		INSTANCE(dsViewTransform).clipSpaceTexCoordTransform);

	vec3 diffuseLight, specularLight;
	dsDeferredPointLight_lightColor(diffuseLight, specularLight, viewPosition, normal,
		viewDirection, shininess);
	outputColor.xyz = (color.rgb*diffuseLight + specular*specularLight)*shadowValue;
	outputColor.w = 1.0;
}

pipeline PointLight
{
	vertex = dsDeferredPointLight_defaultVertex;
	fragment = fragmentShader;
	DS_DEFERRED_POINT_LIGHT_RENDER_STATES
}
