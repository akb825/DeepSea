/*
 * Copyright 2022 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define DS_REVERSE_Z

#include <DeepSea/Render/Shaders/CoordinateHelpers.mslh>
#include <DeepSea/Render/Shaders/VertexAttributes.mslh>
#include <DeepSea/Scene/Shaders/ViewTransform.mslh>
#include <DeepSea/SceneLighting/Shaders/SSAO.mslh>

#define RADIUS 1.0
#define BIAS 0.0
#define SAMPLES 16

uniform sampler2D prepassNormal;
sampler_state prepassNormal
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
}

uniform sampler2D surfaceDepth;
sampler_state surfaceDepth
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
}

uniform sampler2D randomRotations;
sampler_state randomRotations
{
	address_mode_u = repeat;
	address_mode_v = repeat;
	min_filter = nearest;
	mag_filter = nearest;
}

uniform RandomOffsets
{
	vec3 offsets[DS_MAX_SSAO_SAMPLES];
} randomOffsets;

varying(vertex, fragment)
{
	vec2 vfTexCoords;
}

[[vertex]] layout(location = DS_POSITION) in vec2 viPosition;
[[fragment]] out vec4 outputColor;

[[vertex]]
void vertexShader()
{
	gl_Position = vec4(viPosition, 0.0, 1.0);
	vfTexCoords = dsCommonClipToTexCoords(viPosition);
	gl_Position = DS_ADJUST_DIRECT_CLIP(gl_Position);
}

[[fragment]]
void fragmentShader()
{
	float depth = texture(surfaceDepth, vfTexCoords).x;
	vec2 normalVal = texture(prepassNormal, vfTexCoords).xy;
	vec2 rotationTexCoords = vfTexCoords*vec2(textureSize(prepassNormal, 0))/
		vec2(textureSize(randomRotations, 0));
	vec2 rotation = texture(randomRotations, rotationTexCoords).DS_RG_SWZL*vec2(2.0) - vec2(1.0);

	vec3 normal;
	normal.xy = normalVal.xy*2.0 - vec2(1.0);
	normal.z = sqrt(1.0 - min(dot(normal.xy, normal.xy), 1.0));

	vec3 viewPosition = dsGetViewPositionFromScreen(depth);

	float occlusion = dsComputeSSAO(viewPosition, normal, depth,
		INSTANCE(dsViewTransform).projection, surfaceDepth, INSTANCE(randomOffsets).offsets,
		rotation, RADIUS, SAMPLES, BIAS);
	outputColor = vec4(vec3(occlusion), 1.0);
}

pipeline SSAO
{
	vertex = vertexShader;
	fragment = fragmentShader;
	cull_mode = back;
}
