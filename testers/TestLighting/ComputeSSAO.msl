/*
 * Copyright 2022 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define DS_REVERSE_Z

#include <DeepSea/Render/Shaders/CoordinateHelpers.mslh>
#include <DeepSea/Scene/Shaders/ViewTransform.mslh>
#include <DeepSea/SceneLighting/Shaders/SSAO.mslh>

#define GROUP_SWIZZLE 8
#define RADIUS 1.0
#define BIAS 0.0001
#define SAMPLES 16

uniform sampler2D prepassNormal;
sampler_state prepassNormal
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
}

uniform sampler2D surfaceDepth;
sampler_state surfaceDepth
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
}

uniform sampler2D randomRotations;
sampler_state randomRotations
{
	address_mode_u = repeat;
	address_mode_v = repeat;
	min_filter = nearest;
	mag_filter = nearest;
}

uniform restrict writeonly image2D ssao;

[[compute]]
layout(local_size_x = DS_SCENE_COMPUTE_SSAO_TILE_SIZE,
	local_size_y = DS_SCENE_COMPUTE_SSAO_TILE_SIZE) in;

[[compute]]
void computeShader()
{
	ivec2 screenSize = imageSize(ssao);
	ivec2 imageCoords = ivec2(dsSwizzleGlobalInvocationID(GROUP_SWIZZLE, gl_WorkGroupSize.xy));
	if (any(greaterThanEqual(imageCoords, screenSize)))
		return;

	vec2 texCoords = vec2(imageCoords)/vec2(screenSize);
	float depth = texture(surfaceDepth, texCoords).x;
	vec2 normalVal = texture(prepassNormal, texCoords).xy;
	vec2 rotationTexCoords = vec2(imageCoords)/vec2(textureSize(randomRotations, 0));
	vec2 rotation = texture(randomRotations, rotationTexCoords).DS_RG_SWZL*vec2(2.0) - vec2(1.0);

	vec3 normal;
	normal.xy = normalVal.xy*2.0 - vec2(1.0);
	normal.z = sqrt(1.0 - min(dot(normal.xy, normal.xy), 1.0));

	// Compute the clip position based on the texture coordinates to get the view position.
	vec2 clipCoords = texCoords*2.0 - vec2(1.0);
	clipCoords.y = -clipCoords.y;
	clipCoords = DS_ADJUST_DIRECT_CLIP(vec4(dsRotateScreenPosition(clipCoords), 0.0, 1.0)).xy;
	vec3 viewPosition = dsGetViewPositionFromClip(vec3(clipCoords, depth));

	float occlusion = dsComputeSSAO(viewPosition, normal, depth,
		INSTANCE(dsViewTransform).projection, surfaceDepth, rotation, RADIUS, SAMPLES, BIAS);
	imageStore(ssao, imageCoords, vec4(occlusion));
}

pipeline SSAO
{
	compute = computeShader;
}
