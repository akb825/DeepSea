/*
 * Copyright 2022 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <DeepSea/Scene/Shaders/ViewTransform.mslh>
#include <DeepSea/SceneLighting/Shaders/DeferredAmbientLight.mslh>
#include <DeepSea/SceneLighting/Shaders/SSAO.mslh>

#define MIN_AMBIENT 0.0
#define MAX_AMBIENT 1.0

uniform sampler2D materialColor;
sampler_state materialColor
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = nearest;
	mag_filter = nearest;
}

uniform sampler2D ssao;
sampler_state ssao
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
}

[[fragment]] out vec4 outputColor;

[[fragment]]
void fragmentShader()
{
	vec2 texCoord = dsGetScreenTextureCoordinates();
	vec4 color = texture(materialColor, texCoord);
	// Alpha of 0 means clear color.
	if (color.a == 0)
		outputColor = vec4(color.rgb, 1.0);
	else
	{
		float occlusion = mix(MIN_AMBIENT, MAX_AMBIENT, dsQuerySSAO(ssao, texCoord));
		outputColor = vec4(color.rgb*vfLightColor*occlusion, 1.0);
	}
}

pipeline AmbientLight
{
	vertex = dsDeferredAmbientLight_defaultVertex;
	fragment = fragmentShader;
	DS_DEFERRED_AMBIENT_LIGHT_RENDER_STATES
}
