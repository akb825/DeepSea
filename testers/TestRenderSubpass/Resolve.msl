/*
 * Copyright 2017 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <DeepSea/Render/Shaders/VertexAttributes.mslh>

[[fragment]] uniform subpassInput(0) channelR;
[[fragment]] uniform subpassInput(1) channelG;
[[fragment]] uniform subpassInput(2) channelB;

[[vertex]] layout(location = DS_POSITION) in vec2 position;

struct VertexOut
{
	vec2 texCoord;
};

[[vertex]] out VertexOut vertexOut;
[[fragment]] in VertexOut vertexOut;

[[fragment]] out vec4 color;

[[vertex]]
void vertexShader()
{
	gl_Position = DS_ADJUST_CLIP(vec4(position, 0.0, 1.0));
	vertexOut.texCoord = position;
}

[[fragment]]
void fragmentShader()
{
	color = vec4(subpassLoad(channelR).r, subpassLoad(channelG).r, subpassLoad(channelB).r, 1.0);
}

pipeline Resolve
{
	vertex = vertexShader;
	fragment = fragmentShader;
}
