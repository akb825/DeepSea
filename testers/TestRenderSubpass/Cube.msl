/*
 * Copyright 2017-2017 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <DeepSea/Render/Shaders/VertexAttributes.mslh>

uniform Transform
{
	mat4 modelViewProjection;
} transform;

uniform int channel;

uniform sampler2D tex;
sampler_state tex
{
	address_mode_u = clamp_to_edge;
	address_mode_v = clamp_to_edge;
	min_filter = linear;
	mag_filter = linear;
	mip_filter = anisotropic;
}

[[vertex]] layout(location = DS_POSITION) in vec3 position;
[[vertex]] layout(location = DS_TEXCOORD0) in vec2 texCoord;

varying(vertex, fragment)
{
	vec2 vfTexCoord;
}

[[fragment]] out vec4 color;

[[vertex]]
void vertexShader()
{
	gl_Position = DS_ADJUST_CLIP(INSTANCE(transform).modelViewProjection*vec4(position, 1.0));
	vfTexCoord = texCoord;
}

[[fragment]]
void fragmentShader()
{
	color = vec4(texture(tex, vfTexCoord)[uniforms.channel]);
}

pipeline Cube
{
	vertex = vertexShader;
	fragment = fragmentShader;
	depth_test_enable = true;
	early_fragment_tests = true;
	cull_mode = back;
}
