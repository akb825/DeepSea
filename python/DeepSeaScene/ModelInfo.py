# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ModelInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModelInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModelInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ModelInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModelInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelInfo
    def Shader(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelInfo
    def Material(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelInfo
    def Geometry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelInfo
    def DistanceRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def DrawRanges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.ModelDrawRange import ModelDrawRange
            obj = ModelDrawRange()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelInfo
    def DrawRangesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelInfo
    def DrawRangesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ModelInfo
    def PrimitiveType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ModelInfo
    def ModelList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ModelInfoStart(builder):
    builder.StartObject(8)

def Start(builder):
    ModelInfoStart(builder)

def ModelInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ModelInfoAddName(builder, name)

def ModelInfoAddShader(builder, shader):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shader), 0)

def AddShader(builder, shader):
    ModelInfoAddShader(builder, shader)

def ModelInfoAddMaterial(builder, material):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(material), 0)

def AddMaterial(builder, material):
    ModelInfoAddMaterial(builder, material)

def ModelInfoAddGeometry(builder, geometry):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(geometry), 0)

def AddGeometry(builder, geometry):
    ModelInfoAddGeometry(builder, geometry)

def ModelInfoAddDistanceRange(builder, distanceRange):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(distanceRange), 0)

def AddDistanceRange(builder, distanceRange):
    ModelInfoAddDistanceRange(builder, distanceRange)

def ModelInfoAddDrawRanges(builder, drawRanges):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(drawRanges), 0)

def AddDrawRanges(builder, drawRanges):
    ModelInfoAddDrawRanges(builder, drawRanges)

def ModelInfoStartDrawRangesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDrawRangesVector(builder, numElems):
    return ModelInfoStartDrawRangesVector(builder, numElems)

def ModelInfoAddPrimitiveType(builder, primitiveType):
    builder.PrependUint8Slot(6, primitiveType, 0)

def AddPrimitiveType(builder, primitiveType):
    ModelInfoAddPrimitiveType(builder, primitiveType)

def ModelInfoAddModelList(builder, modelList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(modelList), 0)

def AddModelList(builder, modelList):
    ModelInfoAddModelList(builder, modelList)

def ModelInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return ModelInfoEnd(builder)
