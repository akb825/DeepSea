# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShiftNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShiftNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShiftNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShiftNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShiftNode
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector3d import Vector3d
            obj = Vector3d()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ShiftNode
    def Children(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.ObjectData import ObjectData
            obj = ObjectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ShiftNode
    def ChildrenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShiftNode
    def ChildrenIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ShiftNode
    def ItemLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ShiftNode
    def ItemListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShiftNode
    def ItemListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ShiftNodeStart(builder):
    builder.StartObject(3)

def Start(builder):
    ShiftNodeStart(builder)

def ShiftNodeAddOrigin(builder, origin):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    ShiftNodeAddOrigin(builder, origin)

def ShiftNodeAddChildren(builder, children):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(children), 0)

def AddChildren(builder, children):
    ShiftNodeAddChildren(builder, children)

def ShiftNodeStartChildrenVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartChildrenVector(builder, numElems):
    return ShiftNodeStartChildrenVector(builder, numElems)

def ShiftNodeAddItemLists(builder, itemLists):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemLists), 0)

def AddItemLists(builder, itemLists):
    ShiftNodeAddItemLists(builder, itemLists)

def ShiftNodeStartItemListsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemListsVector(builder, numElems):
    return ShiftNodeStartItemListsVector(builder, numElems)

def ShiftNodeEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShiftNodeEnd(builder)
