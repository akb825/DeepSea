# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MaterialCopy(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MaterialCopy()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMaterialCopy(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MaterialCopy
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MaterialCopy
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialCopy
    def BaseMaterial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialCopy
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialCopy
    def AddData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.VariableData import VariableData
            obj = VariableData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialCopy
    def AddDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialCopy
    def AddDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # MaterialCopy
    def RemoveData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MaterialCopy
    def RemoveDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialCopy
    def RemoveDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def MaterialCopyStart(builder):
    builder.StartObject(5)

def Start(builder):
    MaterialCopyStart(builder)

def MaterialCopyAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MaterialCopyAddName(builder, name)

def MaterialCopyAddBaseMaterial(builder, baseMaterial):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(baseMaterial), 0)

def AddBaseMaterial(builder, baseMaterial):
    MaterialCopyAddBaseMaterial(builder, baseMaterial)

def MaterialCopyAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    MaterialCopyAddDescription(builder, description)

def MaterialCopyAddAddData(builder, addData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(addData), 0)

def AddAddData(builder, addData):
    MaterialCopyAddAddData(builder, addData)

def MaterialCopyStartAddDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAddDataVector(builder, numElems):
    return MaterialCopyStartAddDataVector(builder, numElems)

def MaterialCopyAddRemoveData(builder, removeData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(removeData), 0)

def AddRemoveData(builder, removeData):
    MaterialCopyAddRemoveData(builder, removeData)

def MaterialCopyStartRemoveDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRemoveDataVector(builder, numElems):
    return MaterialCopyStartRemoveDataVector(builder, numElems)

def MaterialCopyEnd(builder):
    return builder.EndObject()

def End(builder):
    return MaterialCopyEnd(builder)
