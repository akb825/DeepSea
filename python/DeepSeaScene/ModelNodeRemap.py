# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ModelNodeRemap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModelNodeRemap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModelNodeRemap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ModelNodeRemap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModelNodeRemap
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelNodeRemap
    def MaterialRemaps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.MaterialRemap import MaterialRemap
            obj = MaterialRemap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelNodeRemap
    def MaterialRemapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelNodeRemap
    def MaterialRemapsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ModelNodeRemapStart(builder):
    builder.StartObject(2)

def Start(builder):
    ModelNodeRemapStart(builder)

def ModelNodeRemapAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ModelNodeRemapAddName(builder, name)

def ModelNodeRemapAddMaterialRemaps(builder, materialRemaps):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(materialRemaps), 0)

def AddMaterialRemaps(builder, materialRemaps):
    ModelNodeRemapAddMaterialRemaps(builder, materialRemaps)

def ModelNodeRemapStartMaterialRemapsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialRemapsVector(builder, numElems):
    return ModelNodeRemapStartMaterialRemapsVector(builder, numElems)

def ModelNodeRemapEnd(builder):
    return builder.EndObject()

def End(builder):
    return ModelNodeRemapEnd(builder)
