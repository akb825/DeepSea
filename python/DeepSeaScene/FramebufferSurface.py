# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers

class FramebufferSurface(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFramebufferSurface(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FramebufferSurface()
        x.Init(buf, n + offset)
        return x

    # FramebufferSurface
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FramebufferSurface
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FramebufferSurface
    def Face(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # FramebufferSurface
    def Layer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FramebufferSurface
    def MipLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FramebufferSurfaceStart(builder): builder.StartObject(4)
def FramebufferSurfaceAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def FramebufferSurfaceAddFace(builder, face): builder.PrependUint8Slot(1, face, 0)
def FramebufferSurfaceAddLayer(builder, layer): builder.PrependUint32Slot(2, layer, 0)
def FramebufferSurfaceAddMipLevel(builder, mipLevel): builder.PrependUint32Slot(3, mipLevel, 0)
def FramebufferSurfaceEnd(builder): return builder.EndObject()
