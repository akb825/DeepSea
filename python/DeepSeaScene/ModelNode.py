# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ModelNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModelNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModelNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ModelNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModelNode
    def EmbeddedResources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ModelNode
    def EmbeddedResourcesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ModelNode
    def EmbeddedResourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelNode
    def EmbeddedResourcesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ModelNode
    def Models(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.ModelInfo import ModelInfo
            obj = ModelInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelNode
    def ModelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelNode
    def ModelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ModelNode
    def ExtraItemLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ModelNode
    def ExtraItemListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelNode
    def ExtraItemListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ModelNode
    def Bounds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.OrientedBox3f import OrientedBox3f
            obj = OrientedBox3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(4)
def ModelNodeStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEmbeddedResources(builder, embeddedResources): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(embeddedResources), 0)
def ModelNodeAddEmbeddedResources(builder, embeddedResources):
    """This method is deprecated. Please switch to AddEmbeddedResources."""
    return AddEmbeddedResources(builder, embeddedResources)
def StartEmbeddedResourcesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ModelNodeStartEmbeddedResourcesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEmbeddedResourcesVector(builder, numElems)
def AddModels(builder, models): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(models), 0)
def ModelNodeAddModels(builder, models):
    """This method is deprecated. Please switch to AddModels."""
    return AddModels(builder, models)
def StartModelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ModelNodeStartModelsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartModelsVector(builder, numElems)
def AddExtraItemLists(builder, extraItemLists): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(extraItemLists), 0)
def ModelNodeAddExtraItemLists(builder, extraItemLists):
    """This method is deprecated. Please switch to AddExtraItemLists."""
    return AddExtraItemLists(builder, extraItemLists)
def StartExtraItemListsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ModelNodeStartExtraItemListsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExtraItemListsVector(builder, numElems)
def AddBounds(builder, bounds): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bounds), 0)
def ModelNodeAddBounds(builder, bounds):
    """This method is deprecated. Please switch to AddBounds."""
    return AddBounds(builder, bounds)
def End(builder): return builder.EndObject()
def ModelNodeEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)