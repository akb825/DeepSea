# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RenderPass(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RenderPass()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRenderPass(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RenderPass
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RenderPass
    def Framebuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RenderPass
    def Attachments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.Attachment import Attachment
            obj = Attachment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RenderPass
    def AttachmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RenderPass
    def AttachmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RenderPass
    def Subpasses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.RenderSubpass import RenderSubpass
            obj = RenderSubpass()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RenderPass
    def SubpassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RenderPass
    def SubpassesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RenderPass
    def Dependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 28
            from DeepSeaScene.SubpassDependency import SubpassDependency
            obj = SubpassDependency()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RenderPass
    def DependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RenderPass
    def DependenciesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def RenderPassStart(builder):
    builder.StartObject(4)

def Start(builder):
    RenderPassStart(builder)

def RenderPassAddFramebuffer(builder, framebuffer):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(framebuffer), 0)

def AddFramebuffer(builder, framebuffer):
    RenderPassAddFramebuffer(builder, framebuffer)

def RenderPassAddAttachments(builder, attachments):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(attachments), 0)

def AddAttachments(builder, attachments):
    RenderPassAddAttachments(builder, attachments)

def RenderPassStartAttachmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttachmentsVector(builder, numElems):
    return RenderPassStartAttachmentsVector(builder, numElems)

def RenderPassAddSubpasses(builder, subpasses):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(subpasses), 0)

def AddSubpasses(builder, subpasses):
    RenderPassAddSubpasses(builder, subpasses)

def RenderPassStartSubpassesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSubpassesVector(builder, numElems):
    return RenderPassStartSubpassesVector(builder, numElems)

def RenderPassAddDependencies(builder, dependencies):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dependencies), 0)

def AddDependencies(builder, dependencies):
    RenderPassAddDependencies(builder, dependencies)

def RenderPassStartDependenciesVector(builder, numElems):
    return builder.StartVector(28, numElems, 4)

def StartDependenciesVector(builder, numElems):
    return RenderPassStartDependenciesVector(builder, numElems)

def RenderPassEnd(builder):
    return builder.EndObject()

def End(builder):
    return RenderPassEnd(builder)
