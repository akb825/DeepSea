# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers

class RenderPass(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRenderPass(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RenderPass()
        x.Init(buf, n + offset)
        return x

    # RenderPass
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RenderPass
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RenderPass
    def Framebuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RenderPass
    def Attachments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Attachment import Attachment
            obj = Attachment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RenderPass
    def AttachmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RenderPass
    def Subpasses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .RenderSubpass import RenderSubpass
            obj = RenderSubpass()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RenderPass
    def SubpassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RenderPass
    def Dependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 28
            from .SubpassDependency import SubpassDependency
            obj = SubpassDependency()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RenderPass
    def DependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RenderPass
    def DefaultDependencies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def RenderPassStart(builder): builder.StartObject(6)
def RenderPassAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def RenderPassAddFramebuffer(builder, framebuffer): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(framebuffer), 0)
def RenderPassAddAttachments(builder, attachments): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(attachments), 0)
def RenderPassStartAttachmentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RenderPassAddSubpasses(builder, subpasses): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subpasses), 0)
def RenderPassStartSubpassesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RenderPassAddDependencies(builder, dependencies): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dependencies), 0)
def RenderPassStartDependenciesVector(builder, numElems): return builder.StartVector(28, numElems, 4)
def RenderPassAddDefaultDependencies(builder, defaultDependencies): builder.PrependBoolSlot(5, defaultDependencies, 0)
def RenderPassEnd(builder): return builder.EndObject()
