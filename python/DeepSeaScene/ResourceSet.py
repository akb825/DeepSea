# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers

class ResourceSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsResourceSet(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ResourceSet()
        x.Init(buf, n + offset)
        return x

    # ResourceSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ResourceSet
    def Buffers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Buffer import Buffer
            obj = Buffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def BuffersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def Textures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Texture import Texture
            obj = Texture()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def TexturesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def ShaderVariableGroupDescs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ShaderVariableGroupDesc import ShaderVariableGroupDesc
            obj = ShaderVariableGroupDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def ShaderVariableGroupDescsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def ShaderVariableGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ShaderData import ShaderData
            obj = ShaderData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def ShaderVariableGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def MaterialDescs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MaterialDesc import MaterialDesc
            obj = MaterialDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def MaterialDescsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def Materials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ShaderData import ShaderData
            obj = ShaderData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def MaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def ShaderModules(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ShaderModule import ShaderModule
            obj = ShaderModule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def ShaderModulesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def Shaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Shader import Shader
            obj = Shader()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def ShadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def DrawGeometries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DrawGeometry import DrawGeometry
            obj = DrawGeometry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def DrawGeometriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceSet
    def SceneNodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .SceneNode import SceneNode
            obj = SceneNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResourceSet
    def SceneNodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ResourceSetStart(builder): builder.StartObject(10)
def ResourceSetAddBuffers(builder, buffers): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffers), 0)
def ResourceSetStartBuffersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddTextures(builder, textures): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(textures), 0)
def ResourceSetStartTexturesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddShaderVariableGroupDescs(builder, shaderVariableGroupDescs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(shaderVariableGroupDescs), 0)
def ResourceSetStartShaderVariableGroupDescsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddShaderVariableGroups(builder, shaderVariableGroups): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(shaderVariableGroups), 0)
def ResourceSetStartShaderVariableGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddMaterialDescs(builder, materialDescs): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(materialDescs), 0)
def ResourceSetStartMaterialDescsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddMaterials(builder, materials): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(materials), 0)
def ResourceSetStartMaterialsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddShaderModules(builder, shaderModules): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(shaderModules), 0)
def ResourceSetStartShaderModulesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddShaders(builder, shaders): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(shaders), 0)
def ResourceSetStartShadersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddDrawGeometries(builder, drawGeometries): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(drawGeometries), 0)
def ResourceSetStartDrawGeometriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetAddSceneNodes(builder, sceneNodes): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(sceneNodes), 0)
def ResourceSetStartSceneNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResourceSetEnd(builder): return builder.EndObject()
