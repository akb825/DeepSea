# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IndexBuffer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IndexBuffer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIndexBuffer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IndexBuffer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IndexBuffer
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IndexBuffer
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IndexBuffer
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # IndexBuffer
    def IndexSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def IndexBufferStart(builder):
    builder.StartObject(4)

def Start(builder):
    IndexBufferStart(builder)

def IndexBufferAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    IndexBufferAddName(builder, name)

def IndexBufferAddOffset(builder, offset):
    builder.PrependUint32Slot(1, offset, 0)

def AddOffset(builder, offset):
    IndexBufferAddOffset(builder, offset)

def IndexBufferAddCount(builder, count):
    builder.PrependUint32Slot(2, count, 0)

def AddCount(builder, count):
    IndexBufferAddCount(builder, count)

def IndexBufferAddIndexSize(builder, indexSize):
    builder.PrependUint8Slot(3, indexSize, 0)

def AddIndexSize(builder, indexSize):
    IndexBufferAddIndexSize(builder, indexSize)

def IndexBufferEnd(builder):
    return builder.EndObject()

def End(builder):
    return IndexBufferEnd(builder)
