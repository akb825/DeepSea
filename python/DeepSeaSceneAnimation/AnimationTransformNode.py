# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneAnimation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AnimationTransformNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AnimationTransformNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnimationTransformNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AnimationTransformNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AnimationTransformNode
    def AnimatinNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnimationTransformNode
    def ItemLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnimationTransformNode
    def ItemListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnimationTransformNode
    def ItemListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def AnimationTransformNodeStart(builder): builder.StartObject(2)
def Start(builder):
    return AnimationTransformNodeStart(builder)
def AnimationTransformNodeAddAnimatinNode(builder, animatinNode): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(animatinNode), 0)
def AddAnimatinNode(builder, animatinNode):
    return AnimationTransformNodeAddAnimatinNode(builder, animatinNode)
def AnimationTransformNodeAddItemLists(builder, itemLists): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemLists), 0)
def AddItemLists(builder, itemLists):
    return AnimationTransformNodeAddItemLists(builder, itemLists)
def AnimationTransformNodeStartItemListsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartItemListsVector(builder, numElems):
    return AnimationTransformNodeStartItemListsVector(builder, numElems)
def AnimationTransformNodeEnd(builder): return builder.EndObject()
def End(builder):
    return AnimationTransformNodeEnd(builder)