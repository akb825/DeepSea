# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneAnimation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AnimationNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AnimationNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnimationNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AnimationNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AnimationNode
    def NodeMapCache(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnimationNode
    def Children(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.ObjectData import ObjectData
            obj = ObjectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AnimationNode
    def ChildrenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnimationNode
    def ChildrenIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # AnimationNode
    def ItemLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnimationNode
    def ItemListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnimationNode
    def ItemListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def AnimationNodeStart(builder): builder.StartObject(3)
def Start(builder):
    return AnimationNodeStart(builder)
def AnimationNodeAddNodeMapCache(builder, nodeMapCache): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeMapCache), 0)
def AddNodeMapCache(builder, nodeMapCache):
    return AnimationNodeAddNodeMapCache(builder, nodeMapCache)
def AnimationNodeAddChildren(builder, children): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(children), 0)
def AddChildren(builder, children):
    return AnimationNodeAddChildren(builder, children)
def AnimationNodeStartChildrenVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChildrenVector(builder, numElems):
    return AnimationNodeStartChildrenVector(builder, numElems)
def AnimationNodeAddItemLists(builder, itemLists): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemLists), 0)
def AddItemLists(builder, itemLists):
    return AnimationNodeAddItemLists(builder, itemLists)
def AnimationNodeStartItemListsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartItemListsVector(builder, numElems):
    return AnimationNodeStartItemListsVector(builder, numElems)
def AnimationNodeEnd(builder): return builder.EndObject()
def End(builder):
    return AnimationNodeEnd(builder)