# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScenePhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PhysicsList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PhysicsList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPhysicsList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PhysicsList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PhysicsList
    def MaxStaticBodies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def MaxDynamicBodies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def MaxConstrainedBodyGroups(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def MaxStaticShapes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def MaxDynamicShapes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def MaxConstraints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def MaxBodyCollisionPairs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def MaxContactPoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PhysicsList
    def Gravity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PhysicsList
    def MultiThreadedModifications(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PhysicsList
    def TargetStepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.01666667

def PhysicsListStart(builder):
    builder.StartObject(11)

def Start(builder):
    PhysicsListStart(builder)

def PhysicsListAddMaxStaticBodies(builder, maxStaticBodies):
    builder.PrependUint32Slot(0, maxStaticBodies, 0)

def AddMaxStaticBodies(builder, maxStaticBodies):
    PhysicsListAddMaxStaticBodies(builder, maxStaticBodies)

def PhysicsListAddMaxDynamicBodies(builder, maxDynamicBodies):
    builder.PrependUint32Slot(1, maxDynamicBodies, 0)

def AddMaxDynamicBodies(builder, maxDynamicBodies):
    PhysicsListAddMaxDynamicBodies(builder, maxDynamicBodies)

def PhysicsListAddMaxConstrainedBodyGroups(builder, maxConstrainedBodyGroups):
    builder.PrependUint32Slot(2, maxConstrainedBodyGroups, 0)

def AddMaxConstrainedBodyGroups(builder, maxConstrainedBodyGroups):
    PhysicsListAddMaxConstrainedBodyGroups(builder, maxConstrainedBodyGroups)

def PhysicsListAddMaxStaticShapes(builder, maxStaticShapes):
    builder.PrependUint32Slot(3, maxStaticShapes, 0)

def AddMaxStaticShapes(builder, maxStaticShapes):
    PhysicsListAddMaxStaticShapes(builder, maxStaticShapes)

def PhysicsListAddMaxDynamicShapes(builder, maxDynamicShapes):
    builder.PrependUint32Slot(4, maxDynamicShapes, 0)

def AddMaxDynamicShapes(builder, maxDynamicShapes):
    PhysicsListAddMaxDynamicShapes(builder, maxDynamicShapes)

def PhysicsListAddMaxConstraints(builder, maxConstraints):
    builder.PrependUint32Slot(5, maxConstraints, 0)

def AddMaxConstraints(builder, maxConstraints):
    PhysicsListAddMaxConstraints(builder, maxConstraints)

def PhysicsListAddMaxBodyCollisionPairs(builder, maxBodyCollisionPairs):
    builder.PrependUint32Slot(6, maxBodyCollisionPairs, 0)

def AddMaxBodyCollisionPairs(builder, maxBodyCollisionPairs):
    PhysicsListAddMaxBodyCollisionPairs(builder, maxBodyCollisionPairs)

def PhysicsListAddMaxContactPoints(builder, maxContactPoints):
    builder.PrependUint32Slot(7, maxContactPoints, 0)

def AddMaxContactPoints(builder, maxContactPoints):
    PhysicsListAddMaxContactPoints(builder, maxContactPoints)

def PhysicsListAddGravity(builder, gravity):
    builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(gravity), 0)

def AddGravity(builder, gravity):
    PhysicsListAddGravity(builder, gravity)

def PhysicsListAddMultiThreadedModifications(builder, multiThreadedModifications):
    builder.PrependBoolSlot(9, multiThreadedModifications, 0)

def AddMultiThreadedModifications(builder, multiThreadedModifications):
    PhysicsListAddMultiThreadedModifications(builder, multiThreadedModifications)

def PhysicsListAddTargetStepTime(builder, targetStepTime):
    builder.PrependFloat32Slot(10, targetStepTime, 0.01666667)

def AddTargetStepTime(builder, targetStepTime):
    PhysicsListAddTargetStepTime(builder, targetStepTime)

def PhysicsListEnd(builder):
    return builder.EndObject()

def End(builder):
    return PhysicsListEnd(builder)
