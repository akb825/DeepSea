# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScenePhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstraintNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstraintNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstraintNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstraintNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstraintNode
    def Constraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstraintNode
    def FirstActorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConstraintNode
    def FirstActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # ConstraintNode
    def FirstConnectedConstraintType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConstraintNode
    def FirstConnectedConstraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # ConstraintNode
    def SecondActorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConstraintNode
    def SecondActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # ConstraintNode
    def SecondConnectedConstraintType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConstraintNode
    def SecondConnectedConstraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # ConstraintNode
    def ItemLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ConstraintNode
    def ItemListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstraintNode
    def ItemListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def ConstraintNodeStart(builder):
    builder.StartObject(10)

def Start(builder):
    ConstraintNodeStart(builder)

def ConstraintNodeAddConstraint(builder, constraint):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constraint), 0)

def AddConstraint(builder, constraint):
    ConstraintNodeAddConstraint(builder, constraint)

def ConstraintNodeAddFirstActorType(builder, firstActorType):
    builder.PrependUint8Slot(1, firstActorType, 0)

def AddFirstActorType(builder, firstActorType):
    ConstraintNodeAddFirstActorType(builder, firstActorType)

def ConstraintNodeAddFirstActor(builder, firstActor):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(firstActor), 0)

def AddFirstActor(builder, firstActor):
    ConstraintNodeAddFirstActor(builder, firstActor)

def ConstraintNodeAddFirstConnectedConstraintType(builder, firstConnectedConstraintType):
    builder.PrependUint8Slot(3, firstConnectedConstraintType, 0)

def AddFirstConnectedConstraintType(builder, firstConnectedConstraintType):
    ConstraintNodeAddFirstConnectedConstraintType(builder, firstConnectedConstraintType)

def ConstraintNodeAddFirstConnectedConstraint(builder, firstConnectedConstraint):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(firstConnectedConstraint), 0)

def AddFirstConnectedConstraint(builder, firstConnectedConstraint):
    ConstraintNodeAddFirstConnectedConstraint(builder, firstConnectedConstraint)

def ConstraintNodeAddSecondActorType(builder, secondActorType):
    builder.PrependUint8Slot(5, secondActorType, 0)

def AddSecondActorType(builder, secondActorType):
    ConstraintNodeAddSecondActorType(builder, secondActorType)

def ConstraintNodeAddSecondActor(builder, secondActor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(secondActor), 0)

def AddSecondActor(builder, secondActor):
    ConstraintNodeAddSecondActor(builder, secondActor)

def ConstraintNodeAddSecondConnectedConstraintType(builder, secondConnectedConstraintType):
    builder.PrependUint8Slot(7, secondConnectedConstraintType, 0)

def AddSecondConnectedConstraintType(builder, secondConnectedConstraintType):
    ConstraintNodeAddSecondConnectedConstraintType(builder, secondConnectedConstraintType)

def ConstraintNodeAddSecondConnectedConstraint(builder, secondConnectedConstraint):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(secondConnectedConstraint), 0)

def AddSecondConnectedConstraint(builder, secondConnectedConstraint):
    ConstraintNodeAddSecondConnectedConstraint(builder, secondConnectedConstraint)

def ConstraintNodeAddItemLists(builder, itemLists):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(itemLists), 0)

def AddItemLists(builder, itemLists):
    ConstraintNodeAddItemLists(builder, itemLists)

def ConstraintNodeStartItemListsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemListsVector(builder, numElems):
    return ConstraintNodeStartItemListsVector(builder, numElems)

def ConstraintNodeEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConstraintNodeEnd(builder)
