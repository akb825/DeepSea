# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaScenePhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RigidBodyGroupNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RigidBodyGroupNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRigidBodyGroupNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RigidBodyGroupNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RigidBodyGroupNode
    def MotionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBodyGroupNode
    def RigidBodyTemplates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RigidBodyGroupNode
    def RigidBodyTemplatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RigidBodyGroupNode
    def RigidBodyTemplatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RigidBodyGroupNode
    def Constraints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RigidBodyGroupNode
    def ConstraintsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RigidBodyGroupNode
    def ConstraintsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RigidBodyGroupNode
    def ItemLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RigidBodyGroupNode
    def ItemListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RigidBodyGroupNode
    def ItemListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def RigidBodyGroupNodeStart(builder):
    builder.StartObject(4)

def Start(builder):
    RigidBodyGroupNodeStart(builder)

def RigidBodyGroupNodeAddMotionType(builder, motionType):
    builder.PrependUint8Slot(0, motionType, 0)

def AddMotionType(builder, motionType):
    RigidBodyGroupNodeAddMotionType(builder, motionType)

def RigidBodyGroupNodeAddRigidBodyTemplates(builder, rigidBodyTemplates):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rigidBodyTemplates), 0)

def AddRigidBodyTemplates(builder, rigidBodyTemplates):
    RigidBodyGroupNodeAddRigidBodyTemplates(builder, rigidBodyTemplates)

def RigidBodyGroupNodeStartRigidBodyTemplatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRigidBodyTemplatesVector(builder, numElems):
    return RigidBodyGroupNodeStartRigidBodyTemplatesVector(builder, numElems)

def RigidBodyGroupNodeAddConstraints(builder, constraints):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(constraints), 0)

def AddConstraints(builder, constraints):
    RigidBodyGroupNodeAddConstraints(builder, constraints)

def RigidBodyGroupNodeStartConstraintsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConstraintsVector(builder, numElems):
    return RigidBodyGroupNodeStartConstraintsVector(builder, numElems)

def RigidBodyGroupNodeAddItemLists(builder, itemLists):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemLists), 0)

def AddItemLists(builder, itemLists):
    RigidBodyGroupNodeAddItemLists(builder, itemLists)

def RigidBodyGroupNodeStartItemListsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemListsVector(builder, numElems):
    return RigidBodyGroupNodeStartItemListsVector(builder, numElems)

def RigidBodyGroupNodeEnd(builder):
    return builder.EndObject()

def End(builder):
    return RigidBodyGroupNodeEnd(builder)
