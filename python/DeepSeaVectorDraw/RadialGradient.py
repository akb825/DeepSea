# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaVectorDraw

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RadialGradient(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RadialGradient()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRadialGradient(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RadialGradient
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RadialGradient
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RadialGradient
    def Gradient(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from DeepSeaVectorDraw.GradientStop import GradientStop
            obj = GradientStop()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RadialGradient
    def GradientLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadialGradient
    def GradientIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RadialGradient
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RadialGradient
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RadialGradient
    def Focus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RadialGradient
    def FocusRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RadialGradient
    def Edge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RadialGradient
    def CoordinateSpace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RadialGradient
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Matrix33f import Matrix33f
            obj = Matrix33f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RadialGradientStart(builder): builder.StartObject(9)
def Start(builder):
    return RadialGradientStart(builder)
def RadialGradientAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return RadialGradientAddName(builder, name)
def RadialGradientAddGradient(builder, gradient): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(gradient), 0)
def AddGradient(builder, gradient):
    return RadialGradientAddGradient(builder, gradient)
def RadialGradientStartGradientVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def StartGradientVector(builder, numElems):
    return RadialGradientStartGradientVector(builder, numElems)
def RadialGradientAddCenter(builder, center): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(center), 0)
def AddCenter(builder, center):
    return RadialGradientAddCenter(builder, center)
def RadialGradientAddRadius(builder, radius): builder.PrependFloat32Slot(3, radius, 0.0)
def AddRadius(builder, radius):
    return RadialGradientAddRadius(builder, radius)
def RadialGradientAddFocus(builder, focus): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(focus), 0)
def AddFocus(builder, focus):
    return RadialGradientAddFocus(builder, focus)
def RadialGradientAddFocusRadius(builder, focusRadius): builder.PrependFloat32Slot(5, focusRadius, 0.0)
def AddFocusRadius(builder, focusRadius):
    return RadialGradientAddFocusRadius(builder, focusRadius)
def RadialGradientAddEdge(builder, edge): builder.PrependUint8Slot(6, edge, 0)
def AddEdge(builder, edge):
    return RadialGradientAddEdge(builder, edge)
def RadialGradientAddCoordinateSpace(builder, coordinateSpace): builder.PrependUint8Slot(7, coordinateSpace, 0)
def AddCoordinateSpace(builder, coordinateSpace):
    return RadialGradientAddCoordinateSpace(builder, coordinateSpace)
def RadialGradientAddTransform(builder, transform): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(transform), 0)
def AddTransform(builder, transform):
    return RadialGradientAddTransform(builder, transform)
def RadialGradientEnd(builder): return builder.EndObject()
def End(builder):
    return RadialGradientEnd(builder)