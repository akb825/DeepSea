# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaVectorDraw

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArcCommand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArcCommand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArcCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArcCommand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArcCommand
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ArcCommand
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ArcCommand
    def LargeArc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ArcCommand
    def Clockwise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ArcCommand
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(5)
def ArcCommandStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRadius(builder, radius): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(radius), 0)
def ArcCommandAddRadius(builder, radius):
    """This method is deprecated. Please switch to AddRadius."""
    return AddRadius(builder, radius)
def AddRotation(builder, rotation): builder.PrependFloat32Slot(1, rotation, 0.0)
def ArcCommandAddRotation(builder, rotation):
    """This method is deprecated. Please switch to AddRotation."""
    return AddRotation(builder, rotation)
def AddLargeArc(builder, largeArc): builder.PrependBoolSlot(2, largeArc, 0)
def ArcCommandAddLargeArc(builder, largeArc):
    """This method is deprecated. Please switch to AddLargeArc."""
    return AddLargeArc(builder, largeArc)
def AddClockwise(builder, clockwise): builder.PrependBoolSlot(3, clockwise, 0)
def ArcCommandAddClockwise(builder, clockwise):
    """This method is deprecated. Please switch to AddClockwise."""
    return AddClockwise(builder, clockwise)
def AddEnd(builder, end): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(end), 0)
def ArcCommandAddEnd(builder, end):
    """This method is deprecated. Please switch to AddEnd."""
    return AddEnd(builder, end)
def End(builder): return builder.EndObject()
def ArcCommandEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)