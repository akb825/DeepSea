# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaVectorDraw

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LinearGradient(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinearGradient()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinearGradient(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LinearGradient
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LinearGradient
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinearGradient
    def Gradient(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from DeepSeaVectorDraw.GradientStop import GradientStop
            obj = GradientStop()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearGradient
    def GradientLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinearGradient
    def GradientIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # LinearGradient
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearGradient
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearGradient
    def Edge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # LinearGradient
    def CoordinateSpace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # LinearGradient
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Matrix33f import Matrix33f
            obj = Matrix33f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LinearGradientStart(builder):
    builder.StartObject(7)

def Start(builder):
    LinearGradientStart(builder)

def LinearGradientAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    LinearGradientAddName(builder, name)

def LinearGradientAddGradient(builder, gradient):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(gradient), 0)

def AddGradient(builder, gradient):
    LinearGradientAddGradient(builder, gradient)

def LinearGradientStartGradientVector(builder, numElems):
    return builder.StartVector(8, numElems, 4)

def StartGradientVector(builder, numElems: int) -> int:
    return LinearGradientStartGradientVector(builder, numElems)

def LinearGradientAddStart(builder, start):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    LinearGradientAddStart(builder, start)

def LinearGradientAddEnd(builder, end):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(end), 0)

def AddEnd(builder, end):
    LinearGradientAddEnd(builder, end)

def LinearGradientAddEdge(builder, edge):
    builder.PrependUint8Slot(4, edge, 0)

def AddEdge(builder, edge):
    LinearGradientAddEdge(builder, edge)

def LinearGradientAddCoordinateSpace(builder, coordinateSpace):
    builder.PrependUint8Slot(5, coordinateSpace, 0)

def AddCoordinateSpace(builder, coordinateSpace):
    LinearGradientAddCoordinateSpace(builder, coordinateSpace)

def LinearGradientAddTransform(builder, transform):
    builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(transform), 0)

def AddTransform(builder, transform):
    LinearGradientAddTransform(builder, transform)

def LinearGradientEnd(builder):
    return builder.EndObject()

def End(builder):
    return LinearGradientEnd(builder)
