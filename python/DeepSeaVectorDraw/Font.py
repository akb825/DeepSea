# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaVectorDraw

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Font(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Font()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFont(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Font
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Font
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Font
    def FaceGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Font
    def Faces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Font
    def FacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Font
    def FacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Font
    def Quality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Font
    def CacheSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(5)
def FontStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def FontAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def AddFaceGroup(builder, faceGroup): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(faceGroup), 0)
def FontAddFaceGroup(builder, faceGroup):
    """This method is deprecated. Please switch to AddFaceGroup."""
    return AddFaceGroup(builder, faceGroup)
def AddFaces(builder, faces): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(faces), 0)
def FontAddFaces(builder, faces):
    """This method is deprecated. Please switch to AddFaces."""
    return AddFaces(builder, faces)
def StartFacesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FontStartFacesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFacesVector(builder, numElems)
def AddQuality(builder, quality): builder.PrependUint8Slot(3, quality, 0)
def FontAddQuality(builder, quality):
    """This method is deprecated. Please switch to AddQuality."""
    return AddQuality(builder, quality)
def AddCacheSize(builder, cacheSize): builder.PrependUint8Slot(4, cacheSize, 0)
def FontAddCacheSize(builder, cacheSize):
    """This method is deprecated. Please switch to AddCacheSize."""
    return AddCacheSize(builder, cacheSize)
def End(builder): return builder.EndObject()
def FontEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)