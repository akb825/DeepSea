# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaVectorDraw

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorImage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorImage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorImage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VectorImage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorImage
    def ColorMaterials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaVectorDraw.ColorMaterial import ColorMaterial
            obj = ColorMaterial()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VectorImage
    def ColorMaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorImage
    def ColorMaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # VectorImage
    def LinearGradients(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaVectorDraw.LinearGradient import LinearGradient
            obj = LinearGradient()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VectorImage
    def LinearGradientsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorImage
    def LinearGradientsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # VectorImage
    def RadialGradients(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaVectorDraw.RadialGradient import RadialGradient
            obj = RadialGradient()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VectorImage
    def RadialGradientsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorImage
    def RadialGradientsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # VectorImage
    def Commands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaVectorDraw.VectorCommand import VectorCommand
            obj = VectorCommand()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VectorImage
    def CommandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorImage
    def CommandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # VectorImage
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaVectorDraw.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(5)
def VectorImageStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddColorMaterials(builder, colorMaterials): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(colorMaterials), 0)
def VectorImageAddColorMaterials(builder, colorMaterials):
    """This method is deprecated. Please switch to AddColorMaterials."""
    return AddColorMaterials(builder, colorMaterials)
def StartColorMaterialsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VectorImageStartColorMaterialsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartColorMaterialsVector(builder, numElems)
def AddLinearGradients(builder, linearGradients): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linearGradients), 0)
def VectorImageAddLinearGradients(builder, linearGradients):
    """This method is deprecated. Please switch to AddLinearGradients."""
    return AddLinearGradients(builder, linearGradients)
def StartLinearGradientsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VectorImageStartLinearGradientsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartLinearGradientsVector(builder, numElems)
def AddRadialGradients(builder, radialGradients): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(radialGradients), 0)
def VectorImageAddRadialGradients(builder, radialGradients):
    """This method is deprecated. Please switch to AddRadialGradients."""
    return AddRadialGradients(builder, radialGradients)
def StartRadialGradientsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VectorImageStartRadialGradientsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRadialGradientsVector(builder, numElems)
def AddCommands(builder, commands): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(commands), 0)
def VectorImageAddCommands(builder, commands):
    """This method is deprecated. Please switch to AddCommands."""
    return AddCommands(builder, commands)
def StartCommandsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VectorImageStartCommandsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCommandsVector(builder, numElems)
def AddSize(builder, size): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)
def VectorImageAddSize(builder, size):
    """This method is deprecated. Please switch to AddSize."""
    return AddSize(builder, size)
def End(builder): return builder.EndObject()
def VectorImageEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)