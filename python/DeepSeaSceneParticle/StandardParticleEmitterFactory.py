# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneParticle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StandardParticleEmitterFactory(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StandardParticleEmitterFactory()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStandardParticleEmitterFactory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StandardParticleEmitterFactory
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StandardParticleEmitterFactory
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneParticle.ParticleEmitterParams import ParticleEmitterParams
            obj = ParticleEmitterParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def SpawnVolumeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StandardParticleEmitterFactory
    def SpawnVolume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # StandardParticleEmitterFactory
    def SpawnVolumeMatrix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Matrix44f import Matrix44f
            obj = Matrix44f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def WidthRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def HeightRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def RotationRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def BaseDirection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def DirectionSpread(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StandardParticleEmitterFactory
    def SpawnTimeRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def ActiveTimeRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def SpeedRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def RotationSpeedRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def TextureRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaSceneParticle.Vector2u import Vector2u
            obj = Vector2u()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def ColorHueRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def ColorSaturationRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def ColorValueRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def ColorAlphaRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def IntensityRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardParticleEmitterFactory
    def RelativeNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StandardParticleEmitterFactory
    def Seed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # StandardParticleEmitterFactory
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StandardParticleEmitterFactory
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def StandardParticleEmitterFactoryStart(builder): builder.StartObject(23)
def Start(builder):
    return StandardParticleEmitterFactoryStart(builder)
def StandardParticleEmitterFactoryAddParams(builder, params): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def AddParams(builder, params):
    return StandardParticleEmitterFactoryAddParams(builder, params)
def StandardParticleEmitterFactoryAddSpawnVolumeType(builder, spawnVolumeType): builder.PrependUint8Slot(1, spawnVolumeType, 0)
def AddSpawnVolumeType(builder, spawnVolumeType):
    return StandardParticleEmitterFactoryAddSpawnVolumeType(builder, spawnVolumeType)
def StandardParticleEmitterFactoryAddSpawnVolume(builder, spawnVolume): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(spawnVolume), 0)
def AddSpawnVolume(builder, spawnVolume):
    return StandardParticleEmitterFactoryAddSpawnVolume(builder, spawnVolume)
def StandardParticleEmitterFactoryAddSpawnVolumeMatrix(builder, spawnVolumeMatrix): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spawnVolumeMatrix), 0)
def AddSpawnVolumeMatrix(builder, spawnVolumeMatrix):
    return StandardParticleEmitterFactoryAddSpawnVolumeMatrix(builder, spawnVolumeMatrix)
def StandardParticleEmitterFactoryAddWidthRange(builder, widthRange): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(widthRange), 0)
def AddWidthRange(builder, widthRange):
    return StandardParticleEmitterFactoryAddWidthRange(builder, widthRange)
def StandardParticleEmitterFactoryAddHeightRange(builder, heightRange): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(heightRange), 0)
def AddHeightRange(builder, heightRange):
    return StandardParticleEmitterFactoryAddHeightRange(builder, heightRange)
def StandardParticleEmitterFactoryAddRotationRange(builder, rotationRange): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rotationRange), 0)
def AddRotationRange(builder, rotationRange):
    return StandardParticleEmitterFactoryAddRotationRange(builder, rotationRange)
def StandardParticleEmitterFactoryAddBaseDirection(builder, baseDirection): builder.PrependStructSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(baseDirection), 0)
def AddBaseDirection(builder, baseDirection):
    return StandardParticleEmitterFactoryAddBaseDirection(builder, baseDirection)
def StandardParticleEmitterFactoryAddDirectionSpread(builder, directionSpread): builder.PrependFloat32Slot(8, directionSpread, 0.0)
def AddDirectionSpread(builder, directionSpread):
    return StandardParticleEmitterFactoryAddDirectionSpread(builder, directionSpread)
def StandardParticleEmitterFactoryAddSpawnTimeRange(builder, spawnTimeRange): builder.PrependStructSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(spawnTimeRange), 0)
def AddSpawnTimeRange(builder, spawnTimeRange):
    return StandardParticleEmitterFactoryAddSpawnTimeRange(builder, spawnTimeRange)
def StandardParticleEmitterFactoryAddActiveTimeRange(builder, activeTimeRange): builder.PrependStructSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(activeTimeRange), 0)
def AddActiveTimeRange(builder, activeTimeRange):
    return StandardParticleEmitterFactoryAddActiveTimeRange(builder, activeTimeRange)
def StandardParticleEmitterFactoryAddSpeedRange(builder, speedRange): builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(speedRange), 0)
def AddSpeedRange(builder, speedRange):
    return StandardParticleEmitterFactoryAddSpeedRange(builder, speedRange)
def StandardParticleEmitterFactoryAddRotationSpeedRange(builder, rotationSpeedRange): builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(rotationSpeedRange), 0)
def AddRotationSpeedRange(builder, rotationSpeedRange):
    return StandardParticleEmitterFactoryAddRotationSpeedRange(builder, rotationSpeedRange)
def StandardParticleEmitterFactoryAddTextureRange(builder, textureRange): builder.PrependStructSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(textureRange), 0)
def AddTextureRange(builder, textureRange):
    return StandardParticleEmitterFactoryAddTextureRange(builder, textureRange)
def StandardParticleEmitterFactoryAddColorHueRange(builder, colorHueRange): builder.PrependStructSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(colorHueRange), 0)
def AddColorHueRange(builder, colorHueRange):
    return StandardParticleEmitterFactoryAddColorHueRange(builder, colorHueRange)
def StandardParticleEmitterFactoryAddColorSaturationRange(builder, colorSaturationRange): builder.PrependStructSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(colorSaturationRange), 0)
def AddColorSaturationRange(builder, colorSaturationRange):
    return StandardParticleEmitterFactoryAddColorSaturationRange(builder, colorSaturationRange)
def StandardParticleEmitterFactoryAddColorValueRange(builder, colorValueRange): builder.PrependStructSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(colorValueRange), 0)
def AddColorValueRange(builder, colorValueRange):
    return StandardParticleEmitterFactoryAddColorValueRange(builder, colorValueRange)
def StandardParticleEmitterFactoryAddColorAlphaRange(builder, colorAlphaRange): builder.PrependStructSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(colorAlphaRange), 0)
def AddColorAlphaRange(builder, colorAlphaRange):
    return StandardParticleEmitterFactoryAddColorAlphaRange(builder, colorAlphaRange)
def StandardParticleEmitterFactoryAddIntensityRange(builder, intensityRange): builder.PrependStructSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(intensityRange), 0)
def AddIntensityRange(builder, intensityRange):
    return StandardParticleEmitterFactoryAddIntensityRange(builder, intensityRange)
def StandardParticleEmitterFactoryAddRelativeNode(builder, relativeNode): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(relativeNode), 0)
def AddRelativeNode(builder, relativeNode):
    return StandardParticleEmitterFactoryAddRelativeNode(builder, relativeNode)
def StandardParticleEmitterFactoryAddSeed(builder, seed): builder.PrependUint64Slot(20, seed, 0)
def AddSeed(builder, seed):
    return StandardParticleEmitterFactoryAddSeed(builder, seed)
def StandardParticleEmitterFactoryAddEnabled(builder, enabled): builder.PrependBoolSlot(21, enabled, 0)
def AddEnabled(builder, enabled):
    return StandardParticleEmitterFactoryAddEnabled(builder, enabled)
def StandardParticleEmitterFactoryAddStartTime(builder, startTime): builder.PrependFloat32Slot(22, startTime, 0.0)
def AddStartTime(builder, startTime):
    return StandardParticleEmitterFactoryAddStartTime(builder, startTime)
def StandardParticleEmitterFactoryEnd(builder): return builder.EndObject()
def End(builder):
    return StandardParticleEmitterFactoryEnd(builder)