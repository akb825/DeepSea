# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneParticle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ParticleBox(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParticleBox()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParticleBox(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParticleBox
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParticleBox
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ParticleBox
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ParticleBoxStart(builder): builder.StartObject(2)
def Start(builder):
    return ParticleBoxStart(builder)
def ParticleBoxAddMin(builder, min): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(min), 0)
def AddMin(builder, min):
    return ParticleBoxAddMin(builder, min)
def ParticleBoxAddMax(builder, max): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(max), 0)
def AddMax(builder, max):
    return ParticleBoxAddMax(builder, max)
def ParticleBoxEnd(builder): return builder.EndObject()
def End(builder):
    return ParticleBoxEnd(builder)