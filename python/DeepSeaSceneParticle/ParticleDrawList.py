# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneParticle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ParticleDrawList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParticleDrawList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParticleDrawList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParticleDrawList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParticleDrawList
    def InstanceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaScene.ObjectData import ObjectData
            obj = ObjectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ParticleDrawList
    def InstanceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ParticleDrawList
    def InstanceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ParticleDrawList
    def CullLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ParticleDrawList
    def CullListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ParticleDrawList
    def CullListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ParticleDrawList
    def Views(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ParticleDrawList
    def ViewsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ParticleDrawList
    def ViewsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ParticleDrawListStart(builder):
    builder.StartObject(3)

def Start(builder):
    ParticleDrawListStart(builder)

def ParticleDrawListAddInstanceData(builder, instanceData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instanceData), 0)

def AddInstanceData(builder, instanceData):
    ParticleDrawListAddInstanceData(builder, instanceData)

def ParticleDrawListStartInstanceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInstanceDataVector(builder, numElems):
    return ParticleDrawListStartInstanceDataVector(builder, numElems)

def ParticleDrawListAddCullLists(builder, cullLists):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cullLists), 0)

def AddCullLists(builder, cullLists):
    ParticleDrawListAddCullLists(builder, cullLists)

def ParticleDrawListStartCullListsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCullListsVector(builder, numElems):
    return ParticleDrawListStartCullListsVector(builder, numElems)

def ParticleDrawListAddViews(builder, views):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(views), 0)

def AddViews(builder, views):
    ParticleDrawListAddViews(builder, views)

def ParticleDrawListStartViewsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartViewsVector(builder, numElems):
    return ParticleDrawListStartViewsVector(builder, numElems)

def ParticleDrawListEnd(builder):
    return builder.EndObject()

def End(builder):
    return ParticleDrawListEnd(builder)
