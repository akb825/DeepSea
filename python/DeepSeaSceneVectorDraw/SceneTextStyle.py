# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneVectorDraw

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SceneTextStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SceneTextStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSceneTextStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SceneTextStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SceneTextStyle
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SceneTextStyle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SceneTextStyle
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneTextStyle
    def Embolden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneTextStyle
    def Slant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneTextStyle
    def OutlineWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneTextStyle
    def Fuziness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneTextStyle
    def VerticalOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneTextStyle
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaSceneVectorDraw.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SceneTextStyle
    def OutlineColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaSceneVectorDraw.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SceneTextStyleStart(builder):
    builder.StartObject(10)

def Start(builder):
    SceneTextStyleStart(builder)

def SceneTextStyleAddStart(builder, start):
    builder.PrependUint32Slot(0, start, 0)

def AddStart(builder, start):
    SceneTextStyleAddStart(builder, start)

def SceneTextStyleAddCount(builder, count):
    builder.PrependUint32Slot(1, count, 0)

def AddCount(builder, count):
    SceneTextStyleAddCount(builder, count)

def SceneTextStyleAddSize(builder, size):
    builder.PrependFloat32Slot(2, size, 0.0)

def AddSize(builder, size):
    SceneTextStyleAddSize(builder, size)

def SceneTextStyleAddEmbolden(builder, embolden):
    builder.PrependFloat32Slot(3, embolden, 0.0)

def AddEmbolden(builder, embolden):
    SceneTextStyleAddEmbolden(builder, embolden)

def SceneTextStyleAddSlant(builder, slant):
    builder.PrependFloat32Slot(4, slant, 0.0)

def AddSlant(builder, slant):
    SceneTextStyleAddSlant(builder, slant)

def SceneTextStyleAddOutlineWidth(builder, outlineWidth):
    builder.PrependFloat32Slot(5, outlineWidth, 0.0)

def AddOutlineWidth(builder, outlineWidth):
    SceneTextStyleAddOutlineWidth(builder, outlineWidth)

def SceneTextStyleAddFuziness(builder, fuziness):
    builder.PrependFloat32Slot(6, fuziness, 0.0)

def AddFuziness(builder, fuziness):
    SceneTextStyleAddFuziness(builder, fuziness)

def SceneTextStyleAddVerticalOffset(builder, verticalOffset):
    builder.PrependFloat32Slot(7, verticalOffset, 0.0)

def AddVerticalOffset(builder, verticalOffset):
    SceneTextStyleAddVerticalOffset(builder, verticalOffset)

def SceneTextStyleAddColor(builder, color):
    builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    SceneTextStyleAddColor(builder, color)

def SceneTextStyleAddOutlineColor(builder, outlineColor):
    builder.PrependStructSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(outlineColor), 0)

def AddOutlineColor(builder, outlineColor):
    SceneTextStyleAddOutlineColor(builder, outlineColor)

def SceneTextStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return SceneTextStyleEnd(builder)
