# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneLighting

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SceneLightSetPrepare(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SceneLightSetPrepare()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSceneLightSetPrepare(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SceneLightSetPrepare
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SceneLightSetPrepare
    def LightSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SceneLightSetPrepare
    def IntensityThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SceneLightSetPrepareStart(builder):
    builder.StartObject(2)

def Start(builder):
    SceneLightSetPrepareStart(builder)

def SceneLightSetPrepareAddLightSet(builder, lightSet):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lightSet), 0)

def AddLightSet(builder, lightSet):
    SceneLightSetPrepareAddLightSet(builder, lightSet)

def SceneLightSetPrepareAddIntensityThreshold(builder, intensityThreshold):
    builder.PrependFloat32Slot(1, intensityThreshold, 0.0)

def AddIntensityThreshold(builder, intensityThreshold):
    SceneLightSetPrepareAddIntensityThreshold(builder, intensityThreshold)

def SceneLightSetPrepareEnd(builder):
    return builder.EndObject()

def End(builder):
    return SceneLightSetPrepareEnd(builder)
