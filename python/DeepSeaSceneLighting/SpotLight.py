# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneLighting

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpotLight(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpotLight()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpotLight(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SpotLight
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpotLight
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpotLight
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpotLight
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Color3f import Color3f
            obj = Color3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpotLight
    def Intensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpotLight
    def LinearFalloff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpotLight
    def QuadraticFalloff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpotLight
    def InnerSpotAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpotLight
    def OuterSpotAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SpotLightStart(builder):
    builder.StartObject(8)

def Start(builder):
    SpotLightStart(builder)

def SpotLightAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    SpotLightAddPosition(builder, position)

def SpotLightAddDirection(builder, direction):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(direction), 0)

def AddDirection(builder, direction):
    SpotLightAddDirection(builder, direction)

def SpotLightAddColor(builder, color):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    SpotLightAddColor(builder, color)

def SpotLightAddIntensity(builder, intensity):
    builder.PrependFloat32Slot(3, intensity, 0.0)

def AddIntensity(builder, intensity):
    SpotLightAddIntensity(builder, intensity)

def SpotLightAddLinearFalloff(builder, linearFalloff):
    builder.PrependFloat32Slot(4, linearFalloff, 0.0)

def AddLinearFalloff(builder, linearFalloff):
    SpotLightAddLinearFalloff(builder, linearFalloff)

def SpotLightAddQuadraticFalloff(builder, quadraticFalloff):
    builder.PrependFloat32Slot(5, quadraticFalloff, 0.0)

def AddQuadraticFalloff(builder, quadraticFalloff):
    SpotLightAddQuadraticFalloff(builder, quadraticFalloff)

def SpotLightAddInnerSpotAngle(builder, innerSpotAngle):
    builder.PrependFloat32Slot(6, innerSpotAngle, 0.0)

def AddInnerSpotAngle(builder, innerSpotAngle):
    SpotLightAddInnerSpotAngle(builder, innerSpotAngle)

def SpotLightAddOuterSpotAngle(builder, outerSpotAngle):
    builder.PrependFloat32Slot(7, outerSpotAngle, 0.0)

def AddOuterSpotAngle(builder, outerSpotAngle):
    SpotLightAddOuterSpotAngle(builder, outerSpotAngle)

def SpotLightEnd(builder):
    return builder.EndObject()

def End(builder):
    return SpotLightEnd(builder)
