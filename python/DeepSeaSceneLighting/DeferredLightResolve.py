# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneLighting

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeferredLightResolve(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeferredLightResolve()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeferredLightResolve(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeferredLightResolve
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeferredLightResolve
    def LightSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DeferredLightResolve
    def ShadowManager(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DeferredLightResolve
    def Ambient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneLighting.DeferredLightInfo import DeferredLightInfo
            obj = DeferredLightInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeferredLightResolve
    def Directional(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneLighting.DeferredLightInfo import DeferredLightInfo
            obj = DeferredLightInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeferredLightResolve
    def Point(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneLighting.DeferredLightInfo import DeferredLightInfo
            obj = DeferredLightInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeferredLightResolve
    def Spot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneLighting.DeferredLightInfo import DeferredLightInfo
            obj = DeferredLightInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeferredLightResolve
    def ShadowDirectional(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneLighting.DeferredShadowLightInfo import DeferredShadowLightInfo
            obj = DeferredShadowLightInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeferredLightResolve
    def ShadowPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneLighting.DeferredShadowLightInfo import DeferredShadowLightInfo
            obj = DeferredShadowLightInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeferredLightResolve
    def ShadowSpot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DeepSeaSceneLighting.DeferredShadowLightInfo import DeferredShadowLightInfo
            obj = DeferredShadowLightInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeferredLightResolve
    def IntensityThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def DeferredLightResolveStart(builder): builder.StartObject(10)
def Start(builder):
    return DeferredLightResolveStart(builder)
def DeferredLightResolveAddLightSet(builder, lightSet): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lightSet), 0)
def AddLightSet(builder, lightSet):
    return DeferredLightResolveAddLightSet(builder, lightSet)
def DeferredLightResolveAddShadowManager(builder, shadowManager): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shadowManager), 0)
def AddShadowManager(builder, shadowManager):
    return DeferredLightResolveAddShadowManager(builder, shadowManager)
def DeferredLightResolveAddAmbient(builder, ambient): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ambient), 0)
def AddAmbient(builder, ambient):
    return DeferredLightResolveAddAmbient(builder, ambient)
def DeferredLightResolveAddDirectional(builder, directional): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(directional), 0)
def AddDirectional(builder, directional):
    return DeferredLightResolveAddDirectional(builder, directional)
def DeferredLightResolveAddPoint(builder, point): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(point), 0)
def AddPoint(builder, point):
    return DeferredLightResolveAddPoint(builder, point)
def DeferredLightResolveAddSpot(builder, spot): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(spot), 0)
def AddSpot(builder, spot):
    return DeferredLightResolveAddSpot(builder, spot)
def DeferredLightResolveAddShadowDirectional(builder, shadowDirectional): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(shadowDirectional), 0)
def AddShadowDirectional(builder, shadowDirectional):
    return DeferredLightResolveAddShadowDirectional(builder, shadowDirectional)
def DeferredLightResolveAddShadowPoint(builder, shadowPoint): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(shadowPoint), 0)
def AddShadowPoint(builder, shadowPoint):
    return DeferredLightResolveAddShadowPoint(builder, shadowPoint)
def DeferredLightResolveAddShadowSpot(builder, shadowSpot): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(shadowSpot), 0)
def AddShadowSpot(builder, shadowSpot):
    return DeferredLightResolveAddShadowSpot(builder, shadowSpot)
def DeferredLightResolveAddIntensityThreshold(builder, intensityThreshold): builder.PrependFloat32Slot(9, intensityThreshold, 0.0)
def AddIntensityThreshold(builder, intensityThreshold):
    return DeferredLightResolveAddIntensityThreshold(builder, intensityThreshold)
def DeferredLightResolveEnd(builder): return builder.EndObject()
def End(builder):
    return DeferredLightResolveEnd(builder)