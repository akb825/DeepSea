# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaSceneLighting

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SceneLightShadows(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SceneLightShadows()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSceneLightShadows(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SceneLightShadows
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SceneLightShadows
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SceneLightShadows
    def LightSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SceneLightShadows
    def LightType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SceneLightShadows
    def Light(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SceneLightShadows
    def TransformGroupDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SceneLightShadows
    def TransformGroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SceneLightShadows
    def MaxCascades(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SceneLightShadows
    def MaxFirstSplitDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneLightShadows
    def CascadeExpFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneLightShadows
    def MinDepthRanges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SceneLightShadows
    def MinDepthRangesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SceneLightShadows
    def MinDepthRangesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SceneLightShadows
    def MinDepthRangesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # SceneLightShadows
    def FadeStartDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SceneLightShadows
    def MaxDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SceneLightShadowsStart(builder):
    builder.StartObject(12)

def Start(builder):
    SceneLightShadowsStart(builder)

def SceneLightShadowsAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SceneLightShadowsAddName(builder, name)

def SceneLightShadowsAddLightSet(builder, lightSet):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lightSet), 0)

def AddLightSet(builder, lightSet):
    SceneLightShadowsAddLightSet(builder, lightSet)

def SceneLightShadowsAddLightType(builder, lightType):
    builder.PrependUint8Slot(2, lightType, 0)

def AddLightType(builder, lightType):
    SceneLightShadowsAddLightType(builder, lightType)

def SceneLightShadowsAddLight(builder, light):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(light), 0)

def AddLight(builder, light):
    SceneLightShadowsAddLight(builder, light)

def SceneLightShadowsAddTransformGroupDesc(builder, transformGroupDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(transformGroupDesc), 0)

def AddTransformGroupDesc(builder, transformGroupDesc):
    SceneLightShadowsAddTransformGroupDesc(builder, transformGroupDesc)

def SceneLightShadowsAddTransformGroupName(builder, transformGroupName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(transformGroupName), 0)

def AddTransformGroupName(builder, transformGroupName):
    SceneLightShadowsAddTransformGroupName(builder, transformGroupName)

def SceneLightShadowsAddMaxCascades(builder, maxCascades):
    builder.PrependUint32Slot(6, maxCascades, 0)

def AddMaxCascades(builder, maxCascades):
    SceneLightShadowsAddMaxCascades(builder, maxCascades)

def SceneLightShadowsAddMaxFirstSplitDistance(builder, maxFirstSplitDistance):
    builder.PrependFloat32Slot(7, maxFirstSplitDistance, 0.0)

def AddMaxFirstSplitDistance(builder, maxFirstSplitDistance):
    SceneLightShadowsAddMaxFirstSplitDistance(builder, maxFirstSplitDistance)

def SceneLightShadowsAddCascadeExpFactor(builder, cascadeExpFactor):
    builder.PrependFloat32Slot(8, cascadeExpFactor, 0.0)

def AddCascadeExpFactor(builder, cascadeExpFactor):
    SceneLightShadowsAddCascadeExpFactor(builder, cascadeExpFactor)

def SceneLightShadowsAddMinDepthRanges(builder, minDepthRanges):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(minDepthRanges), 0)

def AddMinDepthRanges(builder, minDepthRanges):
    SceneLightShadowsAddMinDepthRanges(builder, minDepthRanges)

def SceneLightShadowsStartMinDepthRangesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMinDepthRangesVector(builder, numElems: int) -> int:
    return SceneLightShadowsStartMinDepthRangesVector(builder, numElems)

def SceneLightShadowsAddFadeStartDistance(builder, fadeStartDistance):
    builder.PrependFloat32Slot(10, fadeStartDistance, 0.0)

def AddFadeStartDistance(builder, fadeStartDistance):
    SceneLightShadowsAddFadeStartDistance(builder, fadeStartDistance)

def SceneLightShadowsAddMaxDistance(builder, maxDistance):
    builder.PrependFloat32Slot(11, maxDistance, 0.0)

def AddMaxDistance(builder, maxDistance):
    SceneLightShadowsAddMaxDistance(builder, maxDistance)

def SceneLightShadowsEnd(builder):
    return builder.EndObject()

def End(builder):
    return SceneLightShadowsEnd(builder)
