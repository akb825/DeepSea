# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaAnimation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AnimationJointTreeNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AnimationJointTreeNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnimationJointTreeNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AnimationJointTreeNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AnimationJointTreeNode
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnimationJointTreeNode
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaAnimation.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AnimationJointTreeNode
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaAnimation.Quaternion4f import Quaternion4f
            obj = Quaternion4f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AnimationJointTreeNode
    def Translation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaAnimation.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AnimationJointTreeNode
    def ToLocalSpace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaAnimation.Matrix44f import Matrix44f
            obj = Matrix44f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AnimationJointTreeNode
    def Children(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AnimationJointTreeNode
    def ChildrenAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # AnimationJointTreeNode
    def ChildrenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnimationJointTreeNode
    def ChildrenIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def AnimationJointTreeNodeStart(builder):
    builder.StartObject(6)

def Start(builder):
    AnimationJointTreeNodeStart(builder)

def AnimationJointTreeNodeAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    AnimationJointTreeNodeAddName(builder, name)

def AnimationJointTreeNodeAddScale(builder, scale):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(scale), 0)

def AddScale(builder, scale):
    AnimationJointTreeNodeAddScale(builder, scale)

def AnimationJointTreeNodeAddRotation(builder, rotation):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)

def AddRotation(builder, rotation):
    AnimationJointTreeNodeAddRotation(builder, rotation)

def AnimationJointTreeNodeAddTranslation(builder, translation):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(translation), 0)

def AddTranslation(builder, translation):
    AnimationJointTreeNodeAddTranslation(builder, translation)

def AnimationJointTreeNodeAddToLocalSpace(builder, toLocalSpace):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(toLocalSpace), 0)

def AddToLocalSpace(builder, toLocalSpace):
    AnimationJointTreeNodeAddToLocalSpace(builder, toLocalSpace)

def AnimationJointTreeNodeAddChildren(builder, children):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(children), 0)

def AddChildren(builder, children):
    AnimationJointTreeNodeAddChildren(builder, children)

def AnimationJointTreeNodeStartChildrenVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartChildrenVector(builder, numElems):
    return AnimationJointTreeNodeStartChildrenVector(builder, numElems)

def AnimationJointTreeNodeEnd(builder):
    return builder.EndObject()

def End(builder):
    return AnimationJointTreeNodeEnd(builder)
