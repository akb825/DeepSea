# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaAnimation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Quaternion4f(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # Quaternion4f
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Quaternion4f
    def I(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Quaternion4f
    def J(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Quaternion4f
    def K(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # Quaternion4f
    def R(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))

def CreateQuaternion4f(builder, i, j, k, r):
    builder.Prep(4, 16)
    builder.PrependFloat32(r)
    builder.PrependFloat32(k)
    builder.PrependFloat32(j)
    builder.PrependFloat32(i)
    return builder.Offset()
