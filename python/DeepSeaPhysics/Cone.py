# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cone(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cone()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCone(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cone
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cone
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Cone
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Cone
    def Axis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Cone
    def ConvexRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

def ConeStart(builder):
    builder.StartObject(4)

def Start(builder):
    ConeStart(builder)

def ConeAddHeight(builder, height):
    builder.PrependFloat32Slot(0, height, 0.0)

def AddHeight(builder, height):
    ConeAddHeight(builder, height)

def ConeAddRadius(builder, radius):
    builder.PrependFloat32Slot(1, radius, 0.0)

def AddRadius(builder, radius):
    ConeAddRadius(builder, radius)

def ConeAddAxis(builder, axis):
    builder.PrependUint8Slot(2, axis, 0)

def AddAxis(builder, axis):
    ConeAddAxis(builder, axis)

def ConeAddConvexRadius(builder, convexRadius):
    builder.PrependFloat32Slot(3, convexRadius, -1.0)

def AddConvexRadius(builder, convexRadius):
    ConeAddConvexRadius(builder, convexRadius)

def ConeEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConeEnd(builder)
