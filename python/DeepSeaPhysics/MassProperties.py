# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MassProperties(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MassProperties()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMassProperties(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MassProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MassProperties
    def CenteredInertia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Matrix33f import Matrix33f
            obj = Matrix33f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MassProperties
    def CenterOfMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MassProperties
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MassProperties
    def InertiaTranslate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MassProperties
    def InertiaRotate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Quaternion4f import Quaternion4f
            obj = Quaternion4f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MassPropertiesStart(builder):
    builder.StartObject(5)

def Start(builder):
    MassPropertiesStart(builder)

def MassPropertiesAddCenteredInertia(builder, centeredInertia):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(centeredInertia), 0)

def AddCenteredInertia(builder, centeredInertia):
    MassPropertiesAddCenteredInertia(builder, centeredInertia)

def MassPropertiesAddCenterOfMass(builder, centerOfMass):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(centerOfMass), 0)

def AddCenterOfMass(builder, centerOfMass):
    MassPropertiesAddCenterOfMass(builder, centerOfMass)

def MassPropertiesAddMass(builder, mass):
    builder.PrependFloat32Slot(2, mass, 0.0)

def AddMass(builder, mass):
    MassPropertiesAddMass(builder, mass)

def MassPropertiesAddInertiaTranslate(builder, inertiaTranslate):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(inertiaTranslate), 0)

def AddInertiaTranslate(builder, inertiaTranslate):
    MassPropertiesAddInertiaTranslate(builder, inertiaTranslate)

def MassPropertiesAddInertiaRotate(builder, inertiaRotate):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(inertiaRotate), 0)

def AddInertiaRotate(builder, inertiaRotate):
    MassPropertiesAddInertiaRotate(builder, inertiaRotate)

def MassPropertiesEnd(builder):
    return builder.EndObject()

def End(builder):
    return MassPropertiesEnd(builder)
