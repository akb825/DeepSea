# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SwingTwistConstraint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SwingTwistConstraint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSwingTwistConstraint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SwingTwistConstraint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SwingTwistConstraint
    def FirstActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SwingTwistConstraint
    def FirstPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SwingTwistConstraint
    def FirstRotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Quaternion4f import Quaternion4f
            obj = Quaternion4f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SwingTwistConstraint
    def SecondActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SwingTwistConstraint
    def SecondPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SwingTwistConstraint
    def SecondRotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Quaternion4f import Quaternion4f
            obj = Quaternion4f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SwingTwistConstraint
    def MaxAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SwingTwistConstraint
    def MaxSwingXangle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SwingTwistConstraint
    def MaxSwingYangle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SwingTwistConstraint
    def MaxSwingZangle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SwingTwistConstraint
    def MotorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SwingTwistConstraint
    def MotorTargetRotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Quaternion4f import Quaternion4f
            obj = Quaternion4f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SwingTwistConstraint
    def MaxMotorTorque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SwingTwistConstraintStart(builder):
    builder.StartObject(13)

def Start(builder):
    SwingTwistConstraintStart(builder)

def SwingTwistConstraintAddFirstActor(builder, firstActor):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(firstActor), 0)

def AddFirstActor(builder, firstActor):
    SwingTwistConstraintAddFirstActor(builder, firstActor)

def SwingTwistConstraintAddFirstPosition(builder, firstPosition):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(firstPosition), 0)

def AddFirstPosition(builder, firstPosition):
    SwingTwistConstraintAddFirstPosition(builder, firstPosition)

def SwingTwistConstraintAddFirstRotation(builder, firstRotation):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(firstRotation), 0)

def AddFirstRotation(builder, firstRotation):
    SwingTwistConstraintAddFirstRotation(builder, firstRotation)

def SwingTwistConstraintAddSecondActor(builder, secondActor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(secondActor), 0)

def AddSecondActor(builder, secondActor):
    SwingTwistConstraintAddSecondActor(builder, secondActor)

def SwingTwistConstraintAddSecondPosition(builder, secondPosition):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(secondPosition), 0)

def AddSecondPosition(builder, secondPosition):
    SwingTwistConstraintAddSecondPosition(builder, secondPosition)

def SwingTwistConstraintAddSecondRotation(builder, secondRotation):
    builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(secondRotation), 0)

def AddSecondRotation(builder, secondRotation):
    SwingTwistConstraintAddSecondRotation(builder, secondRotation)

def SwingTwistConstraintAddMaxAngle(builder, maxAngle):
    builder.PrependFloat32Slot(6, maxAngle, 0.0)

def AddMaxAngle(builder, maxAngle):
    SwingTwistConstraintAddMaxAngle(builder, maxAngle)

def SwingTwistConstraintAddMaxSwingXangle(builder, maxSwingXangle):
    builder.PrependFloat32Slot(7, maxSwingXangle, 0.0)

def AddMaxSwingXangle(builder, maxSwingXangle):
    SwingTwistConstraintAddMaxSwingXangle(builder, maxSwingXangle)

def SwingTwistConstraintAddMaxSwingYangle(builder, maxSwingYangle):
    builder.PrependFloat32Slot(8, maxSwingYangle, 0.0)

def AddMaxSwingYangle(builder, maxSwingYangle):
    SwingTwistConstraintAddMaxSwingYangle(builder, maxSwingYangle)

def SwingTwistConstraintAddMaxSwingZangle(builder, maxSwingZangle):
    builder.PrependFloat32Slot(9, maxSwingZangle, 0.0)

def AddMaxSwingZangle(builder, maxSwingZangle):
    SwingTwistConstraintAddMaxSwingZangle(builder, maxSwingZangle)

def SwingTwistConstraintAddMotorType(builder, motorType):
    builder.PrependUint8Slot(10, motorType, 0)

def AddMotorType(builder, motorType):
    SwingTwistConstraintAddMotorType(builder, motorType)

def SwingTwistConstraintAddMotorTargetRotation(builder, motorTargetRotation):
    builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(motorTargetRotation), 0)

def AddMotorTargetRotation(builder, motorTargetRotation):
    SwingTwistConstraintAddMotorTargetRotation(builder, motorTargetRotation)

def SwingTwistConstraintAddMaxMotorTorque(builder, maxMotorTorque):
    builder.PrependFloat32Slot(12, maxMotorTorque, 0.0)

def AddMaxMotorTorque(builder, maxMotorTorque):
    SwingTwistConstraintAddMaxMotorTorque(builder, maxMotorTorque)

def SwingTwistConstraintEnd(builder):
    return builder.EndObject()

def End(builder):
    return SwingTwistConstraintEnd(builder)
