# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Constraint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Constraint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstraint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Constraint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Constraint
    def ConstraintType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Constraint
    def Constraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ConstraintStart(builder):
    builder.StartObject(2)

def Start(builder):
    ConstraintStart(builder)

def ConstraintAddConstraintType(builder, constraintType):
    builder.PrependUint8Slot(0, constraintType, 0)

def AddConstraintType(builder, constraintType):
    ConstraintAddConstraintType(builder, constraintType)

def ConstraintAddConstraint(builder, constraint):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(constraint), 0)

def AddConstraint(builder, constraint):
    ConstraintAddConstraint(builder, constraint)

def ConstraintEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConstraintEnd(builder)
