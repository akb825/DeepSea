# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cylinder(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cylinder()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCylinder(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cylinder
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cylinder
    def HalfHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Cylinder
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Cylinder
    def Axis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Cylinder
    def ConvexRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

def CylinderStart(builder):
    builder.StartObject(4)

def Start(builder):
    CylinderStart(builder)

def CylinderAddHalfHeight(builder, halfHeight):
    builder.PrependFloat32Slot(0, halfHeight, 0.0)

def AddHalfHeight(builder, halfHeight):
    CylinderAddHalfHeight(builder, halfHeight)

def CylinderAddRadius(builder, radius):
    builder.PrependFloat32Slot(1, radius, 0.0)

def AddRadius(builder, radius):
    CylinderAddRadius(builder, radius)

def CylinderAddAxis(builder, axis):
    builder.PrependUint8Slot(2, axis, 0)

def AddAxis(builder, axis):
    CylinderAddAxis(builder, axis)

def CylinderAddConvexRadius(builder, convexRadius):
    builder.PrependFloat32Slot(3, convexRadius, -1.0)

def AddConvexRadius(builder, convexRadius):
    CylinderAddConvexRadius(builder, convexRadius)

def CylinderEnd(builder):
    return builder.EndObject()

def End(builder):
    return CylinderEnd(builder)
