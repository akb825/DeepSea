# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShapeInstance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShapeInstance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShapeInstance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShapeInstance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShapeInstance
    def ShapeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ShapeInstance
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # ShapeInstance
    def Density(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ShapeInstance
    def Translate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ShapeInstance
    def Rotate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Quaternion4f import Quaternion4f
            obj = Quaternion4f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ShapeInstance
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ShapeInstance
    def Material(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.ShapePartMaterial import ShapePartMaterial
            obj = ShapePartMaterial()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ShapeInstanceStart(builder):
    builder.StartObject(7)

def Start(builder):
    ShapeInstanceStart(builder)

def ShapeInstanceAddShapeType(builder, shapeType):
    builder.PrependUint8Slot(0, shapeType, 0)

def AddShapeType(builder, shapeType):
    ShapeInstanceAddShapeType(builder, shapeType)

def ShapeInstanceAddShape(builder, shape):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)

def AddShape(builder, shape):
    ShapeInstanceAddShape(builder, shape)

def ShapeInstanceAddDensity(builder, density):
    builder.PrependFloat32Slot(2, density, 0.0)

def AddDensity(builder, density):
    ShapeInstanceAddDensity(builder, density)

def ShapeInstanceAddTranslate(builder, translate):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(translate), 0)

def AddTranslate(builder, translate):
    ShapeInstanceAddTranslate(builder, translate)

def ShapeInstanceAddRotate(builder, rotate):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rotate), 0)

def AddRotate(builder, rotate):
    ShapeInstanceAddRotate(builder, rotate)

def ShapeInstanceAddScale(builder, scale):
    builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scale), 0)

def AddScale(builder, scale):
    ShapeInstanceAddScale(builder, scale)

def ShapeInstanceAddMaterial(builder, material):
    builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(material), 0)

def AddMaterial(builder, material):
    ShapeInstanceAddMaterial(builder, material)

def ShapeInstanceEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShapeInstanceEnd(builder)
