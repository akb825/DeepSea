# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RackAndPinionConstraint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RackAndPinionConstraint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRackAndPinionConstraint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RackAndPinionConstraint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RackAndPinionConstraint
    def RackActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RackAndPinionConstraint
    def RackAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RackAndPinionConstraint
    def RackConstraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RackAndPinionConstraint
    def PinionActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RackAndPinionConstraint
    def PinionAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RackAndPinionConstraint
    def PinionConstraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RackAndPinionConstraint
    def Ratio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def RackAndPinionConstraintStart(builder):
    builder.StartObject(7)

def Start(builder):
    RackAndPinionConstraintStart(builder)

def RackAndPinionConstraintAddRackActor(builder, rackActor):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rackActor), 0)

def AddRackActor(builder, rackActor):
    RackAndPinionConstraintAddRackActor(builder, rackActor)

def RackAndPinionConstraintAddRackAxis(builder, rackAxis):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rackAxis), 0)

def AddRackAxis(builder, rackAxis):
    RackAndPinionConstraintAddRackAxis(builder, rackAxis)

def RackAndPinionConstraintAddRackConstraint(builder, rackConstraint):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rackConstraint), 0)

def AddRackConstraint(builder, rackConstraint):
    RackAndPinionConstraintAddRackConstraint(builder, rackConstraint)

def RackAndPinionConstraintAddPinionActor(builder, pinionActor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(pinionActor), 0)

def AddPinionActor(builder, pinionActor):
    RackAndPinionConstraintAddPinionActor(builder, pinionActor)

def RackAndPinionConstraintAddPinionAxis(builder, pinionAxis):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pinionAxis), 0)

def AddPinionAxis(builder, pinionAxis):
    RackAndPinionConstraintAddPinionAxis(builder, pinionAxis)

def RackAndPinionConstraintAddPinionConstraint(builder, pinionConstraint):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pinionConstraint), 0)

def AddPinionConstraint(builder, pinionConstraint):
    RackAndPinionConstraintAddPinionConstraint(builder, pinionConstraint)

def RackAndPinionConstraintAddRatio(builder, ratio):
    builder.PrependFloat32Slot(6, ratio, 0.0)

def AddRatio(builder, ratio):
    RackAndPinionConstraintAddRatio(builder, ratio)

def RackAndPinionConstraintEnd(builder):
    return builder.EndObject()

def End(builder):
    return RackAndPinionConstraintEnd(builder)
