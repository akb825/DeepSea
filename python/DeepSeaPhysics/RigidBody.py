# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RigidBody(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RigidBody()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRigidBody(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RigidBody
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RigidBody
    def Group(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RigidBody
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RigidBody
    def MotionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBody
    def DofMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBody
    def Layer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBody
    def CollisionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # RigidBody
    def CustomMassPropertiesType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBody
    def CustomMassProperties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # RigidBody
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RigidBody
    def Orientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Quaternion4f import Quaternion4f
            obj = Quaternion4f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RigidBody
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RigidBody
    def LinearVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RigidBody
    def AngularVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RigidBody
    def Friction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBody
    def Restitution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBody
    def Hardness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBody
    def LinearDamping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

    # RigidBody
    def AngularDamping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

    # RigidBody
    def MaxLinearVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBody
    def MaxAngularVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBody
    def Shapes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaPhysics.ShapeInstance import ShapeInstance
            obj = ShapeInstance()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RigidBody
    def ShapesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RigidBody
    def ShapesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

def RigidBodyStart(builder):
    builder.StartObject(21)

def Start(builder):
    RigidBodyStart(builder)

def RigidBodyAddGroup(builder, group):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(group), 0)

def AddGroup(builder, group):
    RigidBodyAddGroup(builder, group)

def RigidBodyAddFlags(builder, flags):
    builder.PrependUint32Slot(1, flags, 0)

def AddFlags(builder, flags):
    RigidBodyAddFlags(builder, flags)

def RigidBodyAddMotionType(builder, motionType):
    builder.PrependUint8Slot(2, motionType, 0)

def AddMotionType(builder, motionType):
    RigidBodyAddMotionType(builder, motionType)

def RigidBodyAddDofMask(builder, dofMask):
    builder.PrependUint8Slot(3, dofMask, 0)

def AddDofMask(builder, dofMask):
    RigidBodyAddDofMask(builder, dofMask)

def RigidBodyAddLayer(builder, layer):
    builder.PrependUint8Slot(4, layer, 0)

def AddLayer(builder, layer):
    RigidBodyAddLayer(builder, layer)

def RigidBodyAddCollisionGroup(builder, collisionGroup):
    builder.PrependUint64Slot(5, collisionGroup, 0)

def AddCollisionGroup(builder, collisionGroup):
    RigidBodyAddCollisionGroup(builder, collisionGroup)

def RigidBodyAddCustomMassPropertiesType(builder, customMassPropertiesType):
    builder.PrependUint8Slot(6, customMassPropertiesType, 0)

def AddCustomMassPropertiesType(builder, customMassPropertiesType):
    RigidBodyAddCustomMassPropertiesType(builder, customMassPropertiesType)

def RigidBodyAddCustomMassProperties(builder, customMassProperties):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(customMassProperties), 0)

def AddCustomMassProperties(builder, customMassProperties):
    RigidBodyAddCustomMassProperties(builder, customMassProperties)

def RigidBodyAddPosition(builder, position):
    builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    RigidBodyAddPosition(builder, position)

def RigidBodyAddOrientation(builder, orientation):
    builder.PrependStructSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(orientation), 0)

def AddOrientation(builder, orientation):
    RigidBodyAddOrientation(builder, orientation)

def RigidBodyAddScale(builder, scale):
    builder.PrependStructSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(scale), 0)

def AddScale(builder, scale):
    RigidBodyAddScale(builder, scale)

def RigidBodyAddLinearVelocity(builder, linearVelocity):
    builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(linearVelocity), 0)

def AddLinearVelocity(builder, linearVelocity):
    RigidBodyAddLinearVelocity(builder, linearVelocity)

def RigidBodyAddAngularVelocity(builder, angularVelocity):
    builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(angularVelocity), 0)

def AddAngularVelocity(builder, angularVelocity):
    RigidBodyAddAngularVelocity(builder, angularVelocity)

def RigidBodyAddFriction(builder, friction):
    builder.PrependFloat32Slot(13, friction, 0.0)

def AddFriction(builder, friction):
    RigidBodyAddFriction(builder, friction)

def RigidBodyAddRestitution(builder, restitution):
    builder.PrependFloat32Slot(14, restitution, 0.0)

def AddRestitution(builder, restitution):
    RigidBodyAddRestitution(builder, restitution)

def RigidBodyAddHardness(builder, hardness):
    builder.PrependFloat32Slot(15, hardness, 0.0)

def AddHardness(builder, hardness):
    RigidBodyAddHardness(builder, hardness)

def RigidBodyAddLinearDamping(builder, linearDamping):
    builder.PrependFloat32Slot(16, linearDamping, -1.0)

def AddLinearDamping(builder, linearDamping):
    RigidBodyAddLinearDamping(builder, linearDamping)

def RigidBodyAddAngularDamping(builder, angularDamping):
    builder.PrependFloat32Slot(17, angularDamping, -1.0)

def AddAngularDamping(builder, angularDamping):
    RigidBodyAddAngularDamping(builder, angularDamping)

def RigidBodyAddMaxLinearVelocity(builder, maxLinearVelocity):
    builder.PrependFloat32Slot(18, maxLinearVelocity, 0.0)

def AddMaxLinearVelocity(builder, maxLinearVelocity):
    RigidBodyAddMaxLinearVelocity(builder, maxLinearVelocity)

def RigidBodyAddMaxAngularVelocity(builder, maxAngularVelocity):
    builder.PrependFloat32Slot(19, maxAngularVelocity, 0.0)

def AddMaxAngularVelocity(builder, maxAngularVelocity):
    RigidBodyAddMaxAngularVelocity(builder, maxAngularVelocity)

def RigidBodyAddShapes(builder, shapes):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(shapes), 0)

def AddShapes(builder, shapes):
    RigidBodyAddShapes(builder, shapes)

def RigidBodyStartShapesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShapesVector(builder, numElems):
    return RigidBodyStartShapesVector(builder, numElems)

def RigidBodyEnd(builder):
    return builder.EndObject()

def End(builder):
    return RigidBodyEnd(builder)
