# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GenericConstraintMotor(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 12

    # GenericConstraintMotor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GenericConstraintMotor
    def Dof(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # GenericConstraintMotor
    def MotorType(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))
    # GenericConstraintMotor
    def Target(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # GenericConstraintMotor
    def MaxForce(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateGenericConstraintMotor(builder, dof, motorType, target, maxForce):
    builder.Prep(4, 12)
    builder.PrependFloat32(maxForce)
    builder.PrependFloat32(target)
    builder.Pad(2)
    builder.PrependUint8(motorType)
    builder.PrependUint8(dof)
    return builder.Offset()
