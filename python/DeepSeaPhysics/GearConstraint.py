# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GearConstraint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GearConstraint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGearConstraint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GearConstraint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GearConstraint
    def FirstActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GearConstraint
    def FirstAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GearConstraint
    def FirstConstraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GearConstraint
    def SecondActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GearConstraint
    def SecondAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GearConstraint
    def SecondConstraint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GearConstraint
    def Ratio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def GearConstraintStart(builder):
    builder.StartObject(7)

def Start(builder):
    GearConstraintStart(builder)

def GearConstraintAddFirstActor(builder, firstActor):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(firstActor), 0)

def AddFirstActor(builder, firstActor):
    GearConstraintAddFirstActor(builder, firstActor)

def GearConstraintAddFirstAxis(builder, firstAxis):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(firstAxis), 0)

def AddFirstAxis(builder, firstAxis):
    GearConstraintAddFirstAxis(builder, firstAxis)

def GearConstraintAddFirstConstraint(builder, firstConstraint):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(firstConstraint), 0)

def AddFirstConstraint(builder, firstConstraint):
    GearConstraintAddFirstConstraint(builder, firstConstraint)

def GearConstraintAddSecondActor(builder, secondActor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(secondActor), 0)

def AddSecondActor(builder, secondActor):
    GearConstraintAddSecondActor(builder, secondActor)

def GearConstraintAddSecondAxis(builder, secondAxis):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(secondAxis), 0)

def AddSecondAxis(builder, secondAxis):
    GearConstraintAddSecondAxis(builder, secondAxis)

def GearConstraintAddSecondConstraint(builder, secondConstraint):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(secondConstraint), 0)

def AddSecondConstraint(builder, secondConstraint):
    GearConstraintAddSecondConstraint(builder, secondConstraint)

def GearConstraintAddRatio(builder, ratio):
    builder.PrependFloat32Slot(6, ratio, 0.0)

def AddRatio(builder, ratio):
    GearConstraintAddRatio(builder, ratio)

def GearConstraintEnd(builder):
    return builder.EndObject()

def End(builder):
    return GearConstraintEnd(builder)
