# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConvexHull(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConvexHull()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConvexHull(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConvexHull
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConvexHull
    def Vertices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ConvexHull
    def VerticesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ConvexHull
    def VerticesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConvexHull
    def VerticesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ConvexHull
    def ConvexRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

    # ConvexHull
    def CacheName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ConvexHullStart(builder):
    builder.StartObject(3)

def Start(builder):
    ConvexHullStart(builder)

def ConvexHullAddVertices(builder, vertices):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vertices), 0)

def AddVertices(builder, vertices):
    ConvexHullAddVertices(builder, vertices)

def ConvexHullStartVerticesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartVerticesVector(builder, numElems):
    return ConvexHullStartVerticesVector(builder, numElems)

def ConvexHullAddConvexRadius(builder, convexRadius):
    builder.PrependFloat32Slot(1, convexRadius, -1.0)

def AddConvexRadius(builder, convexRadius):
    ConvexHullAddConvexRadius(builder, convexRadius)

def ConvexHullAddCacheName(builder, cacheName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cacheName), 0)

def AddCacheName(builder, cacheName):
    ConvexHullAddCacheName(builder, cacheName)

def ConvexHullEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConvexHullEnd(builder)
