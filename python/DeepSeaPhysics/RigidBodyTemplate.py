# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RigidBodyTemplate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RigidBodyTemplate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRigidBodyTemplate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RigidBodyTemplate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RigidBodyTemplate
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RigidBodyTemplate
    def MotionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBodyTemplate
    def DofMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBodyTemplate
    def Layer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBodyTemplate
    def CollisionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # RigidBodyTemplate
    def CustomMassPropertiesType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RigidBodyTemplate
    def CustomMassProperties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # RigidBodyTemplate
    def Friction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBodyTemplate
    def Restitution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBodyTemplate
    def Hardness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBodyTemplate
    def LinearDamping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

    # RigidBodyTemplate
    def AngularDamping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

    # RigidBodyTemplate
    def MaxLinearVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBodyTemplate
    def MaxAngularVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RigidBodyTemplate
    def Shapes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DeepSeaPhysics.ShapeInstance import ShapeInstance
            obj = ShapeInstance()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RigidBodyTemplate
    def ShapesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RigidBodyTemplate
    def ShapesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def RigidBodyTemplateStart(builder):
    builder.StartObject(15)

def Start(builder):
    RigidBodyTemplateStart(builder)

def RigidBodyTemplateAddFlags(builder, flags):
    builder.PrependUint32Slot(0, flags, 0)

def AddFlags(builder, flags):
    RigidBodyTemplateAddFlags(builder, flags)

def RigidBodyTemplateAddMotionType(builder, motionType):
    builder.PrependUint8Slot(1, motionType, 0)

def AddMotionType(builder, motionType):
    RigidBodyTemplateAddMotionType(builder, motionType)

def RigidBodyTemplateAddDofMask(builder, dofMask):
    builder.PrependUint8Slot(2, dofMask, 0)

def AddDofMask(builder, dofMask):
    RigidBodyTemplateAddDofMask(builder, dofMask)

def RigidBodyTemplateAddLayer(builder, layer):
    builder.PrependUint8Slot(3, layer, 0)

def AddLayer(builder, layer):
    RigidBodyTemplateAddLayer(builder, layer)

def RigidBodyTemplateAddCollisionGroup(builder, collisionGroup):
    builder.PrependUint64Slot(4, collisionGroup, 0)

def AddCollisionGroup(builder, collisionGroup):
    RigidBodyTemplateAddCollisionGroup(builder, collisionGroup)

def RigidBodyTemplateAddCustomMassPropertiesType(builder, customMassPropertiesType):
    builder.PrependUint8Slot(5, customMassPropertiesType, 0)

def AddCustomMassPropertiesType(builder, customMassPropertiesType):
    RigidBodyTemplateAddCustomMassPropertiesType(builder, customMassPropertiesType)

def RigidBodyTemplateAddCustomMassProperties(builder, customMassProperties):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(customMassProperties), 0)

def AddCustomMassProperties(builder, customMassProperties):
    RigidBodyTemplateAddCustomMassProperties(builder, customMassProperties)

def RigidBodyTemplateAddFriction(builder, friction):
    builder.PrependFloat32Slot(7, friction, 0.0)

def AddFriction(builder, friction):
    RigidBodyTemplateAddFriction(builder, friction)

def RigidBodyTemplateAddRestitution(builder, restitution):
    builder.PrependFloat32Slot(8, restitution, 0.0)

def AddRestitution(builder, restitution):
    RigidBodyTemplateAddRestitution(builder, restitution)

def RigidBodyTemplateAddHardness(builder, hardness):
    builder.PrependFloat32Slot(9, hardness, 0.0)

def AddHardness(builder, hardness):
    RigidBodyTemplateAddHardness(builder, hardness)

def RigidBodyTemplateAddLinearDamping(builder, linearDamping):
    builder.PrependFloat32Slot(10, linearDamping, -1.0)

def AddLinearDamping(builder, linearDamping):
    RigidBodyTemplateAddLinearDamping(builder, linearDamping)

def RigidBodyTemplateAddAngularDamping(builder, angularDamping):
    builder.PrependFloat32Slot(11, angularDamping, -1.0)

def AddAngularDamping(builder, angularDamping):
    RigidBodyTemplateAddAngularDamping(builder, angularDamping)

def RigidBodyTemplateAddMaxLinearVelocity(builder, maxLinearVelocity):
    builder.PrependFloat32Slot(12, maxLinearVelocity, 0.0)

def AddMaxLinearVelocity(builder, maxLinearVelocity):
    RigidBodyTemplateAddMaxLinearVelocity(builder, maxLinearVelocity)

def RigidBodyTemplateAddMaxAngularVelocity(builder, maxAngularVelocity):
    builder.PrependFloat32Slot(13, maxAngularVelocity, 0.0)

def AddMaxAngularVelocity(builder, maxAngularVelocity):
    RigidBodyTemplateAddMaxAngularVelocity(builder, maxAngularVelocity)

def RigidBodyTemplateAddShapes(builder, shapes):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(shapes), 0)

def AddShapes(builder, shapes):
    RigidBodyTemplateAddShapes(builder, shapes)

def RigidBodyTemplateStartShapesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShapesVector(builder, numElems):
    return RigidBodyTemplateStartShapesVector(builder, numElems)

def RigidBodyTemplateEnd(builder):
    return builder.EndObject()

def End(builder):
    return RigidBodyTemplateEnd(builder)
