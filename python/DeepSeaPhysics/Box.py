# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Box(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Box()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBox(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Box
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Box
    def HalfExtents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaPhysics.Vector3f import Vector3f
            obj = Vector3f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Box
    def ConvexRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

def BoxStart(builder):
    builder.StartObject(2)

def Start(builder):
    BoxStart(builder)

def BoxAddHalfExtents(builder, halfExtents):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(halfExtents), 0)

def AddHalfExtents(builder, halfExtents):
    BoxAddHalfExtents(builder, halfExtents)

def BoxAddConvexRadius(builder, convexRadius):
    builder.PrependFloat32Slot(1, convexRadius, -1.0)

def AddConvexRadius(builder, convexRadius):
    BoxAddConvexRadius(builder, convexRadius)

def BoxEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoxEnd(builder)
