# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Mesh(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Mesh()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMesh(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Mesh
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Mesh
    def Vertices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Mesh
    def VerticesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Mesh
    def VerticesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def VerticesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Mesh
    def Indices16(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Mesh
    def Indices16AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Mesh
    def Indices16Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def Indices16IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Mesh
    def Indices32(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Mesh
    def Indices32AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Mesh
    def Indices32Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def Indices32IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Mesh
    def TriangleCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Mesh
    def TriangleMaterials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from DeepSeaPhysics.ShapePartMaterial import ShapePartMaterial
            obj = ShapePartMaterial()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Mesh
    def TriangleMaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def TriangleMaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Mesh
    def MaterialIndices16(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Mesh
    def MaterialIndices16AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Mesh
    def MaterialIndices16Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def MaterialIndices16IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Mesh
    def MaterialIndices32(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Mesh
    def MaterialIndices32AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Mesh
    def MaterialIndices32Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mesh
    def MaterialIndices32IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Mesh
    def CacheName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MeshStart(builder):
    builder.StartObject(8)

def Start(builder):
    MeshStart(builder)

def MeshAddVertices(builder, vertices):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vertices), 0)

def AddVertices(builder, vertices):
    MeshAddVertices(builder, vertices)

def MeshStartVerticesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVerticesVector(builder, numElems):
    return MeshStartVerticesVector(builder, numElems)

def MeshAddIndices16(builder, indices16):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(indices16), 0)

def AddIndices16(builder, indices16):
    MeshAddIndices16(builder, indices16)

def MeshStartIndices16Vector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartIndices16Vector(builder, numElems):
    return MeshStartIndices16Vector(builder, numElems)

def MeshAddIndices32(builder, indices32):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(indices32), 0)

def AddIndices32(builder, indices32):
    MeshAddIndices32(builder, indices32)

def MeshStartIndices32Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIndices32Vector(builder, numElems):
    return MeshStartIndices32Vector(builder, numElems)

def MeshAddTriangleCount(builder, triangleCount):
    builder.PrependUint32Slot(3, triangleCount, 0)

def AddTriangleCount(builder, triangleCount):
    MeshAddTriangleCount(builder, triangleCount)

def MeshAddTriangleMaterials(builder, triangleMaterials):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(triangleMaterials), 0)

def AddTriangleMaterials(builder, triangleMaterials):
    MeshAddTriangleMaterials(builder, triangleMaterials)

def MeshStartTriangleMaterialsVector(builder, numElems):
    return builder.StartVector(12, numElems, 4)

def StartTriangleMaterialsVector(builder, numElems):
    return MeshStartTriangleMaterialsVector(builder, numElems)

def MeshAddMaterialIndices16(builder, materialIndices16):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(materialIndices16), 0)

def AddMaterialIndices16(builder, materialIndices16):
    MeshAddMaterialIndices16(builder, materialIndices16)

def MeshStartMaterialIndices16Vector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartMaterialIndices16Vector(builder, numElems):
    return MeshStartMaterialIndices16Vector(builder, numElems)

def MeshAddMaterialIndices32(builder, materialIndices32):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(materialIndices32), 0)

def AddMaterialIndices32(builder, materialIndices32):
    MeshAddMaterialIndices32(builder, materialIndices32)

def MeshStartMaterialIndices32Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialIndices32Vector(builder, numElems):
    return MeshStartMaterialIndices32Vector(builder, numElems)

def MeshAddCacheName(builder, cacheName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(cacheName), 0)

def AddCacheName(builder, cacheName):
    MeshAddCacheName(builder, cacheName)

def MeshEnd(builder):
    return builder.EndObject()

def End(builder):
    return MeshEnd(builder)
