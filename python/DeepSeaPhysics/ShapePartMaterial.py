# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShapePartMaterial(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 12

    # ShapePartMaterial
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShapePartMaterial
    def Friction(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # ShapePartMaterial
    def Restitution(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # ShapePartMaterial
    def Hardness(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateShapePartMaterial(builder, friction, restitution, hardness):
    builder.Prep(4, 12)
    builder.PrependFloat32(hardness)
    builder.PrependFloat32(restitution)
    builder.PrependFloat32(friction)
    return builder.Offset()
