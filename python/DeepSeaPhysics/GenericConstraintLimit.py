# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaPhysics

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GenericConstraintLimit(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 20

    # GenericConstraintLimit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GenericConstraintLimit
    def Dof(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # GenericConstraintLimit
    def LimitType(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))
    # GenericConstraintLimit
    def MinValue(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # GenericConstraintLimit
    def MaxValue(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # GenericConstraintLimit
    def Stiffness(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # GenericConstraintLimit
    def Damping(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateGenericConstraintLimit(builder, dof, limitType, minValue, maxValue, stiffness, damping):
    builder.Prep(4, 20)
    builder.PrependFloat32(damping)
    builder.PrependFloat32(stiffness)
    builder.PrependFloat32(maxValue)
    builder.PrependFloat32(minValue)
    builder.Pad(2)
    builder.PrependUint8(limitType)
    builder.PrependUint8(dof)
    return builder.Offset()
