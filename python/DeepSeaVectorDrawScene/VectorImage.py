# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DeepSeaVectorDrawScene

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorImage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorImage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorImage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VectorImage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorImage
    def ImageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # VectorImage
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # VectorImage
    def TargetSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from DeepSeaScene.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VectorImage
    def SharedMaterials(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VectorImage
    def VectorShaders(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VectorImage
    def Resources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VectorImage
    def ResourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorImage
    def ResourcesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # VectorImage
    def Srgb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(7)
def VectorImageStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddImageType(builder, imageType): builder.PrependUint8Slot(0, imageType, 0)
def VectorImageAddImageType(builder, imageType):
    """This method is deprecated. Please switch to AddImageType."""
    return AddImageType(builder, imageType)
def AddImage(builder, image): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def VectorImageAddImage(builder, image):
    """This method is deprecated. Please switch to AddImage."""
    return AddImage(builder, image)
def AddTargetSize(builder, targetSize): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(targetSize), 0)
def VectorImageAddTargetSize(builder, targetSize):
    """This method is deprecated. Please switch to AddTargetSize."""
    return AddTargetSize(builder, targetSize)
def AddSharedMaterials(builder, sharedMaterials): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sharedMaterials), 0)
def VectorImageAddSharedMaterials(builder, sharedMaterials):
    """This method is deprecated. Please switch to AddSharedMaterials."""
    return AddSharedMaterials(builder, sharedMaterials)
def AddVectorShaders(builder, vectorShaders): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(vectorShaders), 0)
def VectorImageAddVectorShaders(builder, vectorShaders):
    """This method is deprecated. Please switch to AddVectorShaders."""
    return AddVectorShaders(builder, vectorShaders)
def AddResources(builder, resources): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(resources), 0)
def VectorImageAddResources(builder, resources):
    """This method is deprecated. Please switch to AddResources."""
    return AddResources(builder, resources)
def StartResourcesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VectorImageStartResourcesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartResourcesVector(builder, numElems)
def AddSrgb(builder, srgb): builder.PrependBoolSlot(6, srgb, 0)
def VectorImageAddSrgb(builder, srgb):
    """This method is deprecated. Please switch to AddSrgb."""
    return AddSrgb(builder, srgb)
def End(builder): return builder.EndObject()
def VectorImageEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)